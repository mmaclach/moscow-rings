{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","config.json","app.min.js","node_modules/babel-runtime/helpers/interop-require-default.js","node_modules/babel-runtime/helpers/interop-require-wildcard.js","node_modules/browserify/node_modules/buffer/index.js","node_modules/browserify/node_modules/buffer/node_modules/base64-js/lib/b64.js","node_modules/browserify/node_modules/buffer/node_modules/ieee754/index.js","node_modules/browserify/node_modules/buffer/node_modules/is-array/index.js","node_modules/leaflet-hash/leaflet-hash.js","node_modules/leaflet-knn/index.js","node_modules/leaflet-knn/node_modules/sphere-knn/index.js","node_modules/leaflet-knn/node_modules/sphere-knn/lib/binary.js","node_modules/leaflet-knn/node_modules/sphere-knn/lib/kd.js","node_modules/leaflet-knn/node_modules/sphere-knn/lib/spherekd.js","node_modules/spin.js/spin.js","node_modules/turf/index.js","node_modules/turf/node_modules/turf-aggregate/index.js","node_modules/turf/node_modules/turf-along/index.js","node_modules/turf/node_modules/turf-area/index.js","node_modules/turf/node_modules/turf-area/node_modules/geojson-area/index.js","node_modules/turf/node_modules/turf-area/node_modules/geojson-area/node_modules/wgs84/index.js","node_modules/turf/node_modules/turf-average/index.js","node_modules/turf/node_modules/turf-bbox-polygon/index.js","node_modules/turf/node_modules/turf-bearing/index.js","node_modules/turf/node_modules/turf-bezier/index.js","node_modules/turf/node_modules/turf-bezier/spline.js","node_modules/turf/node_modules/turf-buffer/index.js","node_modules/turf/node_modules/turf-buffer/node_modules/jsts/index.js","node_modules/turf/node_modules/turf-buffer/node_modules/jsts/lib/jsts.js","node_modules/turf/node_modules/turf-buffer/node_modules/jsts/node_modules/javascript.util/dist/javascript.util-node.min.js","node_modules/turf/node_modules/turf-buffer/node_modules/jsts/node_modules/javascript.util/index.js","node_modules/turf/node_modules/turf-center/index.js","node_modules/turf/node_modules/turf-centroid/index.js","node_modules/turf/node_modules/turf-centroid/node_modules/turf-meta/index.js","node_modules/turf/node_modules/turf-combine/index.js","node_modules/turf/node_modules/turf-concave/index.js","node_modules/turf/node_modules/turf-convex/index.js","node_modules/turf/node_modules/turf-convex/node_modules/convex-hull/ch.js","node_modules/turf/node_modules/turf-convex/node_modules/convex-hull/lib/ch1d.js","node_modules/turf/node_modules/turf-convex/node_modules/convex-hull/lib/ch2d.js","node_modules/turf/node_modules/turf-convex/node_modules/convex-hull/lib/chnd.js","node_modules/turf/node_modules/turf-convex/node_modules/convex-hull/node_modules/affine-hull/aff.js","node_modules/turf/node_modules/turf-convex/node_modules/convex-hull/node_modules/affine-hull/node_modules/robust-orientation/node_modules/robust-scale/node_modules/two-sum/two-sum.js","node_modules/turf/node_modules/turf-convex/node_modules/convex-hull/node_modules/affine-hull/node_modules/robust-orientation/node_modules/robust-scale/robust-scale.js","node_modules/turf/node_modules/turf-convex/node_modules/convex-hull/node_modules/affine-hull/node_modules/robust-orientation/node_modules/robust-subtract/robust-diff.js","node_modules/turf/node_modules/turf-convex/node_modules/convex-hull/node_modules/affine-hull/node_modules/robust-orientation/node_modules/robust-sum/robust-sum.js","node_modules/turf/node_modules/turf-convex/node_modules/convex-hull/node_modules/affine-hull/node_modules/robust-orientation/node_modules/two-product/two-product.js","node_modules/turf/node_modules/turf-convex/node_modules/convex-hull/node_modules/affine-hull/node_modules/robust-orientation/orientation.js","node_modules/turf/node_modules/turf-convex/node_modules/convex-hull/node_modules/incremental-convex-hull/ich.js","node_modules/turf/node_modules/turf-convex/node_modules/convex-hull/node_modules/incremental-convex-hull/node_modules/simplicial-complex/node_modules/bit-twiddle/twiddle.js","node_modules/turf/node_modules/turf-convex/node_modules/convex-hull/node_modules/incremental-convex-hull/node_modules/simplicial-complex/node_modules/union-find/index.js","node_modules/turf/node_modules/turf-convex/node_modules/convex-hull/node_modules/incremental-convex-hull/node_modules/simplicial-complex/topology.js","node_modules/turf/node_modules/turf-convex/node_modules/convex-hull/node_modules/monotone-convex-hull-2d/index.js","node_modules/turf/node_modules/turf-count/index.js","node_modules/turf/node_modules/turf-destination/index.js","node_modules/turf/node_modules/turf-deviation/index.js","node_modules/turf/node_modules/turf-deviation/node_modules/simple-statistics/src/simple_statistics.js","node_modules/turf/node_modules/turf-distance/index.js","node_modules/turf/node_modules/turf-distance/node_modules/turf-invariant/index.js","node_modules/turf/node_modules/turf-envelope/index.js","node_modules/turf/node_modules/turf-erase/index.js","node_modules/turf/node_modules/turf-erase/node_modules/jsts/node_modules/javascript.util/dist/javascript.util-node.min.js","node_modules/turf/node_modules/turf-explode/index.js","node_modules/turf/node_modules/turf-extent/index.js","node_modules/turf/node_modules/turf-featurecollection/index.js","node_modules/turf/node_modules/turf-filter/index.js","node_modules/turf/node_modules/turf-flip/index.js","node_modules/turf/node_modules/turf-hex-grid/index.js","node_modules/turf/node_modules/turf-inside/index.js","node_modules/turf/node_modules/turf-intersect/index.js","node_modules/turf/node_modules/turf-intersect/node_modules/jsts/node_modules/javascript.util/dist/javascript.util-node.min.js","node_modules/turf/node_modules/turf-isolines/conrec.js","node_modules/turf/node_modules/turf-isolines/index.js","node_modules/turf/node_modules/turf-isolines/node_modules/turf-grid/index.js","node_modules/turf/node_modules/turf-jenks/index.js","node_modules/turf/node_modules/turf-kinks/index.js","node_modules/turf/node_modules/turf-line-distance/index.js","node_modules/turf/node_modules/turf-line-slice/index.js","node_modules/turf/node_modules/turf-linestring/index.js","node_modules/turf/node_modules/turf-max/index.js","node_modules/turf/node_modules/turf-median/index.js","node_modules/turf/node_modules/turf-merge/index.js","node_modules/turf/node_modules/turf-merge/node_modules/clone/clone.js","node_modules/turf/node_modules/turf-midpoint/index.js","node_modules/turf/node_modules/turf-min/index.js","node_modules/turf/node_modules/turf-nearest/index.js","node_modules/turf/node_modules/turf-planepoint/index.js","node_modules/turf/node_modules/turf-point-grid/index.js","node_modules/turf/node_modules/turf-point-on-line/index.js","node_modules/turf/node_modules/turf-point-on-surface/index.js","node_modules/turf/node_modules/turf-point/index.js","node_modules/turf/node_modules/turf-polygon/index.js","node_modules/turf/node_modules/turf-quantile/index.js","node_modules/turf/node_modules/turf-random/index.js","node_modules/turf/node_modules/turf-random/node_modules/geojson-random/index.js","node_modules/turf/node_modules/turf-reclass/index.js","node_modules/turf/node_modules/turf-remove/index.js","node_modules/turf/node_modules/turf-sample/index.js","node_modules/turf/node_modules/turf-simplify/index.js","node_modules/turf/node_modules/turf-simplify/node_modules/simplify-js/simplify.js","node_modules/turf/node_modules/turf-size/index.js","node_modules/turf/node_modules/turf-square-grid/index.js","node_modules/turf/node_modules/turf-square/index.js","node_modules/turf/node_modules/turf-sum/index.js","node_modules/turf/node_modules/turf-tag/index.js","node_modules/turf/node_modules/turf-tin/index.js","node_modules/turf/node_modules/turf-triangle-grid/index.js","node_modules/turf/node_modules/turf-union/index.js","node_modules/turf/node_modules/turf-union/node_modules/jsts/node_modules/javascript.util/dist/javascript.util-node.min.js","node_modules/turf/node_modules/turf-variance/index.js","node_modules/turf/node_modules/turf-within/index.js","node_modules/xhr/index.js","node_modules/xhr/node_modules/global/window.js","node_modules/xhr/node_modules/once/once.js","node_modules/xhr/node_modules/parse-headers/node_modules/for-each/index.js","node_modules/xhr/node_modules/parse-headers/node_modules/for-each/node_modules/is-function/index.js","node_modules/xhr/node_modules/parse-headers/node_modules/trim/index.js","node_modules/xhr/node_modules/parse-headers/parse-headers.js","../src/colors.js","../src/index.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length",1,"module","api_token",2,"obj","__esModule","default",3,"newObj","key","Object","prototype","hasOwnProperty",4,"global","typedArraySupport","Bar","arr","Uint8Array","foo","constructor","subarray","byteLength","kMaxLength","Buffer","TYPED_ARRAY_SUPPORT","arg","this","parent","undefined","fromNumber","fromString","arguments","fromObject","that","allocate","checked","string","encoding","write","object","isBuffer","fromBuffer","isArray","fromArray","TypeError","ArrayBuffer","buffer","fromTypedArray","fromArrayBuffer","fromArrayLike","fromJsonObject","copy","array","_augment","type","data","__proto__","_isBuffer","fromPool","poolSize","rootParent","RangeError","toString","SlowBuffer","subject","buf","len","loweredCase","utf8ToBytes","base64ToBytes","toLowerCase","slowToString","start","end","Infinity","hexSlice","utf8Slice","asciiSlice","binarySlice","base64Slice","utf16leSlice","hexWrite","offset","Number","remaining","strLen","parsed","parseInt","substr","isNaN","utf8Write","blitBuffer","asciiWrite","asciiToBytes","binaryWrite","base64Write","ucs2Write","utf16leToBytes","base64","fromByteArray","slice","Math","min","res","firstByte","codePoint","bytesPerSequence","secondByte","thirdByte","fourthByte","tempCodePoint","push","decodeCodePointsArray","codePoints","MAX_ARGUMENTS_LENGTH","String","fromCharCode","apply","ret","out","toHex","bytes","checkOffset","ext","checkInt","value","max","objectWriteUInt16","littleEndian","j","objectWriteUInt32","checkIEEE754","writeFloat","noAssert","ieee754","writeDouble","base64clean","str","stringtrim","replace","INVALID_BASE64_RE","trim","units","leadSurrogate","charCodeAt","byteArray","c","hi","lo","toByteArray","src","dst","INSPECT_MAX_BYTES","b","compare","x","y","isEncoding","concat","list","pos","item","equals","inspect","match","join","indexOf","val","byteOffset","arrayIndexOf","foundIndex","get","console","log","readUInt8","set","v","writeUInt8","isFinite","swap","toJSON","Array","_arr","newBuf","sliceLen","readUIntLE","mul","readUIntBE","readUInt16LE","readUInt16BE","readUInt32LE","readUInt32BE","readIntLE","pow","readIntBE","readInt8","readInt16LE","readInt16BE","readInt32LE","readInt32BE","readFloatLE","read","readFloatBE","readDoubleLE","readDoubleBE","writeUIntLE","writeUIntBE","floor","writeUInt16LE","writeUInt16BE","writeUInt32LE","writeUInt32BE","writeIntLE","limit","sub","writeIntBE","writeInt8","writeInt16LE","writeInt16BE","writeInt32LE","writeInt32BE","writeFloatLE","writeFloatBE","writeDoubleLE","writeDoubleBE","target","targetStart","_set","fill","toArrayBuffer","BP","toLocaleString","self","window","base64-js","is-array",5,"lookup","decode","elt","PLUS","PLUS_URL_SAFE","SLASH","SLASH_URL_SAFE","NUMBER","UPPER","LOWER","b64ToByteArray","b64","L","tmp","placeHolders","charAt","Arr","uint8ToBase64","uint8","encode","num","tripletToBase64","temp","extraBytes","output","base64js",6,"isLE","mLen","nBytes","m","eLen","eMax","eBias","nBits","d","NaN","rt","abs","LN2",7,8,"HAS_HASHCHANGE","doc_mode","documentMode","Hash","map","onHashChange","Util","bind","init","parseHash","hash","args","split","zoom","lat","parseFloat","lon","center","LatLng","formatHash","getCenter","getZoom","precision","ceil","toFixed","lng","lastHash","isListening","startListening","removeFrom","changeTimeout","clearTimeout","stopListening","onMapMove","movingMap","_loaded","location","update","setView","changeDefer","setTimeout","hashChangeInterval","on","DomEvent","addListener","clearInterval","setInterval","off","removeListener","Map","addHash","_hash","removeHash",9,"collapse","results","included","stamp","layer","reformat","coords","flat","k","sphereKnn","collectPoints","points","feature","geometry","coordinates","GeoJSON","eachLayer","sknn","nearest","p","max_distance","nearestLayer","sphere-knn",10,"spherekd","root","build","./lib/spherekd",11,"defaultComparator","search","comparator","mid","comp","low","high","insert","splice",12,"Node","axis","left","right","distance","byDistance","dist","buildrec","depth","position","sort","node","POSITIVE_INFINITY","stack","pop","binary","./binary",13,"spherical2cartesian","rad","cos","sin","Position","latitude","longitude","kd","invEarthDiameter","PI","./kd",14,"factory","define","amd","Spinner","createEl","tag","prop","el","document","createElement","ins","appendChild","addAnimation","alpha","trail","lines","name","z","prefix","useCssAnimations","substring","pre","animations","sheet","insertRule","cssRules","vendor","pp","style","toUpperCase","prefixes","css","merge","def","getColor","color","idx","opts","defaults","initVML","vml","attr","addRule","grp","coordsize","coordorigin","width","height","seg","dx","filter","g","rotation","arcsize","corners","scale","radius","top","opacity","margin","shadow","firstChild","childNodes","rotate","direction","speed","fps","zIndex","className","hwaccel","spin","stop","insertBefore","setAttribute","ostep","astep","anim","timeout","parentNode","removeChild","background","boxShadow","transformOrigin","transform","borderRadius","animation","getElementsByTagName","styleSheet","probe","behavior","adj",15,"isolines","convex","within","concave","count","erase","variance","deviation","median","aggregate","flip","simplify","sum","average","bezier","size","sample","jenks","quantile","envelope","square","midpoint","centroid","combine","explode","extent","bboxPolygon","featurecollection","inside","intersect","linestring","planepoint","point","polygon","random","reclass","remove","tin","union","bearing","destination","kinks","pointOnSurface","area","along","lineDistance","lineSlice","pointOnLine","pointGrid","squareGrid","triangleGrid","hexGrid","turf-aggregate","turf-along","turf-area","turf-average","turf-bbox-polygon","turf-bearing","turf-bezier","turf-buffer","turf-center","turf-centroid","turf-combine","turf-concave","turf-convex","turf-count","turf-destination","turf-deviation","turf-distance","turf-envelope","turf-erase","turf-explode","turf-extent","turf-featurecollection","turf-filter","turf-flip","turf-hex-grid","turf-inside","turf-intersect","turf-isolines","turf-jenks","turf-kinks","turf-line-distance","turf-line-slice","turf-linestring","turf-max","turf-median","turf-merge","turf-midpoint","turf-min","turf-nearest","turf-planepoint","turf-point","turf-point-grid","turf-point-on-line","turf-point-on-surface","turf-polygon","turf-quantile","turf-random","turf-reclass","turf-remove","turf-sample","turf-simplify","turf-size","turf-square","turf-square-grid","turf-sum","turf-tag","turf-tin","turf-triangle-grid","turf-union","turf-variance","turf-within",16,"isAggregationOperation","operation","operations","polygons","aggregations","agg","aggregation","outField","inField",17,"line","travelled","overshot","interpolated",18,"geometryArea","_","features","geojson-area",19,"polygonArea","geometries","ringArea","p1","p2","wgs84","RADIUS","ring",20,"FLATTENING","POLAR_RADIUS",21,"values","polyFC","ptFC","done","forEach","poly","properties","pt",22,"bbox","lowLeft","topLeft","topRight","lowRight",23,"toRad","degree","toDeg","radian","point1","point2","coordinates1","coordinates2","lon1","lon2","lat1","lat2","atan2",24,"Spline","resolution","sharpness","lineOut","pts","spline","duration","./spline.js",25,"options","centers","controls","stepLength","delay","dy","dz","steps","cacheSteps","mindist","laststep","step","sqrt","vector","angle","time","c1","c2","B","t2","t3","t1",26,"jsts","buffered","multi","bufferOp","reader","io","GeoJSONReader","geom","JSON","stringify","parser","GeoJSONParser",27,"./lib/jsts","javascript.util",28,"version","algorithm","locate","error","util","geomgraph","index","bintree","chain","kdtree","quadtree","strtree","noding","snapround","overlay","snap","polygonize","predicate","relate","valid","planargraph","triangulate","quadedge","abstractFunc","AbstractMethodInvocationError","IllegalArgumentError","message","TopologyError","NotImplementedError","NotRepresentableError","LocateFailureError","GeometryFilter","PolygonExtracter","comps","getPolygons","Polygon","GeometryCollection","WKTParser","geometryFactory","GeometryFactory","regExes","typeStr","emptyTypeStr","spaces","parenComma","doubleParenComma","trimParens","wkt","matches","exec","parse","extractGeometry","CLASS_NAME","extract","wktType","isEmpty","coordinate","multipoint","multilinestring","shell","holes","multipolygon","geometrycollection","collection","createPoint","Coordinate","createMultiPoint","components","createLineString","linearring","createLinearRing","createMultiLineString","createPolygon","rings","createMultiPolygon","createGeometryCollection","wktArray","ItemVisitor","visitItem","CGAlgorithms","CLOCKWISE","RIGHT","COUNTERCLOCKWISE","LEFT","COLLINEAR","STRAIGHT","orientationIndex","q","dx1","dy1","dx2","dy2","RobustDeterminant","signOfDet2x2","isPointInRing","locatePointInRing","Location","EXTERIOR","RayCrossingCounter","isOnLine","lineIntersector","il","p0","RobustLineIntersector","computeIntersection","hasIntersection","isCCW","nPts","hiPt","hiIndex","iPrev","iNext","prev","next","disc","equals2D","computeOrientation","distancePointLine","A","distancePointLine2","distancePointLinePerpendicular","minDistance","distanceLineLine","C","D","r_top","r_bot","s_top","s_bot","signedArea","bx","by","cx","cy","computeLength","x0","y0","x1","y1","Angle","PI_TIMES_2","PI_OVER_2","PI_OVER_4","NONE","toDegrees","radians","toRadians","angleDegrees","angleFromOrigo","angleBetweenCoords","isAcute","dx0","dy0","dotprod","isObtuse","angleBetween","tip1","tail","tip2","a1","a2","diff","angleBetweenOriented","angDel","interiorAngle","anglePrev","angleNext","getTurn","ang1","ang2","crossproduct","normalize","normalizePositive","delAngle","GeometryComponentFilter","LinearComponentExtracter","isForcedToLineString","getLines","geoms","getLines5","getLines6","Geometry","getLines3","getLines4","getLines2","forceToLineString","LineString","add","setForceToLineString","LinearRing","getFactory","getCoordinateSequence","INTERIOR","BOUNDARY","toLocationSymbol","locationValue","precisionModel","getPrecisionModel","geoJson","getType","PrecisionModel","FIXED","reducePrecision","makePrecise","getGeometryType","hasNonEmptyElements","hasNullElements","getNumGeometries","getGeometryN","getCoordinate","getCoordinates","getNumPoints","isSimple","checkNotGeometryCollection","op","IsSimpleOp","isValid","isValidOp","IsValidOp","DistanceOp","isWithinDistance","envDist","getEnvelopeInternal","isRectangle","getArea","getLength","getCentroid","cent","centPt","dim","getDimension","CentroidPoint","CentroidLine","CentroidArea","createPointFromInternalCoord","getInteriorPoint","intPt","interiorPt","InteriorPointPoint","InteriorPointLine","InteriorPointArea","getBoundary","getBoundaryDimension","getEnvelope","toGeometry","computeEnvelopeInternal","disjoint","intersects","touches","isTouches","RectangleIntersects","isIntersects","crosses","isCrosses","contains","RectangleContains","isContains","overlaps","isOverlaps","covers","isCovers","coveredBy","intersectionPattern","relate2","RelateOp","equalsTopo","isEquals","MultiPoint","MultiLineString","MultiPolygon","equalsExact","quadrantSegments","endCapStyle","params","BufferParameters","BufferOp","bufferOp2","convexHull","ConvexHull","getConvexHull","intersection","other","isGeometryCollection","SnapIfNeededOverlayOp","overlayOp","OverlayOp","INTERSECTION","UnaryUnionOp","clone","UNION","difference","DIFFERENCE","symDifference","SYMDIFFERENCE","tolerance","equalsNorm","norm","compareTo","getClassSortIndex","compareToSameClass","isEquivalentClass","Point","isGeometryCollectionBase","iterator","hasNext","aElement","bElement","comparison","equal","sortedClasses","Assert","shouldNeverReachHere","WKTWriter","coord","exemplar","setCoordinate","Envelope","minx","maxx","miny","maxy","initFromValues","initFromCoordinate","initFromCoordinates","initFromEnvelope","setToNull","x2","y2","env","isNull","getHeight","getWidth","getMinX","getMaxX","getMinY","getMaxY","expandToInclude","expandToIncludeCoordinate","expandToIncludeEnvelope","expandToIncludeValues","expandBy","expandByDistance","expandByDistances","deltaX","deltaY","translate","transX","transY","centre","intMinX","intMinY","intMaxX","intMaxY","intersectsEnvelope","intersectsCoordinate","intersectsValues","result","containsEnvelope","containsCoordinate","containsValues","coversEnvelope","coversCoordinate","coversValues","xc1","xc2","yc1","yc2","q1","q2","minq","maxq","minp","maxp","GeometryCombiner","geomFactory","extractFactory","inputGeoms","combine2","combiner","arrayList","javascript","ArrayList","skipEmpty","elems","extractElements","buildGeometry","elemGeom","modelType","FLOATING","FLOATING_SINGLE","isFloating","FLOATING_SINLGE","getScale","makePrecise2","round","CoordinateFilter","DouglasPeuckerLineSimplifier","LineSegment","usePt","distanceTolerance","simp","setDistanceTolerance","simplifySection","coordList","CoordinateList","toCoordinateArray","maxDistance","maxIndex","EdgeIntersection","segmentIndex","getSegmentIndex","getDistance","isEndPoint","maxSegmentIndex","TreeMap","EdgeIntersectionList","edge","nodeMap","isIntersection","it","ei","eiNew","put","addEndpoints","maxSegIndex","addSplitEdges","edgeList","eiPrev","newEdge","createSplitEdge","ei0","ei1","npts","lastSegStartPt","useIntPt1","ipt","Edge","Label","label","AssertionFailedException","isTrue","assertion","expectedValue","actualValue","RelateComputer","li","ptLocator","PointLocator","nodes","NodeMap","RelateNodeFactory","isolatedEdges","im","invalidPoint","computeIM","IntersectionMatrix","getGeometry","computeDisjointIM","computeSelfNodes","intersector","computeEdgeIntersections","computeIntersectionNodes","copyNodesAndLabels","labelIsolatedNodes","computeProperIntersectionIM","eeBuilder","EdgeEndBuilder","ee0","computeEdgeEnds","getEdgeIterator","insertEdgeEnds","ee1","labelNodeEdges","labelIsolatedEdges","updateIM","ee","dimA","dimB","hasProper","hasProperIntersection","hasProperInterior","hasProperInteriorIntersection","setAtLeast","argIndex","getNodeIterator","graphNode","newNode","addNode","setLabel","getLabel","getLocation","eLoc","eiIt","getEdgeIntersectionList","setLabelBoundary","labelIntersectionNodes","find","ga","gb","ni","getEdges","computeLabelling","updateIMFromEdges","thisIndex","targetIndex","isIsolated","labelIsolatedEdge","loc","setAllLocations","getGeometryCount","labelIsolatedNode","GraphComponent","_isInResult","_isCovered","_isCoveredSet","_isVisited","setLabel2","setInResult","isInResult","setCovered","isCovered","isCoveredSet","isVisited","setVisited","edges","onLocation","setLocation","newLoc","setNode","isIncidentEdgeInResult","de","getEdge","getX","getY","Dimension","FALSE","reverse","hashCode","P","TRUE","DONTCARE","toDimensionSymbol","dimensionValue","toDimensionValue","dimensionSymbol","getCoordinateN","isClosed","getPointN","getStartPoint","getEndPoint","isRing","BoundaryOp","component","reduce","jl","CoordinateSequenceFilter","apply2","isDone","isGeometryChanged","ci","cj","shellCoordinates","childCoordinates","numPoints","getNumInteriorRing","seq","prevX","prevY","xChanged","yChanged","getExteriorRing","getInteriorRingN","normalize2","clockwise","uniqueCoordinates","minCoordinate","CoordinateArrays","scroll","TreeSet","Arrays","theseElements","asList","otherElements","dimension","Centroid","areaBasePt","triangleCent3","areasum2","cg3","lineCentSum","totalLength","ptCount","ptCentSum","centroid3","p3","area2","addPoint","addLineSegments","addPolygon","setBasePoint","basePt","addShell","addHole","isPositiveArea","addTriangle","sign","lineLen","segmentLen","midx","midy","EdgeRing","deList","findEdgeRingContaining","testEr","shellList","testRing","getRing","testEnv","testPt","minShell","minEnv","tryShell","tryRing","tryEnv","isContained","ptNotInList","testPts","isInList","ringPts","isHole","hole","getPolygon","holeLR","addEdge","getLine","getEdgeDirection","getLineString","ex","isForward","visited","setMarked","marked","getComponentWithVisitedState","visitedState","_isMarked","isMarked","setContext","getContext","setData","getData","isRemoved","de0","de1","setDirectedEdges","dirEdge","setEdge","setSym","getFromNode","addOutEdge","getDirEdge","getDirEdge2","fromNode","getOppositeNode","getToNode","PolygonizeEdge","DirectedEdge","from","to","directionPt","edgeDirection","quadrant","Quadrant","toEdges","dirEdges","parentEdge","sym","getQuadrant","getDirectionPt","getAngle","getSym","compareDirection","PolygonizeDirectedEdge","edgeRing","getNext","setNext","isInRing","setRing","DirectedEdgeStar","outEdges","sorted","sortEdges","getDegree","toArray","getIndex","getIndex2","getIndex3","modi","toInt","getNextEdge","getNextCWEdge","deStar","getEdgesBetween","node0","node1","edges0","getOutEdges","commonEdges","HashSet","edges1","retainAll","remove2","PlanarGraph","findNode","add2","add3","nodeIterator","contains2","getNodes","dirEdgeIterator","edgeIterator","remove3","findNodesOfDegree","nodesFound","Stack","PolygonizeGraph","getDegreeNonDeleted","deleteAllEdges","linePts","removeRepeatedPoints","startPt","endPt","nStart","getNode","nEnd","computeNextCWEdges","iNode","convertMaximalToMinimalEdgeRings","ringEdges","intNodes","findIntersectionNodes","computeNextCCWEdges","startDE","getEdgeRings","maximalRings","findLabeledEdgeRings","edgeRingList","er","findEdgeRing","edgeRingStarts","currLabel","findDirEdgesInRing","deleteCutEdges","cutLines","prevDE","outDE","firstOutDE","prevInDE","inDE","deleteDangles","nodesToRemove","dangleLines","nodeStack","nodeOutEdges","toNode","computeDepthParity","Interval","getCentre","lineString","linearRing","converted","lineStrings","geomList","geomClass","isHeterogeneous","hasGeometryCollection","partClass","geom0","isCollection","NodeFactory","createNode","ON","opposite","TopologyLocation","gl","posIndex","isAnyNull","isEqualOnSide","le","locIndex","isArea","isLine","locValue","setAllLocationsIfNull","getLocations","setLocations","allPositionsEqual","geomIndex","onLoc","leftLoc","lbl","rightLoc","toLineLabel","lineLabel","getLocation2","setLocation2","setAllLocationsIfNull2","isArea2","side","toLine","computePoints","computeRing","startDe","maxNodeDegree","_isHole","getLinearRing","isShell","getShell","setShell","toPolygon","AbstractInvocationError","setEdgeRing","isFirstEdge","getEdgeRing","mergeLabel","addPoints","getMaxNodeDegree","computeMaxNodeDegree","getOutgoingDegree","deLabel","mergeLabel2","edgePts","startIndex","containsPoint","MINIMUM_VALID_SIZE","Boundable","getBounds","AbstractNode","level","childBoundables","bounds","getChildBoundables","computeBounds","getLevel","addChildBoundable","childBoundable","Noder","computeNodes","getNodedSubstrings","SinglePassNoder","segInt","setSegmentIntersector","SpatialIndex","itemEnv","query","searchEnv","visitor","AbstractSTRtree","nodeCapacity","itemBoundables","IntersectsOp","aBounds","bBounds","built","createHigherLevels","createParentBoundables","newLevel","parentBoundables","sortedChildBoundables","getComparator","lastNode","getNodeCapacity","compareDoubles","boundablesOfALevel","getRoot","size2","ItemBoundable","depth2","maxChildDepth","childDepth","searchBounds","query2","getIntersectsOp","query3","query4","getItem","itemsTree","itemsTree2","valuesTree","valuesTreeForNode","valuesTreeForChild","found","removeItem","childToPrune","childToRemove","boundablesAtLevel","boundablesAtLevel2","boundables","boundable","STRtree","DEFAULT_NODE_CAPACITY","xComparator","o1","o2","centreX","yComparator","centreY","avg","intersectsOp","minLeafCount","verticalSlices","createParentBoundablesFromVerticalSlices","createParentBoundablesFromVerticalSlice","sliceCount","boundablesAddedToSlice","sliceCapacity","slices","abstractNode","nearestNeighbour","itemDist","bp","BoundablePair","nearestNeighbour4","nearestNeighbour2","bnd","nearestNeighbour3","tree","initBndPair","nearestNeighbour5","Double","distanceLowerBound","minPair","priQ","bndPair","currentDistance","isLeaves","expandToQueue","getBoundable","SegmentString","NodableSegmentString","addIntersection","NodedSegmentString","nodeList","SegmentNodeList","segStrings","getNodedSubstrings2","resultEdgelist","ss","getNodeList","getSegmentOctant","safeOctant","Octant","octant","addIntersections","getIntersectionNum","intIndex","addIntersection2","getIntersection","addIntersectionNode","normalizedSegmentIndex","nextSegIndex","nextPt","MonotoneChainBuilder","toIntArray","getChains","getChains2","context","mcList","getChainStartIndices","mc","MonotoneChain","startIndexList","last","findChainEnd","safeStart","chainQuad","quad","LineIntersector","inputLines","pa","pb","NO_INTERSECTION","POINT_INTERSECTION","COLLINEAR_INTERSECTION","setPrecisionModel","getEndpoint","ptIndex","computeEdgeDistance","pdx","pdy","nonRobustComputeEdgeDistance","intLineIndex","_isProper","isCollinear","p4","computeIntersect","computeIntLineIndex","isInteriorIntersection","isInteriorIntersection2","inputLineIndex","isProper","getIntersectionAlongSegment","getIndexAlongSegment","dist0","getEdgeDistance","dist1","Pq1","Pq2","Qp1","Qp2","collinear","computeCollinearIntersection","p1q1p2","p1q2p2","q1p1q2","q1p2q2","intersectionWithNormalization","isInSegmentEnvelopes","CentralEndpointIntersector","n1","n2","n3","n4","normPt","normalizeToEnvCentre","safeHCoordinateIntersection","HCoordinate","normalizeToMinimum","smallestInAbsValue","n00","n01","n10","n11","minX0","minY0","maxX0","maxY0","minX1","minY1","maxX1","maxY1","intMidX","intMidY","x3","x4","xabs","env0","env1","w","initFrom1Coordinate","initFrom2Coordinates","initFrom2HCoordinates","initFromXY","initFromXYW","px","py","pw","qx","qy","qw","xInt","yInt","initFrom4Coordinates","midPoint","isHorizontal","isVertical","orientationIndex1","orientationIndex2","orient0","orient1","distance1","distance2","ls","pointAlong","segmentLengthFraction","pointAlongOffset","offsetDistance","segx","segy","ux","uy","offsetx","offsety","projectionFactor","len2","segmentFraction","inputPt","segFrac","project","project1","project2","pf0","pf1","newp0","newp1","closestPoint","factor","closestPoints","closestPt","MAX_VALUE","close00","close01","close10","close11","setCoordinates","setCoordinates2","distancePerpendicular","lineIntersection","comp0","MonotoneChainOverlapAction","tempEnv1","tempEnv2","overlapSeg1","overlapSeg2","overlap","mc1","start1","mc2","start2","getLineSegment","overlap2","seg1","seg2","SegmentOverlapAction","si","ss1","ss2","processIntersections","MCIndexNoder","monoChains","idCounter","nodedSegStrings","nOverlaps","getMonotoneChains","inputSegStrings","intersectChains","overlapAction","queryChain","overlapChains","testChain","getId","computeOverlaps","segStr","segChains","setId","LineSegmentIndex","Quadtree","segs","getSegments","querySeg","LineSegmentVisitor","itemsFound","getItems","items","EdgeEndStar","edgeMap","ptInAreaLocation","insertEdgeEnd","getNextCW","iNextCW","geomGraph","computeEdgeEndLabels","getBoundaryNodeRule","propagateSideLabels","hasDimensionalCollapseEdge","geomi","boundaryNodeRule","computeLabel","SimplePointInAreaLocator","isAreaLabelsConsistent","checkAreaLabelsConsistent","lastEdgeIndex","startLabel","startLoc","currLoc","findIndex","eSearch","EdgeEndBundleStar","eb","EdgeEndBundle","esb","ArrayListVisitor","DistanceToPoint","computeDistance","ptDist","computeDistance2","computeDistance4","gc","setMinimum","tempSegment","computeDistance3","segment","EdgeList","ocaMap","oca","OrientedCoordinateArray","addAll","edgeColl","findEqualEdge","matchEdge","findEdgeIndex","isClosedEndpointsInInterior","nonSimpleLocation","isSimpleLinearGeometry","isSimpleMultiPoint","mp","graph","GeometryGraph","getProperIntersectionPoint","hasNonEndpointIntersection","hasClosedEndpointIntersection","getMaximumSegmentIndex","endPoints","addEndpoint","eiInfo","EndpointInfo","LineStringSnapper","snapTolerance","allowSnappingToSourceVertices","srcPts","initFromLine","initFromPoints","srcLine","calcIsClosed","setAllowSnappingToSourceVertices","snapTo","snapPts","snapVertices","snapSegments","srcCoords","srcPt","snapVert","findSnapForVertex","snapPt","distinctPtCount","findSegmentIndexToSnap","minDist","snapIndex","Polygonizer","LineStringAdder","lineStringAdder","dangles","cutEdges","invalidRingLines","holeList","polyList","getDangles","getCutEdges","getInvalidRingLines","validEdgeRingList","findValidRings","findShellsAndHoles","assignHolesToShells","invalidRingList","holeER","assignHoleToShell","GeometryTransformer","inputGeom","pruneEmptyGeometry","preserveGeometryCollectionType","preserveCollections","reserveType","getInputGeometry","transformPoint","transformMultiPoint","transformLinearRing","transformLineString","transformMultiLineString","transformPolygon","transformMultiPolygon","transformGeometryCollection","IllegalArgumentException","getClass","getName","createCoordinateSequence","getCoordinateSequenceFactory","create","transformCoordinates","transGeomList","transformGeom","seqSize","preserveType","isAllValidLinearRings","toGeometryArray","SnapTransformer","isSelfSnap","newPts","snapLine","snapper","GeometrySnapper","srcGeom","SNAP_PRECISION_FACTOR","computeOverlaySnapTolerance","computeOverlaySnapTolerance2","computeSizeBasedSnapTolerance","pm","fixedSnapTol","minDimension","snapTol","g0","g1","snapGeom","snapper0","snapper1","snapToSelf","cleanResult","extractTargetCoordinates","snapTrans","snappedGeom","Polygonal","ptSet","computeSnapTolerance","minSegLen","computeMinimumSegmentLength","segLen","boundaryRule","BoundaryNodeRule","OGC_SFS_BOUNDARY_RULE","isIn","numBoundaries","locate2","locate3","locate4","computeLocation","isInBoundary","updateLocationInfo","ml","mpoly","part","ptCoord","locateInPolygonRing","shellLoc","holeLoc","nodeFactory","nodeFact","getBoundaryNodes","bdyNodes","edgeEndList","linkResultDirectedEdges","nodeit","getEdgeEnds","isBoundaryNode","insertEdge","addEdges","edgesToAdd","de2","findEdgeInSameDirection","eCoord","matchInSameDirection","ep0","ep1","findEdgeEnd","SegmentIntersector","InteriorIntersectionFinder","intersections","interiorIntersection","findAllIntersections","isCheckEndSegmentsOnly","intSegments","setFindAllIntersections","getIntersections","setCheckEndSegmentsOnly","getInteriorIntersection","getIntersectionSegments","e0","segIndex0","e1","segIndex1","isEndSegPresent","isEndSegment","p00","p01","p10","p11","FastNodingValidator","_isValid","execute","getErrorMessage","intSegs","toLineString","checkValid","checkInteriorIntersections","noder","BasicSegmentString","EdgeNodingValidator","nv","toSegmentStrings","validator","GeometryGraphOperation","setComputationPrecision","resultPrecisionModel","getArgGeometry","OverlayNodeFactory","PolygonBuilder","maxEdgeRings","buildMaximalEdgeRings","freeHoleList","edgeRings","buildMinimalEdgeRings","sortShellsAndHoles","placeFreeHoles","resultPolyList","computePolygons","MaximalEdgeRing","linkDirectedEdgesForMinimalEdgeRings","minEdgeRings","buildMinimalRings","findShell","placePolygonHoles","shellCount","LineBuilder","lineEdgesList","resultLineList","opCode","findCoveredLineEdges","collectLines","buildLines","getGraph","isLineEdge","isCoveredByA","collectLineEdge","collectBoundaryTouchEdge","isResultOfOp","setVisitedEdge","isInteriorAreaEdge","labelIsolatedLines","edgesList","labelIsolatedLine","PointBuilder","resultPointList","extractNonCoveredResultNodes","filterCoveredNodeToPoint","isCoveredByLA","geomFact","geom1","gov","geomOv","getResultGeometry","isResultOfOp2","loc0","loc1","resultGeom","funcCode","computeOverlay","copyPoints","baseSplitEdges","computeSplitEdges","insertUniqueEdges","computeLabelsFromDepths","replaceCollapsedEdges","labelIncompleteNodes","findResultAreaEdges","cancelDuplicateResultEdges","polyBuilder","lineBuilder","pointBuilder","computeGeometry","insertUniqueEdge","existingEdge","existingLabel","labelToMerge","isPointwiseEqual","getDepth","getDelta","newEdges","isCollapsed","getCollapsedEdge","mergeSymLabels","updateNodeLabelling","nodeCount","labelIncompleteNode","updateLabelling","opcode","createEmptyResult","resultDimension","dim0","dim1","SnapOverlayOp","g2","prepGeom","prepareResult","selfSnap","remGeom","cbr","removeCommonBits","CommonBitsRemover","EdgeSetIntersector","computeIntersections","testAllSegments","computeIntersections2","SimpleMCSweepLineIntersector","events","List","addList2","addList","computeIntersections3","edgeSet","mce","getMonotoneChainEdge","getStartIndexes","insertEvent","SweepLineEvent","prepareEvents","ev","isDelete","getInsertEvent","setDeleteEventIndex","isInsert","processOverlaps","getDeleteEventIndex","ev0","mc0","getObject","ev1","isSameLabel","containsPointInPolygon","resultAreaEdgeList","getRightmostEdge","deLast","quad0","quad1","isNorthern","getDy","eLabel","nodeLabel","getResultAreaEdges","SCANNING_FOR_INCOMING","LINKING_TO_OUTGOING","firstOut","incoming","state","nextOut","nextIn","linkMinimalDirectedEdges","setNextMin","linkAllDirectedEdges","prevOut","firstIn","computeDepths","computeDepths2","edgeIndex","startDepth","targetLastDepth","nextDepth","lastDepth","endIndex","currDepth","nextDe","setEdgeDepths","centSum","IntervalSize","MIN_BINARY_EXPONENT","isZeroWidth","maxAbs","scaledInterval","DoubleBits","exponent","SimpleEdgeSetIntersector","i0","edge0","i1","edge1","computeIntersects","pts0","pts1","eiList","Depth","setAtLeastIfValid","_isIsolated","depthDelta","getDepthDelta","setDepthDelta","setIsolated","MonotoneChainEdge","newe","octant2","adx","ady","UnionInteracting","interacts0","interacts1","uue","computeInteracting","int0","int1","in0","disjoint0","disjoint1","overallUnion","bufferUnion","gColl","unionAll","elem0","interactsWithAny","elem1","interacts","elem","isInteracting","extractedGeoms","TrianglePredicate","isInCircleNonRobust","isInCircle","triArea","isInCircleNormalized","bdx","bdy","cdx","cdy","abdet","bcdet","cadet","alift","blift","clift","isInCircleRobust","isInCircleDDSlow","ax","ay","aTerm","bTerm","cTerm","pTerm","math","DD","valueOf","multiply","triAreaDDSlow","subtract","doubleValue","isInCircleDDFast","sqr","selfAdd","selfMultiply","triAreaDDFast","selfSubtract","selSubtract","isInCircleDDNormalized","isInCircleCC","cc","ccRadius","pRadiusDiff","Triangle","circumcentre","PointGeometryUnion","pointGeom","otherGeom","unioner","locator","exteriorCoords","include","ptComp","IntersectionFinderAdder","interiorIntersections","getInteriorIntersections","MCIndexSnapRounder","scaleFactor","pointSnapper","inputSegmentStrings","MCIndexPointSnapper","snapRound","findInteriorIntersections","computeIntersectionSnaps","computeVertexSnaps","intFinderAdder","hotPixel","HotPixel","computeVertexSnaps2","isNodeAdded","ConnectedInteriorTester","disconnectedRingcoord","findDifferentPoint","isInteriorsConnected","splitEdges","setInteriorEdgesInResult","buildEdgeRings","visitShellInteriors","hasUnvisitedShellEdge","visitInteriorRing","pt0","pt1","intDe","visitLinkedDirectedEdges","interiorPoint","addInterior","addInteriorCoord","addEndpointsCoord","MonotoneChainSelectAction","selectedSegment","select","select2","MCPointInRing","crossings","interval","buildIndex","MCSelecter","testLineSegment","Bintree","mcEnv","isInside","rayEnv","mcSelecter","testMonotoneChain","TopologyValidationError","errorType","HOLE_OUTSIDE_SHELL","NESTED_HOLES","DISCONNECTED_INTERIOR","SELF_INTERSECTION","RING_SELF_INTERSECTION","NESTED_SHELLS","DUPLICATE_RINGS","TOO_FEW_POINTS","INVALID_COORDINATE","RING_NOT_CLOSED","errMsg","getErrorType","getMessage","locStr","allRings","getMin","getMax","overlapsInterval","overlapsMinMax","containsMinMax","powerOf2","exp","CVTFWD","NumW","Qty","Sign","Expo","Mant","Bin","nb01","Inf",32,64,"ExW","Key","computeKey","computeLevel","getPoint","getInterval","itemInterval","computeInterval","SubgraphDepthLocater","subgraphs","stabbedSegments","findStabbedSegments","ds","leftDepth","stabbingRayLeftPt","findStabbedSegments2","bsg","getDirectedEdges","findStabbedSegments3","DepthSegment","upwardSeg","orientIndex","compareX","seg0","compare0","corner","originalPt","p0Scaled","p1Scaled","initCorners","ptScaled","safeEnv","SAFE_ENV_EXPANSION_FACTOR","getSafeEnvelope","safeTolerance","intersectsScaled","copyScaled","pScaled","segMinx","segMaxx","segMiny","segMaxy","isOutsidePixelEnv","intersectsToleranceSquare","intersectsLeft","intersectsBottom","intersectsPixelClosure","addSnappedNode","segIndex","BufferInputLineSimplifier","inputLine","distanceTol","INIT","DELETE","KEEP","isDeleted","angleOrientation","isChanged","deleteShallowConcavities","collapseLine","midIndex","findNextNonDeletedIndex","lastIndex","isMiddleVertexDeleted","isDeletable","i2","isConcave","isShallow","isShallowSampled","isShallowConcavity","orientation","isAngleToSimplify","NUM_PTS_TO_CHECK","inc","eventType","xValue","INSERT","deleteEventIndex","pe","allowRepeated","addCoordinates","addCoordinate","insertCoordinate","before","after","closeRing","OffsetSegmentGenerator","bufParams","offset0","offset1","filletAngleQuantum","getQuadrantSegments","getJoinStyle","JOIN_ROUND","closingSegLengthFactor","MAX_CLOSING_SEG_LEN_FACTOR","OFFSET_SEGMENT_SEPARATION_FACTOR","INSIDE_TURN_VERTEX_SNAP_DISTANCE_FACTOR","CURVE_VERTEX_SNAP_DISTANCE_FACTOR","maxCurveSegmentError","segList","s0","s1","s2","hasNarrowConcaveAngle","OffsetSegmentString","setMinimumVertexDistance","initSideSegments","computeOffsetSegment","addSegments","addPts","addFirstSegment","addPt","addLastSegment","addNextSegment","addStartPoint","outsideTurn","addCollinear","addOutsideTurn","addInsideTurn","numInt","JOIN_BEVEL","JOIN_MITRE","addFillet","addMitreJoin","addBevelJoin","mid0","mid1","sideSign","addLineEndCap","offsetL","offsetR","getEndCapStyle","CAP_ROUND","CAP_FLAT","CAP_SQUARE","squareCapSideOffset","squareCapLOffset","squareCapROffset","isMitreWithinLimit","mitreRatio","getMitreLimit","addLimitedMitreJoin","mitreLimit","ang0","angDiff","angDiffHalf","midAng","mitreMidAng","mitreDist","bevelDelta","bevelHalfLen","bevelMidX","bevelMidY","bevelMidPt","mitreMidLine","bevelEndLeft","bevelEndRight","addFillet2","startAngle","endAngle","directionFactor","totalAngle","nSegs","initAngle","currAngleInc","currAngle","createCircle","createSquare","getMinEdgeRing","minEr","MinimalEdgeRing","ConnectedElementLocationFilter","locations","GeometryLocation","mcb","MonotoneChainIndexer","env2","chainIndex","computeIntersectsForChain","chainIndex0","chainIndex1","computeIntersectsForChain2","start0","end0","end1","computeEdgeEnds2","eiCurr","eiNext","createEdgeEndForPrev","createEdgeEndForNext","pPrev","EdgeEnd","pNext","UniqueCoordinateArrayFilter","treeSet","RadialComparator","origin","polarCompare","dxp","dyp","dxq","dyq","orient","oq","inputPts","extractCoordinates","reducedPts","sortedPts","preSort","cHS","grahamScan","cH","lineOrPolygon","polyPts","computeOctRing","reducedSet","padArray3","pad","ps","empty","peek","isBetween","c3","octPts","computeOctPts","cleanRing","original","cleanedRing","previousDistinctCoordinate","currentCoordinate","nextCoordinate","cleanedRingCoordinates","MinimumDiameter","isConvex","convexHullPts","minBaseSeg","minWidthPt","minPtIndex","minWidth","nextIndex","computeC","computeSegmentForLine","computeMinimumDiameter","getWidthCoordinate","getSupportingSegment","getDiameter","computeWidthConvex","convexGeom","computeConvexRingMinDiameter","currMaxIndex","findMaxPerpDistance","maxPerpDistance","nextPerpDistance","getMinimumRectangle","minPara","maxPara","minPerp","maxPerp","paraC","perpC","maxPerpLine","minPerpLine","maxParaLine","minParaLine","geometryTypes","json","Feature","FeatureCollection","featureCollection","shellGeoJson","holeGeoJson","Vertex","BEYOND","BEHIND","BETWEEN","ORIGIN","DESTINATION","_p","getZ","setZ","equalsWithTolerance","classify","sa","crossProduct","magn","dot","times","cross","rightOf","dest","orig","leftOf","bisector","l1","l2","v1","v2","circumRadiusRatio","edgeLength","circleCenter","xm","ym","cab","cbc","hcc","err","parentGeometry","isSelfTouchingRingFormingHoleValid","validErr","findPtNotNode","testCoords","searchRing","searchEdge","findEdge","setSelfTouchingRingFormingHoleValid","getValidationError","checkValidPoint","checkValidMultiPoint","checkValidLinearRing","checkValidLineString","checkValidPolygon","checkValidMultiPolygon","checkValidGeometryCollection","checkInvalidCoordinates","checkTooFewPoints","checkClosedRing","checkNoSelfIntersectingRings","checkClosedRings","checkConsistentArea","checkHolesInShell","checkHolesNotNested","checkConnectedInteriors","checkShellsNotNested","hasTooFewPoints","getInvalidPoint","cat","ConsistentAreaTester","isValidArea","isNodeConsistentArea","hasDuplicateRings","checkNoSelfIntersectingRing","nodeSet","isFirst","pir","holePt","outside","nestedTester","IndexedNestedRingTester","innerHole","isNonNested","getNestedPoint","checkShellNotNested","shellPts","polyShell","shellPt","insidePolyShell","badNestedPt","checkShellInsideHole","holePts","insideHole","insideShell","cit","NodeBase","subnode","getSubnodeIndex","subnodeIndex","hasItems","isSearchMatch","isPrunable","hasChildren","addAllItems","resultItems","addAllItemsFromOverlapping","visit","visitItems","sqd","maxSubDepth","subSize","getNodeCount","createExpanded","addEnv","largerNode","expandEnv","insertNode","getSubnode","childNode","createSubnode","sqEnv","QuadEdge","rot","vertex","makeEdge","q0","q3","base","setOrig","setDest","connect","lNext","beta","t4","oNext","oPrev","getPrimary","delete_jsts","isLive","invRot","dNext","dPrev","lPrev","rNext","rPrev","equalsNonOriented","qe","equalsOriented","toLineSegment","getDirectedCoordinate","getDx","RightmostEdgeFinder","minIndex","minCoord","minDe","orientedDe","dirEdgeList","checkForRightmostCoordinate","findRightmostEdgeAtNode","findRightmostEdgeAtVertex","rightmostSide","getRightmostSide","star","usePrev","getRightmostSideOfSegment","IncrementalDelaunayTriangulator","subdiv","isUsingTolerance","getTolerance","insertSites","vertices","insertSite","startEdge","isVertexOfEdge","isOnEdge","addLinearSegments","SweepLineSegment","Root","insertContained","isZeroX","isZeroY","element","IntersectionAdder","isAdjacentSegments","_hasIntersection","hasInterior","properIntersectionPoint","isSelfIntersection","numIntersections","numInteriorIntersections","numProperIntersections","numTests","getLineIntersector","hasInteriorIntersection","isTrivialIntersection","CascadedPolygonUnion","polys","inputPolys","STRTREE_NODE_CAPACITY","itemTree","unionTree","geomTree","reduceToGeometries","binaryUnion","unionSafe","unionOptimized","g0Env","g1Env","combo","unionActual","commonEnv","unionUsingEnvelopeIntersection","common","disjointPolys","g0Int","extractByEnvelope","g1Int","disjointGeoms","intersectingGeoms","OffsetCurveBuilder","getBufferParameters","getLineCurve","isSingleSided","posDistance","segGen","getSegGen","computePointCurve","isRightSide","computeSingleSidedBufferCurve","computeLineBufferCurve","lineCoord","getRingCurve","copyCoordinates","computeRingBufferCurve","getOffsetCurve","computeOffsetCurve","curvePts","SIMPLIFY_FACTOR","simplifyTolerance","bufDistance","distTol","simp1","simp2","HotPixelSnapAction","vertexIndex","_isNodeAdded","snap2","pixelEnv","hotPixelSnapAction","nodeSize","addInterval","expandInt","searchInterval","subInt","isZeroArea","NE","NW","SW","SE","quadrant2","isOpposite","quad2","commonHalfPlane","isInHalfPlane","halfPlane","nodeGraph","RelateNodeGraph","isNodeEdgeAreaLabelsConsistent","nodeIt","eeb","RelateNode","_isForward","computeDirectedLabel","depthFactor","currLocation","nextLocation","nextMin","minEdgeRing","setMinEdgeRing","setDepth","depthVal","getNextMin","isExteriorIfArea0","isExteriorIfArea1","oppositePos","delta","oppositeDepth","terminateDistance","minDistanceLocation","distOp","nearestPoints","computeMinDistance","nearestPts","nearestLocations","updateMinDistance","locGeom","computeMinDistance2","computeContainmentDistance","computeFacetDistance","computeContainmentDistance2","computeContainmentDistance3","computeContainmentDistance4","locPtPoly","polyGeomIndex","locationsIndex","insideLocs","locs","ptLoc","lines0","lines1","PointExtracter","getPoints","computeMinDistanceLines","computeMinDistanceLinesPoints","computeMinDistancePoints","line0","line1","points0","points1","computeMinDistance3","coord0","coord1","segClosestPoint","SIRtree","comperator","intersectionOp","DouglasPeuckerSimplifier","isEnsureValidTopology","tss","setEnsureValid","DPTransformer","rectangle","rectEnv","rc","isContainedInBoundary","isPointContainedInBoundary","isLineStringContainedInBoundary","isLineSegmentContainedInBoundary","NULL_VALUE","depthAtLocation","depthValue","isNull2","isNull3","minDepth","newValue","boundaryCount","Mod2BoundaryNodeRule","MOD2_BOUNDARY_RULE","INSIDE_AREA","getGeometryComponent","isInsideArea","eeList","edgeIt","SimpleSweepLineIntersector","ss0","VoronoiDiagramBuilder","siteCoords","clipEnv","diagramEnv","setSites","setSitesByGeometry","setSitesByArray","DelaunayTriangulationBuilder","extractUniqueCoordinates","unique","setClipEnvelope","setTolerance","siteEnv","triangulator","toVertices","QuadEdgeSubdivision","getSubdivision","getDiagram","getVoronoiDiagram","clipGeometryCollection","clipPoly","clipped","totalEnv","nestedPt","innerRing","innerRingPts","searchRingPts","innerRingPt","SegmentNode","segString","segmentOctant","_isInterior","isInterior","SegmentPointComparator","GeoJSONWriter","OpenLayersParser","convertFromPoint","convertFromLineString","convertFromLinearRing","convertFromPolygon","convertFromMultiPoint","convertFromMultiLineString","convertFromMultiPolygon","convertFromCollection","multiPoint","multiLineString","multiPolygon","convertToPoint","convertToLineString","convertToLinearRing","convertToPolygon","convertToMultiPoint","convertToMultiLineString","convertToMultiPolygon","convertToCollection","OpenLayers","geometryCollection","geometryOpenLayers","Collection","minExtent","ensureExtent","collectStats","insertEnv","posEnv","queryByEnvelope","queryWithVisitor","queryAll","foundItems","delX","delY","computeQuadLevel","dMax","computeKeyFromEnvelope","computeKeyFromLevel","quadSize","copyDeep","copyDeep1","copyDeep2","srcStart","destStart","hasRepeatedPoints","increasingDirection","firstCoordinate","newCoordinates","verts","setSitesFromGeometry","setSitesFromCollection","getTriangles","counter","countSegment","isOnSegment","crossingCount","isPointOnSegment","xIntSign","isPointInPolygon","bnRule","boundaryLineString","boundaryMultiLineString","getEmptyMultiPoint","mLine","bdyPts","computeBoundaryCoordinates","endpoints","endpoint","closedEndpointOnBoundary","OffsetCurveSetBuilder","curveBuilder","curveList","getCurves","addCurve","addLineString","addCollection","curve","offsetSide","shellCoord","isErodedCompletely","addPolygonRing","holeCoord","cwLeftLoc","cwRightLoc","bufferDistance","ringCoord","isTriangleErodedCompletely","envMinDimension","triangleCoord","tri","inCentre","distToCentre","BufferSubgraph","finder","rightMostCoord","edgeEnv","getRightmostCoordinate","addReachable","startNode","symNode","clearVisitedEdges","computeDepth","outsideDepth","copySymDepths","nodesVisited","nodeQueue","shift","computeNodeDepth","adjNode","findResultEdges","rawGeom","createValidArea","removeDegenerateRings","simpResult","rawAreaGeom","GeometryExtracter","clz","isSuccess","savedException","unionPoints","ptGeom","unionNoOpt","unionLines","lineGeom","unionPolygons","unionLA","unionWithNull","KdNode","initializeFromCoordinate","initializeFromXY","getLeft","getRight","increment","getCount","isRepeated","setLeft","setRight","insertInterval","queryInterval","queryAndAdd","del","maxWidth","horizontalBisector","widestIntersection","widestGeometry","bisectY","SafeBisectorFinder","getBisectorY","hiY","loY","process","updateInterval","joinStyle","setQuadrantSegments","setEndCapStyle","setJoinStyle","setMitreLimit","DEFAULT_QUADRANT_SEGMENTS","DEFAULT_MITRE_LIMIT","_isSingleSided","quadSegs","bufferDistanceError","setSingleSided","ShortCircuitedGeometryVisitor","applyTo","EnvelopeIntersectsVisitor","elementEnv","GeometryContainsPointVisitor","rectSeq","rectPt","RectangleIntersectsSegmentVisitor","rectIntersector","RectangleLineIntersector","checkIntersectionWithLineStrings","testLine","checkIntersectionWithSegments","seq1","rp","ecpVisitor","riVisitor","BufferBuilder","lLoc","rLoc","workingPrecisionModel","workingNoder","setWorkingPrecisionModel","setNoder","curveSetBuilder","bufferSegStrList","createEmptyResultGeometry","computeNodedEdges","subgraphList","createSubgraphs","buildSubgraphs","getNoder","oldLabel","mergeDelta","existingDelta","newDelta","subgraph","processedGraphs","locater","convertSegStrings","fact","emptyGeom","xSign","relativeSign","ySign","compareValue","compareSign0","compareSign1","_relate","relOp","getIntersectionMatrix","id","getStartIndex","getEndIndex","mcs","computeSelect2","mco","computeOverlaps2","elements","matrix","setAll","actualDimensionValue","requiredDimensionSymbol","matches2","actualDimensionSymbols","requiredDimensionSymbols","row","column","set2","dimensionSymbols","col","minimumDimensionValue","setAtLeast2","minimumDimensionSymbols","ai","bi","isDisjoint","dimensionOfGeometryA","dimensionOfGeometryB","isWithin","hasPointInCommon","isCoveredBy","transpose","LastFoundQuadEdgeLocator","lastEdge","locateFromEdge","addCollapsedNodes","collapsedVertexIndexes","findCollapsesFromInsertedNodes","findCollapsesFromExistingVertices","collapsedVertexIndex","findCollapseIndex","numVerticesBetween","checkSplitEdgesCorrectness","split0","splitn","splitnPts","ptn","WKTReader","edgeCoincidenceTolerance","EDGE_COINCIDENCE_TOL_FACTOR","visitedKey","quadEdges","startingEdge","frameEnv","triEdges","frameVertex","createFrame","initSubdiv","getTriangleEdges","startQE","triEdge","ea","ec","getEdgesByFactory","setLocator","eSym","eRot","eRotSym","iter","maxIter","locateByVertex","locateByCoordinate","locateByCoordinates","locEdge","isFrameEdge","isFrameVertex","isFrameBorderEdge","leftTri","rightTri","vLeftTriOther","vRightTriOther","getVertices","includeFrame","vd","getVertexUniqueEdges","visitedVertices","qd","getPrimaryEdges","edgeStack","visitedEdges","priQE","visitTriangles","triVisitor","fetchTriangleToVisit","curr","edgeCount","isFrame","TriangleEdgesListVisitor","getTriangleVertices","TriangleVertexListVisitor","getTriangleCoordinates","TriangleCoordinatesVisitor","triPtsList","tris","triPt","vorCells","getVoronoiCellPolygons","TriangleCircumcentreVisitor","cells","getVoronoiCellPolygon","cellPts","cellPoly","ccVertex","triList","trieEdges","triCoords","edgeEnds","dirCoord","computeLabelOn","computeLabelSides","foundInterior","determineBoundary","computeLabelSide","KdTree","tol","numberOfNodes","insertWithData","currentNode","leafNode","isOddLevel","isLessThan","isInTolerance","queryNode","bottomNode","queryEnv","odd","discriminant","searchLeft","searchRight","queryWithArray","perpendicularBisector","denom","numx","numy","ccx","ccy","det","m00","m01","m10","m11","len0","len1","circum","inCentreX","inCentreY","longestSideLength","lenAB","lenBC","lenCA","maxLen","angleBisector","frac","splitPt","_orientation","compareOriented","orientation1","pts2","orientation2","dir1","dir2","limit1","limit2","compPt","done1","done2","compute","intor","findNearestPoint","argGeom","MAX_PRECISION_DIGITS","precisionScaleFactor","maxPrecisionDigits","envSize","bufEnvSize","bufEnvLog10","minUnitLog10","gBuf","geomBuf","bufferOp3","bufOp","bufferOp4","resultGeometry","bufferOriginalPrecision","argPM","bufferFixedPrecision","bufferReducedPrecision","precDigits","saveException","bufferReducedPrecision2","bufBuilder","precisionDigits","sizeBasedScaleFactor","fixedPM","ScaledNoder","parentGeom","lineEdgeMap","HashMap","createEdgeSetIntersector","useBoundaryDeterminationRule","boundaryNodes","areaPtLocator","edgelist","insertPoint","insertBoundaryPoint","lr","cwLeft","cwRight","includeProper","setBoundaryNodes","esi","computeRingSelfNodes","addSelfIntersectionNodes","addSelfIntersectionNode","ptList","minimimVertexDistance","bufPt","isRedundant","lastPt","last2Pt","PointPairDistance","initialize","setMaximum","setMaximum2","setMinimum2","MaxPointDistanceFilter","maxPtDist","minPtDist","euclideanDist","getMaxPointDistance","MaxDensifiedByFractionDistanceFilter","fraction","numSubSegs","delx","dely","DiscreteHausdorffDistance","densifyFrac","setDensifyFraction","orientedDistance","computeOrientedDistance","discreteGeom","distFilter","fracFilter","MinimumBoundingCircle","input","extremalPts","getCircle","centrePoint","getExtremalPoints","getRadius","computeCentre","computeCirclePoints","hullPts","lowestPoint","Q","pointWitMinAngleWithX","R","pointWithMinAngleWithSegment","minSin","minAngPt","minAng","ang","offsetX","offsetY","isScaled","isIntegerPrecision","splitSS","rescale","intSegStrings","scale2","transformed","roundPts","roundPtsNoDup","rescale2","recordIsolated","bdyNodes0","bdyNodes1","isBoundaryPoint",29,"execScript","O","M","h","E","F","G","H","I","J","K","N","EmptyStackException","IndexOutOfBoundsException","Iterator","NoSuchElementException","OperationNotSupported","Set","SortedMap","SortedSet",30,"./dist/javascript.util-node.min.js",31,"each","coordEach","xSum","ySum","turf-meta",33,"callback","excludeWrapCoord","stopG","geometryMaybeCollection","wrapShrink","isFeatureCollection","isFeature","coordReduce","memo","propEach","propReduce",34,"pluckCoods","fc",35,"maxEdge","filterTriangles","triangle","pt2","pt3","dist2","dist3","tinPolys","filteredPolys",36,"hull","convex-hull",37,"convexHull1d","convexHull2d","convexHullnd","./lib/ch1d","./lib/ch2d","./lib/chnd",38,39,"convexHull2D","monotoneHull","monotone-convex-hull-2d",40,"permute","front","npoints","ptr","invPermute","nc","nf","convexHullnD","ich","ah","aff","nhull","affine-hull","incremental-convex-hull",41,"linearlyIndependent","affineHull","frame","robust-orientation",42,"fastTwoSum","bv","av","br","ar",43,"scaleLinearExpansion","ts","twoProduct","pq","twoSum","two-product","two-sum",44,"scalarScalar","robustSubtract","ne","eptr","fptr","fi","fa","_x","_bv","_av","_br","_ar",45,"linearExpansionSum",46,"SPLITTER","abig","ahi","alo","bbig","bhi","blo","err1","err2","err3",47,"cofactor","generateSum","expr","determinant","neg","posExpr","negExpr","funcName","proc","Function","robustSum","robustScale","slowOrient","CACHED","generateOrientationProc","NUM_EXPAND","procArgs","EPSILON","ERRBOUND3","ERRBOUND4","orientation3Exact","orientation4Exact","adz","bdz","cdz","bdxcdy","cdxbdy","cdxady","adxcdy","adxbdy","bdxady","permanent","robust-scale","robust-subtract","robust-sum",48,"Simplex","adjacent","boundary","lastVisited","GlueFacet","cell","compareGlue","compareCell","bakeOrient","test","Triangulation","simplices","interior","tuple","BAKED","incrementalConvexHull","randomSearch","initialSimplex","initialCoords","initialCell","triangles","useRandom","compareCells","proto","handleBoundaryDegeneracy","toVisit","cellAdj","neighbor","vv","walk","initIndex","outerLoop","cellVerts","addPeaks","tovisit","glueFacets","indexOfN","indexOfNeg1","na","vverts","vadj","ncell","uu","nface","nptr","bcell","cv","parity","simplicial-complex",49,"dup",50,51,52,53,54,55,"countTrailingZeros","INT_BITS","INT_MAX","INT_MIN","mask","isPow2","log2","log10","popCount","nextPow2","prevPow2","REVERSE_TABLE","tab","interleave2","deinterleave2","interleave3","deinterleave3","nextCombination",56,"UnionFind","roots","ranks","defineProperty","makeSet","link","xr","yr","xd","yd",57,"countVertices","vc","cloneCells","ncells","m1","l0","m0","as","bs","compareZipped","zipped","findCell","incidence","from_cells","to_cells","cl","kn","bits","dual","vertex_count","skeleton","k0","connectedComponents_dense","labels","component_labels","connectedComponents_sparse","vj","connectedComponents","bit-twiddle","union-find",58,"monotoneConvexHull2D","lower","upper","nl",59,60,61,62,63,65,66,67,"longitude1","latitude1","bearing_rad","latitude2","asin","longitude2",68,"standard_deviation","simple-statistics",69,"linear_regression","linreg","mb","data_length","sum_x","sum_y","sum_xx","sum_xy","r_squared","sum_of_squares","bayesian","bayes_model","total_count","train","category","score","odds","odds_sums","combination","mean","geometric_mean","harmonic_mean","reciprocal_sum","root_mean_square","mean_value","deviations","sum_nth_power_deviations","sample_variance","sum_squared_deviations_value","sample_standard_deviation","sample_covariance","xmean","ymean","sample_correlation","cov","xstd","ystd","mode","max_seen","seen_this","t_test","sample_mean","sd","rootN","t_test_two_sample","sample_x","sample_y","meanX","meanY","weightedVariance","chunk","chunkSize","shuffle_in_place","randomSource","temporary","shuffle","shuffled","quantile_sorted","iqr","mad","median_value","median_absolute_deviations","jenksMatrices","n_classes","lower_class_limits","variance_combinations","tmp1","tmp2","sum_squares","i4","lower_class_limit","jenksBreaks","kclass","countNum","matrices","sample_skewness","cubed_s","sum_cubed_deviations","error_function","tau","cumulative_std_normal_probability","absZ","standard_normal_table","z_score","factorial","accumulator","bernoulli_distribution","binomial_distribution","trials","probability","probability_mass","cumulative_probability","epsilon","poisson_distribution","lambda","chi_squared_goodness_of_fit","distribution_type","significance","degrees_of_freedom","input_mean","chi_squared","hypothesized_distribution","observed_frequencies","expected_frequencies","chi_squared_distribution_table","mixin","wrap","method","unshift","support","defineProperties","extending","arrayMethods","configurable","enumerable","writable",0.995,0.99,0.975,0.95,0.9,0.5,0.1,0.05,0.025,0.01,0.005,70,80,90,100,"interquartile_range","median_absolute_deviation","rms","erf","invariant","featureOf","dLat","dLon","turf-invariant",71,"geojsonType","collectionOf",72,73,"poly1","poly2","erased",74,75,76,77,78,79,81,82,83,"newFC",84,"flipAny","flipGeometry","flip0","flip1","flip2","flip3",85,"hexagon","cosines","sines","xFraction","cellWidth","yFraction","hex_width","hex_height","box_width","box_height","x_interval","y_interval","x_span","x_count","x_adjust","y_count","y_adjust","hasOffsetY","isOdd","center_x","center_y",86,"inRing","xi","yi","xj","yj","insidePoly","inHole",87,"geom2",88,89,91,92,"pointsEqual","reverseList","head","ContourBuilder","Conrec","drawContour","contours","startX","startY","endX","endY","contourLevel","cb","addSegment","contourList","sh","xh","yh","remove_seq","ma","prependA","prependB","aa","bb","closed","contour","ilb","iub","jlb","jub","m2","m3","case_value","dmin","dmax","xsect","ysect","jm","castab","temp1","temp2",93,"grid","breaks","tinResult","extentBBox","squareBBox","gridResult","xGroup","xFlat","verticalPoint","xCoordinates","yCoordinates","polyCoordinates","./conrec","turf-grid",94,"extents","xmin","ymin","xmax",95,"field","vals",96,97,"lineIntersects","line1StartX","line1StartY","line1EndX","line1EndY","line2StartX","line2StartY","line2EndX","line2EndY","denominator","numerator1","numerator2","onLine1","onLine2","polyIn","fixed","ring1","ring2",98,99,"perpendicularPt","intersectPt","stopPt","ends","startVertex","stopVertex","clipLine",101,102,103,"merged",104,"objectToString","circular","_clone","child","isRegExp","RegExp","source","getRegExpFlags","isDate","Date","getTime","useBuffer","getPrototypeOf","allParents","allChildren","attrs","getOwnPropertyDescriptor","re","flags","ignoreCase","multiline","clonePrototype",105,"midX","y3","midY",106,107,"targetPoint","nearestPoint",108,"z1","z2","z3",109,"cellHeight","currentX","currentY",110,111,"pointOnSegment","ab","ap","onSurface","onMultiPoint","onLine","onMultiLine","closestVertex","closestDistance",112,113,114,"percentiles","quantiles","percentile",115,116,"num_vertices","max_radial_length","geojson-random",117,"coordInBBBOX","vertexToCoordinate","hub","cur","rnd","sumOffsets","scaleOffsets","circle_offsets","radial_scaler",118,"translations","reclassed","./index.js",119,120,"getRandomSubarray","outFC",121,"simpleFeature","highQuality","simpleRing","simplify-js",122,"getSqDist","getSqSegDist","simplifyRadialDist","sqTolerance","prevPoint","newPoints","simplifyDouglasPeucker","maxSqDist","sqDist","MarkerArray","markers","first","highestQuality",123,"currentXDistance","currentYDistance","newXDistance","newYDistance","xChange","yChange","lowX","lowY","highX","highY","sized",124,125,"squareBbox","horizontalDistance","verticalDistance","verticalMidpoint","horzontalMidpoint",126,127,128,"byX","dedup","outer","ymax","xmid","ymid","open","__sentinel",129,"cell1","cell2",130,131,132,133,134,135,136,137,"pointsWithin",138,"createXHR","readystatechange","xhr","readyState","loadFunc","getBody","body","response","responseType","responseText","responseXML","isJson","errorFunc","evt","timeoutTimer","statusCode","failureResponse","aborted","status","useXDR","headers","url","uri","rawRequest","getAllResponseHeaders","parseHeaders","once","cors","XDomainRequest","XMLHttpRequest","sync","onreadystatechange","onload","onerror","onprogress","ontimeout","username","password","withCredentials","abort","setRequestHeader","beforeSend","send","noop","global/window","parse-headers",139,140,"fn","called",141,"isFunction","forEachArray","forEachString","forEachObject","is-function",142,"alert","confirm","prompt",143,144,"for-each",145,"COLORS",146,"_interopRequireDefault","_interopRequireWildcard","_xhr","_xhr2","_spinJs","_configJson","config","_colors","_leafletKnn","_leafletKnn2","_turf","MAP_STYLE","LINE_WIDTH","querySelector","gj","geojson","tileLayer","attribution","addTo","req","weight","fillOpacity","clickable","fitBounds","padding","marker","setLatLng","latlng","../config.json","./colors","babel-runtime/helpers/interop-require-default","babel-runtime/helpers/interop-require-wildcard","leaflet","leaflet-hash","leaflet-knn","spin.js","turf"],"mappings":"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","file":"app.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","module.exports={\n  \"api_token\": \"pk.eyJ1IjoidzhyIiwiYSI6InBWVUZaSDAifQ.lQUJXO6rqqAiKRR6VW8TEg\"\n}\n","!function t(e,o,n){function r(s,a){if(!o[s]){if(!e[s]){var p=\"function\"==typeof require&&require;if(!a&&p)return p(s,!0);if(i)return i(s,!0);var u=new Error(\"Cannot find module '\"+s+\"'\");throw u.code=\"MODULE_NOT_FOUND\",u}var l=o[s]={exports:{}};e[s][0].call(l.exports,function(t){var o=e[s][1][t];return r(o?o:t)},l,l.exports,t,e,o,n)}return o[s].exports}for(var i=\"function\"==typeof require&&require,s=0;s<n.length;s++)r(n[s]);return r}({1:[function(t,e,o){e.exports={api_token:\"pk.eyJ1IjoidzhyIiwiYSI6InBWVUZaSDAifQ.lQUJXO6rqqAiKRR6VW8TEg\"}},{}],2:[function(t,e,o){\"use strict\";o[\"default\"]=function(t){return t&&t.__esModule?t:{\"default\":t}},o.__esModule=!0},{}],3:[function(t,e,o){\"use strict\";o[\"default\"]=function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e[\"default\"]=t,e},o.__esModule=!0},{}],4:[function(t,e,o){(function(e){function n(){function t(){}try{var e=new Uint8Array(1);return e.foo=function(){return 42},e.constructor=t,42===e.foo()&&e.constructor===t&&\"function\"==typeof e.subarray&&0===e.subarray(1,1).byteLength}catch(o){return!1}}function r(){return i.TYPED_ARRAY_SUPPORT?2147483647:1073741823}function i(t){return this instanceof i?(this.length=0,this.parent=void 0,\"number\"==typeof t?s(this,t):\"string\"==typeof t?a(this,t,arguments.length>1?arguments[1]:\"utf8\"):p(this,t)):arguments.length>1?new i(t,arguments[1]):new i(t)}function s(t,e){if(t=f(t,0>e?0:0|m(e)),!i.TYPED_ARRAY_SUPPORT)for(var o=0;e>o;o++)t[o]=0;return t}function a(t,e,o){(\"string\"!=typeof o||\"\"===o)&&(o=\"utf8\");var n=0|j(e,o);return t=f(t,n),t.write(e,o),t}function p(t,e){if(i.isBuffer(e))return u(t,e);if(K(e))return l(t,e);if(null==e)throw new TypeError(\"must start with number, buffer, array or string\");if(\"undefined\"!=typeof ArrayBuffer){if(e.buffer instanceof ArrayBuffer)return g(t,e);if(e instanceof ArrayBuffer)return h(t,e)}return e.length?c(t,e):d(t,e)}function u(t,e){var o=0|m(e.length);return t=f(t,o),e.copy(t,0,0,o),t}function l(t,e){var o=0|m(e.length);t=f(t,o);for(var n=0;o>n;n+=1)t[n]=255&e[n];return t}function g(t,e){var o=0|m(e.length);t=f(t,o);for(var n=0;o>n;n+=1)t[n]=255&e[n];return t}function h(t,e){return i.TYPED_ARRAY_SUPPORT?(e.byteLength,t=i._augment(new Uint8Array(e))):t=g(t,new Uint8Array(e)),t}function c(t,e){var o=0|m(e.length);t=f(t,o);for(var n=0;o>n;n+=1)t[n]=255&e[n];return t}function d(t,e){var o,n=0;\"Buffer\"===e.type&&K(e.data)&&(o=e.data,n=0|m(o.length)),t=f(t,n);for(var r=0;n>r;r+=1)t[r]=255&o[r];return t}function f(t,e){i.TYPED_ARRAY_SUPPORT?(t=i._augment(new Uint8Array(e)),t.__proto__=i.prototype):(t.length=e,t._isBuffer=!0);var o=0!==e&&e<=i.poolSize>>>1;return o&&(t.parent=J),t}function m(t){if(t>=r())throw new RangeError(\"Attempt to allocate Buffer larger than maximum size: 0x\"+r().toString(16)+\" bytes\");return 0|t}function y(t,e){if(!(this instanceof y))return new y(t,e);var o=new i(t,e);return delete o.parent,o}function j(t,e){\"string\"!=typeof t&&(t=\"\"+t);var o=t.length;if(0===o)return 0;for(var n=!1;;)switch(e){case\"ascii\":case\"binary\":case\"raw\":case\"raws\":return o;case\"utf8\":case\"utf-8\":return U(t).length;case\"ucs2\":case\"ucs-2\":case\"utf16le\":case\"utf-16le\":return 2*o;case\"hex\":return o>>>1;case\"base64\":return Y(t).length;default:if(n)return U(t).length;e=(\"\"+e).toLowerCase(),n=!0}}function v(t,e,o){var n=!1;if(e=0|e,o=void 0===o||o===1/0?this.length:0|o,t||(t=\"utf8\"),0>e&&(e=0),o>this.length&&(o=this.length),e>=o)return\"\";for(;;)switch(t){case\"hex\":return O(this,e,o);case\"utf8\":case\"utf-8\":return b(this,e,o);case\"ascii\":return w(this,e,o);case\"binary\":return R(this,e,o);case\"base64\":return N(this,e,o);case\"ucs2\":case\"ucs-2\":case\"utf16le\":case\"utf-16le\":return M(this,e,o);default:if(n)throw new TypeError(\"Unknown encoding: \"+t);t=(t+\"\").toLowerCase(),n=!0}}function x(t,e,o,n){o=Number(o)||0;var r=t.length-o;n?(n=Number(n),n>r&&(n=r)):n=r;var i=e.length;if(i%2!==0)throw new Error(\"Invalid hex string\");n>i/2&&(n=i/2);for(var s=0;n>s;s++){var a=parseInt(e.substr(2*s,2),16);if(isNaN(a))throw new Error(\"Invalid hex string\");t[o+s]=a}return s}function E(t,e,o,n){return X(U(e,t.length-o),t,o,n)}function I(t,e,o,n){return X(z(e),t,o,n)}function S(t,e,o,n){return I(t,e,o,n)}function L(t,e,o,n){return X(Y(e),t,o,n)}function C(t,e,o,n){return X(H(e,t.length-o),t,o,n)}function N(t,e,o){return 0===e&&o===t.length?W.fromByteArray(t):W.fromByteArray(t.slice(e,o))}function b(t,e,o){o=Math.min(t.length,o);for(var n=[],r=e;o>r;){var i=t[r],s=null,a=i>239?4:i>223?3:i>191?2:1;if(o>=r+a){var p,u,l,g;switch(a){case 1:128>i&&(s=i);break;case 2:p=t[r+1],128===(192&p)&&(g=(31&i)<<6|63&p,g>127&&(s=g));break;case 3:p=t[r+1],u=t[r+2],128===(192&p)&&128===(192&u)&&(g=(15&i)<<12|(63&p)<<6|63&u,g>2047&&(55296>g||g>57343)&&(s=g));break;case 4:p=t[r+1],u=t[r+2],l=t[r+3],128===(192&p)&&128===(192&u)&&128===(192&l)&&(g=(15&i)<<18|(63&p)<<12|(63&u)<<6|63&l,g>65535&&1114112>g&&(s=g))}}null===s?(s=65533,a=1):s>65535&&(s-=65536,n.push(s>>>10&1023|55296),s=56320|1023&s),n.push(s),r+=a}return P(n)}function P(t){var e=t.length;if($>=e)return String.fromCharCode.apply(String,t);for(var o=\"\",n=0;e>n;)o+=String.fromCharCode.apply(String,t.slice(n,n+=$));return o}function w(t,e,o){var n=\"\";o=Math.min(t.length,o);for(var r=e;o>r;r++)n+=String.fromCharCode(127&t[r]);return n}function R(t,e,o){var n=\"\";o=Math.min(t.length,o);for(var r=e;o>r;r++)n+=String.fromCharCode(t[r]);return n}function O(t,e,o){var n=t.length;(!e||0>e)&&(e=0),(!o||0>o||o>n)&&(o=n);for(var r=\"\",i=e;o>i;i++)r+=k(t[i]);return r}function M(t,e,o){for(var n=t.slice(e,o),r=\"\",i=0;i<n.length;i+=2)r+=String.fromCharCode(n[i]+256*n[i+1]);return r}function A(t,e,o){if(t%1!==0||0>t)throw new RangeError(\"offset is not uint\");if(t+e>o)throw new RangeError(\"Trying to access beyond buffer length\")}function T(t,e,o,n,r,s){if(!i.isBuffer(t))throw new TypeError(\"buffer must be a Buffer instance\");if(e>r||s>e)throw new RangeError(\"value is out of bounds\");if(o+n>t.length)throw new RangeError(\"index out of range\")}function D(t,e,o,n){0>e&&(e=65535+e+1);for(var r=0,i=Math.min(t.length-o,2);i>r;r++)t[o+r]=(e&255<<8*(n?r:1-r))>>>8*(n?r:1-r)}function G(t,e,o,n){0>e&&(e=4294967295+e+1);for(var r=0,i=Math.min(t.length-o,4);i>r;r++)t[o+r]=e>>>8*(n?r:3-r)&255}function F(t,e,o,n,r,i){if(e>r||i>e)throw new RangeError(\"value is out of bounds\");if(o+n>t.length)throw new RangeError(\"index out of range\");if(0>o)throw new RangeError(\"index out of range\")}function B(t,e,o,n,r){return r||F(t,e,o,4,3.4028234663852886e38,-3.4028234663852886e38),Q.write(t,e,o,n,23,4),o+4}function q(t,e,o,n,r){return r||F(t,e,o,8,1.7976931348623157e308,-1.7976931348623157e308),Q.write(t,e,o,n,52,8),o+8}function _(t){if(t=V(t).replace(tt,\"\"),t.length<2)return\"\";for(;t.length%4!==0;)t+=\"=\";return t}function V(t){return t.trim?t.trim():t.replace(/^\\s+|\\s+$/g,\"\")}function k(t){return 16>t?\"0\"+t.toString(16):t.toString(16)}function U(t,e){e=e||1/0;for(var o,n=t.length,r=null,i=[],s=0;n>s;s++){if(o=t.charCodeAt(s),o>55295&&57344>o){if(!r){if(o>56319){(e-=3)>-1&&i.push(239,191,189);continue}if(s+1===n){(e-=3)>-1&&i.push(239,191,189);continue}r=o;continue}if(56320>o){(e-=3)>-1&&i.push(239,191,189),r=o;continue}o=r-55296<<10|o-56320|65536}else r&&(e-=3)>-1&&i.push(239,191,189);if(r=null,128>o){if((e-=1)<0)break;i.push(o)}else if(2048>o){if((e-=2)<0)break;i.push(o>>6|192,63&o|128)}else if(65536>o){if((e-=3)<0)break;i.push(o>>12|224,o>>6&63|128,63&o|128)}else{if(!(1114112>o))throw new Error(\"Invalid code point\");if((e-=4)<0)break;i.push(o>>18|240,o>>12&63|128,o>>6&63|128,63&o|128)}}return i}function z(t){for(var e=[],o=0;o<t.length;o++)e.push(255&t.charCodeAt(o));return e}function H(t,e){for(var o,n,r,i=[],s=0;s<t.length&&!((e-=2)<0);s++)o=t.charCodeAt(s),n=o>>8,r=o%256,i.push(r),i.push(n);return i}function Y(t){return W.toByteArray(_(t))}function X(t,e,o,n){for(var r=0;n>r&&!(r+o>=e.length||r>=t.length);r++)e[r+o]=t[r];return r}var W=t(\"base64-js\"),Q=t(\"ieee754\"),K=t(\"is-array\");o.Buffer=i,o.SlowBuffer=y,o.INSPECT_MAX_BYTES=50,i.poolSize=8192;var J={};i.TYPED_ARRAY_SUPPORT=void 0!==e.TYPED_ARRAY_SUPPORT?e.TYPED_ARRAY_SUPPORT:n(),i.TYPED_ARRAY_SUPPORT&&(i.prototype.__proto__=Uint8Array.prototype,i.__proto__=Uint8Array),i.isBuffer=function(t){return!(null==t||!t._isBuffer)},i.compare=function(t,e){if(!i.isBuffer(t)||!i.isBuffer(e))throw new TypeError(\"Arguments must be Buffers\");if(t===e)return 0;for(var o=t.length,n=e.length,r=0,s=Math.min(o,n);s>r&&t[r]===e[r];)++r;return r!==s&&(o=t[r],n=e[r]),n>o?-1:o>n?1:0},i.isEncoding=function(t){switch(String(t).toLowerCase()){case\"hex\":case\"utf8\":case\"utf-8\":case\"ascii\":case\"binary\":case\"base64\":case\"raw\":case\"ucs2\":case\"ucs-2\":case\"utf16le\":case\"utf-16le\":return!0;default:return!1}},i.concat=function(t,e){if(!K(t))throw new TypeError(\"list argument must be an Array of Buffers.\");if(0===t.length)return new i(0);var o;if(void 0===e)for(e=0,o=0;o<t.length;o++)e+=t[o].length;var n=new i(e),r=0;for(o=0;o<t.length;o++){var s=t[o];s.copy(n,r),r+=s.length}return n},i.byteLength=j,i.prototype.length=void 0,i.prototype.parent=void 0,i.prototype.toString=function(){var t=0|this.length;return 0===t?\"\":0===arguments.length?b(this,0,t):v.apply(this,arguments)},i.prototype.equals=function(t){if(!i.isBuffer(t))throw new TypeError(\"Argument must be a Buffer\");return this===t?!0:0===i.compare(this,t)},i.prototype.inspect=function(){var t=\"\",e=o.INSPECT_MAX_BYTES;return this.length>0&&(t=this.toString(\"hex\",0,e).match(/.{2}/g).join(\" \"),this.length>e&&(t+=\" ... \")),\"<Buffer \"+t+\">\"},i.prototype.compare=function(t){if(!i.isBuffer(t))throw new TypeError(\"Argument must be a Buffer\");return this===t?0:i.compare(this,t)},i.prototype.indexOf=function(t,e){function o(t,e,o){for(var n=-1,r=0;o+r<t.length;r++)if(t[o+r]===e[-1===n?0:r-n]){if(-1===n&&(n=r),r-n+1===e.length)return o+n}else n=-1;return-1}if(e>2147483647?e=2147483647:-2147483648>e&&(e=-2147483648),e>>=0,0===this.length)return-1;if(e>=this.length)return-1;if(0>e&&(e=Math.max(this.length+e,0)),\"string\"==typeof t)return 0===t.length?-1:String.prototype.indexOf.call(this,t,e);if(i.isBuffer(t))return o(this,t,e);if(\"number\"==typeof t)return i.TYPED_ARRAY_SUPPORT&&\"function\"===Uint8Array.prototype.indexOf?Uint8Array.prototype.indexOf.call(this,t,e):o(this,[t],e);throw new TypeError(\"val must be string, number or Buffer\")},i.prototype.get=function(t){return console.log(\".get() is deprecated. Access using array indexes instead.\"),this.readUInt8(t)},i.prototype.set=function(t,e){return console.log(\".set() is deprecated. Access using array indexes instead.\"),this.writeUInt8(t,e)},i.prototype.write=function(t,e,o,n){if(void 0===e)n=\"utf8\",o=this.length,e=0;else if(void 0===o&&\"string\"==typeof e)n=e,o=this.length,e=0;else if(isFinite(e))e=0|e,isFinite(o)?(o=0|o,void 0===n&&(n=\"utf8\")):(n=o,o=void 0);else{var r=n;n=e,e=0|o,o=r}var i=this.length-e;if((void 0===o||o>i)&&(o=i),t.length>0&&(0>o||0>e)||e>this.length)throw new RangeError(\"attempt to write outside buffer bounds\");n||(n=\"utf8\");for(var s=!1;;)switch(n){case\"hex\":return x(this,t,e,o);case\"utf8\":case\"utf-8\":return E(this,t,e,o);case\"ascii\":return I(this,t,e,o);case\"binary\":return S(this,t,e,o);case\"base64\":return L(this,t,e,o);case\"ucs2\":case\"ucs-2\":case\"utf16le\":case\"utf-16le\":return C(this,t,e,o);default:if(s)throw new TypeError(\"Unknown encoding: \"+n);n=(\"\"+n).toLowerCase(),s=!0}},i.prototype.toJSON=function(){return{type:\"Buffer\",data:Array.prototype.slice.call(this._arr||this,0)}};var $=4096;i.prototype.slice=function(t,e){var o=this.length;t=~~t,e=void 0===e?o:~~e,0>t?(t+=o,0>t&&(t=0)):t>o&&(t=o),0>e?(e+=o,0>e&&(e=0)):e>o&&(e=o),t>e&&(e=t);var n;if(i.TYPED_ARRAY_SUPPORT)n=i._augment(this.subarray(t,e));else{var r=e-t;n=new i(r,void 0);for(var s=0;r>s;s++)n[s]=this[s+t]}return n.length&&(n.parent=this.parent||this),n},i.prototype.readUIntLE=function(t,e,o){t=0|t,e=0|e,o||A(t,e,this.length);for(var n=this[t],r=1,i=0;++i<e&&(r*=256);)n+=this[t+i]*r;return n},i.prototype.readUIntBE=function(t,e,o){t=0|t,e=0|e,o||A(t,e,this.length);for(var n=this[t+--e],r=1;e>0&&(r*=256);)n+=this[t+--e]*r;return n},i.prototype.readUInt8=function(t,e){return e||A(t,1,this.length),this[t]},i.prototype.readUInt16LE=function(t,e){return e||A(t,2,this.length),this[t]|this[t+1]<<8},i.prototype.readUInt16BE=function(t,e){return e||A(t,2,this.length),this[t]<<8|this[t+1]},i.prototype.readUInt32LE=function(t,e){return e||A(t,4,this.length),(this[t]|this[t+1]<<8|this[t+2]<<16)+16777216*this[t+3]},i.prototype.readUInt32BE=function(t,e){return e||A(t,4,this.length),16777216*this[t]+(this[t+1]<<16|this[t+2]<<8|this[t+3])},i.prototype.readIntLE=function(t,e,o){t=0|t,e=0|e,o||A(t,e,this.length);for(var n=this[t],r=1,i=0;++i<e&&(r*=256);)n+=this[t+i]*r;return r*=128,n>=r&&(n-=Math.pow(2,8*e)),n},i.prototype.readIntBE=function(t,e,o){t=0|t,e=0|e,o||A(t,e,this.length);for(var n=e,r=1,i=this[t+--n];n>0&&(r*=256);)i+=this[t+--n]*r;return r*=128,i>=r&&(i-=Math.pow(2,8*e)),i},i.prototype.readInt8=function(t,e){return e||A(t,1,this.length),128&this[t]?-1*(255-this[t]+1):this[t]},i.prototype.readInt16LE=function(t,e){e||A(t,2,this.length);var o=this[t]|this[t+1]<<8;return 32768&o?4294901760|o:o},i.prototype.readInt16BE=function(t,e){e||A(t,2,this.length);var o=this[t+1]|this[t]<<8;return 32768&o?4294901760|o:o},i.prototype.readInt32LE=function(t,e){return e||A(t,4,this.length),this[t]|this[t+1]<<8|this[t+2]<<16|this[t+3]<<24},i.prototype.readInt32BE=function(t,e){return e||A(t,4,this.length),this[t]<<24|this[t+1]<<16|this[t+2]<<8|this[t+3]},i.prototype.readFloatLE=function(t,e){return e||A(t,4,this.length),Q.read(this,t,!0,23,4)},i.prototype.readFloatBE=function(t,e){return e||A(t,4,this.length),Q.read(this,t,!1,23,4)},i.prototype.readDoubleLE=function(t,e){return e||A(t,8,this.length),Q.read(this,t,!0,52,8)},i.prototype.readDoubleBE=function(t,e){return e||A(t,8,this.length),Q.read(this,t,!1,52,8)},i.prototype.writeUIntLE=function(t,e,o,n){t=+t,e=0|e,o=0|o,n||T(this,t,e,o,Math.pow(2,8*o),0);var r=1,i=0;for(this[e]=255&t;++i<o&&(r*=256);)this[e+i]=t/r&255;return e+o},i.prototype.writeUIntBE=function(t,e,o,n){t=+t,e=0|e,o=0|o,n||T(this,t,e,o,Math.pow(2,8*o),0);var r=o-1,i=1;for(this[e+r]=255&t;--r>=0&&(i*=256);)this[e+r]=t/i&255;return e+o},i.prototype.writeUInt8=function(t,e,o){return t=+t,e=0|e,o||T(this,t,e,1,255,0),i.TYPED_ARRAY_SUPPORT||(t=Math.floor(t)),this[e]=255&t,e+1},i.prototype.writeUInt16LE=function(t,e,o){return t=+t,e=0|e,o||T(this,t,e,2,65535,0),i.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8):D(this,t,e,!0),e+2},i.prototype.writeUInt16BE=function(t,e,o){return t=+t,e=0|e,o||T(this,t,e,2,65535,0),i.TYPED_ARRAY_SUPPORT?(this[e]=t>>>8,this[e+1]=255&t):D(this,t,e,!1),e+2},i.prototype.writeUInt32LE=function(t,e,o){return t=+t,e=0|e,o||T(this,t,e,4,4294967295,0),i.TYPED_ARRAY_SUPPORT?(this[e+3]=t>>>24,this[e+2]=t>>>16,this[e+1]=t>>>8,this[e]=255&t):G(this,t,e,!0),e+4},i.prototype.writeUInt32BE=function(t,e,o){return t=+t,e=0|e,o||T(this,t,e,4,4294967295,0),i.TYPED_ARRAY_SUPPORT?(this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t):G(this,t,e,!1),e+4},i.prototype.writeIntLE=function(t,e,o,n){if(t=+t,e=0|e,!n){var r=Math.pow(2,8*o-1);T(this,t,e,o,r-1,-r)}var i=0,s=1,a=0>t?1:0;for(this[e]=255&t;++i<o&&(s*=256);)this[e+i]=(t/s>>0)-a&255;return e+o},i.prototype.writeIntBE=function(t,e,o,n){if(t=+t,e=0|e,!n){var r=Math.pow(2,8*o-1);T(this,t,e,o,r-1,-r)}var i=o-1,s=1,a=0>t?1:0;for(this[e+i]=255&t;--i>=0&&(s*=256);)this[e+i]=(t/s>>0)-a&255;return e+o},i.prototype.writeInt8=function(t,e,o){return t=+t,e=0|e,o||T(this,t,e,1,127,-128),i.TYPED_ARRAY_SUPPORT||(t=Math.floor(t)),0>t&&(t=255+t+1),this[e]=255&t,e+1},i.prototype.writeInt16LE=function(t,e,o){return t=+t,e=0|e,o||T(this,t,e,2,32767,-32768),i.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8):D(this,t,e,!0),e+2},i.prototype.writeInt16BE=function(t,e,o){return t=+t,e=0|e,o||T(this,t,e,2,32767,-32768),i.TYPED_ARRAY_SUPPORT?(this[e]=t>>>8,this[e+1]=255&t):D(this,t,e,!1),e+2},i.prototype.writeInt32LE=function(t,e,o){return t=+t,e=0|e,o||T(this,t,e,4,2147483647,-2147483648),i.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8,this[e+2]=t>>>16,this[e+3]=t>>>24):G(this,t,e,!0),e+4},i.prototype.writeInt32BE=function(t,e,o){return t=+t,e=0|e,o||T(this,t,e,4,2147483647,-2147483648),0>t&&(t=4294967295+t+1),i.TYPED_ARRAY_SUPPORT?(this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t):G(this,t,e,!1),e+4},i.prototype.writeFloatLE=function(t,e,o){return B(this,t,e,!0,o)},i.prototype.writeFloatBE=function(t,e,o){return B(this,t,e,!1,o)},i.prototype.writeDoubleLE=function(t,e,o){return q(this,t,e,!0,o)},i.prototype.writeDoubleBE=function(t,e,o){return q(this,t,e,!1,o)},i.prototype.copy=function(t,e,o,n){if(o||(o=0),n||0===n||(n=this.length),e>=t.length&&(e=t.length),e||(e=0),n>0&&o>n&&(n=o),n===o)return 0;if(0===t.length||0===this.length)return 0;if(0>e)throw new RangeError(\"targetStart out of bounds\");if(0>o||o>=this.length)throw new RangeError(\"sourceStart out of bounds\");if(0>n)throw new RangeError(\"sourceEnd out of bounds\");n>this.length&&(n=this.length),t.length-e<n-o&&(n=t.length-e+o);var r,s=n-o;if(this===t&&e>o&&n>e)for(r=s-1;r>=0;r--)t[r+e]=this[r+o];else if(1e3>s||!i.TYPED_ARRAY_SUPPORT)for(r=0;s>r;r++)t[r+e]=this[r+o];else t._set(this.subarray(o,o+s),e);return s},i.prototype.fill=function(t,e,o){if(t||(t=0),e||(e=0),o||(o=this.length),e>o)throw new RangeError(\"end < start\");if(o!==e&&0!==this.length){if(0>e||e>=this.length)throw new RangeError(\"start out of bounds\");if(0>o||o>this.length)throw new RangeError(\"end out of bounds\");var n;if(\"number\"==typeof t)for(n=e;o>n;n++)this[n]=t;else{var r=U(t.toString()),i=r.length;for(n=e;o>n;n++)this[n]=r[n%i]}return this}},i.prototype.toArrayBuffer=function(){if(\"undefined\"!=typeof Uint8Array){if(i.TYPED_ARRAY_SUPPORT)return new i(this).buffer;for(var t=new Uint8Array(this.length),e=0,o=t.length;o>e;e+=1)t[e]=this[e];return t.buffer}throw new TypeError(\"Buffer.toArrayBuffer not supported in this browser\")};var Z=i.prototype;i._augment=function(t){return t.constructor=i,t._isBuffer=!0,t._set=t.set,t.get=Z.get,t.set=Z.set,t.write=Z.write,t.toString=Z.toString,t.toLocaleString=Z.toString,t.toJSON=Z.toJSON,t.equals=Z.equals,t.compare=Z.compare,t.indexOf=Z.indexOf,t.copy=Z.copy,t.slice=Z.slice,t.readUIntLE=Z.readUIntLE,t.readUIntBE=Z.readUIntBE,t.readUInt8=Z.readUInt8,t.readUInt16LE=Z.readUInt16LE,t.readUInt16BE=Z.readUInt16BE,t.readUInt32LE=Z.readUInt32LE,t.readUInt32BE=Z.readUInt32BE,t.readIntLE=Z.readIntLE,t.readIntBE=Z.readIntBE,t.readInt8=Z.readInt8,t.readInt16LE=Z.readInt16LE,t.readInt16BE=Z.readInt16BE,t.readInt32LE=Z.readInt32LE,t.readInt32BE=Z.readInt32BE,t.readFloatLE=Z.readFloatLE,t.readFloatBE=Z.readFloatBE,t.readDoubleLE=Z.readDoubleLE,t.readDoubleBE=Z.readDoubleBE,t.writeUInt8=Z.writeUInt8,t.writeUIntLE=Z.writeUIntLE,t.writeUIntBE=Z.writeUIntBE,t.writeUInt16LE=Z.writeUInt16LE,t.writeUInt16BE=Z.writeUInt16BE,t.writeUInt32LE=Z.writeUInt32LE,t.writeUInt32BE=Z.writeUInt32BE,t.writeIntLE=Z.writeIntLE,t.writeIntBE=Z.writeIntBE,t.writeInt8=Z.writeInt8,t.writeInt16LE=Z.writeInt16LE,t.writeInt16BE=Z.writeInt16BE,t.writeInt32LE=Z.writeInt32LE,t.writeInt32BE=Z.writeInt32BE,t.writeFloatLE=Z.writeFloatLE,t.writeFloatBE=Z.writeFloatBE,t.writeDoubleLE=Z.writeDoubleLE,t.writeDoubleBE=Z.writeDoubleBE,t.fill=Z.fill,t.inspect=Z.inspect,t.toArrayBuffer=Z.toArrayBuffer,t};var tt=/[^+\\/0-9A-Za-z-_]/g}).call(this,\"undefined\"!=typeof global?global:\"undefined\"!=typeof self?self:\"undefined\"!=typeof window?window:{})},{\"base64-js\":5,ieee754:6,\"is-array\":7}],5:[function(t,e,o){var n=\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";!function(t){\"use strict\";function e(t){var e=t.charCodeAt(0);return e===s||e===g?62:e===a||e===h?63:p>e?-1:p+10>e?e-p+26+26:l+26>e?e-l:u+26>e?e-u+26:void 0}function o(t){function o(t){u[g++]=t}var n,r,s,a,p,u;if(t.length%4>0)throw new Error(\"Invalid string. Length must be a multiple of 4\");var l=t.length;p=\"=\"===t.charAt(l-2)?2:\"=\"===t.charAt(l-1)?1:0,u=new i(3*t.length/4-p),s=p>0?t.length-4:t.length;var g=0;for(n=0,r=0;s>n;n+=4,r+=3)a=e(t.charAt(n))<<18|e(t.charAt(n+1))<<12|e(t.charAt(n+2))<<6|e(t.charAt(n+3)),o((16711680&a)>>16),o((65280&a)>>8),o(255&a);return 2===p?(a=e(t.charAt(n))<<2|e(t.charAt(n+1))>>4,o(255&a)):1===p&&(a=e(t.charAt(n))<<10|e(t.charAt(n+1))<<4|e(t.charAt(n+2))>>2,o(a>>8&255),o(255&a)),u}function r(t){function e(t){return n.charAt(t)}function o(t){return e(t>>18&63)+e(t>>12&63)+e(t>>6&63)+e(63&t)}var r,i,s,a=t.length%3,p=\"\";for(r=0,s=t.length-a;s>r;r+=3)i=(t[r]<<16)+(t[r+1]<<8)+t[r+2],p+=o(i);switch(a){case 1:i=t[t.length-1],p+=e(i>>2),p+=e(i<<4&63),p+=\"==\";break;case 2:i=(t[t.length-2]<<8)+t[t.length-1],p+=e(i>>10),p+=e(i>>4&63),p+=e(i<<2&63),p+=\"=\"}return p}var i=\"undefined\"!=typeof Uint8Array?Uint8Array:Array,s=\"+\".charCodeAt(0),a=\"/\".charCodeAt(0),p=\"0\".charCodeAt(0),u=\"a\".charCodeAt(0),l=\"A\".charCodeAt(0),g=\"-\".charCodeAt(0),h=\"_\".charCodeAt(0);t.toByteArray=o,t.fromByteArray=r}(\"undefined\"==typeof o?this.base64js={}:o)},{}],6:[function(t,e,o){o.read=function(t,e,o,n,r){var i,s,a=8*r-n-1,p=(1<<a)-1,u=p>>1,l=-7,g=o?r-1:0,h=o?-1:1,c=t[e+g];for(g+=h,i=c&(1<<-l)-1,c>>=-l,l+=a;l>0;i=256*i+t[e+g],g+=h,l-=8);for(s=i&(1<<-l)-1,i>>=-l,l+=n;l>0;s=256*s+t[e+g],g+=h,l-=8);if(0===i)i=1-u;else{if(i===p)return s?NaN:(c?-1:1)*(1/0);s+=Math.pow(2,n),i-=u}return(c?-1:1)*s*Math.pow(2,i-n)},o.write=function(t,e,o,n,r,i){var s,a,p,u=8*i-r-1,l=(1<<u)-1,g=l>>1,h=23===r?Math.pow(2,-24)-Math.pow(2,-77):0,c=n?0:i-1,d=n?1:-1,f=0>e||0===e&&0>1/e?1:0;for(e=Math.abs(e),isNaN(e)||e===1/0?(a=isNaN(e)?1:0,s=l):(s=Math.floor(Math.log(e)/Math.LN2),e*(p=Math.pow(2,-s))<1&&(s--,p*=2),e+=s+g>=1?h/p:h*Math.pow(2,1-g),e*p>=2&&(s++,p/=2),s+g>=l?(a=0,s=l):s+g>=1?(a=(e*p-1)*Math.pow(2,r),s+=g):(a=e*Math.pow(2,g-1)*Math.pow(2,r),s=0));r>=8;t[o+c]=255&a,c+=d,a/=256,r-=8);for(s=s<<r|a,u+=r;u>0;t[o+c]=255&s,c+=d,s/=256,u-=8);t[o+c-d]|=128*f}},{}],7:[function(t,e,o){var n=Array.isArray,r=Object.prototype.toString;e.exports=n||function(t){return!!t&&\"[object Array]\"==r.call(t)}},{}],8:[function(t,e,o){!function(t){var e=function(){var e=t.documentMode;return\"onhashchange\"in t&&(void 0===e||e>7)}();L.Hash=function(t){this.onHashChange=L.Util.bind(this.onHashChange,this),t&&this.init(t)},L.Hash.parseHash=function(t){0===t.indexOf(\"#\")&&(t=t.substr(1));var e=t.split(\"/\");if(3==e.length){var o=parseInt(e[0],10),n=parseFloat(e[1]),r=parseFloat(e[2]);return isNaN(o)||isNaN(n)||isNaN(r)?!1:{center:new L.LatLng(n,r),zoom:o}}return!1},L.Hash.formatHash=function(t){var e=t.getCenter(),o=t.getZoom(),n=Math.max(0,Math.ceil(Math.log(o)/Math.LN2));return\"#\"+[o,e.lat.toFixed(n),e.lng.toFixed(n)].join(\"/\")},L.Hash.prototype={map:null,lastHash:null,parseHash:L.Hash.parseHash,formatHash:L.Hash.formatHash,init:function(t){this.map=t,this.lastHash=null,this.onHashChange(),this.isListening||this.startListening()},removeFrom:function(t){this.changeTimeout&&clearTimeout(this.changeTimeout),this.isListening&&this.stopListening(),this.map=null},onMapMove:function(){if(this.movingMap||!this.map._loaded)return!1;var t=this.formatHash(this.map);this.lastHash!=t&&(location.replace(t),this.lastHash=t)},movingMap:!1,update:function(){var t=location.hash;if(t!==this.lastHash){var e=this.parseHash(t);e?(this.movingMap=!0,this.map.setView(e.center,e.zoom),this.movingMap=!1):this.onMapMove(this.map)}},changeDefer:100,changeTimeout:null,onHashChange:function(){if(!this.changeTimeout){var t=this;this.changeTimeout=setTimeout(function(){t.update(),t.changeTimeout=null},this.changeDefer)}},isListening:!1,hashChangeInterval:null,startListening:function(){this.map.on(\"moveend\",this.onMapMove,this),e?L.DomEvent.addListener(t,\"hashchange\",this.onHashChange):(clearInterval(this.hashChangeInterval),this.hashChangeInterval=setInterval(this.onHashChange,50)),this.isListening=!0},stopListening:function(){this.map.off(\"moveend\",this.onMapMove,this),e?L.DomEvent.removeListener(t,\"hashchange\",this.onHashChange):clearInterval(this.hashChangeInterval),this.isListening=!1}},L.hash=function(t){return new L.Hash(t)},L.Map.prototype.addHash=function(){this._hash=L.hash(this)},L.Map.prototype.removeHash=function(){this._hash.removeFrom()}}(window)},{}],9:[function(t,e,o){function n(t){for(var e=[],o={},n=0;n<t.length;n++)void 0==o[L.stamp(t[n].layer)]&&(e.push(t[n]),o[L.stamp(t[n].layer)]=!0);return e}function r(t,e){for(var o=[],n=0;n<t.length;n++)o.push({lon:t[n][0],lat:t[n][1],layer:e});return o}function i(t){var e=0,o=0,n=0,r=[];if(\"object\"==typeof t[0]&&\"object\"==typeof t[0][0]&&\"object\"==typeof t[0][0][0]){for(;e<t.length;e++)for(;o<t[e].length;o++)for(;n<t[e][o].length;n++)r.push(t[e][o][n]);return r}if(\"object\"==typeof t[0]&&\"object\"==typeof t[0][0]){for(;e<t.length;e++)for(;o<t[e].length;o++)r.push(t[e][o]);return r}return\"object\"==typeof t[0]?t:[t]}var s=t(\"sphere-knn\");e.exports=function(t){\"use strict\";function e(t){o=o.concat(r(i(t.feature.geometry.coordinates),t))}if(!(t instanceof L.GeoJSON))throw new Error(\"must be L.GeoJSON\");var o=[];t.eachLayer(e);var a=s(o);return a.nearest=function(t,e,o){return t instanceof L.LatLng&&(t=[t.lng,t.lat]),a(t[1],t[0],e,o)},a.nearestLayer=function(t,e,o){return t instanceof L.LatLng&&(t=[t.lng,t.lat]),n(a(t[1],t[0],e,o))},a}},{\"sphere-knn\":10}],10:[function(t,e,o){var n=t(\"./lib/spherekd\");e.exports=function(t){var e=n.build(t);return function(t,o,r,i){return n.lookup(t,o,e,r,i)}}},{\"./lib/spherekd\":13}],11:[function(t,e,o){function n(t,e){return t-e}o.search=function(t,e,o){o||(o=n);for(var r,i,s=0,a=e.length-1;a>=s;)if(r=s+a>>>1,i=o(e[r],t),0>i)s=r+1;else{if(!(i>0))return r;a=r-1}return-(s+1)},o.insert=function(t,e,n){var r=o.search(t,e,n);0>r&&(r=-(r+1)),e.splice(r,0,t)}},{}],12:[function(t,e,o){function n(t,e,o,n){this.axis=t,this.split=e,this.left=o,this.right=n}function r(t,e){for(var o,n=Math.min(t.length,e.length),r=0;n--;)o=e[n]-t[n],r+=o*o;return r}function i(t,e){return t.dist-e.dist}function s(t,e){if(0===t.length)return null;if(1===t.length)return t[0];var o=e%t[0].position.length;t.sort(function(t,e){return t.position[o]-e.position[o]});var r=Math.floor(.5*t.length);return++e,new n(o,t[r].position[o],s(t.slice(0,r),e),s(t.slice(r),e))}function a(t){return s(t,0)}function p(t,e,o,s){s>0||(s=Number.POSITIVE_INFINITY);var a=[];if(null===e||0>=o)return a;for(var p,l,g=[e,0];g.length;)if(p=g.pop(),e=g.pop(),!(p>s||a.length===o&&a[a.length-1].dist<p*p)){for(;e instanceof n;)t[e.axis]<e.split?(g.push(e.right,e.split-t[e.axis]),e=e.left):(g.push(e.left,t[e.axis]-e.split),e=e.right);p=r(t,e.position),s*s>=p&&u.insert({object:e,dist:p},a,i),a.length>o&&a.pop()}for(l=a.length;l--;)a[l]=a[l].object;return a}var u=t(\"./binary\");o.build=a,o.lookup=p},{\"./binary\":11}],13:[function(t,e,o){function n(t,e){t*=p,e*=p;var o=Math.cos(t);return[o*Math.cos(e),Math.sin(t),o*Math.sin(e)]}function r(t){var e,o;t.hasOwnProperty(\"lat\")?e=t.lat:t.hasOwnProperty(\"latitude\")?e=t.latitude:t.hasOwnProperty(\"location\")&&Array.isArray(t.location)&&2===t.location.length&&(e=t.location[0]),t.hasOwnProperty(\"lon\")?o=t.lon:t.hasOwnProperty(\"longitude\")?o=t.longitude:t.hasOwnProperty(\"lng\")?o=t.lng:t.hasOwnProperty(\"long\")?o=t[\"long\"]:t.hasOwnProperty(\"location\")&&Array.isArray(t.location)&&2===t.location.length&&(o=t.location[1]),this.object=t,this.position=n(e,o)}function i(t){for(var e=t.length,o=new Array(e);e--;)o[e]=new r(t[e]);return a.build(o)}function s(t,e,o,r,i){for(var s=a.lookup(n(t,e),o,r,i>0?2*Math.sin(i*u):void 0),p=s.length;p--;)s[p]=s[p].object;return s}var a=t(\"./kd\"),p=Math.PI/180,u=1/12742018;o.build=i,o.lookup=s},{\"./kd\":12}],14:[function(t,e,o){!function(t,o){\"object\"==typeof e&&e.exports?e.exports=o():\"function\"==typeof define&&define.amd?define(o):t.Spinner=o()}(this,function(){\"use strict\";function t(t,e){var o,n=document.createElement(t||\"div\");for(o in e)n[o]=e[o];return n}function e(t){for(var e=1,o=arguments.length;o>e;e++)t.appendChild(arguments[e]);return t}function o(t,e,o,n){var r=[\"opacity\",e,~~(100*t),o,n].join(\"-\"),i=.01+o/n*100,s=Math.max(1-(1-t)/e*(100-i),t),a=u.substring(0,u.indexOf(\"Animation\")).toLowerCase(),p=a&&\"-\"+a+\"-\"||\"\";return h[r]||(l.insertRule(\"@\"+p+\"keyframes \"+r+\"{0%{opacity:\"+s+\"}\"+i+\"%{opacity:\"+t+\"}\"+(i+.01)+\"%{opacity:1}\"+(i+e)%100+\"%{opacity:\"+t+\"}100%{opacity:\"+s+\"}}\",l.cssRules.length),h[r]=1),r}function n(t,e){var o,n,r=t.style;if(e=e.charAt(0).toUpperCase()+e.slice(1),void 0!==r[e])return e;for(n=0;n<g.length;n++)if(o=g[n]+e,void 0!==r[o])return o}function r(t,e){for(var o in e)t.style[n(t,o)||o]=e[o];return t}function i(t){for(var e=1;e<arguments.length;e++){var o=arguments[e];for(var n in o)void 0===t[n]&&(t[n]=o[n])}return t}function s(t,e){return\"string\"==typeof t?t:t[e%t.length]}function a(t){this.opts=i(t||{},a.defaults,c)}function p(){function o(e,o){return t(\"<\"+e+' xmlns=\"urn:schemas-microsoft.com:vml\" class=\"spin-vml\">',o)}l.addRule(\".spin-vml\",\"behavior:url(#default#VML)\"),a.prototype.lines=function(t,n){function i(){return r(o(\"group\",{coordsize:l+\" \"+l,coordorigin:-u+\" \"+-u}),{width:l,height:l})}function a(t,a,p){e(h,e(r(i(),{rotation:360/n.lines*t+\"deg\",left:~~a}),e(r(o(\"roundrect\",{arcsize:n.corners}),{width:u,height:n.scale*n.width,left:n.scale*n.radius,top:-n.scale*n.width>>1,filter:p}),o(\"fill\",{color:s(n.color,t),opacity:n.opacity}),o(\"stroke\",{opacity:0}))))}var p,u=n.scale*(n.length+n.width),l=2*n.scale*u,g=-(n.width+n.length)*n.scale*2+\"px\",h=r(i(),{position:\"absolute\",top:g,left:g});if(n.shadow)for(p=1;p<=n.lines;p++)a(p,-2,\"progid:DXImageTransform.Microsoft.Blur(pixelradius=2,makeshadow=1,shadowopacity=.3)\");for(p=1;p<=n.lines;p++)a(p);return e(t,h)},a.prototype.opacity=function(t,e,o,n){var r=t.firstChild;n=n.shadow&&n.lines||0,r&&e+n<r.childNodes.length&&(r=r.childNodes[e+n],r=r&&r.firstChild,r=r&&r.firstChild,r&&(r.opacity=o))}}var u,l,g=[\"webkit\",\"Moz\",\"ms\",\"O\"],h={},c={lines:12,length:7,width:5,radius:10,scale:1,corners:1,color:\"#000\",opacity:.25,rotate:0,direction:1,speed:1,trail:100,fps:20,zIndex:2e9,className:\"spinner\",top:\"50%\",left:\"50%\",shadow:!1,hwaccel:!1,position:\"absolute\"};if(a.defaults={},i(a.prototype,{spin:function(e){this.stop();var o=this,n=o.opts,i=o.el=t(null,{className:n.className});if(r(i,{position:n.position,width:0,zIndex:n.zIndex,left:n.left,top:n.top}),e&&e.insertBefore(i,e.firstChild||null),i.setAttribute(\"role\",\"progressbar\"),o.lines(i,o.opts),!u){var s,a=0,p=(n.lines-1)*(1-n.direction)/2,l=n.fps,g=l/n.speed,h=(1-n.opacity)/(g*n.trail/100),c=g/n.lines;!function d(){a++;for(var t=0;t<n.lines;t++)s=Math.max(1-(a+(n.lines-t)*c)%g*h,n.opacity),o.opacity(i,t*n.direction+p,s,n);o.timeout=o.el&&setTimeout(d,~~(1e3/l))}()}return o},stop:function(){var t=this.el;return t&&(clearTimeout(this.timeout),t.parentNode&&t.parentNode.removeChild(t),this.el=void 0),this},lines:function(n,i){function a(e,o){return r(t(),{position:\"absolute\",width:i.scale*(i.length+i.width)+\"px\",height:i.scale*i.width+\"px\",background:e,boxShadow:o,transformOrigin:\"left\",transform:\"rotate(\"+~~(360/i.lines*l+i.rotate)+\"deg) translate(\"+i.scale*i.radius+\"px,0)\",borderRadius:(i.corners*i.scale*i.width>>1)+\"px\"})}for(var p,l=0,g=(i.lines-1)*(1-i.direction)/2;l<i.lines;l++)p=r(t(),{position:\"absolute\",top:1+~(i.scale*i.width/2)+\"px\",transform:i.hwaccel?\"translate3d(0,0,0)\":\"\",opacity:i.opacity,animation:u&&o(i.opacity,i.trail,g+l*i.direction,i.lines)+\" \"+1/i.speed+\"s linear infinite\"}),i.shadow&&e(p,r(a(\"#000\",\"0 0 4px #000\"),{top:\"2px\"})),e(n,e(p,a(s(i.color,l),\"0 0 1px rgba(0,0,0,.1)\")));return n},opacity:function(t,e,o){e<t.childNodes.length&&(t.childNodes[e].style.opacity=o)}}),\"undefined\"!=typeof document){l=function(){var o=t(\"style\",{type:\"text/css\"});return e(document.getElementsByTagName(\"head\")[0],o),o.sheet||o.styleSheet}();var d=r(t(\"group\"),{behavior:\"url(#default#VML)\"});!n(d,\"transform\")&&d.adj?p():u=n(d,\"animation\")}return a})},{}],15:[function(t,e,o){e.exports={isolines:t(\"turf-isolines\"),merge:t(\"turf-merge\"),convex:t(\"turf-convex\"),within:t(\"turf-within\"),concave:t(\"turf-concave\"),\ncount:t(\"turf-count\"),erase:t(\"turf-erase\"),variance:t(\"turf-variance\"),deviation:t(\"turf-deviation\"),median:t(\"turf-median\"),min:t(\"turf-min\"),max:t(\"turf-max\"),aggregate:t(\"turf-aggregate\"),flip:t(\"turf-flip\"),simplify:t(\"turf-simplify\"),sum:t(\"turf-sum\"),average:t(\"turf-average\"),bezier:t(\"turf-bezier\"),tag:t(\"turf-tag\"),size:t(\"turf-size\"),sample:t(\"turf-sample\"),jenks:t(\"turf-jenks\"),quantile:t(\"turf-quantile\"),envelope:t(\"turf-envelope\"),square:t(\"turf-square\"),midpoint:t(\"turf-midpoint\"),buffer:t(\"turf-buffer\"),center:t(\"turf-center\"),centroid:t(\"turf-centroid\"),combine:t(\"turf-combine\"),distance:t(\"turf-distance\"),explode:t(\"turf-explode\"),extent:t(\"turf-extent\"),bboxPolygon:t(\"turf-bbox-polygon\"),featurecollection:t(\"turf-featurecollection\"),filter:t(\"turf-filter\"),inside:t(\"turf-inside\"),intersect:t(\"turf-intersect\"),linestring:t(\"turf-linestring\"),nearest:t(\"turf-nearest\"),planepoint:t(\"turf-planepoint\"),point:t(\"turf-point\"),polygon:t(\"turf-polygon\"),random:t(\"turf-random\"),reclass:t(\"turf-reclass\"),remove:t(\"turf-remove\"),tin:t(\"turf-tin\"),union:t(\"turf-union\"),bearing:t(\"turf-bearing\"),destination:t(\"turf-destination\"),kinks:t(\"turf-kinks\"),pointOnSurface:t(\"turf-point-on-surface\"),area:t(\"turf-area\"),along:t(\"turf-along\"),lineDistance:t(\"turf-line-distance\"),lineSlice:t(\"turf-line-slice\"),pointOnLine:t(\"turf-point-on-line\"),pointGrid:t(\"turf-point-grid\"),squareGrid:t(\"turf-square-grid\"),triangleGrid:t(\"turf-triangle-grid\"),hexGrid:t(\"turf-hex-grid\")}},{\"turf-aggregate\":16,\"turf-along\":17,\"turf-area\":18,\"turf-average\":21,\"turf-bbox-polygon\":22,\"turf-bearing\":23,\"turf-bezier\":24,\"turf-buffer\":26,\"turf-center\":31,\"turf-centroid\":32,\"turf-combine\":34,\"turf-concave\":35,\"turf-convex\":36,\"turf-count\":66,\"turf-destination\":67,\"turf-deviation\":68,\"turf-distance\":70,\"turf-envelope\":72,\"turf-erase\":73,\"turf-explode\":78,\"turf-extent\":80,\"turf-featurecollection\":82,\"turf-filter\":83,\"turf-flip\":84,\"turf-hex-grid\":85,\"turf-inside\":86,\"turf-intersect\":87,\"turf-isolines\":93,\"turf-jenks\":95,\"turf-kinks\":97,\"turf-line-distance\":98,\"turf-line-slice\":99,\"turf-linestring\":100,\"turf-max\":101,\"turf-median\":102,\"turf-merge\":103,\"turf-midpoint\":105,\"turf-min\":106,\"turf-nearest\":107,\"turf-planepoint\":108,\"turf-point\":112,\"turf-point-grid\":109,\"turf-point-on-line\":110,\"turf-point-on-surface\":111,\"turf-polygon\":113,\"turf-quantile\":114,\"turf-random\":116,\"turf-reclass\":118,\"turf-remove\":119,\"turf-sample\":120,\"turf-simplify\":121,\"turf-size\":123,\"turf-square\":125,\"turf-square-grid\":124,\"turf-sum\":126,\"turf-tag\":127,\"turf-tin\":128,\"turf-triangle-grid\":129,\"turf-union\":130,\"turf-variance\":135,\"turf-within\":137}],16:[function(t,e,o){function n(t){return\"average\"===t||\"sum\"===t||\"median\"===t||\"min\"===t||\"max\"===t||\"deviation\"===t||\"variance\"===t||\"count\"===t}var r=t(\"turf-average\"),i=t(\"turf-sum\"),s=t(\"turf-median\"),a=t(\"turf-min\"),p=t(\"turf-max\"),u=t(\"turf-deviation\"),l=t(\"turf-variance\"),g=t(\"turf-count\"),h={};h.average=r,h.sum=i,h.median=s,h.min=a,h.max=p,h.deviation=u,h.variance=l,h.count=g,e.exports=function(t,e,o){for(var r=0,i=o.length;i>r;r++){var s=o[r],a=s.aggregation;if(!n(a))throw new Error('\"'+a+'\" is not a recognized aggregation operation.');t=\"count\"===a?h[a](t,e,s.outField):h[a](t,e,s.inField,s.outField)}return t}},{\"turf-average\":21,\"turf-count\":66,\"turf-deviation\":68,\"turf-max\":101,\"turf-median\":102,\"turf-min\":106,\"turf-sum\":126,\"turf-variance\":135}],17:[function(t,e,o){var n=t(\"turf-distance\"),r=t(\"turf-point\"),i=t(\"turf-bearing\"),s=t(\"turf-destination\");e.exports=function(t,e,o){var a;if(\"Feature\"===t.type)a=t.geometry.coordinates;else{if(\"LineString\"!==t.type)throw new Error(\"input must be a LineString Feature or Geometry\");a=t.geometry.coordinates}for(var p=0,u=0;u<a.length&&!(e>=p&&u===a.length-1);u++){if(p>=e){var l=e-p;if(l){var g=i(r(a[u]),r(a[u-1]))-180,h=s(r(a[u]),l,g,o);return h}return r(a[u])}p+=n(r(a[u]),r(a[u+1]),o)}return r(a[a.length-1])}},{\"turf-bearing\":23,\"turf-destination\":67,\"turf-distance\":70,\"turf-point\":112}],18:[function(t,e,o){var n=t(\"geojson-area\").geometry;e.exports=function(t){if(\"FeatureCollection\"===t.type){for(var e=0,o=0;e<t.features.length;e++)t.features[e].geometry&&(o+=n(t.features[e].geometry));return o}return n(\"Feature\"===t.type?t.geometry:t)}},{\"geojson-area\":19}],19:[function(t,e,o){function n(t){var e,o=0;switch(t.type){case\"Polygon\":return r(t.coordinates);case\"MultiPolygon\":for(e=0;e<t.coordinates.length;e++)o+=r(t.coordinates[e]);return o;case\"Point\":case\"MultiPoint\":case\"LineString\":case\"MultiLineString\":return 0;case\"GeometryCollection\":for(e=0;e<t.geometries.length;e++)o+=n(t.geometries[e]);return o}}function r(t){var e=0;if(t&&t.length>0){e+=Math.abs(i(t[0]));for(var o=1;o<t.length;o++)e-=Math.abs(i(t[o]))}return e}function i(t){var e=0;if(t.length>2){for(var o,n,r=0;r<t.length-1;r++)o=t[r],n=t[r+1],e+=s(n[0]-o[0])*(2+Math.sin(s(o[1]))+Math.sin(s(n[1])));e=e*a.RADIUS*a.RADIUS/2}return e}function s(t){return t*Math.PI/180}var a=t(\"wgs84\");e.exports.geometry=n,e.exports.ring=i},{wgs84:20}],20:[function(t,e,o){e.exports.RADIUS=6378137,e.exports.FLATTENING=1/298.257223563,e.exports.POLAR_RADIUS=6356752.3142},{}],21:[function(t,e,o){function n(t){for(var e=0,o=0;o<t.length;o++)e+=t[o];return e/t.length}var r=t(\"turf-inside\");e.exports=function(t,e,o,i,s){return t.features.forEach(function(t){t.properties||(t.properties={});var s=[];e.features.forEach(function(e){r(e,t)&&s.push(e.properties[o])}),t.properties[i]=n(s)}),t}},{\"turf-inside\":86}],22:[function(t,e,o){var n=t(\"turf-polygon\");e.exports=function(t){var e=[t[0],t[1]],o=[t[0],t[3]],r=[t[2],t[3]],i=[t[2],t[1]],s=n([[e,i,r,o,e]]);return s}},{\"turf-polygon\":113}],23:[function(t,e,o){function n(t){return t*Math.PI/180}function r(t){return 180*t/Math.PI}e.exports=function(t,e){var o=t.geometry.coordinates,i=e.geometry.coordinates,s=n(o[0]),a=n(i[0]),p=n(o[1]),u=n(i[1]),l=Math.sin(a-s)*Math.cos(u),g=Math.cos(p)*Math.sin(u)-Math.sin(p)*Math.cos(u)*Math.cos(a-s),h=r(Math.atan2(l,g));return h}},{}],24:[function(t,e,o){var n=t(\"turf-linestring\"),r=t(\"./spline.js\");e.exports=function(t,e,o){var i=n([]);i.properties=t.properties;for(var s=t.geometry.coordinates.map(function(t){return{x:t[0],y:t[1]}}),a=new r({points:s,duration:e,sharpness:o}),p=0;p<a.duration;p+=10){var u=a.pos(p);Math.floor(p/100)%2===0&&i.geometry.coordinates.push([u.x,u.y])}return i}},{\"./spline.js\":25,\"turf-linestring\":100}],25:[function(t,e,o){var n=function(t){this.points=t.points||[],this.duration=t.duration||1e4,this.sharpness=t.sharpness||.85,this.centers=[],this.controls=[],this.stepLength=t.stepLength||60,this.length=this.points.length,this.delay=0;for(var e=0;e<this.length;e++)this.points[e].z=this.points[e].z||0;for(var e=0;e<this.length-1;e++){var o=this.points[e],n=this.points[e+1];this.centers.push({x:(o.x+n.x)/2,y:(o.y+n.y)/2,z:(o.z+n.z)/2})}this.controls.push([this.points[0],this.points[0]]);for(var e=0;e<this.centers.length-1;e++){var o=this.centers[e],n=this.centers[e+1],r=this.points[e+1].x-(this.centers[e].x+this.centers[e+1].x)/2,i=this.points[e+1].y-(this.centers[e].y+this.centers[e+1].y)/2,s=this.points[e+1].z-(this.centers[e].y+this.centers[e+1].z)/2;this.controls.push([{x:(1-this.sharpness)*this.points[e+1].x+this.sharpness*(this.centers[e].x+r),y:(1-this.sharpness)*this.points[e+1].y+this.sharpness*(this.centers[e].y+i),z:(1-this.sharpness)*this.points[e+1].z+this.sharpness*(this.centers[e].z+s)},{x:(1-this.sharpness)*this.points[e+1].x+this.sharpness*(this.centers[e+1].x+r),y:(1-this.sharpness)*this.points[e+1].y+this.sharpness*(this.centers[e+1].y+i),z:(1-this.sharpness)*this.points[e+1].z+this.sharpness*(this.centers[e+1].z+s)}])}return this.controls.push([this.points[this.length-1],this.points[this.length-1]]),this.steps=this.cacheSteps(this.stepLength),this};n.prototype.cacheSteps=function(t){var e=[],o=this.pos(0);e.push(0);for(var n=0;n<this.duration;n+=10){var r=this.pos(n),i=Math.sqrt((r.x-o.x)*(r.x-o.x)+(r.y-o.y)*(r.y-o.y)+(r.z-o.z)*(r.z-o.z));i>t&&(e.push(n),o=r)}return e},n.prototype.vector=function(t){var e=this.pos(t+10),o=this.pos(t-10);return{angle:180*Math.atan2(e.y-o.y,e.x-o.x)/3.14,speed:Math.sqrt((o.x-e.x)*(o.x-e.x)+(o.y-e.y)*(o.y-e.y)+(o.z-e.z)*(o.z-e.z))}},n.prototype.pos=function(t){function e(t,e,o,n,r){var i=function(t){var e=t*t,o=e*t;return[o,3*e*(1-t),3*t*(1-t)*(1-t),(1-t)*(1-t)*(1-t)]},s=i(t),a={x:r.x*s[0]+n.x*s[1]+o.x*s[2]+e.x*s[3],y:r.y*s[0]+n.y*s[1]+o.y*s[2]+e.y*s[3],z:r.z*s[0]+n.z*s[1]+o.z*s[2]+e.z*s[3]};return a}var o=t-this.delay;0>o&&(o=0),o>this.duration&&(o=this.duration-1);var n=o/this.duration;if(n>=1)return this.points[this.length-1];var r=Math.floor((this.points.length-1)*n),i=(this.length-1)*n-r;return e(i,this.points[r],this.controls[r][1],this.controls[r+1][0],this.points[r+1])},e.exports=n},{}],26:[function(t,e,o){var n=t(\"turf-featurecollection\"),r=t(\"turf-polygon\"),i=t(\"turf-combine\"),s=t(\"jsts\");e.exports=function(t,e,o){var n;switch(o){case\"miles\":e/=69.047;break;case\"feet\":e/=364568;break;case\"kilometers\":e/=111.12;break;case\"meters\":e/=111120;break;case\"degrees\":}if(\"FeatureCollection\"===t.type){var r=i(t);return r.properties={},n=a(r,e)}return n=a(t,e)};var a=function(t,e){var o=new s.io.GeoJSONReader,i=o.read(JSON.stringify(t.geometry)),a=i.buffer(e),p=new s.io.GeoJSONParser;return a=p.write(a),\"MultiPolygon\"===a.type?(a={type:\"Feature\",geometry:a,properties:{}},a=n([a])):a=n([r(a.coordinates)]),a}},{jsts:27,\"turf-combine\":34,\"turf-featurecollection\":82,\"turf-polygon\":113}],27:[function(t,e,o){t(\"javascript.util\");var n=t(\"./lib/jsts\");e.exports=n},{\"./lib/jsts\":28,\"javascript.util\":30}],28:[function(t,e,o){jsts={version:\"0.15.0\",algorithm:{distance:{},locate:{}},error:{},geom:{util:{}},geomgraph:{index:{}},index:{bintree:{},chain:{},kdtree:{},quadtree:{},strtree:{}},io:{},noding:{snapround:{}},operation:{buffer:{},distance:{},overlay:{snap:{}},polygonize:{},predicate:{},relate:{},union:{},valid:{}},planargraph:{},simplify:{},triangulate:{quadedge:{}},util:{}},\"function\"!=typeof String.prototype.trim&&(String.prototype.trim=function(){return this.replace(/^\\s+|\\s+$/g,\"\")}),jsts.abstractFunc=function(){throw new jsts.error.AbstractMethodInvocationError},jsts.error={},jsts.error.IllegalArgumentError=function(t){this.name=\"IllegalArgumentError\",this.message=t},jsts.error.IllegalArgumentError.prototype=new Error,jsts.error.TopologyError=function(t,e){this.name=\"TopologyError\",this.message=e?t+\" [ \"+e+\" ]\":t},jsts.error.TopologyError.prototype=new Error,jsts.error.AbstractMethodInvocationError=function(){this.name=\"AbstractMethodInvocationError\",this.message=\"Abstract method called, should be implemented in subclass.\"},jsts.error.AbstractMethodInvocationError.prototype=new Error,jsts.error.NotImplementedError=function(){this.name=\"NotImplementedError\",this.message=\"This method has not yet been implemented.\"},jsts.error.NotImplementedError.prototype=new Error,jsts.error.NotRepresentableError=function(t){this.name=\"NotRepresentableError\",this.message=t},jsts.error.NotRepresentableError.prototype=new Error,jsts.error.LocateFailureError=function(t){this.name=\"LocateFailureError\",this.message=t},jsts.error.LocateFailureError.prototype=new Error,\"undefined\"!=typeof e&&(e.exports=jsts),jsts.geom.GeometryFilter=function(){},jsts.geom.GeometryFilter.prototype.filter=function(t){throw new jsts.error.AbstractMethodInvocationError},jsts.geom.util.PolygonExtracter=function(t){this.comps=t},jsts.geom.util.PolygonExtracter.prototype=new jsts.geom.GeometryFilter,jsts.geom.util.PolygonExtracter.prototype.comps=null,jsts.geom.util.PolygonExtracter.getPolygons=function(t,e){return void 0===e&&(e=[]),t instanceof jsts.geom.Polygon?e.push(t):t instanceof jsts.geom.GeometryCollection&&t.apply(new jsts.geom.util.PolygonExtracter(e)),e},jsts.geom.util.PolygonExtracter.prototype.filter=function(t){t instanceof jsts.geom.Polygon&&this.comps.push(t)},jsts.io.WKTParser=function(t){this.geometryFactory=t||new jsts.geom.GeometryFactory,this.regExes={typeStr:/^\\s*(\\w+)\\s*\\(\\s*(.*)\\s*\\)\\s*$/,emptyTypeStr:/^\\s*(\\w+)\\s*EMPTY\\s*$/,spaces:/\\s+/,parenComma:/\\)\\s*,\\s*\\(/,doubleParenComma:/\\)\\s*\\)\\s*,\\s*\\(\\s*\\(/,trimParens:/^\\s*\\(?(.*?)\\)?\\s*$/}},jsts.io.WKTParser.prototype.read=function(t){var e,o,n;t=t.replace(/[\\n\\r]/g,\" \");var r=this.regExes.typeStr.exec(t);if(-1!==t.search(\"EMPTY\")&&(r=this.regExes.emptyTypeStr.exec(t),r[2]=void 0),r&&(o=r[1].toLowerCase(),n=r[2],this.parse[o]&&(e=this.parse[o].apply(this,[n]))),void 0===e)throw new Error(\"Could not parse WKT \"+t);return e},jsts.io.WKTParser.prototype.write=function(t){return this.extractGeometry(t)},jsts.io.WKTParser.prototype.extractGeometry=function(t){var e=t.CLASS_NAME.split(\".\")[2].toLowerCase();if(!this.extract[e])return null;var o,n=e.toUpperCase();return o=t.isEmpty()?n+\" EMPTY\":n+\"(\"+this.extract[e].apply(this,[t])+\")\"},jsts.io.WKTParser.prototype.extract={coordinate:function(t){return t.x+\" \"+t.y},point:function(t){return t.coordinate.x+\" \"+t.coordinate.y},multipoint:function(t){for(var e=[],o=0,n=t.geometries.length;n>o;++o)e.push(\"(\"+this.extract.point.apply(this,[t.geometries[o]])+\")\");return e.join(\",\")},linestring:function(t){for(var e=[],o=0,n=t.points.length;n>o;++o)e.push(this.extract.coordinate.apply(this,[t.points[o]]));return e.join(\",\")},multilinestring:function(t){for(var e=[],o=0,n=t.geometries.length;n>o;++o)e.push(\"(\"+this.extract.linestring.apply(this,[t.geometries[o]])+\")\");return e.join(\",\")},polygon:function(t){var e=[];e.push(\"(\"+this.extract.linestring.apply(this,[t.shell])+\")\");for(var o=0,n=t.holes.length;n>o;++o)e.push(\"(\"+this.extract.linestring.apply(this,[t.holes[o]])+\")\");return e.join(\",\")},multipolygon:function(t){for(var e=[],o=0,n=t.geometries.length;n>o;++o)e.push(\"(\"+this.extract.polygon.apply(this,[t.geometries[o]])+\")\");return e.join(\",\")},geometrycollection:function(t){for(var e=[],o=0,n=t.geometries.length;n>o;++o)e.push(this.extractGeometry.apply(this,[t.geometries[o]]));return e.join(\",\")}},jsts.io.WKTParser.prototype.parse={point:function(t){if(void 0===t)return this.geometryFactory.createPoint(null);var e=t.trim().split(this.regExes.spaces);return this.geometryFactory.createPoint(new jsts.geom.Coordinate(e[0],e[1]))},multipoint:function(t){if(void 0===t)return this.geometryFactory.createMultiPoint(null);for(var e,o=t.trim().split(\",\"),n=[],r=0,i=o.length;i>r;++r)e=o[r].replace(this.regExes.trimParens,\"$1\"),n.push(this.parse.point.apply(this,[e]));return this.geometryFactory.createMultiPoint(n)},linestring:function(t){if(void 0===t)return this.geometryFactory.createLineString(null);for(var e,o=t.trim().split(\",\"),n=[],r=0,i=o.length;i>r;++r)e=o[r].trim().split(this.regExes.spaces),n.push(new jsts.geom.Coordinate(e[0],e[1]));return this.geometryFactory.createLineString(n)},linearring:function(t){if(void 0===t)return this.geometryFactory.createLinearRing(null);for(var e,o=t.trim().split(\",\"),n=[],r=0,i=o.length;i>r;++r)e=o[r].trim().split(this.regExes.spaces),n.push(new jsts.geom.Coordinate(e[0],e[1]));return this.geometryFactory.createLinearRing(n)},multilinestring:function(t){if(void 0===t)return this.geometryFactory.createMultiLineString(null);for(var e,o=t.trim().split(this.regExes.parenComma),n=[],r=0,i=o.length;i>r;++r)e=o[r].replace(this.regExes.trimParens,\"$1\"),n.push(this.parse.linestring.apply(this,[e]));return this.geometryFactory.createMultiLineString(n)},polygon:function(t){if(void 0===t)return this.geometryFactory.createPolygon(null);for(var e,o,n,r,i=t.trim().split(this.regExes.parenComma),s=[],a=0,p=i.length;p>a;++a)e=i[a].replace(this.regExes.trimParens,\"$1\"),o=this.parse.linestring.apply(this,[e]),n=this.geometryFactory.createLinearRing(o.points),0===a?r=n:s.push(n);return this.geometryFactory.createPolygon(r,s)},multipolygon:function(t){if(void 0===t)return this.geometryFactory.createMultiPolygon(null);for(var e,o=t.trim().split(this.regExes.doubleParenComma),n=[],r=0,i=o.length;i>r;++r)e=o[r].replace(this.regExes.trimParens,\"$1\"),n.push(this.parse.polygon.apply(this,[e]));return this.geometryFactory.createMultiPolygon(n)},geometrycollection:function(t){if(void 0===t)return this.geometryFactory.createGeometryCollection(null);t=t.replace(/,\\s*([A-Za-z])/g,\"|$1\");for(var e=t.trim().split(\"|\"),o=[],n=0,r=e.length;r>n;++n)o.push(jsts.io.WKTParser.prototype.read.apply(this,[e[n]]));return this.geometryFactory.createGeometryCollection(o)}},jsts.index.ItemVisitor=function(){},jsts.index.ItemVisitor.prototype.visitItem=function(){throw new jsts.error.AbstractMethodInvocationError},jsts.algorithm.CGAlgorithms=function(){},jsts.algorithm.CGAlgorithms.CLOCKWISE=-1,jsts.algorithm.CGAlgorithms.RIGHT=jsts.algorithm.CGAlgorithms.CLOCKWISE,jsts.algorithm.CGAlgorithms.COUNTERCLOCKWISE=1,jsts.algorithm.CGAlgorithms.LEFT=jsts.algorithm.CGAlgorithms.COUNTERCLOCKWISE,jsts.algorithm.CGAlgorithms.COLLINEAR=0,jsts.algorithm.CGAlgorithms.STRAIGHT=jsts.algorithm.CGAlgorithms.COLLINEAR,jsts.algorithm.CGAlgorithms.orientationIndex=function(t,e,o){var n,r,i,s;return n=e.x-t.x,r=e.y-t.y,i=o.x-e.x,s=o.y-e.y,jsts.algorithm.RobustDeterminant.signOfDet2x2(n,r,i,s)},jsts.algorithm.CGAlgorithms.isPointInRing=function(t,e){return jsts.algorithm.CGAlgorithms.locatePointInRing(t,e)!==jsts.geom.Location.EXTERIOR},jsts.algorithm.CGAlgorithms.locatePointInRing=function(t,e){return jsts.algorithm.RayCrossingCounter.locatePointInRing(t,e)},jsts.algorithm.CGAlgorithms.isOnLine=function(t,e){var o,n,r,i,s;for(o=new jsts.algorithm.RobustLineIntersector,n=1,r=e.length;r>n;n++)if(i=e[n-1],s=e[n],o.computeIntersection(t,i,s),o.hasIntersection())return!0;return!1},jsts.algorithm.CGAlgorithms.isCCW=function(t){var e,o,n,r,i,s,a,p,u,l,g;if(e=t.length-1,3>e)throw new jsts.IllegalArgumentError(\"Ring has fewer than 3 points, so orientation cannot be determined\");for(o=t[0],n=0,u=1;e>=u;u++)r=t[u],r.y>o.y&&(o=r,n=u);i=n;do i-=1,0>i&&(i=e);while(t[i].equals2D(o)&&i!==n);s=n;do s=(s+1)%e;while(t[s].equals2D(o)&&s!==n);return a=t[i],p=t[s],a.equals2D(o)||p.equals2D(o)||a.equals2D(p)?!1:(l=jsts.algorithm.CGAlgorithms.computeOrientation(a,o,p),g=!1,g=0===l?a.x>p.x:l>0)},jsts.algorithm.CGAlgorithms.computeOrientation=function(t,e,o){return jsts.algorithm.CGAlgorithms.orientationIndex(t,e,o)},jsts.algorithm.CGAlgorithms.distancePointLine=function(t,e,o){if(e instanceof jsts.geom.Coordinate||jsts.algorithm.CGAlgorithms.distancePointLine2.apply(this,arguments),e.x===o.x&&e.y===o.y)return t.distance(e);var n,r;return n=((t.x-e.x)*(o.x-e.x)+(t.y-e.y)*(o.y-e.y))/((o.x-e.x)*(o.x-e.x)+(o.y-e.y)*(o.y-e.y)),0>=n?t.distance(e):n>=1?t.distance(o):(r=((e.y-t.y)*(o.x-e.x)-(e.x-t.x)*(o.y-e.y))/((o.x-e.x)*(o.x-e.x)+(o.y-e.y)*(o.y-e.y)),Math.abs(r)*Math.sqrt((o.x-e.x)*(o.x-e.x)+(o.y-e.y)*(o.y-e.y)))},jsts.algorithm.CGAlgorithms.distancePointLinePerpendicular=function(t,e,o){var n=((e.y-t.y)*(o.x-e.x)-(e.x-t.x)*(o.y-e.y))/((o.x-e.x)*(o.x-e.x)+(o.y-e.y)*(o.y-e.y));return Math.abs(n)*Math.sqrt((o.x-e.x)*(o.x-e.x)+(o.y-e.y)*(o.y-e.y))},jsts.algorithm.CGAlgorithms.distancePointLine2=function(t,e){var o,n,r,i;if(0===e.length)throw new jsts.error.IllegalArgumentError(\"Line array must contain at least one vertex\");for(o=t.distance(e[0]),n=0,r=e.length-1;r>n;n++)i=jsts.algorithm.CGAlgorithms.distancePointLine(t,e[n],e[n+1]),o>i&&(o=i);return o},jsts.algorithm.CGAlgorithms.distanceLineLine=function(t,e,o,n){if(t.equals(e))return jsts.algorithm.CGAlgorithms.distancePointLine(t,o,n);if(o.equals(n))return jsts.algorithm.CGAlgorithms.distancePointLine(n,t,e);var r,i,s,a,p,u;return r=(t.y-o.y)*(n.x-o.x)-(t.x-o.x)*(n.y-o.y),i=(e.x-t.x)*(n.y-o.y)-(e.y-t.y)*(n.x-o.x),s=(t.y-o.y)*(e.x-t.x)-(t.x-o.x)*(e.y-t.y),a=(e.x-t.x)*(n.y-o.y)-(e.y-t.y)*(n.x-o.x),0===i||0===a?Math.min(jsts.algorithm.CGAlgorithms.distancePointLine(t,o,n),Math.min(jsts.algorithm.CGAlgorithms.distancePointLine(e,o,n),Math.min(jsts.algorithm.CGAlgorithms.distancePointLine(o,t,e),jsts.algorithm.CGAlgorithms.distancePointLine(n,t,e)))):(p=s/a,u=r/i,0>u||u>1||0>p||p>1?Math.min(jsts.algorithm.CGAlgorithms.distancePointLine(t,o,n),Math.min(jsts.algorithm.CGAlgorithms.distancePointLine(e,o,n),Math.min(jsts.algorithm.CGAlgorithms.distancePointLine(o,t,e),jsts.algorithm.CGAlgorithms.distancePointLine(n,t,e)))):0)},jsts.algorithm.CGAlgorithms.signedArea=function(t){if(t.length<3)return 0;var e,o,n,r,i,s,a;for(e=0,o=0,n=t.length-1;n>o;o++)r=t[o].x,i=t[o].y,s=t[o+1].x,a=t[o+1].y,e+=(r+s)*(a-i);return-e/2},jsts.algorithm.CGAlgorithms.signedArea=function(t){var e,o,n,r,i,s,a,p;if(e=t.length,3>e)return 0;for(o=0,n=t[0],r=n.x,i=n.y,s=1;e>s;s++)n=t[s],a=n.x,p=n.y,o+=(r+a)*(p-i),r=a,i=p;return-o/2},jsts.algorithm.CGAlgorithms.computeLength=function(t){var e,o,n,r,i,s,a,p,u,l,g=t.length;if(1>=g)return 0;for(e=0,p=t[0],o=p.x,n=p.y,u=1,l=g,u;g>u;u++)p=t[u],r=p.x,i=p.y,s=r-o,a=i-n,e+=Math.sqrt(s*s+a*a),o=r,n=i;return e},jsts.algorithm.CGAlgorithms.length=function(){},jsts.algorithm.Angle=function(){},jsts.algorithm.Angle.PI_TIMES_2=2*Math.PI,jsts.algorithm.Angle.PI_OVER_2=Math.PI/2,jsts.algorithm.Angle.PI_OVER_4=Math.PI/4,jsts.algorithm.Angle.COUNTERCLOCKWISE=jsts.algorithm.CGAlgorithms.COUNTERCLOCKWISE,jsts.algorithm.Angle.CLOCKWISE=jsts.algorithm.CGAlgorithms.CLOCKWISE,jsts.algorithm.Angle.NONE=jsts.algorithm.CGAlgorithms.COLLINEAR,jsts.algorithm.Angle.toDegrees=function(t){return 180*t/Math.PI},jsts.algorithm.Angle.toRadians=function(t){return t*Math.PI/180},jsts.algorithm.Angle.angle=function(){return 1===arguments.length?jsts.algorithm.Angle.angleFromOrigo(arguments[0]):jsts.algorithm.Angle.angleBetweenCoords(arguments[0],arguments[1])},jsts.algorithm.Angle.angleBetweenCoords=function(t,e){var o,n;return o=e.x-t.x,n=e.y-t.y,Math.atan2(n,o)},jsts.algorithm.Angle.angleFromOrigo=function(t){return Math.atan2(t.y,t.x)},jsts.algorithm.Angle.isAcute=function(t,e,o){var n,r,i,s,a;return n=t.x-e.x,r=t.y-e.y,i=o.x-e.x,s=o.y-e.y,a=n*i+r*s,a>0},jsts.algorithm.Angle.isObtuse=function(t,e,o){var n,r,i,s,a;return n=t.x-e.x,r=t.y-e.y,i=o.x-e.x,s=o.y-e.y,a=n*i+r*s,0>a},jsts.algorithm.Angle.angleBetween=function(t,e,o){var n,r;return n=jsts.algorithm.Angle.angle(e,t),r=jsts.algorithm.Angle.angle(e,o),jsts.algorithm.Angle.diff(n,r)},jsts.algorithm.Angle.angleBetweenOriented=function(t,e,o){var n,r,i;return n=jsts.algorithm.Angle.angle(e,t),r=jsts.algorithm.Angle.angle(e,o),i=r-n,i<=-Math.PI?i+jsts.algorithm.Angle.PI_TIMES_2:i>Math.PI?i-jsts.algorithm.Angle.PI_TIMES_2:i},jsts.algorithm.Angle.interiorAngle=function(t,e,o){var n,r;return n=jsts.algorithm.Angle.angle(e,t),r=jsts.algorithm.Angle.angle(e,o),Math.abs(r-n)},jsts.algorithm.Angle.getTurn=function(t,e){var o=Math.sin(e-t);return o>0?jsts.algorithm.Angle.COUNTERCLOCKWISE:0>o?jsts.algorithm.Angle.CLOCKWISE:jsts.algorithm.Angle.NONE},jsts.algorithm.Angle.normalize=function(t){for(;t>Math.PI;)t-=jsts.algorithm.Angle.PI_TIMES_2;for(;t<=-Math.PI;)t+=jsts.algorithm.Angle.PI_TIMES_2;return t},jsts.algorithm.Angle.normalizePositive=function(t){if(0>t){for(;0>t;)t+=jsts.algorithm.Angle.PI_TIMES_2;t>=jsts.algorithm.Angle.PI_TIMES_2&&(t=0)}else{for(;t>=jsts.algorithm.Angle.PI_TIMES_2;)t-=jsts.algorithm.Angle.PI_TIMES_2;0>t&&(t=0)}return t},jsts.algorithm.Angle.diff=function(t,e){var o;return o=e>t?e-t:t-e,o>Math.PI&&(o=2*Math.PI-o),o},jsts.geom.GeometryComponentFilter=function(){},jsts.geom.GeometryComponentFilter.prototype.filter=function(t){throw new jsts.error.AbstractMethodInvocationError},jsts.geom.util.LinearComponentExtracter=function(t,e){this.lines=t,this.isForcedToLineString=e},jsts.geom.util.LinearComponentExtracter.prototype=new jsts.geom.GeometryComponentFilter,jsts.geom.util.LinearComponentExtracter.prototype.lines=null,jsts.geom.util.LinearComponentExtracter.prototype.isForcedToLineString=!1,jsts.geom.util.LinearComponentExtracter.getLines=function(t,e){if(1==arguments.length)return jsts.geom.util.LinearComponentExtracter.getLines5.apply(this,arguments);if(2==arguments.length&&\"boolean\"==typeof e)return jsts.geom.util.LinearComponentExtracter.getLines6.apply(this,arguments);if(2==arguments.length&&t instanceof jsts.geom.Geometry)return jsts.geom.util.LinearComponentExtracter.getLines3.apply(this,arguments);if(3==arguments.length&&t instanceof jsts.geom.Geometry)return jsts.geom.util.LinearComponentExtracter.getLines4.apply(this,arguments);if(3==arguments.length)return jsts.geom.util.LinearComponentExtracter.getLines2.apply(this,arguments);for(var o=0;o<t.length;o++){var n=t[o];jsts.geom.util.LinearComponentExtracter.getLines3(n,e)}return e},jsts.geom.util.LinearComponentExtracter.getLines2=function(t,e,o){for(var n=0;n<t.length;n++){var r=t[n];jsts.geom.util.LinearComponentExtracter.getLines4(r,e,o)}return e},jsts.geom.util.LinearComponentExtracter.getLines3=function(t,e){return t instanceof LineString?e.add(t):t.apply(new jsts.geom.util.LinearComponentExtracter(e)),e},jsts.geom.util.LinearComponentExtracter.getLines4=function(t,e,o){return t.apply(new jsts.geom.util.LinearComponentExtracter(e,o)),e},jsts.geom.util.LinearComponentExtracter.getLines5=function(t){return jsts.geom.util.LinearComponentExtracter.getLines6(t,!1)},jsts.geom.util.LinearComponentExtracter.getLines6=function(t,e){var o=[];return t.apply(new jsts.geom.util.LinearComponentExtracter(o,e)),o},jsts.geom.util.LinearComponentExtracter.prototype.setForceToLineString=function(t){this.isForcedToLineString=t},jsts.geom.util.LinearComponentExtracter.prototype.filter=function(t){if(this.isForcedToLineString&&t instanceof jsts.geom.LinearRing){var e=t.getFactory().createLineString(t.getCoordinateSequence());return void this.lines.push(e)}(t instanceof jsts.geom.LineString||t instanceof jsts.geom.LinearRing)&&this.lines.push(t)},jsts.geom.Location=function(){},jsts.geom.Location.INTERIOR=0,jsts.geom.Location.BOUNDARY=1,jsts.geom.Location.EXTERIOR=2,jsts.geom.Location.NONE=-1,jsts.geom.Location.toLocationSymbol=function(t){switch(t){case jsts.geom.Location.EXTERIOR:return\"e\";case jsts.geom.Location.BOUNDARY:return\"b\";case jsts.geom.Location.INTERIOR:return\"i\";case jsts.geom.Location.NONE:return\"-\"}throw new jsts.IllegalArgumentError(\"Unknown location value: \"+t)},function(){jsts.io.GeoJSONReader=function(t){this.geometryFactory=t||new jsts.geom.GeometryFactory,this.precisionModel=this.geometryFactory.getPrecisionModel(),this.parser=new jsts.io.GeoJSONParser(this.geometryFactory)},jsts.io.GeoJSONReader.prototype.read=function(t){var e=this.parser.read(t);return this.precisionModel.getType()===jsts.geom.PrecisionModel.FIXED&&this.reducePrecision(e),e},jsts.io.GeoJSONReader.prototype.reducePrecision=function(t){var e,o;if(t.coordinate)this.precisionModel.makePrecise(t.coordinate);else if(t.points)for(e=0,o=t.points.length;o>e;e++)this.precisionModel.makePrecise(t.points[e]);else if(t.geometries)for(e=0,o=t.geometries.length;o>e;e++)this.reducePrecision(t.geometries[e])}}(),jsts.geom.Geometry=function(t){this.factory=t},jsts.geom.Geometry.prototype.envelope=null,jsts.geom.Geometry.prototype.factory=null,jsts.geom.Geometry.prototype.getGeometryType=function(){return\"Geometry\"},jsts.geom.Geometry.hasNonEmptyElements=function(t){var e;for(e=0;e<t.length;e++)if(!t[e].isEmpty())return!0;return!1},jsts.geom.Geometry.hasNullElements=function(t){var e;for(e=0;e<t.length;e++)if(null===t[e])return!0;return!1},jsts.geom.Geometry.prototype.getFactory=function(){return(null===this.factory||void 0===this.factory)&&(this.factory=new jsts.geom.GeometryFactory),this.factory},jsts.geom.Geometry.prototype.getNumGeometries=function(){return 1},jsts.geom.Geometry.prototype.getGeometryN=function(t){return this},jsts.geom.Geometry.prototype.getPrecisionModel=function(){return this.getFactory().getPrecisionModel()},jsts.geom.Geometry.prototype.getCoordinate=function(){throw new jsts.error.AbstractMethodInvocationError},jsts.geom.Geometry.prototype.getCoordinates=function(){throw new jsts.error.AbstractMethodInvocationError},jsts.geom.Geometry.prototype.getNumPoints=function(){throw new jsts.error.AbstractMethodInvocationError},jsts.geom.Geometry.prototype.isSimple=function(){this.checkNotGeometryCollection(this);var t=new jsts.operation.IsSimpleOp(this);return t.isSimple()},jsts.geom.Geometry.prototype.isValid=function(){var t=new jsts.operation.valid.IsValidOp(this);return t.isValid()},jsts.geom.Geometry.prototype.isEmpty=function(){throw new jsts.error.AbstractMethodInvocationError},jsts.geom.Geometry.prototype.distance=function(t){return jsts.operation.distance.DistanceOp.distance(this,t)},jsts.geom.Geometry.prototype.isWithinDistance=function(t,e){var o=this.getEnvelopeInternal().distance(t.getEnvelopeInternal());return o>e?!1:DistanceOp.isWithinDistance(this,t,e)},jsts.geom.Geometry.prototype.isRectangle=function(){return!1},jsts.geom.Geometry.prototype.getArea=function(){return 0},jsts.geom.Geometry.prototype.getLength=function(){return 0},jsts.geom.Geometry.prototype.getCentroid=function(){if(this.isEmpty())return null;var t,e=null,o=this.getDimension();return 0===o?(t=new jsts.algorithm.CentroidPoint,t.add(this),e=t.getCentroid()):1===o?(t=new jsts.algorithm.CentroidLine,t.add(this),e=t.getCentroid()):(t=new jsts.algorithm.CentroidArea,t.add(this),e=t.getCentroid()),this.createPointFromInternalCoord(e,this)},jsts.geom.Geometry.prototype.getInteriorPoint=function(){var t,e=null,o=this.getDimension();return 0===o?(t=new jsts.algorithm.InteriorPointPoint(this),e=t.getInteriorPoint()):1===o?(t=new jsts.algorithm.InteriorPointLine(this),e=t.getInteriorPoint()):(t=new jsts.algorithm.InteriorPointArea(this),e=t.getInteriorPoint()),this.createPointFromInternalCoord(e,this)},jsts.geom.Geometry.prototype.getDimension=function(){throw new jsts.error.AbstractMethodInvocationError},jsts.geom.Geometry.prototype.getBoundary=function(){throw new jsts.error.AbstractMethodInvocationError},jsts.geom.Geometry.prototype.getBoundaryDimension=function(){throw new jsts.error.AbstractMethodInvocationError},jsts.geom.Geometry.prototype.getEnvelope=function(){return this.getFactory().toGeometry(this.getEnvelopeInternal())},jsts.geom.Geometry.prototype.getEnvelopeInternal=function(){return null===this.envelope&&(this.envelope=this.computeEnvelopeInternal()),this.envelope},jsts.geom.Geometry.prototype.disjoint=function(t){return!this.intersects(t)},jsts.geom.Geometry.prototype.touches=function(t){return this.getEnvelopeInternal().intersects(t.getEnvelopeInternal())?this.relate(t).isTouches(this.getDimension(),t.getDimension()):!1},jsts.geom.Geometry.prototype.intersects=function(t){return this.getEnvelopeInternal().intersects(t.getEnvelopeInternal())?this.isRectangle()?jsts.operation.predicate.RectangleIntersects.intersects(this,t):t.isRectangle()?jsts.operation.predicate.RectangleIntersects.intersects(t,this):this.relate(t).isIntersects():!1},jsts.geom.Geometry.prototype.crosses=function(t){return this.getEnvelopeInternal().intersects(t.getEnvelopeInternal())?this.relate(t).isCrosses(this.getDimension(),t.getDimension()):!1},jsts.geom.Geometry.prototype.within=function(t){return t.contains(this)},jsts.geom.Geometry.prototype.contains=function(t){return this.getEnvelopeInternal().contains(t.getEnvelopeInternal())?this.isRectangle()?jsts.operation.predicate.RectangleContains.contains(this,t):this.relate(t).isContains():!1},jsts.geom.Geometry.prototype.overlaps=function(t){return this.getEnvelopeInternal().intersects(t.getEnvelopeInternal())?this.relate(t).isOverlaps(this.getDimension(),t.getDimension()):!1},jsts.geom.Geometry.prototype.covers=function(t){return this.getEnvelopeInternal().covers(t.getEnvelopeInternal())?this.isRectangle()?!0:this.relate(t).isCovers():!1},jsts.geom.Geometry.prototype.coveredBy=function(t){return t.covers(this)},jsts.geom.Geometry.prototype.relate=function(t,e){return 1===arguments.length?this.relate2.apply(this,arguments):this.relate2(t).matches(e)},jsts.geom.Geometry.prototype.relate2=function(t){return this.checkNotGeometryCollection(this),this.checkNotGeometryCollection(t),jsts.operation.relate.RelateOp.relate(this,t)},jsts.geom.Geometry.prototype.equalsTopo=function(t){return this.getEnvelopeInternal().equals(t.getEnvelopeInternal())?this.relate(t).isEquals(this.getDimension(),t.getDimension()):!1;\n},jsts.geom.Geometry.prototype.equals=function(t){return t instanceof jsts.geom.Geometry||t instanceof jsts.geom.LinearRing||t instanceof jsts.geom.Polygon||t instanceof jsts.geom.GeometryCollection||t instanceof jsts.geom.MultiPoint||t instanceof jsts.geom.MultiLineString||t instanceof jsts.geom.MultiPolygon?this.equalsExact(t):!1},jsts.geom.Geometry.prototype.buffer=function(t,e,o){var n=new jsts.operation.buffer.BufferParameters(e,o);return jsts.operation.buffer.BufferOp.bufferOp2(this,t,n)},jsts.geom.Geometry.prototype.convexHull=function(){return new jsts.algorithm.ConvexHull(this).getConvexHull()},jsts.geom.Geometry.prototype.intersection=function(t){if(this.isEmpty())return this.getFactory().createGeometryCollection(null);if(t.isEmpty())return this.getFactory().createGeometryCollection(null);if(this.isGeometryCollection(this));return this.checkNotGeometryCollection(this),this.checkNotGeometryCollection(t),jsts.operation.overlay.snap.SnapIfNeededOverlayOp.overlayOp(this,t,jsts.operation.overlay.OverlayOp.INTERSECTION)},jsts.geom.Geometry.prototype.union=function(t){return 0===arguments.length?jsts.operation.union.UnaryUnionOp.union(this):this.isEmpty()?t.clone():t.isEmpty()?this.clone():(this.checkNotGeometryCollection(this),this.checkNotGeometryCollection(t),jsts.operation.overlay.snap.SnapIfNeededOverlayOp.overlayOp(this,t,jsts.operation.overlay.OverlayOp.UNION))},jsts.geom.Geometry.prototype.difference=function(t){return this.isEmpty()?this.getFactory().createGeometryCollection(null):t.isEmpty()?this.clone():(this.checkNotGeometryCollection(this),this.checkNotGeometryCollection(t),jsts.operation.overlay.snap.SnapIfNeededOverlayOp.overlayOp(this,t,jsts.operation.overlay.OverlayOp.DIFFERENCE))},jsts.geom.Geometry.prototype.symDifference=function(t){return this.isEmpty()?t.clone():t.isEmpty()?this.clone():(this.checkNotGeometryCollection(this),this.checkNotGeometryCollection(t),jsts.operation.overlay.snap.SnapIfNeededOverlayOp.overlayOp(this,t,jsts.operation.overlay.OverlayOp.SYMDIFFERENCE))},jsts.geom.Geometry.prototype.equalsExact=function(t,e){throw new jsts.error.AbstractMethodInvocationError},jsts.geom.Geometry.prototype.equalsNorm=function(t){return null===t||void 0===t?!1:this.norm().equalsExact(t.norm())},jsts.geom.Geometry.prototype.apply=function(t){throw new jsts.error.AbstractMethodInvocationError},jsts.geom.Geometry.prototype.clone=function(){throw new jsts.error.AbstractMethodInvocationError},jsts.geom.Geometry.prototype.normalize=function(){throw new jsts.error.AbstractMethodInvocationError},jsts.geom.Geometry.prototype.norm=function(){var t=this.clone();return t.normalize(),t},jsts.geom.Geometry.prototype.compareTo=function(t){var e=t;return this.getClassSortIndex()!==e.getClassSortIndex()?this.getClassSortIndex()-e.getClassSortIndex():this.isEmpty()&&e.isEmpty()?0:this.isEmpty()?-1:e.isEmpty()?1:this.compareToSameClass(t)},jsts.geom.Geometry.prototype.isEquivalentClass=function(t){return this instanceof jsts.geom.Point&&t instanceof jsts.geom.Point?!0:this instanceof jsts.geom.LineString&&t instanceof jsts.geom.LineString|t instanceof jsts.geom.LinearRing?!0:this instanceof jsts.geom.LinearRing&&t instanceof jsts.geom.LineString|t instanceof jsts.geom.LinearRing?!0:this instanceof jsts.geom.Polygon&&t instanceof jsts.geom.Polygon?!0:this instanceof jsts.geom.MultiPoint&&t instanceof jsts.geom.MultiPoint?!0:this instanceof jsts.geom.MultiLineString&&t instanceof jsts.geom.MultiLineString?!0:this instanceof jsts.geom.MultiPolygon&&t instanceof jsts.geom.MultiPolygon?!0:this instanceof jsts.geom.GeometryCollection&&t instanceof jsts.geom.GeometryCollection?!0:!1},jsts.geom.Geometry.prototype.checkNotGeometryCollection=function(t){if(t.isGeometryCollectionBase())throw new jsts.error.IllegalArgumentError(\"This method does not support GeometryCollection\")},jsts.geom.Geometry.prototype.isGeometryCollection=function(){return this instanceof jsts.geom.GeometryCollection},jsts.geom.Geometry.prototype.isGeometryCollectionBase=function(){return\"jsts.geom.GeometryCollection\"===this.CLASS_NAME},jsts.geom.Geometry.prototype.computeEnvelopeInternal=function(){throw new jsts.error.AbstractMethodInvocationError},jsts.geom.Geometry.prototype.compareToSameClass=function(t){throw new jsts.error.AbstractMethodInvocationError},jsts.geom.Geometry.prototype.compare=function(t,e){for(var o=t.iterator(),n=e.iterator();o.hasNext()&&n.hasNext();){var r=o.next(),i=n.next(),s=r.compareTo(i);if(0!==s)return s}return o.hasNext()?1:n.hasNext()?-1:0},jsts.geom.Geometry.prototype.equal=function(t,e,o){return void 0===o||null===o||0===o?t.equals(e):t.distance(e)<=o},jsts.geom.Geometry.prototype.getClassSortIndex=function(){for(var t=[jsts.geom.Point,jsts.geom.MultiPoint,jsts.geom.LineString,jsts.geom.LinearRing,jsts.geom.MultiLineString,jsts.geom.Polygon,jsts.geom.MultiPolygon,jsts.geom.GeometryCollection],e=0;e<t.length;e++)if(this instanceof t[e])return e;return jsts.util.Assert.shouldNeverReachHere(\"Class not supported: \"+this),-1},jsts.geom.Geometry.prototype.toString=function(){return(new jsts.io.WKTWriter).write(this)},jsts.geom.Geometry.prototype.createPointFromInternalCoord=function(t,e){return e.getPrecisionModel().makePrecise(t),e.getFactory().createPoint(t)},function(){jsts.geom.Coordinate=function(t,e){\"number\"==typeof t?(this.x=t,this.y=e):t instanceof jsts.geom.Coordinate?(this.x=parseFloat(t.x),this.y=parseFloat(t.y)):void 0===t||null===t?(this.x=0,this.y=0):\"string\"==typeof t&&(this.x=parseFloat(t),this.y=parseFloat(e))},jsts.geom.Coordinate.prototype.setCoordinate=function(t){this.x=t.x,this.y=t.y},jsts.geom.Coordinate.prototype.clone=function(){return new jsts.geom.Coordinate(this.x,this.y)},jsts.geom.Coordinate.prototype.distance=function(t){var e=this.x-t.x,o=this.y-t.y;return Math.sqrt(e*e+o*o)},jsts.geom.Coordinate.prototype.equals2D=function(t){return this.x!==t.x?!1:this.y!==t.y?!1:!0},jsts.geom.Coordinate.prototype.equals=function(t){return!t instanceof jsts.geom.Coordinate||void 0===t?!1:this.equals2D(t)},jsts.geom.Coordinate.prototype.compareTo=function(t){return this.x<t.x?-1:this.x>t.x?1:this.y<t.y?-1:this.y>t.y?1:0},jsts.geom.Coordinate.prototype.toString=function(){return\"(\"+this.x+\", \"+this.y+\")\"}}(),jsts.geom.Envelope=function(){jsts.geom.Envelope.prototype.init.apply(this,arguments)},jsts.geom.Envelope.prototype.minx=null,jsts.geom.Envelope.prototype.maxx=null,jsts.geom.Envelope.prototype.miny=null,jsts.geom.Envelope.prototype.maxy=null,jsts.geom.Envelope.prototype.init=function(){\"number\"==typeof arguments[0]&&4===arguments.length?this.initFromValues(arguments[0],arguments[1],arguments[2],arguments[3]):arguments[0]instanceof jsts.geom.Coordinate&&1===arguments.length?this.initFromCoordinate(arguments[0]):arguments[0]instanceof jsts.geom.Coordinate&&2===arguments.length?this.initFromCoordinates(arguments[0],arguments[1]):arguments[0]instanceof jsts.geom.Envelope&&1===arguments.length?this.initFromEnvelope(arguments[0]):this.setToNull()},jsts.geom.Envelope.prototype.initFromValues=function(t,e,o,n){e>t?(this.minx=t,this.maxx=e):(this.minx=e,this.maxx=t),n>o?(this.miny=o,this.maxy=n):(this.miny=n,this.maxy=o)},jsts.geom.Envelope.prototype.initFromCoordinates=function(t,e){this.initFromValues(t.x,e.x,t.y,e.y)},jsts.geom.Envelope.prototype.initFromCoordinate=function(t){this.initFromValues(t.x,t.x,t.y,t.y)},jsts.geom.Envelope.prototype.initFromEnvelope=function(t){this.minx=t.minx,this.maxx=t.maxx,this.miny=t.miny,this.maxy=t.maxy},jsts.geom.Envelope.prototype.setToNull=function(){this.minx=0,this.maxx=-1,this.miny=0,this.maxy=-1},jsts.geom.Envelope.prototype.isNull=function(){return this.maxx<this.minx},jsts.geom.Envelope.prototype.getHeight=function(){return this.isNull()?0:this.maxy-this.miny},jsts.geom.Envelope.prototype.getWidth=function(){return this.isNull()?0:this.maxx-this.minx},jsts.geom.Envelope.prototype.getMinX=function(){return this.minx},jsts.geom.Envelope.prototype.getMaxX=function(){return this.maxx},jsts.geom.Envelope.prototype.getMinY=function(){return this.miny},jsts.geom.Envelope.prototype.getMaxY=function(){return this.maxy},jsts.geom.Envelope.prototype.getArea=function(){return this.getWidth()*this.getHeight()},jsts.geom.Envelope.prototype.expandToInclude=function(){arguments[0]instanceof jsts.geom.Coordinate?this.expandToIncludeCoordinate(arguments[0]):arguments[0]instanceof jsts.geom.Envelope?this.expandToIncludeEnvelope(arguments[0]):this.expandToIncludeValues(arguments[0],arguments[1])},jsts.geom.Envelope.prototype.expandToIncludeCoordinate=function(t){this.expandToIncludeValues(t.x,t.y)},jsts.geom.Envelope.prototype.expandToIncludeValues=function(t,e){this.isNull()?(this.minx=t,this.maxx=t,this.miny=e,this.maxy=e):(t<this.minx&&(this.minx=t),t>this.maxx&&(this.maxx=t),e<this.miny&&(this.miny=e),e>this.maxy&&(this.maxy=e))},jsts.geom.Envelope.prototype.expandToIncludeEnvelope=function(t){t.isNull()||(this.isNull()?(this.minx=t.getMinX(),this.maxx=t.getMaxX(),this.miny=t.getMinY(),this.maxy=t.getMaxY()):(t.minx<this.minx&&(this.minx=t.minx),t.maxx>this.maxx&&(this.maxx=t.maxx),t.miny<this.miny&&(this.miny=t.miny),t.maxy>this.maxy&&(this.maxy=t.maxy)))},jsts.geom.Envelope.prototype.expandBy=function(){1===arguments.length?this.expandByDistance(arguments[0]):this.expandByDistances(arguments[0],arguments[1])},jsts.geom.Envelope.prototype.expandByDistance=function(t){this.expandByDistances(t,t)},jsts.geom.Envelope.prototype.expandByDistances=function(t,e){this.isNull()||(this.minx-=t,this.maxx+=t,this.miny-=e,this.maxy+=e,(this.minx>this.maxx||this.miny>this.maxy)&&this.setToNull())},jsts.geom.Envelope.prototype.translate=function(t,e){this.isNull()||this.init(this.minx+t,this.maxx+t,this.miny+e,this.maxy+e)},jsts.geom.Envelope.prototype.centre=function(){return this.isNull()?null:new jsts.geom.Coordinate((this.minx+this.maxx)/2,(this.miny+this.maxy)/2)},jsts.geom.Envelope.prototype.intersection=function(t){if(this.isNull()||t.isNull()||!this.intersects(t))return new jsts.geom.Envelope;var e=this.minx>t.minx?this.minx:t.minx,o=this.miny>t.miny?this.miny:t.miny,n=this.maxx<t.maxx?this.maxx:t.maxx,r=this.maxy<t.maxy?this.maxy:t.maxy;return new jsts.geom.Envelope(e,n,o,r)},jsts.geom.Envelope.prototype.intersects=function(){return arguments[0]instanceof jsts.geom.Envelope?this.intersectsEnvelope(arguments[0]):arguments[0]instanceof jsts.geom.Coordinate?this.intersectsCoordinate(arguments[0]):this.intersectsValues(arguments[0],arguments[1])},jsts.geom.Envelope.prototype.intersectsEnvelope=function(t){if(this.isNull()||t.isNull())return!1;var e=!(t.minx>this.maxx||t.maxx<this.minx||t.miny>this.maxy||t.maxy<this.miny);return e},jsts.geom.Envelope.prototype.intersectsCoordinate=function(t){return this.intersectsValues(t.x,t.y)},jsts.geom.Envelope.prototype.intersectsValues=function(t,e){return this.isNull()?!1:!(t>this.maxx||t<this.minx||e>this.maxy||e<this.miny)},jsts.geom.Envelope.prototype.contains=function(){return arguments[0]instanceof jsts.geom.Envelope?this.containsEnvelope(arguments[0]):arguments[0]instanceof jsts.geom.Coordinate?this.containsCoordinate(arguments[0]):this.containsValues(arguments[0],arguments[1])},jsts.geom.Envelope.prototype.containsEnvelope=function(t){return this.coversEnvelope(t)},jsts.geom.Envelope.prototype.containsCoordinate=function(t){return this.coversCoordinate(t)},jsts.geom.Envelope.prototype.containsValues=function(t,e){return this.coversValues(t,e)},jsts.geom.Envelope.prototype.covers=function(){return arguments[0]instanceof jsts.geom.Envelope?this.coversEnvelope(arguments[0]):arguments[0]instanceof jsts.geom.Coordinate?this.coversCoordinate(arguments[0]):this.coversValues(arguments[0],arguments[1])},jsts.geom.Envelope.prototype.coversValues=function(t,e){return this.isNull()?!1:t>=this.minx&&t<=this.maxx&&e>=this.miny&&e<=this.maxy},jsts.geom.Envelope.prototype.coversCoordinate=function(t){return this.coversValues(t.x,t.y)},jsts.geom.Envelope.prototype.coversEnvelope=function(t){return this.isNull()||t.isNull()?!1:t.minx>=this.minx&&t.maxx<=this.maxx&&t.miny>=this.miny&&t.maxy<=this.maxy},jsts.geom.Envelope.prototype.distance=function(t){if(this.intersects(t))return 0;var e=0;this.maxx<t.minx&&(e=t.minx-this.maxx),this.minx>t.maxx&&(e=this.minx-t.maxx);var o=0;return this.maxy<t.miny&&(o=t.miny-this.maxy),this.miny>t.maxy&&(o=this.miny-t.maxy),0===e?o:0===o?e:Math.sqrt(e*e+o*o)},jsts.geom.Envelope.prototype.equals=function(t){return this.isNull()?t.isNull():this.maxx===t.maxx&&this.maxy===t.maxy&&this.minx===t.minx&&this.miny===t.miny},jsts.geom.Envelope.prototype.toString=function(){return\"Env[\"+this.minx+\" : \"+this.maxx+\", \"+this.miny+\" : \"+this.maxy+\"]\"},jsts.geom.Envelope.intersects=function(t,e,o){if(4===arguments.length)return jsts.geom.Envelope.intersectsEnvelope(arguments[0],arguments[1],arguments[2],arguments[3]);var n=t.x<e.x?t.x:e.x,r=t.x>e.x?t.x:e.x,i=t.y<e.y?t.y:e.y,s=t.y>e.y?t.y:e.y;return o.x>=n&&o.x<=r&&o.y>=i&&o.y<=s?!0:!1},jsts.geom.Envelope.intersectsEnvelope=function(t,e,o,n){var r=Math.min(o.x,n.x),i=Math.max(o.x,n.x),s=Math.min(t.x,e.x),a=Math.max(t.x,e.x);return s>i?!1:r>a?!1:(r=Math.min(o.y,n.y),i=Math.max(o.y,n.y),s=Math.min(t.y,e.y),a=Math.max(t.y,e.y),s>i?!1:r>a?!1:!0)},jsts.geom.Envelope.prototype.clone=function(){return new jsts.geom.Envelope(this.minx,this.maxx,this.miny,this.maxy)},jsts.geom.util.GeometryCombiner=function(t){this.geomFactory=jsts.geom.util.GeometryCombiner.extractFactory(t),this.inputGeoms=t},jsts.geom.util.GeometryCombiner.combine=function(t){if(arguments.length>1)return this.combine2.apply(this,arguments);var e=new jsts.geom.util.GeometryCombiner(t);return e.combine()},jsts.geom.util.GeometryCombiner.combine2=function(){var t=new javascript.util.ArrayList;Array.prototype.slice.call(arguments).forEach(function(e){t.add(e)});var e=new jsts.geom.util.GeometryCombiner(t);return e.combine()},jsts.geom.util.GeometryCombiner.prototype.geomFactory=null,jsts.geom.util.GeometryCombiner.prototype.skipEmpty=!1,jsts.geom.util.GeometryCombiner.prototype.inputGeoms,jsts.geom.util.GeometryCombiner.extractFactory=function(t){return t.isEmpty()?null:t.iterator().next().getFactory()},jsts.geom.util.GeometryCombiner.prototype.combine=function(){var t,e=new javascript.util.ArrayList;for(t=this.inputGeoms.iterator();t.hasNext();){var o=t.next();this.extractElements(o,e)}return 0===e.size()?null!==this.geomFactory?this.geomFactory.createGeometryCollection(null):null:this.geomFactory.buildGeometry(e)},jsts.geom.util.GeometryCombiner.prototype.extractElements=function(t,e){if(null!==t)for(var o=0;o<t.getNumGeometries();o++){var n=t.getGeometryN(o);this.skipEmpty&&n.isEmpty()||e.add(n)}},jsts.geom.PrecisionModel=function(t){return\"number\"==typeof t?(this.modelType=jsts.geom.PrecisionModel.FIXED,void(this.scale=t)):(this.modelType=t||jsts.geom.PrecisionModel.FLOATING,void(this.modelType===jsts.geom.PrecisionModel.FIXED&&(this.scale=1)))},jsts.geom.PrecisionModel.FLOATING=\"FLOATING\",jsts.geom.PrecisionModel.FIXED=\"FIXED\",jsts.geom.PrecisionModel.FLOATING_SINGLE=\"FLOATING_SINGLE\",jsts.geom.PrecisionModel.prototype.scale=null,jsts.geom.PrecisionModel.prototype.modelType=null,jsts.geom.PrecisionModel.prototype.isFloating=function(){return this.modelType===jsts.geom.PrecisionModel.FLOATING||this.modelType===jsts.geom.PrecisionModel.FLOATING_SINLGE},jsts.geom.PrecisionModel.prototype.getScale=function(){return this.scale},jsts.geom.PrecisionModel.prototype.getType=function(){return this.modelType},jsts.geom.PrecisionModel.prototype.equals=function(t){return!0},jsts.geom.PrecisionModel.prototype.makePrecise=function(t){return t instanceof jsts.geom.Coordinate?void this.makePrecise2(t):isNaN(t)?t:this.modelType===jsts.geom.PrecisionModel.FIXED?Math.round(t*this.scale)/this.scale:t},jsts.geom.PrecisionModel.prototype.makePrecise2=function(t){this.modelType!==jsts.geom.PrecisionModel.FLOATING&&(t.x=this.makePrecise(t.x),t.y=this.makePrecise(t.y))},jsts.geom.PrecisionModel.prototype.compareTo=function(t){return 0},jsts.geom.CoordinateFilter=function(){},jsts.geom.CoordinateFilter.prototype.filter=function(t){throw new jsts.error.AbstractMethodInvocationError},jsts.simplify.DouglasPeuckerLineSimplifier=function(t){this.pts=t,this.seg=new jsts.geom.LineSegment},jsts.simplify.DouglasPeuckerLineSimplifier.prototype.pts=null,jsts.simplify.DouglasPeuckerLineSimplifier.prototype.usePt=null,jsts.simplify.DouglasPeuckerLineSimplifier.prototype.distanceTolerance=null,jsts.simplify.DouglasPeuckerLineSimplifier.simplify=function(t,e){var o=new jsts.simplify.DouglasPeuckerLineSimplifier(t);return o.setDistanceTolerance(e),o.simplify()},jsts.simplify.DouglasPeuckerLineSimplifier.prototype.setDistanceTolerance=function(t){this.distanceTolerance=t},jsts.simplify.DouglasPeuckerLineSimplifier.prototype.simplify=function(){this.usePt=[];for(var t=0;t<this.pts.length;t++)this.usePt[t]=!0;this.simplifySection(0,this.pts.length-1);for(var e=new jsts.geom.CoordinateList,o=0;o<this.pts.length;o++)this.usePt[o]&&e.add(new jsts.geom.Coordinate(this.pts[o]));return e.toCoordinateArray()},jsts.simplify.DouglasPeuckerLineSimplifier.prototype.seg=null,jsts.simplify.DouglasPeuckerLineSimplifier.prototype.simplifySection=function(t,e){if(t+1!=e){this.seg.p0=this.pts[t],this.seg.p1=this.pts[e];for(var o=-1,n=t,r=t+1;e>r;r++){var i=this.seg.distance(this.pts[r]);i>o&&(o=i,n=r)}if(o<=this.distanceTolerance)for(var s=t+1;e>s;s++)this.usePt[s]=!1;else this.simplifySection(t,n),this.simplifySection(n,e)}},jsts.geomgraph.EdgeIntersection=function(t,e,o){this.coord=new jsts.geom.Coordinate(t),this.segmentIndex=e,this.dist=o},jsts.geomgraph.EdgeIntersection.prototype.coord=null,jsts.geomgraph.EdgeIntersection.prototype.segmentIndex=null,jsts.geomgraph.EdgeIntersection.prototype.dist=null,jsts.geomgraph.EdgeIntersection.prototype.getCoordinate=function(){return this.coord},jsts.geomgraph.EdgeIntersection.prototype.getSegmentIndex=function(){return this.segmentIndex},jsts.geomgraph.EdgeIntersection.prototype.getDistance=function(){return this.dist},jsts.geomgraph.EdgeIntersection.prototype.compareTo=function(t){return this.compare(t.segmentIndex,t.dist)},jsts.geomgraph.EdgeIntersection.prototype.compare=function(t,e){return this.segmentIndex<t?-1:this.segmentIndex>t?1:this.dist<e?-1:this.dist>e?1:0},jsts.geomgraph.EdgeIntersection.prototype.isEndPoint=function(t){return 0===this.segmentIndex&&0===this.dist?!0:this.segmentIndex===t?!0:!1},jsts.geomgraph.EdgeIntersection.prototype.toString=function(){return\"\"+this.segmentIndex+this.dist},function(){var t=jsts.geomgraph.EdgeIntersection,e=javascript.util.TreeMap;jsts.geomgraph.EdgeIntersectionList=function(t){this.nodeMap=new e,this.edge=t},jsts.geomgraph.EdgeIntersectionList.prototype.nodeMap=null,jsts.geomgraph.EdgeIntersectionList.prototype.edge=null,jsts.geomgraph.EdgeIntersectionList.prototype.isIntersection=function(t){for(var e=this.iterator();e.hasNext();){var o=e.next();if(o.coord.equals(t))return!0}return!1},jsts.geomgraph.EdgeIntersectionList.prototype.add=function(e,o,n){var r=new t(e,o,n),i=this.nodeMap.get(r);return null!==i?i:(this.nodeMap.put(r,r),r)},jsts.geomgraph.EdgeIntersectionList.prototype.iterator=function(){return this.nodeMap.values().iterator()},jsts.geomgraph.EdgeIntersectionList.prototype.addEndpoints=function(){var t=this.edge.pts.length-1;this.add(this.edge.pts[0],0,0),this.add(this.edge.pts[t],t,0)},jsts.geomgraph.EdgeIntersectionList.prototype.addSplitEdges=function(t){this.addEndpoints();for(var e=this.iterator(),o=e.next();e.hasNext();){var n=e.next(),r=this.createSplitEdge(o,n);t.add(r),o=n}},jsts.geomgraph.EdgeIntersectionList.prototype.createSplitEdge=function(t,e){var o=e.segmentIndex-t.segmentIndex+2,n=this.edge.pts[e.segmentIndex],r=e.dist>0||!e.coord.equals2D(n);r||o--;var i=[],s=0;i[s++]=new jsts.geom.Coordinate(t.coord);for(var a=t.segmentIndex+1;a<=e.segmentIndex;a++)i[s++]=this.edge.pts[a];return r&&(i[s]=e.coord),new jsts.geomgraph.Edge(i,new jsts.geomgraph.Label(this.edge.label))}}(),function(){var t=function(t){this.message=t};t.prototype=new Error,t.prototype.name=\"AssertionFailedException\",jsts.util.AssertionFailedException=t}(),function(){var t=jsts.util.AssertionFailedException;jsts.util.Assert=function(){},jsts.util.Assert.isTrue=function(e,o){if(!e)throw null===o?new t:new t(o)},jsts.util.Assert.equals=function(e,o,n){if(!o.equals(e))throw new t(\"Expected \"+e+\" but encountered \"+o+(null!=n?\": \"+n:\"\"))},jsts.util.Assert.shouldNeverReachHere=function(e){throw new t(\"Should never reach here\"+(null!=e?\": \"+e:\"\"))}}(),function(){var t=jsts.geom.Location,e=jsts.util.Assert,o=javascript.util.ArrayList;jsts.operation.relate.RelateComputer=function(t){this.li=new jsts.algorithm.RobustLineIntersector,this.ptLocator=new jsts.algorithm.PointLocator,this.nodes=new jsts.geomgraph.NodeMap(new jsts.operation.relate.RelateNodeFactory),this.isolatedEdges=new o,this.arg=t},jsts.operation.relate.RelateComputer.prototype.li=null,jsts.operation.relate.RelateComputer.prototype.ptLocator=null,jsts.operation.relate.RelateComputer.prototype.arg=null,jsts.operation.relate.RelateComputer.prototype.nodes=null,jsts.operation.relate.RelateComputer.prototype.im=null,jsts.operation.relate.RelateComputer.prototype.isolatedEdges=null,jsts.operation.relate.RelateComputer.prototype.invalidPoint=null,jsts.operation.relate.RelateComputer.prototype.computeIM=function(){var e=new jsts.geom.IntersectionMatrix;if(e.set(t.EXTERIOR,t.EXTERIOR,2),!this.arg[0].getGeometry().getEnvelopeInternal().intersects(this.arg[1].getGeometry().getEnvelopeInternal()))return this.computeDisjointIM(e),e;this.arg[0].computeSelfNodes(this.li,!1),this.arg[1].computeSelfNodes(this.li,!1);var o=this.arg[0].computeEdgeIntersections(this.arg[1],this.li,!1);this.computeIntersectionNodes(0),this.computeIntersectionNodes(1),this.copyNodesAndLabels(0),this.copyNodesAndLabels(1),this.labelIsolatedNodes(),this.computeProperIntersectionIM(o,e);var n=new jsts.operation.relate.EdgeEndBuilder,r=n.computeEdgeEnds(this.arg[0].getEdgeIterator());this.insertEdgeEnds(r);var i=n.computeEdgeEnds(this.arg[1].getEdgeIterator());return this.insertEdgeEnds(i),this.labelNodeEdges(),this.labelIsolatedEdges(0,1),this.labelIsolatedEdges(1,0),this.updateIM(e),e},jsts.operation.relate.RelateComputer.prototype.insertEdgeEnds=function(t){for(var e=t.iterator();e.hasNext();){var o=e.next();this.nodes.add(o)}},jsts.operation.relate.RelateComputer.prototype.computeProperIntersectionIM=function(t,e){var o=this.arg[0].getGeometry().getDimension(),n=this.arg[1].getGeometry().getDimension(),r=t.hasProperIntersection(),i=t.hasProperInteriorIntersection();2===o&&2===n?r&&e.setAtLeast(\"212101212\"):2===o&&1===n?(r&&e.setAtLeast(\"FFF0FFFF2\"),i&&e.setAtLeast(\"1FFFFF1FF\")):1===o&&2===n?(r&&e.setAtLeast(\"F0FFFFFF2\"),i&&e.setAtLeast(\"1F1FFFFFF\")):1===o&&1===n&&i&&e.setAtLeast(\"0FFFFFFFF\")},jsts.operation.relate.RelateComputer.prototype.copyNodesAndLabels=function(t){for(var e=this.arg[t].getNodeIterator();e.hasNext();){var o=e.next(),n=this.nodes.addNode(o.getCoordinate());n.setLabel(t,o.getLabel().getLocation(t))}},jsts.operation.relate.RelateComputer.prototype.computeIntersectionNodes=function(e){for(var o=this.arg[e].getEdgeIterator();o.hasNext();)for(var n=o.next(),r=n.getLabel().getLocation(e),i=n.getEdgeIntersectionList().iterator();i.hasNext();){var s=i.next(),a=this.nodes.addNode(s.coord);r===t.BOUNDARY?a.setLabelBoundary(e):a.getLabel().isNull(e)&&a.setLabel(e,t.INTERIOR)}},jsts.operation.relate.RelateComputer.prototype.labelIntersectionNodes=function(e){for(var o=this.arg[e].getEdgeIterator();o.hasNext();)for(var n=o.next(),r=n.getLabel().getLocation(e),i=n.getEdgeIntersectionList().iterator();i.hasNext();){var s=i.next(),a=this.nodes.find(s.coord);a.getLabel().isNull(e)&&(r===t.BOUNDARY?a.setLabelBoundary(e):a.setLabel(e,t.INTERIOR))}},jsts.operation.relate.RelateComputer.prototype.computeDisjointIM=function(e){var o=this.arg[0].getGeometry();o.isEmpty()||(e.set(t.INTERIOR,t.EXTERIOR,o.getDimension()),e.set(t.BOUNDARY,t.EXTERIOR,o.getBoundaryDimension()));var n=this.arg[1].getGeometry();n.isEmpty()||(e.set(t.EXTERIOR,t.INTERIOR,n.getDimension()),e.set(t.EXTERIOR,t.BOUNDARY,n.getBoundaryDimension()))},jsts.operation.relate.RelateComputer.prototype.labelNodeEdges=function(){for(var t=this.nodes.iterator();t.hasNext();){var e=t.next();e.getEdges().computeLabelling(this.arg)}},jsts.operation.relate.RelateComputer.prototype.updateIM=function(t){for(var e=this.isolatedEdges.iterator();e.hasNext();){var o=e.next();o.updateIM(t)}for(var n=this.nodes.iterator();n.hasNext();){var r=n.next();r.updateIM(t),r.updateIMFromEdges(t)}},jsts.operation.relate.RelateComputer.prototype.labelIsolatedEdges=function(t,e){for(var o=this.arg[t].getEdgeIterator();o.hasNext();){var n=o.next();n.isIsolated()&&(this.labelIsolatedEdge(n,e,this.arg[e].getGeometry()),this.isolatedEdges.add(n))}},jsts.operation.relate.RelateComputer.prototype.labelIsolatedEdge=function(e,o,n){if(n.getDimension()>0){var r=this.ptLocator.locate(e.getCoordinate(),n);e.getLabel().setAllLocations(o,r)}else e.getLabel().setAllLocations(o,t.EXTERIOR)},jsts.operation.relate.RelateComputer.prototype.labelIsolatedNodes=function(){for(var t=this.nodes.iterator();t.hasNext();){var o=t.next(),n=o.getLabel();e.isTrue(n.getGeometryCount()>0,\"node with empty label found\"),o.isIsolated()&&(n.isNull(0)?this.labelIsolatedNode(o,0):this.labelIsolatedNode(o,1))}},jsts.operation.relate.RelateComputer.prototype.labelIsolatedNode=function(t,e){var o=this.ptLocator.locate(t.getCoordinate(),this.arg[e].getGeometry());t.getLabel().setAllLocations(e,o)}}(),function(){var t=jsts.util.Assert;jsts.geomgraph.GraphComponent=function(t){this.label=t},jsts.geomgraph.GraphComponent.prototype.label=null,jsts.geomgraph.GraphComponent.prototype._isInResult=!1,jsts.geomgraph.GraphComponent.prototype._isCovered=!1,jsts.geomgraph.GraphComponent.prototype._isCoveredSet=!1,jsts.geomgraph.GraphComponent.prototype._isVisited=!1,jsts.geomgraph.GraphComponent.prototype.getLabel=function(){return this.label},jsts.geomgraph.GraphComponent.prototype.setLabel=function(t){return 2===arguments.length?void this.setLabel2.apply(this,arguments):void(this.label=t)},jsts.geomgraph.GraphComponent.prototype.setInResult=function(t){this._isInResult=t},jsts.geomgraph.GraphComponent.prototype.isInResult=function(){return this._isInResult},jsts.geomgraph.GraphComponent.prototype.setCovered=function(t){this._isCovered=t,this._isCoveredSet=!0},jsts.geomgraph.GraphComponent.prototype.isCovered=function(){return this._isCovered},jsts.geomgraph.GraphComponent.prototype.isCoveredSet=function(){return this._isCoveredSet},jsts.geomgraph.GraphComponent.prototype.isVisited=function(){return this._isVisited},jsts.geomgraph.GraphComponent.prototype.setVisited=function(t){this._isVisited=t},jsts.geomgraph.GraphComponent.prototype.getCoordinate=function(){throw new jsts.error.AbstractMethodInvocationError},jsts.geomgraph.GraphComponent.prototype.computeIM=function(t){throw new jsts.error.AbstractMethodInvocationError},jsts.geomgraph.GraphComponent.prototype.isIsolated=function(){throw new jsts.error.AbstractMethodInvocationError},jsts.geomgraph.GraphComponent.prototype.updateIM=function(e){t.isTrue(this.label.getGeometryCount()>=2,\"found partial label\"),this.computeIM(e)}}(),jsts.geomgraph.Node=function(t,e){this.coord=t,this.edges=e,this.label=new jsts.geomgraph.Label(0,jsts.geom.Location.NONE)},jsts.geomgraph.Node.prototype=new jsts.geomgraph.GraphComponent,jsts.geomgraph.Node.prototype.coord=null,jsts.geomgraph.Node.prototype.edges=null,jsts.geomgraph.Node.prototype.isIsolated=function(){return 1==this.label.getGeometryCount()},jsts.geomgraph.Node.prototype.setLabel2=function(t,e){null===this.label?this.label=new jsts.geomgraph.Label(t,e):this.label.setLocation(t,e)},jsts.geomgraph.Node.prototype.setLabelBoundary=function(t){var e=jsts.geom.Location.NONE;null!==this.label&&(e=this.label.getLocation(t));var o;switch(e){case jsts.geom.Location.BOUNDARY:o=jsts.geom.Location.INTERIOR;break;case jsts.geom.Location.INTERIOR:o=jsts.geom.Location.BOUNDARY;break;default:o=jsts.geom.Location.BOUNDARY}this.label.setLocation(t,o)},jsts.geomgraph.Node.prototype.add=function(t){this.edges.insert(t),t.setNode(this)},jsts.geomgraph.Node.prototype.getCoordinate=function(){return this.coord},jsts.geomgraph.Node.prototype.getEdges=function(){return this.edges},jsts.geomgraph.Node.prototype.isIncidentEdgeInResult=function(){for(var t=this.getEdges().getEdges().iterator();t.hasNext();){var e=t.next();if(e.getEdge().isInResult())return!0}return!1},jsts.geom.Point=function(t,e){this.factory=e,void 0!==t&&(this.coordinate=t)},jsts.geom.Point.prototype=new jsts.geom.Geometry,jsts.geom.Point.constructor=jsts.geom.Point,jsts.geom.Point.CLASS_NAME=\"jsts.geom.Point\",jsts.geom.Point.prototype.coordinate=null,jsts.geom.Point.prototype.getX=function(){return this.coordinate.x},jsts.geom.Point.prototype.getY=function(){return this.coordinate.y},jsts.geom.Point.prototype.getCoordinate=function(){return this.coordinate},jsts.geom.Point.prototype.getCoordinates=function(){return this.isEmpty()?[]:[this.coordinate]},jsts.geom.Point.prototype.getCoordinateSequence=function(){return this.isEmpty()?[]:[this.coordinate]},jsts.geom.Point.prototype.isEmpty=function(){return null===this.coordinate},jsts.geom.Point.prototype.equalsExact=function(t,e){return this.isEquivalentClass(t)?this.isEmpty()&&t.isEmpty()?!0:this.equal(t.getCoordinate(),this.getCoordinate(),e):!1},jsts.geom.Point.prototype.getNumPoints=function(){return this.isEmpty()?0:1},jsts.geom.Point.prototype.isSimple=function(){return!0},jsts.geom.Point.prototype.getBoundary=function(){return new jsts.geom.GeometryCollection(null)},jsts.geom.Point.prototype.computeEnvelopeInternal=function(){return this.isEmpty()?new jsts.geom.Envelope:new jsts.geom.Envelope(this.coordinate)},jsts.geom.Point.prototype.apply=function(t){if(t instanceof jsts.geom.GeometryFilter||t instanceof jsts.geom.GeometryComponentFilter)t.filter(this);else if(t instanceof jsts.geom.CoordinateFilter){if(this.isEmpty())return;t.filter(this.getCoordinate())}},jsts.geom.Point.prototype.clone=function(){return new jsts.geom.Point(this.coordinate.clone(),this.factory)},jsts.geom.Point.prototype.getDimension=function(){return 0},jsts.geom.Point.prototype.getBoundaryDimension=function(){return jsts.geom.Dimension.FALSE},jsts.geom.Point.prototype.reverse=function(){return this.clone()},jsts.geom.Point.prototype.isValid=function(){return jsts.operation.valid.IsValidOp.isValid(this.getCoordinate())?!0:!1},jsts.geom.Point.prototype.normalize=function(){},jsts.geom.Point.prototype.compareToSameClass=function(t){var e=t;return this.getCoordinate().compareTo(e.getCoordinate())},jsts.geom.Point.prototype.getGeometryType=function(){return\"Point\"},jsts.geom.Point.prototype.hashCode=function(){return\"Point_\"+this.coordinate.hashCode()},jsts.geom.Point.prototype.CLASS_NAME=\"jsts.geom.Point\",jsts.geom.Dimension=function(){},jsts.geom.Dimension.P=0,jsts.geom.Dimension.L=1,jsts.geom.Dimension.A=2,jsts.geom.Dimension.FALSE=-1,jsts.geom.Dimension.TRUE=-2,jsts.geom.Dimension.DONTCARE=-3,jsts.geom.Dimension.toDimensionSymbol=function(t){switch(t){case jsts.geom.Dimension.FALSE:return\"F\";case jsts.geom.Dimension.TRUE:return\"T\";case jsts.geom.Dimension.DONTCARE:return\"*\";case jsts.geom.Dimension.P:return\"0\";case jsts.geom.Dimension.L:return\"1\";case jsts.geom.Dimension.A:return\"2\"}throw new jsts.IllegalArgumentError(\"Unknown dimension value: \"+t)},jsts.geom.Dimension.toDimensionValue=function(t){switch(t.toUpperCase()){case\"F\":return jsts.geom.Dimension.FALSE;case\"T\":return jsts.geom.Dimension.TRUE;case\"*\":return jsts.geom.Dimension.DONTCARE;case\"0\":return jsts.geom.Dimension.P;case\"1\":return jsts.geom.Dimension.L;case\"2\":return jsts.geom.Dimension.A}throw new jsts.error.IllegalArgumentError(\"Unknown dimension symbol: \"+t)},function(){var t=jsts.geom.Dimension;jsts.geom.LineString=function(t,e){this.factory=e,\nthis.points=t||[]},jsts.geom.LineString.prototype=new jsts.geom.Geometry,jsts.geom.LineString.constructor=jsts.geom.LineString,jsts.geom.LineString.prototype.points=null,jsts.geom.LineString.prototype.getCoordinates=function(){return this.points},jsts.geom.LineString.prototype.getCoordinateSequence=function(){return this.points},jsts.geom.LineString.prototype.getCoordinateN=function(t){return this.points[t]},jsts.geom.LineString.prototype.getCoordinate=function(){return this.isEmpty()?null:this.getCoordinateN(0)},jsts.geom.LineString.prototype.getDimension=function(){return 1},jsts.geom.LineString.prototype.getBoundaryDimension=function(){return this.isClosed()?t.FALSE:0},jsts.geom.LineString.prototype.isEmpty=function(){return 0===this.points.length},jsts.geom.LineString.prototype.getNumPoints=function(){return this.points.length},jsts.geom.LineString.prototype.getPointN=function(t){return this.getFactory().createPoint(this.points[t])},jsts.geom.LineString.prototype.getStartPoint=function(){return this.isEmpty()?null:this.getPointN(0)},jsts.geom.LineString.prototype.getEndPoint=function(){return this.isEmpty()?null:this.getPointN(this.getNumPoints()-1)},jsts.geom.LineString.prototype.isClosed=function(){return this.isEmpty()?!1:this.getCoordinateN(0).equals2D(this.getCoordinateN(this.points.length-1))},jsts.geom.LineString.prototype.isRing=function(){return this.isClosed()&&this.isSimple()},jsts.geom.LineString.prototype.getGeometryType=function(){return\"LineString\"},jsts.geom.LineString.prototype.getLength=function(){return jsts.algorithm.CGAlgorithms.computeLength(this.points)},jsts.geom.LineString.prototype.getBoundary=function(){return new jsts.operation.BoundaryOp(this).getBoundary()},jsts.geom.LineString.prototype.computeEnvelopeInternal=function(){if(this.isEmpty())return new jsts.geom.Envelope;var t=new jsts.geom.Envelope;return this.points.forEach(function(e){t.expandToInclude(e)}),t},jsts.geom.LineString.prototype.equalsExact=function(t,e){return this.isEquivalentClass(t)?this.points.length!==t.points.length?!1:this.isEmpty()&&t.isEmpty()?!0:this.points.reduce(function(o,n,r){return o&&jsts.geom.Geometry.prototype.equal(n,t.points[r],e)}):!1},jsts.geom.LineString.prototype.isEquivalentClass=function(t){return t instanceof jsts.geom.LineString},jsts.geom.LineString.prototype.compareToSameClass=function(t){for(var e=t,o=0,n=this.points.length,r=0,i=e.points.length;n>o&&i>r;){var s=this.points[o].compareTo(e.points[r]);if(0!==s)return s;o++,r++}return n>o?1:i>r?-1:0},jsts.geom.LineString.prototype.apply=function(t){if(t instanceof jsts.geom.GeometryFilter||t instanceof jsts.geom.GeometryComponentFilter)t.filter(this);else if(t instanceof jsts.geom.CoordinateFilter)for(var e=0,o=this.points.length;o>e;e++)t.filter(this.points[e]);else t instanceof jsts.geom.CoordinateSequenceFilter&&this.apply2.apply(this,arguments)},jsts.geom.LineString.prototype.apply2=function(t){if(0!==this.points.length){for(var e=0;e<this.points.length&&(t.filter(this.points,e),!t.isDone());e++);t.isGeometryChanged()}},jsts.geom.LineString.prototype.clone=function(){for(var t=[],e=0,o=this.points.length;o>e;e++)t.push(this.points[e].clone());return this.factory.createLineString(t)},jsts.geom.LineString.prototype.normalize=function(){var t,e,o,n,r,i;for(i=this.points.length,e=parseInt(i/2),t=0;e>t;t++)if(o=i-1-t,n=this.points[t],r=this.points[o],!n.equals(r))return void(n.compareTo(r)>0&&this.points.reverse())},jsts.geom.LineString.prototype.CLASS_NAME=\"jsts.geom.LineString\"}(),function(){jsts.geom.Polygon=function(t,e,o){this.shell=t||o.createLinearRing(null),this.holes=e||[],this.factory=o},jsts.geom.Polygon.prototype=new jsts.geom.Geometry,jsts.geom.Polygon.constructor=jsts.geom.Polygon,jsts.geom.Polygon.prototype.getCoordinate=function(){return this.shell.getCoordinate()},jsts.geom.Polygon.prototype.getCoordinates=function(){if(this.isEmpty())return[];for(var t=[],e=-1,o=this.shell.getCoordinates(),n=0;n<o.length;n++)e++,t[e]=o[n];for(var r=0;r<this.holes.length;r++)for(var i=this.holes[r].getCoordinates(),s=0;s<i.length;s++)e++,t[e]=i[s];return t},jsts.geom.Polygon.prototype.getNumPoints=function(){for(var t=this.shell.getNumPoints(),e=0;e<this.holes.length;e++)t+=this.holes[e].getNumPoints();return t},jsts.geom.Polygon.prototype.isEmpty=function(){return this.shell.isEmpty()},jsts.geom.Polygon.prototype.isRectangle=function(){if(0!=this.getNumInteriorRing())return!1;if(null==this.shell)return!1;if(5!=this.shell.getNumPoints())return!1;for(var t=this.shell.getCoordinateSequence(),e=this.getEnvelopeInternal(),o=0;5>o;o++){var n=t[o].x;if(n!=e.getMinX()&&n!=e.getMaxX())return!1;var r=t[o].y;if(r!=e.getMinY()&&r!=e.getMaxY())return!1}for(var i=t[0].x,s=t[0].y,o=1;4>=o;o++){var n=t[o].x,r=t[o].y,a=n!=i,p=r!=s;if(a==p)return!1;i=n,s=r}return!0},jsts.geom.Polygon.prototype.getExteriorRing=function(){return this.shell},jsts.geom.Polygon.prototype.getInteriorRingN=function(t){return this.holes[t]},jsts.geom.Polygon.prototype.getNumInteriorRing=function(){return this.holes.length},jsts.geom.Polygon.prototype.getArea=function(){var t=0;t+=Math.abs(jsts.algorithm.CGAlgorithms.signedArea(this.shell.getCoordinateSequence()));for(var e=0;e<this.holes.length;e++)t-=Math.abs(jsts.algorithm.CGAlgorithms.signedArea(this.holes[e].getCoordinateSequence()));return t},jsts.geom.Polygon.prototype.getLength=function(){var t=0;t+=this.shell.getLength();for(var e=0;e<this.holes.length;e++)t+=this.holes[e].getLength();return t},jsts.geom.Polygon.prototype.getBoundary=function(){if(this.isEmpty())return this.getFactory().createMultiLineString(null);var t=[];t[0]=this.shell.clone();for(var e=0,o=this.holes.length;o>e;e++)t[e+1]=this.holes[e].clone();return t.length<=1?t[0]:this.getFactory().createMultiLineString(t)},jsts.geom.Polygon.prototype.computeEnvelopeInternal=function(){return this.shell.getEnvelopeInternal()},jsts.geom.Polygon.prototype.getDimension=function(){return 2},jsts.geom.Polygon.prototype.getBoundaryDimension=function(){return 1},jsts.geom.Polygon.prototype.equalsExact=function(t,e){if(!this.isEquivalentClass(t))return!1;if(this.isEmpty()&&t.isEmpty())return!0;if(this.isEmpty()!==t.isEmpty())return!1;if(!this.shell.equalsExact(t.shell,e))return!1;if(this.holes.length!==t.holes.length)return!1;if(this.holes.length!==t.holes.length)return!1;for(var o=0;o<this.holes.length;o++)if(!this.holes[o].equalsExact(t.holes[o],e))return!1;return!0},jsts.geom.Polygon.prototype.compareToSameClass=function(t){return this.shell.compareToSameClass(t.shell)},jsts.geom.Polygon.prototype.apply=function(t){if(t instanceof jsts.geom.GeometryComponentFilter){t.filter(this),this.shell.apply(t);for(var e=0,o=this.holes.length;o>e;e++)this.holes[e].apply(t)}else if(t instanceof jsts.geom.GeometryFilter)t.filter(this);else if(t instanceof jsts.geom.CoordinateFilter){this.shell.apply(t);for(var e=0,o=this.holes.length;o>e;e++)this.holes[e].apply(t)}else t instanceof jsts.geom.CoordinateSequenceFilter&&this.apply2.apply(this,arguments)},jsts.geom.Polygon.prototype.apply2=function(t){if(this.shell.apply(t),!t.isDone())for(var e=0;e<this.holes.length&&(this.holes[e].apply(t),!t.isDone());e++);t.isGeometryChanged()},jsts.geom.Polygon.prototype.clone=function(){for(var t=[],e=0,o=this.holes.length;o>e;e++)t.push(this.holes[e].clone());return this.factory.createPolygon(this.shell.clone(),t)},jsts.geom.Polygon.prototype.normalize=function(){this.normalize2(this.shell,!0);for(var t=0,e=this.holes.length;e>t;t++)this.normalize2(this.holes[t],!1);this.holes.sort()},jsts.geom.Polygon.prototype.normalize2=function(t,e){if(!t.isEmpty()){var o=t.points.slice(0,t.points.length-1),n=jsts.geom.CoordinateArrays.minCoordinate(t.points);jsts.geom.CoordinateArrays.scroll(o,n),t.points=o.concat(),t.points[o.length]=o[0],jsts.algorithm.CGAlgorithms.isCCW(t.points)===e&&t.points.reverse()}},jsts.geom.Polygon.prototype.getGeometryType=function(){return\"Polygon\"},jsts.geom.Polygon.prototype.CLASS_NAME=\"jsts.geom.Polygon\"}(),function(){var t=jsts.geom.Geometry,e=javascript.util.TreeSet,o=javascript.util.Arrays;jsts.geom.GeometryCollection=function(t,e){this.geometries=t||[],this.factory=e},jsts.geom.GeometryCollection.prototype=new t,jsts.geom.GeometryCollection.constructor=jsts.geom.GeometryCollection,jsts.geom.GeometryCollection.prototype.isEmpty=function(){for(var t=0,e=this.geometries.length;e>t;t++){var o=this.getGeometryN(t);if(!o.isEmpty())return!1}return!0},jsts.geom.GeometryCollection.prototype.getArea=function(){for(var t=0,e=0,o=this.geometries.length;o>e;e++)t+=this.getGeometryN(e).getArea();return t},jsts.geom.GeometryCollection.prototype.getLength=function(){for(var t=0,e=0,o=this.geometries.length;o>e;e++)t+=this.getGeometryN(e).getLength();return t},jsts.geom.GeometryCollection.prototype.getCoordinate=function(){return this.isEmpty()?null:this.getGeometryN(0).getCoordinate()},jsts.geom.GeometryCollection.prototype.getCoordinates=function(){for(var t=[],e=-1,o=0,n=this.geometries.length;n>o;o++)for(var r=this.getGeometryN(o),i=r.getCoordinates(),s=0;s<i.length;s++)e++,t[e]=i[s];return t},jsts.geom.GeometryCollection.prototype.getNumGeometries=function(){return this.geometries.length},jsts.geom.GeometryCollection.prototype.getGeometryN=function(t){var e=this.geometries[t];return e instanceof jsts.geom.Coordinate&&(e=new jsts.geom.Point(e)),e},jsts.geom.GeometryCollection.prototype.getNumPoints=function(t){for(var e=0,o=0;o<this.geometries.length;o++)e+=this.geometries[o].getNumPoints();return e},jsts.geom.GeometryCollection.prototype.equalsExact=function(t,e){if(!this.isEquivalentClass(t))return!1;if(this.geometries.length!==t.geometries.length)return!1;for(var o=0,n=this.geometries.length;n>o;o++){var r=this.getGeometryN(o);if(!r.equalsExact(t.getGeometryN(o),e))return!1}return!0},jsts.geom.GeometryCollection.prototype.clone=function(){for(var t=[],e=0,o=this.geometries.length;o>e;e++)t.push(this.geometries[e].clone());return this.factory.createGeometryCollection(t)},jsts.geom.GeometryCollection.prototype.normalize=function(){for(var t=0,e=this.geometries.length;e>t;t++)this.getGeometryN(t).normalize();this.geometries.sort()},jsts.geom.GeometryCollection.prototype.compareToSameClass=function(t){var n=new e(o.asList(this.geometries)),r=new e(o.asList(t.geometries));return this.compare(n,r)},jsts.geom.GeometryCollection.prototype.apply=function(t){if(t instanceof jsts.geom.GeometryFilter||t instanceof jsts.geom.GeometryComponentFilter){t.filter(this);for(var e=0,o=this.geometries.length;o>e;e++)this.getGeometryN(e).apply(t)}else if(t instanceof jsts.geom.CoordinateFilter)for(var e=0,o=this.geometries.length;o>e;e++)this.getGeometryN(e).apply(t);else t instanceof jsts.geom.CoordinateSequenceFilter&&this.apply2.apply(this,arguments)},jsts.geom.GeometryCollection.prototype.apply2=function(t){if(0!=this.geometries.length){for(var e=0;e<this.geometries.length&&(this.geometries[e].apply(t),!t.isDone());e++);t.isGeometryChanged()}},jsts.geom.GeometryCollection.prototype.getDimension=function(){for(var t=jsts.geom.Dimension.FALSE,e=0,o=this.geometries.length;o>e;e++){var n=this.getGeometryN(e);t=Math.max(t,n.getDimension())}return t},jsts.geom.GeometryCollection.prototype.computeEnvelopeInternal=function(){for(var t=new jsts.geom.Envelope,e=0,o=this.geometries.length;o>e;e++){var n=this.getGeometryN(e);t.expandToInclude(n.getEnvelopeInternal())}return t},jsts.geom.GeometryCollection.prototype.CLASS_NAME=\"jsts.geom.GeometryCollection\"}(),jsts.algorithm.Centroid=function(t){this.areaBasePt=null,this.triangleCent3=new jsts.geom.Coordinate,this.areasum2=0,this.cg3=new jsts.geom.Coordinate,this.lineCentSum=new jsts.geom.Coordinate,this.totalLength=0,this.ptCount=0,this.ptCentSum=new jsts.geom.Coordinate,this.add(t)},jsts.algorithm.Centroid.getCentroid=function(t){var e=new jsts.algorithm.Centroid(t);return e.getCentroid()},jsts.algorithm.Centroid.centroid3=function(t,e,o,n){n.x=t.x+e.x+o.x,n.y=t.y+e.y+o.y},jsts.algorithm.Centroid.area2=function(t,e,o){return(e.x-t.x)*(o.y-t.y)-(o.x-t.x)*(e.y-t.y)},jsts.algorithm.Centroid.prototype.add=function(t){if(!t.isEmpty())if(t instanceof jsts.geom.Point)this.addPoint(t.getCoordinate());else if(t instanceof jsts.geom.LineString)this.addLineSegments(t.getCoordinates());else if(t instanceof jsts.geom.Polygon)this.addPolygon(t);else if(t instanceof jsts.geom.GeometryCollection)for(var e=0;e<t.getNumGeometries();e++)this.add(t.getGeometryN(e))},jsts.algorithm.Centroid.prototype.getCentroid=function(){var t=new jsts.geom.Coordinate;if(Math.abs(this.areasum2)>0)t.x=this.cg3.x/3/this.areasum2,t.y=this.cg3.y/3/this.areasum2;else if(this.totalLength>0)t.x=this.lineCentSum.x/this.totalLength,t.y=this.lineCentSum.y/this.totalLength;else{if(!(this.ptCount>0))return null;t.x=this.ptCentSum.x/this.ptCount,t.y=this.ptCentSum.y/this.ptCount}return t},jsts.algorithm.Centroid.prototype.setBasePoint=function(t){null===this.areaBasePt&&(this.areaBasePt=t)},jsts.algorithm.Centroid.prototype.addPolygon=function(t){this.addShell(t.getExteriorRing().getCoordinates());for(var e=0;e<t.getNumInteriorRing();e++)this.addHole(t.getInteriorRingN(e).getCoordinates())},jsts.algorithm.Centroid.prototype.addShell=function(t){t.length>0&&this.setBasePoint(t[0]);for(var e=!jsts.algorithm.CGAlgorithms.isCCW(t),o=0;o<t.length-1;o++)this.addTriangle(this.areaBasePt,t[o],t[o+1],e);this.addLineSegments(t)},jsts.algorithm.Centroid.prototype.addHole=function(t){for(var e=jsts.algorithm.CGAlgorithms.isCCW(t),o=0;o<t.length-1;o++)this.addTriangle(this.areaBasePt,t[o],t[o+1],e);this.addLineSegments(t)},jsts.algorithm.Centroid.prototype.addTriangle=function(t,e,o,n){var r=n?1:-1;jsts.algorithm.Centroid.centroid3(t,e,o,this.triangleCent3);var i=jsts.algorithm.Centroid.area2(t,e,o);this.cg3.x+=r*i*this.triangleCent3.x,this.cg3.y+=r*i*this.triangleCent3.y,this.areasum2+=r*i},jsts.algorithm.Centroid.prototype.addLineSegments=function(t){for(var e=0,o=0;o<t.length-1;o++){var n=t[o].distance(t[o+1]);if(0!==n){e+=n;var r=(t[o].x+t[o+1].x)/2;this.lineCentSum.x+=n*r;var i=(t[o].y+t[o+1].y)/2;this.lineCentSum.y+=n*i}}this.totalLength+=e,0===e&&t.length>0&&this.addPoint(t[0])},jsts.algorithm.Centroid.prototype.addPoint=function(t){this.ptCount+=1,this.ptCentSum.x+=t.x,this.ptCentSum.y+=t.y},function(){var t=function(t){this.deList=new javascript.util.ArrayList,this.factory=t};t.findEdgeRingContaining=function(t,e){for(var o=t.getRing(),n=o.getEnvelopeInternal(),r=o.getCoordinateN(0),i=null,s=null,a=e.iterator();a.hasNext();){var p=a.next(),u=p.getRing(),l=u.getEnvelopeInternal();null!=i&&(s=i.getRing().getEnvelopeInternal());var g=!1;l.equals(n)||(r=jsts.geom.CoordinateArrays.ptNotInList(o.getCoordinates(),u.getCoordinates()),l.contains(n)&&jsts.algorithm.CGAlgorithms.isPointInRing(r,u.getCoordinates())&&(g=!0),g&&(null==i||s.contains(l))&&(i=p))}return i},t.ptNotInList=function(t,e){for(var o=0;o<t.length;o++){var n=t[o];if(!isInList(n,e))return n}return null},t.isInList=function(t,e){for(var o=0;o<e.length;o++)if(t.equals(e[o]))return!0;return!1},t.prototype.factory=null,t.prototype.deList=null,t.prototype.ring=null,t.prototype.ringPts=null,t.prototype.holes=null,t.prototype.add=function(t){this.deList.add(t)},t.prototype.isHole=function(){var t=this.getRing();return jsts.algorithm.CGAlgorithms.isCCW(t.getCoordinates())},t.prototype.addHole=function(t){null==this.holes&&(this.holes=new javascript.util.ArrayList),this.holes.add(t)},t.prototype.getPolygon=function(){var t=null;if(null!=this.holes){t=[];for(var e=0;e<this.holes.size();e++)t[e]=this.holes.get(e)}var o=this.factory.createPolygon(this.ring,t);return o},t.prototype.isValid=function(){return this.getCoordinates(),this.ringPts.length<=3?!1:(this.getRing(),this.ring.isValid())},t.prototype.getCoordinates=function(){if(null==this.ringPts){for(var e=new jsts.geom.CoordinateList,o=this.deList.iterator();o.hasNext();){var n=o.next(),r=n.getEdge();t.addEdge(r.getLine().getCoordinates(),n.getEdgeDirection(),e)}this.ringPts=e.toCoordinateArray()}return this.ringPts},t.prototype.getLineString=function(){return this.getCoordinates(),this.factory.createLineString(this.ringPts)},t.prototype.getRing=function(){if(null!=this.ring)return this.ring;this.getCoordinates(),this.ringPts.length<3&&console.log(this.ringPts);try{this.ring=this.factory.createLinearRing(this.ringPts)}catch(t){console.log(this.ringPts)}return this.ring},t.addEdge=function(t,e,o){if(e)for(var n=0;n<t.length;n++)o.add(t[n],!1);else for(var n=t.length-1;n>=0;n--)o.add(t[n],!1)},jsts.operation.polygonize.EdgeRing=t}(),function(){var t=function(){};t.setVisited=function(t,e){for(;t.hasNext();){var o=t.next();o.setVisited(e)}},t.setMarked=function(t,e){for(;t.hasNext();){var o=t.next();o.setMarked(e)}},t.getComponentWithVisitedState=function(t,e){for(;t.hasNext();){var o=t.next();if(o.isVisited()==e)return o}return null},t.prototype._isMarked=!1,t.prototype._isVisited=!1,t.prototype.data,t.prototype.isVisited=function(){return this._isVisited},t.prototype.setVisited=function(t){this._isVisited=t},t.prototype.isMarked=function(){return this._isMarked},t.prototype.setMarked=function(t){this._isMarked=t},t.prototype.setContext=function(t){this.data=t},t.prototype.getContext=function(){return data},t.prototype.setData=function(t){this.data=t},t.prototype.getData=function(){return data},t.prototype.isRemoved=function(){throw new jsts.error.AbstractMethodInvocationError},jsts.planargraph.GraphComponent=t}(),function(){var t=jsts.planargraph.GraphComponent,e=function(t,e){void 0!==t&&this.setDirectedEdges(t,e)};e.prototype=new t,e.prototype.dirEdge=null,e.prototype.setDirectedEdges=function(t,e){this.dirEdge=[t,e],t.setEdge(this),e.setEdge(this),t.setSym(e),e.setSym(t),t.getFromNode().addOutEdge(t),e.getFromNode().addOutEdge(e)},e.prototype.getDirEdge=function(t){return t instanceof jsts.planargraph.Node&&this.getDirEdge2(t),this.dirEdge[t]},e.prototype.getDirEdge2=function(t){return this.dirEdge[0].getFromNode()==t?this.dirEdge[0]:this.dirEdge[1].getFromNode()==t?this.dirEdge[1]:null},e.prototype.getOppositeNode=function(t){return this.dirEdge[0].getFromNode()==t?this.dirEdge[0].getToNode():this.dirEdge[1].getFromNode()==t?this.dirEdge[1].getToNode():null},e.prototype.remove=function(){this.dirEdge=null},e.prototype.isRemoved=function(){return null==dirEdge},jsts.planargraph.Edge=e}(),jsts.operation.polygonize.PolygonizeEdge=function(t){this.line=t},jsts.operation.polygonize.PolygonizeEdge.prototype=new jsts.planargraph.Edge,jsts.operation.polygonize.PolygonizeEdge.prototype.line=null,jsts.operation.polygonize.PolygonizeEdge.prototype.getLine=function(){return this.line},function(){var t=javascript.util.ArrayList,e=jsts.planargraph.GraphComponent,o=function(t,e,o,n){if(void 0!==t){this.from=t,this.to=e,this.edgeDirection=n,this.p0=t.getCoordinate(),this.p1=o;var r=this.p1.x-this.p0.x,i=this.p1.y-this.p0.y;this.quadrant=jsts.geomgraph.Quadrant.quadrant(r,i),this.angle=Math.atan2(i,r)}};o.prototype=new e,o.toEdges=function(e){for(var o=new t,n=e.iterator();n.hasNext();)o.add(n.next().parentEdge);return o},o.prototype.parentEdge=null,o.prototype.from=null,o.prototype.to=null,o.prototype.p0=null,o.prototype.p1=null,o.prototype.sym=null,o.prototype.edgeDirection=null,o.prototype.quadrant=null,o.prototype.angle=null,o.prototype.getEdge=function(){return this.parentEdge},o.prototype.setEdge=function(t){this.parentEdge=t},o.prototype.getQuadrant=function(){return this.quadrant},o.prototype.getDirectionPt=function(){return this.p1},o.prototype.getEdgeDirection=function(){return this.edgeDirection},o.prototype.getFromNode=function(){return this.from},o.prototype.getToNode=function(){return this.to},o.prototype.getCoordinate=function(){return this.from.getCoordinate()},o.prototype.getAngle=function(){return this.angle},o.prototype.getSym=function(){return this.sym},o.prototype.setSym=function(t){this.sym=t},o.prototype.remove=function(){this.sym=null,this.parentEdge=null},o.prototype.isRemoved=function(){return null==this.parentEdge},o.prototype.compareTo=function(t){var e=t;return this.compareDirection(e)},o.prototype.compareDirection=function(t){return this.quadrant>t.quadrant?1:this.quadrant<t.quadrant?-1:jsts.algorithm.CGAlgorithms.computeOrientation(t.p0,t.p1,this.p1)},jsts.planargraph.DirectedEdge=o}(),function(){var t=jsts.planargraph.DirectedEdge,e=function(e,o,n,r){t.apply(this,arguments)};e.prototype=new t,e.prototype.edgeRing=null,e.prototype.next=null,e.prototype.label=-1,e.prototype.getLabel=function(){return this.label},e.prototype.setLabel=function(t){this.label=t},e.prototype.getNext=function(){return this.next},e.prototype.setNext=function(t){this.next=t},e.prototype.isInRing=function(){return null!=this.edgeRing},e.prototype.setRing=function(t){this.edgeRing=t},jsts.operation.polygonize.PolygonizeDirectedEdge=e}(),function(){var t=javascript.util.ArrayList,e=function(){this.outEdges=new t};e.prototype.outEdges=null,e.prototype.sorted=!1,e.prototype.add=function(t){this.outEdges.add(t),this.sorted=!1},e.prototype.remove=function(t){this.outEdges.remove(t)},e.prototype.iterator=function(){return this.sortEdges(),this.outEdges.iterator()},e.prototype.getDegree=function(){return this.outEdges.size()},e.prototype.getCoordinate=function(){var t=iterator();if(!t.hasNext())return null;var e=t.next();return e.getCoordinate()},e.prototype.getEdges=function(){return this.sortEdges(),this.outEdges},e.prototype.sortEdges=function(){if(!this.sorted){var t=this.outEdges.toArray();t.sort(function(t,e){return t.compareTo(e)}),this.outEdges=javascript.util.Arrays.asList(t),this.sorted=!0}},e.prototype.getIndex=function(t){if(t instanceof jsts.planargraph.DirectedEdge)return this.getIndex2(t);if(\"number\"==typeof t)return this.getIndex3(t);this.sortEdges();for(var e=0;e<this.outEdges.size();e++){var o=this.outEdges.get(e);if(o.getEdge()==t)return e}return-1},e.prototype.getIndex2=function(t){this.sortEdges();for(var e=0;e<this.outEdges.size();e++){var o=this.outEdges.get(e);if(o==t)return e}return-1},e.prototype.getIndex3=function(t){var e=toInt(t%this.outEdges.size());return 0>e&&(e+=this.outEdges.size()),e},e.prototype.getNextEdge=function(t){var e=this.getIndex(t);return this.outEdges.get(getIndex(e+1))},e.prototype.getNextCWEdge=function(t){var e=this.getIndex(t);return this.outEdges.get(getIndex(e-1))},jsts.planargraph.DirectedEdgeStar=e}(),function(){var t=jsts.planargraph.GraphComponent,e=jsts.planargraph.DirectedEdgeStar,o=function(t,o){this.pt=t,this.deStar=o||new e};o.prototype=new t,o.getEdgesBetween=function(t,e){var o=DirectedEdge.toEdges(t.getOutEdges().getEdges()),n=new javascript.util.HashSet(o),r=DirectedEdge.toEdges(e.getOutEdges().getEdges());return n.retainAll(r),n},o.prototype.pt=null,o.prototype.deStar=null,o.prototype.getCoordinate=function(){return this.pt},o.prototype.addOutEdge=function(t){this.deStar.add(t)},o.prototype.getOutEdges=function(){return this.deStar},o.prototype.getDegree=function(){return this.deStar.getDegree()},o.prototype.getIndex=function(t){return this.deStar.getIndex(t)},o.prototype.remove=function(t){return void 0===t?this.remove2():void this.deStar.remove(t)},o.prototype.remove2=function(){this.pt=null},o.prototype.isRemoved=function(){return null==this.pt},jsts.planargraph.Node=o}(),function(){var t=function(){this.nodeMap=new javascript.util.TreeMap};t.prototype.nodeMap=null,t.prototype.add=function(t){return this.nodeMap.put(t.getCoordinate(),t),t},t.prototype.remove=function(t){return this.nodeMap.remove(t)},t.prototype.find=function(t){return this.nodeMap.get(t)},t.prototype.iterator=function(){return this.nodeMap.values().iterator()},t.prototype.values=function(){return this.nodeMap.values()},jsts.planargraph.NodeMap=t}(),function(){var t=javascript.util.ArrayList,e=function(){this.edges=new javascript.util.HashSet,this.dirEdges=new javascript.util.HashSet,this.nodeMap=new jsts.planargraph.NodeMap};e.prototype.edges=null,e.prototype.dirEdges=null,e.prototype.nodeMap=null,e.prototype.findNode=function(t){return this.nodeMap.find(t)},e.prototype.add=function(t){return t instanceof jsts.planargraph.Edge?this.add2(t):t instanceof jsts.planargraph.DirectedEdge?this.add3(t):void this.nodeMap.add(t)},e.prototype.add2=function(t){this.edges.add(t),this.add(t.getDirEdge(0)),this.add(t.getDirEdge(1))},e.prototype.add3=function(t){this.dirEdges.add(t)},e.prototype.nodeIterator=function(){return this.nodeMap.iterator()},e.prototype.contains=function(t){return t instanceof jsts.planargraph.DirectedEdge?this.contains2(t):this.edges.contains(t)},e.prototype.contains2=function(t){return this.dirEdges.contains(t)},e.prototype.getNodes=function(){return this.nodeMap.values()},e.prototype.dirEdgeIterator=function(){return this.dirEdges.iterator()},e.prototype.edgeIterator=function(){return this.edges.iterator()},e.prototype.getEdges=function(){return this.edges},e.prototype.remove=function(t){return t instanceof jsts.planargraph.DirectedEdge?this.remove2(t):(this.remove(t.getDirEdge(0)),this.remove(t.getDirEdge(1)),this.edges.remove(t),void this.edge.remove())},e.prototype.remove2=function(t){if(t instanceof jsts.planargraph.Node)return this.remove3(t);var e=t.getSym();null!=e&&e.setSym(null),t.getFromNode().remove(t),t.remove(),this.dirEdges.remove(t)},e.prototype.remove3=function(t){for(var e=t.getOutEdges().getEdges(),o=e.iterator();o.hasNext();){var n=o.next(),r=n.getSym();null!=r&&this.remove(r),this.dirEdges.remove(n);var i=n.getEdge();null!=i&&this.edges.remove(i)}this.nodeMap.remove(t.getCoordinate()),t.remove()},e.prototype.findNodesOfDegree=function(e){for(var o=new t,n=this.nodeIterator();n.hasNext();){var r=n.next();r.getDegree()==e&&o.add(r)}return o},jsts.planargraph.PlanarGraph=e}(),function(){var t=javascript.util.ArrayList,e=javascript.util.Stack,o=javascript.util.HashSet,n=jsts.util.Assert,r=jsts.operation.polygonize.EdgeRing,i=jsts.operation.polygonize.PolygonizeEdge,s=jsts.operation.polygonize.PolygonizeDirectedEdge,a=jsts.planargraph.PlanarGraph,p=jsts.planargraph.Node,u=function(t){a.apply(this),this.factory=t};u.prototype=new a,u.getDegreeNonDeleted=function(t){for(var e=t.getOutEdges().getEdges(),o=0,n=e.iterator();n.hasNext();){var r=n.next();r.isMarked()||o++}return o},u.getDegree=function(t,e){for(var o=t.getOutEdges().getEdges(),n=0,r=o.iterator();r.hasNext();){var i=r.next();i.getLabel()==e&&n++}return n},u.deleteAllEdges=function(t){for(var e=t.getOutEdges().getEdges(),o=e.iterator();o.hasNext();){var n=o.next();n.setMarked(!0);var r=n.getSym();null!=r&&r.setMarked(!0)}},u.prototype.factory=null,u.prototype.addEdge=function(t){if(!t.isEmpty()){var e=jsts.geom.CoordinateArrays.removeRepeatedPoints(t.getCoordinates());if(!(e.length<2)){var o=e[0],n=e[e.length-1],r=this.getNode(o),a=this.getNode(n),p=new s(r,a,e[1],!0),u=new s(a,r,e[e.length-2],!1),l=new i(t);l.setDirectedEdges(p,u),this.add(l)}}},u.prototype.getNode=function(t){var e=this.findNode(t);return null==e&&(e=new p(t),this.add(e)),e},u.prototype.computeNextCWEdges=function(){for(var t=this.nodeIterator();t.hasNext();){var e=t.next();u.computeNextCWEdges(e)}},u.prototype.convertMaximalToMinimalEdgeRings=function(t){for(var e=t.iterator();e.hasNext();){var o=e.next(),n=o.getLabel(),r=u.findIntersectionNodes(o,n);if(null!=r)for(var i=r.iterator();i.hasNext();){var s=i.next();u.computeNextCCWEdges(s,n)}}},u.findIntersectionNodes=function(e,o){var r=e,i=null;do{var s=r.getFromNode();u.getDegree(s,o)>1&&(null==i&&(i=new t),i.add(s)),r=r.getNext(),n.isTrue(null!=r,\"found null DE in ring\"),n.isTrue(r==e||!r.isInRing(),\"found DE already in ring\")}while(r!=e);return i},u.prototype.getEdgeRings=function(){this.computeNextCWEdges(),u.label(this.dirEdges,-1);var e=u.findLabeledEdgeRings(this.dirEdges);this.convertMaximalToMinimalEdgeRings(e);for(var o=new t,n=this.dirEdges.iterator();n.hasNext();){var r=n.next();if(!r.isMarked()&&!r.isInRing()){var i=this.findEdgeRing(r);o.add(i)}}return o},u.findLabeledEdgeRings=function(e){for(var o=new t,n=1,r=e.iterator();r.hasNext();){var i=r.next();if(!(i.isMarked()||i.getLabel()>=0)){o.add(i);var s=u.findDirEdgesInRing(i);u.label(s,n),n++}}return o},u.prototype.deleteCutEdges=function(){this.computeNextCWEdges(),u.findLabeledEdgeRings(this.dirEdges);for(var e=new t,o=this.dirEdges.iterator();o.hasNext();){var n=o.next();if(!n.isMarked()){var r=n.getSym();if(n.getLabel()==r.getLabel()){n.setMarked(!0),r.setMarked(!0);var i=n.getEdge();e.add(i.getLine())}}}return e},u.label=function(t,e){for(var o=t.iterator();o.hasNext();){var n=o.next();n.setLabel(e)}},u.computeNextCWEdges=function(t){for(var e=t.getOutEdges(),o=null,n=null,r=e.getEdges().iterator();r.hasNext();){var i=r.next();if(!i.isMarked()){if(null==o&&(o=i),null!=n){var s=n.getSym();s.setNext(i)}n=i}}if(null!=n){var s=n.getSym();s.setNext(o)}},u.computeNextCCWEdges=function(t,e){for(var o=t.getOutEdges(),r=null,i=null,s=o.getEdges(),a=s.size()-1;a>=0;a--){var p=s.get(a),u=p.getSym(),l=null;p.getLabel()==e&&(l=p);var g=null;u.getLabel()==e&&(g=u),(null!=l||null!=g)&&(null!=g&&(i=g),null!=l&&(null!=i&&(i.setNext(l),i=null),null==r&&(r=l)))}null!=i&&(n.isTrue(null!=r),i.setNext(r))},u.findDirEdgesInRing=function(e){var o=e,r=new t;do r.add(o),o=o.getNext(),n.isTrue(null!=o,\"found null DE in ring\"),n.isTrue(o==e||!o.isInRing(),\"found DE already in ring\");while(o!=e);return r},u.prototype.findEdgeRing=function(t){var e=t,o=new r(this.factory);do o.add(e),e.setRing(o),e=e.getNext(),n.isTrue(null!=e,\"found null DE in ring\"),n.isTrue(e==t||!e.isInRing(),\"found DE already in ring\");while(e!=t);return o},u.prototype.deleteDangles=function(){for(var t=this.findNodesOfDegree(1),n=new o,r=new e,i=t.iterator();i.hasNext();)r.push(i.next());for(;!r.isEmpty();){var s=r.pop();u.deleteAllEdges(s);for(var a=s.getOutEdges().getEdges(),i=a.iterator();i.hasNext();){var p=i.next();p.setMarked(!0);var l=p.getSym();null!=l&&l.setMarked(!0);var g=p.getEdge();n.add(g.getLine());var h=p.getToNode();1==u.getDegreeNonDeleted(h)&&r.push(h)}}return n},u.prototype.computeDepthParity=function(){for(;;){var t=null;if(null==t)return;this.computeDepthParity(t)}},u.prototype.computeDepthParity=function(t){},jsts.operation.polygonize.PolygonizeGraph=u}(),jsts.index.strtree.Interval=function(){var t;return 1===arguments.length?(t=arguments[0],jsts.index.strtree.Interval(t.min,t.max)):void(2===arguments.length&&(jsts.util.Assert.isTrue(this.min<=this.max),this.min=arguments[0],this.max=arguments[1]))},jsts.index.strtree.Interval.prototype.min=null,jsts.index.strtree.Interval.prototype.max=null,jsts.index.strtree.Interval.prototype.getCentre=function(){return(this.min+this.max)/2},jsts.index.strtree.Interval.prototype.expandToInclude=function(t){return this.max=Math.max(this.max,t.max),this.min=Math.min(this.min,t.min),this},jsts.index.strtree.Interval.prototype.intersects=function(t){return!(t.min>this.max||t.max<this.min)},jsts.index.strtree.Interval.prototype.equals=function(t){return t instanceof jsts.index.strtree.Interval?(other=t,this.min===other.min&&this.max===other.max):!1},jsts.geom.GeometryFactory=function(t){this.precisionModel=t||new jsts.geom.PrecisionModel},jsts.geom.GeometryFactory.prototype.precisionModel=null,jsts.geom.GeometryFactory.prototype.getPrecisionModel=function(){return this.precisionModel},jsts.geom.GeometryFactory.prototype.createPoint=function(t){var e=new jsts.geom.Point(t,this);return e},jsts.geom.GeometryFactory.prototype.createLineString=function(t){var e=new jsts.geom.LineString(t,this);return e},jsts.geom.GeometryFactory.prototype.createLinearRing=function(t){var e=new jsts.geom.LinearRing(t,this);return e},jsts.geom.GeometryFactory.prototype.createPolygon=function(t,e){var o=new jsts.geom.Polygon(t,e,this);return o},jsts.geom.GeometryFactory.prototype.createMultiPoint=function(t){if(t&&t[0]instanceof jsts.geom.Coordinate){var e,o=[];for(e=0;e<t.length;e++)o.push(this.createPoint(t[e]));t=o}return new jsts.geom.MultiPoint(t,this)},jsts.geom.GeometryFactory.prototype.createMultiLineString=function(t){\nreturn new jsts.geom.MultiLineString(t,this)},jsts.geom.GeometryFactory.prototype.createMultiPolygon=function(t){return new jsts.geom.MultiPolygon(t,this)},jsts.geom.GeometryFactory.prototype.buildGeometry=function(t){for(var e=null,o=!1,n=!1,r=t.iterator();r.hasNext();){var i=r.next(),s=i.CLASS_NAME;null===e&&(e=s),s!==e&&(o=!0),i.isGeometryCollectionBase()&&(n=!0)}if(null===e)return this.createGeometryCollection(null);if(o||n)return this.createGeometryCollection(t.toArray());var a=t.get(0),p=t.size()>1;if(p){if(a instanceof jsts.geom.Polygon)return this.createMultiPolygon(t.toArray());if(a instanceof jsts.geom.LineString)return this.createMultiLineString(t.toArray());if(a instanceof jsts.geom.Point)return this.createMultiPoint(t.toArray());jsts.util.Assert.shouldNeverReachHere(\"Unhandled class: \"+a)}return a},jsts.geom.GeometryFactory.prototype.createGeometryCollection=function(t){return new jsts.geom.GeometryCollection(t,this)},jsts.geom.GeometryFactory.prototype.toGeometry=function(t){return t.isNull()?this.createPoint(null):t.getMinX()===t.getMaxX()&&t.getMinY()===t.getMaxY()?this.createPoint(new jsts.geom.Coordinate(t.getMinX(),t.getMinY())):t.getMinX()===t.getMaxX()||t.getMinY()===t.getMaxY()?this.createLineString([new jsts.geom.Coordinate(t.getMinX(),t.getMinY()),new jsts.geom.Coordinate(t.getMaxX(),t.getMaxY())]):this.createPolygon(this.createLinearRing([new jsts.geom.Coordinate(t.getMinX(),t.getMinY()),new jsts.geom.Coordinate(t.getMinX(),t.getMaxY()),new jsts.geom.Coordinate(t.getMaxX(),t.getMaxY()),new jsts.geom.Coordinate(t.getMaxX(),t.getMinY()),new jsts.geom.Coordinate(t.getMinX(),t.getMinY())]),null)},jsts.geomgraph.NodeFactory=function(){},jsts.geomgraph.NodeFactory.prototype.createNode=function(t){return new jsts.geomgraph.Node(t,null)},function(){jsts.geomgraph.Position=function(){},jsts.geomgraph.Position.ON=0,jsts.geomgraph.Position.LEFT=1,jsts.geomgraph.Position.RIGHT=2,jsts.geomgraph.Position.opposite=function(t){return t===jsts.geomgraph.Position.LEFT?jsts.geomgraph.Position.RIGHT:t===jsts.geomgraph.Position.RIGHT?jsts.geomgraph.Position.LEFT:t}}(),jsts.geomgraph.TopologyLocation=function(){if(this.location=[],3===arguments.length){var t=arguments[0],e=arguments[1],o=arguments[2];this.init(3),this.location[jsts.geomgraph.Position.ON]=t,this.location[jsts.geomgraph.Position.LEFT]=e,this.location[jsts.geomgraph.Position.RIGHT]=o}else if(arguments[0]instanceof jsts.geomgraph.TopologyLocation){var n=arguments[0];if(this.init(n.location.length),null!=n)for(var r=0;r<this.location.length;r++)this.location[r]=n.location[r]}else if(\"number\"==typeof arguments[0]){var t=arguments[0];this.init(1),this.location[jsts.geomgraph.Position.ON]=t}else if(arguments[0]instanceof Array){var i=arguments[0];this.init(i.length)}},jsts.geomgraph.TopologyLocation.prototype.location=null,jsts.geomgraph.TopologyLocation.prototype.init=function(t){this.location[t-1]=null,this.setAllLocations(jsts.geom.Location.NONE)},jsts.geomgraph.TopologyLocation.prototype.get=function(t){return t<this.location.length?this.location[t]:jsts.geom.Location.NONE},jsts.geomgraph.TopologyLocation.prototype.isNull=function(){for(var t=0;t<this.location.length;t++)if(this.location[t]!==jsts.geom.Location.NONE)return!1;return!0},jsts.geomgraph.TopologyLocation.prototype.isAnyNull=function(){for(var t=0;t<this.location.length;t++)if(this.location[t]===jsts.geom.Location.NONE)return!0;return!1},jsts.geomgraph.TopologyLocation.prototype.isEqualOnSide=function(t,e){return this.location[e]==t.location[e]},jsts.geomgraph.TopologyLocation.prototype.isArea=function(){return this.location.length>1},jsts.geomgraph.TopologyLocation.prototype.isLine=function(){return 1===this.location.length},jsts.geomgraph.TopologyLocation.prototype.flip=function(){if(!(this.location.length<=1)){var t=this.location[jsts.geomgraph.Position.LEFT];this.location[jsts.geomgraph.Position.LEFT]=this.location[jsts.geomgraph.Position.RIGHT],this.location[jsts.geomgraph.Position.RIGHT]=t}},jsts.geomgraph.TopologyLocation.prototype.setAllLocations=function(t){for(var e=0;e<this.location.length;e++)this.location[e]=t},jsts.geomgraph.TopologyLocation.prototype.setAllLocationsIfNull=function(t){for(var e=0;e<this.location.length;e++)this.location[e]===jsts.geom.Location.NONE&&(this.location[e]=t)},jsts.geomgraph.TopologyLocation.prototype.setLocation=function(t,e){void 0!==e?this.location[t]=e:this.setLocation(jsts.geomgraph.Position.ON,t)},jsts.geomgraph.TopologyLocation.prototype.getLocations=function(){return location},jsts.geomgraph.TopologyLocation.prototype.setLocations=function(t,e,o){this.location[jsts.geomgraph.Position.ON]=t,this.location[jsts.geomgraph.Position.LEFT]=e,this.location[jsts.geomgraph.Position.RIGHT]=o},jsts.geomgraph.TopologyLocation.prototype.allPositionsEqual=function(t){for(var e=0;e<this.location.length;e++)if(this.location[e]!==t)return!1;return!0},jsts.geomgraph.TopologyLocation.prototype.merge=function(t){if(t.location.length>this.location.length){var e=[];e[jsts.geomgraph.Position.ON]=this.location[jsts.geomgraph.Position.ON],e[jsts.geomgraph.Position.LEFT]=jsts.geom.Location.NONE,e[jsts.geomgraph.Position.RIGHT]=jsts.geom.Location.NONE,this.location=e}for(var o=0;o<this.location.length;o++)this.location[o]===jsts.geom.Location.NONE&&o<t.location.length&&(this.location[o]=t.location[o])},jsts.geomgraph.Label=function(){this.elt=[];var t,e,o,n,r;4===arguments.length?(t=arguments[0],e=arguments[1],o=arguments[2],r=arguments[3],this.elt[0]=new jsts.geomgraph.TopologyLocation(jsts.geom.Location.NONE,jsts.geom.Location.NONE,jsts.geom.Location.NONE),this.elt[1]=new jsts.geomgraph.TopologyLocation(jsts.geom.Location.NONE,jsts.geom.Location.NONE,jsts.geom.Location.NONE),this.elt[t].setLocations(e,o,r)):3===arguments.length?(e=arguments[0],o=arguments[1],r=arguments[2],this.elt[0]=new jsts.geomgraph.TopologyLocation(e,o,r),this.elt[1]=new jsts.geomgraph.TopologyLocation(e,o,r)):2===arguments.length?(t=arguments[0],e=arguments[1],this.elt[0]=new jsts.geomgraph.TopologyLocation(jsts.geom.Location.NONE),this.elt[1]=new jsts.geomgraph.TopologyLocation(jsts.geom.Location.NONE),this.elt[t].setLocation(e)):arguments[0]instanceof jsts.geomgraph.Label?(n=arguments[0],this.elt[0]=new jsts.geomgraph.TopologyLocation(n.elt[0]),this.elt[1]=new jsts.geomgraph.TopologyLocation(n.elt[1])):\"number\"==typeof arguments[0]&&(e=arguments[0],this.elt[0]=new jsts.geomgraph.TopologyLocation(e),this.elt[1]=new jsts.geomgraph.TopologyLocation(e))},jsts.geomgraph.Label.toLineLabel=function(t){var e,o=new jsts.geomgraph.Label(jsts.geom.Location.NONE);for(e=0;2>e;e++)o.setLocation(e,t.getLocation(e));return o},jsts.geomgraph.Label.prototype.elt=null,jsts.geomgraph.Label.prototype.flip=function(){this.elt[0].flip(),this.elt[1].flip()},jsts.geomgraph.Label.prototype.getLocation=function(t,e){return 1==arguments.length?this.getLocation2.apply(this,arguments):this.elt[t].get(e)},jsts.geomgraph.Label.prototype.getLocation2=function(t){return this.elt[t].get(jsts.geomgraph.Position.ON)},jsts.geomgraph.Label.prototype.setLocation=function(t,e,o){return 2==arguments.length?void this.setLocation2.apply(this,arguments):void this.elt[t].setLocation(e,o)},jsts.geomgraph.Label.prototype.setLocation2=function(t,e){this.elt[t].setLocation(jsts.geomgraph.Position.ON,e)},jsts.geomgraph.Label.prototype.setAllLocations=function(t,e){this.elt[t].setAllLocations(e)},jsts.geomgraph.Label.prototype.setAllLocationsIfNull=function(t,e){return 1==arguments.length?void this.setAllLocationsIfNull2.apply(this,arguments):void this.elt[t].setAllLocationsIfNull(e)},jsts.geomgraph.Label.prototype.setAllLocationsIfNull2=function(t){this.setAllLocationsIfNull(0,t),this.setAllLocationsIfNull(1,t)},jsts.geomgraph.Label.prototype.merge=function(t){var e;for(e=0;2>e;e++)null===this.elt[e]&&null!==t.elt[e]?this.elt[e]=new jsts.geomgraph.TopologyLocation(t.elt[e]):this.elt[e].merge(t.elt[e])},jsts.geomgraph.Label.prototype.getGeometryCount=function(){var t=0;return this.elt[0].isNull()||t++,this.elt[1].isNull()||t++,t},jsts.geomgraph.Label.prototype.isNull=function(t){return this.elt[t].isNull()},jsts.geomgraph.Label.prototype.isAnyNull=function(t){return this.elt[t].isAnyNull()},jsts.geomgraph.Label.prototype.isArea=function(){return 1==arguments.length?this.isArea2(arguments[0]):this.elt[0].isArea()||this.elt[1].isArea()},jsts.geomgraph.Label.prototype.isArea2=function(t){return this.elt[t].isArea()},jsts.geomgraph.Label.prototype.isLine=function(t){return this.elt[t].isLine()},jsts.geomgraph.Label.prototype.isEqualOnSide=function(t,e){return this.elt[0].isEqualOnSide(t.elt[0],e)&&this.elt[1].isEqualOnSide(t.elt[1],e)},jsts.geomgraph.Label.prototype.allPositionsEqual=function(t,e){return this.elt[t].allPositionsEqual(e)},jsts.geomgraph.Label.prototype.toLine=function(t){this.elt[t].isArea()&&(this.elt[t]=new jsts.geomgraph.TopologyLocation(this.elt[t].location[0]))},jsts.geomgraph.EdgeRing=function(t,e){this.edges=[],this.pts=[],this.holes=[],this.label=new jsts.geomgraph.Label(jsts.geom.Location.NONE),this.geometryFactory=e,t&&(this.computePoints(t),this.computeRing())},jsts.geomgraph.EdgeRing.prototype.startDe=null,jsts.geomgraph.EdgeRing.prototype.maxNodeDegree=-1,jsts.geomgraph.EdgeRing.prototype.edges=null,jsts.geomgraph.EdgeRing.prototype.pts=null,jsts.geomgraph.EdgeRing.prototype.label=null,jsts.geomgraph.EdgeRing.prototype.ring=null,jsts.geomgraph.EdgeRing.prototype._isHole=null,jsts.geomgraph.EdgeRing.prototype.shell=null,jsts.geomgraph.EdgeRing.prototype.holes=null,jsts.geomgraph.EdgeRing.prototype.geometryFactory=null,jsts.geomgraph.EdgeRing.prototype.isIsolated=function(){return 1==this.label.getGeometryCount()},jsts.geomgraph.EdgeRing.prototype.isHole=function(){return this._isHole},jsts.geomgraph.EdgeRing.prototype.getCoordinate=function(t){return this.pts[t]},jsts.geomgraph.EdgeRing.prototype.getLinearRing=function(){return this.ring},jsts.geomgraph.EdgeRing.prototype.getLabel=function(){return this.label},jsts.geomgraph.EdgeRing.prototype.isShell=function(){return null===this.shell},jsts.geomgraph.EdgeRing.prototype.getShell=function(){return this.shell},jsts.geomgraph.EdgeRing.prototype.setShell=function(t){this.shell=t,null!==t&&t.addHole(this)},jsts.geomgraph.EdgeRing.prototype.addHole=function(t){this.holes.push(t)},jsts.geomgraph.EdgeRing.prototype.toPolygon=function(t){for(var e=[],o=0;o<this.holes.length;o++)e[o]=this.holes[o].getLinearRing();var n=this.geometryFactory.createPolygon(this.getLinearRing(),e);return n},jsts.geomgraph.EdgeRing.prototype.computeRing=function(){if(null===this.ring){for(var t=[],e=0;e<this.pts.length;e++)t[e]=this.pts[e];this.ring=this.geometryFactory.createLinearRing(t),this._isHole=jsts.algorithm.CGAlgorithms.isCCW(this.ring.getCoordinates())}},jsts.geomgraph.EdgeRing.prototype.getNext=function(t){throw new jsts.error.AbstractInvocationError},jsts.geomgraph.EdgeRing.prototype.setEdgeRing=function(t,e){throw new jsts.error.AbstractInvocationError},jsts.geomgraph.EdgeRing.prototype.getEdges=function(){return this.edges},jsts.geomgraph.EdgeRing.prototype.computePoints=function(t){this.startDe=t;var e=t,o=!0;do{if(null===e)throw new jsts.error.TopologyError(\"Found null DirectedEdge\");if(e.getEdgeRing()===this)throw new jsts.error.TopologyError(\"Directed Edge visited twice during ring-building at \"+e.getCoordinate());this.edges.push(e);var n=e.getLabel();jsts.util.Assert.isTrue(n.isArea()),this.mergeLabel(n),this.addPoints(e.getEdge(),e.isForward(),o),o=!1,this.setEdgeRing(e,this),e=this.getNext(e)}while(e!==this.startDe)},jsts.geomgraph.EdgeRing.prototype.getMaxNodeDegree=function(){return this.maxNodeDegree<0&&this.computeMaxNodeDegree(),this.maxNodeDegree},jsts.geomgraph.EdgeRing.prototype.computeMaxNodeDegree=function(){this.maxNodeDegree=0;var t=this.startDe;do{var e=t.getNode(),o=e.getEdges().getOutgoingDegree(this);o>this.maxNodeDegree&&(this.maxNodeDegree=o),t=this.getNext(t)}while(t!==this.startDe);this.maxNodeDegree*=2},jsts.geomgraph.EdgeRing.prototype.setInResult=function(){var t=this.startDe;do t.getEdge().setInResult(!0),t=t.getNext();while(t!=this.startDe)},jsts.geomgraph.EdgeRing.prototype.mergeLabel=function(t){this.mergeLabel2(t,0),this.mergeLabel2(t,1)},jsts.geomgraph.EdgeRing.prototype.mergeLabel2=function(t,e){var o=t.getLocation(e,jsts.geomgraph.Position.RIGHT);if(o!=jsts.geom.Location.NONE)return this.label.getLocation(e)===jsts.geom.Location.NONE?void this.label.setLocation(e,o):void 0},jsts.geomgraph.EdgeRing.prototype.addPoints=function(t,e,o){var n=t.getCoordinates();if(e){var r=1;o&&(r=0);for(var i=r;i<n.length;i++)this.pts.push(n[i])}else{var r=n.length-2;o&&(r=n.length-1);for(var i=r;i>=0;i--)this.pts.push(n[i])}},jsts.geomgraph.EdgeRing.prototype.containsPoint=function(t){var e=this.getLinearRing(),o=e.getEnvelopeInternal();if(!o.contains(t))return!1;if(!jsts.algorithm.CGAlgorithms.isPointInRing(t,e.getCoordinates()))return!1;for(var n=0;n<this.holes.length;n++){var r=this.holes[n];if(r.containsPoint(t))return!1}return!0},function(){jsts.geom.LinearRing=function(t,e){jsts.geom.LineString.apply(this,arguments)},jsts.geom.LinearRing.prototype=new jsts.geom.LineString,jsts.geom.LinearRing.constructor=jsts.geom.LinearRing,jsts.geom.LinearRing.prototype.getBoundaryDimension=function(){return jsts.geom.Dimension.FALSE},jsts.geom.LinearRing.prototype.isSimple=function(){return!0},jsts.geom.LinearRing.prototype.getGeometryType=function(){return\"LinearRing\"},jsts.geom.LinearRing.MINIMUM_VALID_SIZE=4,jsts.geom.LinearRing.prototype.CLASS_NAME=\"jsts.geom.LinearRing\"}(),jsts.index.strtree.Boundable=function(){},jsts.index.strtree.Boundable.prototype.getBounds=function(){throw new jsts.error.AbstractMethodInvocationError},jsts.index.strtree.AbstractNode=function(t){this.level=t,this.childBoundables=[]},jsts.index.strtree.AbstractNode.prototype=new jsts.index.strtree.Boundable,jsts.index.strtree.AbstractNode.constructor=jsts.index.strtree.AbstractNode,jsts.index.strtree.AbstractNode.prototype.childBoundables=null,jsts.index.strtree.AbstractNode.prototype.bounds=null,jsts.index.strtree.AbstractNode.prototype.level=null,jsts.index.strtree.AbstractNode.prototype.getChildBoundables=function(){return this.childBoundables},jsts.index.strtree.AbstractNode.prototype.computeBounds=function(){throw new jsts.error.AbstractMethodInvocationError},jsts.index.strtree.AbstractNode.prototype.getBounds=function(){return null===this.bounds&&(this.bounds=this.computeBounds()),this.bounds},jsts.index.strtree.AbstractNode.prototype.getLevel=function(){return this.level},jsts.index.strtree.AbstractNode.prototype.addChildBoundable=function(t){this.childBoundables.push(t)},function(){jsts.noding.Noder=function(){},jsts.noding.Noder.prototype.computeNodes=jsts.abstractFunc,jsts.noding.Noder.prototype.getNodedSubstrings=jsts.abstractFunc}(),function(){var t=jsts.noding.Noder;jsts.noding.SinglePassNoder=function(){},jsts.noding.SinglePassNoder.prototype=new t,jsts.noding.SinglePassNoder.constructor=jsts.noding.SinglePassNoder,jsts.noding.SinglePassNoder.prototype.segInt=null,jsts.noding.SinglePassNoder.prototype.setSegmentIntersector=function(t){this.segInt=t}}(),jsts.index.SpatialIndex=function(){},jsts.index.SpatialIndex.prototype.insert=function(t,e){throw new jsts.error.AbstractMethodInvocationError},jsts.index.SpatialIndex.prototype.query=function(t,e){throw new jsts.error.AbstractMethodInvocationError},jsts.index.SpatialIndex.prototype.remove=function(t,e){throw new jsts.error.AbstractMethodInvocationError},jsts.index.strtree.AbstractSTRtree=function(t){void 0!==t&&(this.itemBoundables=[],jsts.util.Assert.isTrue(t>1,\"Node capacity must be greater than 1\"),this.nodeCapacity=t)},jsts.index.strtree.AbstractSTRtree.IntersectsOp=function(){},jsts.index.strtree.AbstractSTRtree.IntersectsOp.prototype.intersects=function(t,e){throw new jsts.error.AbstractMethodInvocationError},jsts.index.strtree.AbstractSTRtree.prototype.root=null,jsts.index.strtree.AbstractSTRtree.prototype.built=!1,jsts.index.strtree.AbstractSTRtree.prototype.itemBoundables=null,jsts.index.strtree.AbstractSTRtree.prototype.nodeCapacity=null,jsts.index.strtree.AbstractSTRtree.prototype.build=function(){jsts.util.Assert.isTrue(!this.built),this.root=0===this.itemBoundables.length?this.createNode(0):this.createHigherLevels(this.itemBoundables,-1),this.built=!0},jsts.index.strtree.AbstractSTRtree.prototype.createNode=function(t){throw new jsts.error.AbstractMethodInvocationError},jsts.index.strtree.AbstractSTRtree.prototype.createParentBoundables=function(t,e){jsts.util.Assert.isTrue(!(0===t.length));var o=[];o.push(this.createNode(e));for(var n=[],r=0;r<t.length;r++)n.push(t[r]);n.sort(this.getComparator());for(var r=0;r<n.length;r++){var i=n[r];this.lastNode(o).getChildBoundables().length===this.getNodeCapacity()&&o.push(this.createNode(e)),this.lastNode(o).addChildBoundable(i)}return o},jsts.index.strtree.AbstractSTRtree.prototype.lastNode=function(t){return t[t.length-1]},jsts.index.strtree.AbstractSTRtree.prototype.compareDoubles=function(t,e){return t>e?1:e>t?-1:0},jsts.index.strtree.AbstractSTRtree.prototype.createHigherLevels=function(t,e){jsts.util.Assert.isTrue(!(0===t.length));var o=this.createParentBoundables(t,e+1);return 1===o.length?o[0]:this.createHigherLevels(o,e+1)},jsts.index.strtree.AbstractSTRtree.prototype.getRoot=function(){return this.built||this.build(),this.root},jsts.index.strtree.AbstractSTRtree.prototype.getNodeCapacity=function(){return this.nodeCapacity},jsts.index.strtree.AbstractSTRtree.prototype.size=function(){return 1===arguments.length?this.size2(arguments[0]):(this.built||this.build(),0===this.itemBoundables.length?0:this.size2(root))},jsts.index.strtree.AbstractSTRtree.prototype.size2=function(t){for(var e=0,o=t.getChildBoundables(),n=0;n<o.length;n++){var r=o[n];r instanceof jsts.index.strtree.AbstractNode?e+=this.size(r):r instanceof jsts.index.strtree.ItemBoundable&&(e+=1)}return e},jsts.index.strtree.AbstractSTRtree.prototype.depth=function(){return 1===arguments.length?this.depth2(arguments[0]):(this.built||this.build(),0===this.itemBoundables.length?0:this.depth2(root))},jsts.index.strtree.AbstractSTRtree.prototype.depth2=function(){for(var t=0,e=node.getChildBoundables(),o=0;o<e.length;o++){var n=e[o];if(n instanceof jsts.index.strtree.AbstractNode){var r=this.depth(n);r>t&&(t=r)}}return t+1},jsts.index.strtree.AbstractSTRtree.prototype.insert=function(t,e){jsts.util.Assert.isTrue(!this.built,\"Cannot insert items into an STR packed R-tree after it has been built.\"),this.itemBoundables.push(new jsts.index.strtree.ItemBoundable(t,e))},jsts.index.strtree.AbstractSTRtree.prototype.query=function(t){arguments.length>1&&this.query2.apply(this,arguments),this.built||this.build();var e=[];return 0===this.itemBoundables.length?(jsts.util.Assert.isTrue(null===this.root.getBounds()),e):(this.getIntersectsOp().intersects(this.root.getBounds(),t)&&this.query3(t,this.root,e),e)},jsts.index.strtree.AbstractSTRtree.prototype.query2=function(t,e){arguments.length>2&&this.query3.apply(this,arguments),this.built||this.build(),0===this.itemBoundables.length&&jsts.util.Assert.isTrue(null===this.root.getBounds()),this.getIntersectsOp().intersects(this.root.getBounds(),t)&&this.query4(t,this.root,e)},jsts.index.strtree.AbstractSTRtree.prototype.query3=function(t,e,o){arguments[2]instanceof Array||this.query4.apply(this,arguments);for(var n=e.getChildBoundables(),r=0;r<n.length;r++){var i=n[r];this.getIntersectsOp().intersects(i.getBounds(),t)&&(i instanceof jsts.index.strtree.AbstractNode?this.query3(t,i,o):i instanceof jsts.index.strtree.ItemBoundable?o.push(i.getItem()):jsts.util.Assert.shouldNeverReachHere())}},jsts.index.strtree.AbstractSTRtree.prototype.query4=function(t,e,o){for(var n=e.getChildBoundables(),r=0;r<n.length;r++){var i=n[r];this.getIntersectsOp().intersects(i.getBounds(),t)&&(i instanceof jsts.index.strtree.AbstractNode?this.query4(t,i,o):i instanceof jsts.index.strtree.ItemBoundable?o.visitItem(i.getItem()):jsts.util.Assert.shouldNeverReachHere())}},jsts.index.strtree.AbstractSTRtree.prototype.getIntersectsOp=function(){throw new jsts.error.AbstractMethodInvocationError},jsts.index.strtree.AbstractSTRtree.prototype.itemsTree=function(){if(1===arguments.length)return this.itemsTree2.apply(this,arguments);this.built||this.build();var t=this.itemsTree2(this.root);return null===t?[]:t},jsts.index.strtree.AbstractSTRtree.prototype.itemsTree2=function(t){for(var e=[],o=t.getChildBoundables(),n=0;n<o.length;n++){var r=o[n];if(r instanceof jsts.index.strtree.AbstractNode){var i=this.itemsTree(r);null!=i&&e.push(i)}else r instanceof jsts.index.strtree.ItemBoundable?e.push(r.getItem()):jsts.util.Assert.shouldNeverReachHere()}return e.length<=0?null:e},jsts.index.strtree.AbstractSTRtree.prototype.remove=function(t,e){return this.built||this.build(),0===this.itemBoundables.length&&jsts.util.Assert.isTrue(null==this.root.getBounds()),this.getIntersectsOp().intersects(this.root.getBounds(),t)?this.remove2(t,this.root,e):!1},jsts.index.strtree.AbstractSTRtree.prototype.remove2=function(t,e,o){var n=this.removeItem(e,o);if(n)return!0;for(var r=null,i=e.getChildBoundables(),s=0;s<i.length;s++){var a=i[s];if(this.getIntersectsOp().intersects(a.getBounds(),t)&&a instanceof jsts.index.strtree.AbstractNode&&(n=this.remove(t,a,o))){r=a;break}}return null!=r&&0===r.getChildBoundables().length&&i.splice(i.indexOf(r),1),n},jsts.index.strtree.AbstractSTRtree.prototype.removeItem=function(t,e){for(var o=null,n=t.getChildBoundables(),r=0;r<n.length;r++){var i=n[r];i instanceof jsts.index.strtree.ItemBoundable&&i.getItem()===e&&(o=i)}return null!==o?(n.splice(n.indexOf(o),1),!0):!1},jsts.index.strtree.AbstractSTRtree.prototype.boundablesAtLevel=function(t){if(arguments.length>1)return void this.boundablesAtLevel2.apply(this,arguments);var e=[];return this.boundablesAtLevel2(t,this.root,e),e},jsts.index.strtree.AbstractSTRtree.prototype.boundablesAtLevel2=function(t,e,o){if(jsts.util.Assert.isTrue(t>-2),e.getLevel()===t)return void o.add(e);for(var n=node.getChildBoundables(),r=0;r<n.length;r++){var i=n[r];i instanceof jsts.index.strtree.AbstractNode?this.boundablesAtLevel(t,i,o):(jsts.util.Assert.isTrue(i instanceof jsts.index.strtree.ItemBoundable),-1===t&&o.add(i))}},jsts.index.strtree.AbstractSTRtree.prototype.getComparator=function(){throw new jsts.error.AbstractMethodInvocationError},jsts.index.strtree.STRtree=function(t){t=t||jsts.index.strtree.STRtree.DEFAULT_NODE_CAPACITY,jsts.index.strtree.AbstractSTRtree.call(this,t)},jsts.index.strtree.STRtree.prototype=new jsts.index.strtree.AbstractSTRtree,jsts.index.strtree.STRtree.constructor=jsts.index.strtree.STRtree,jsts.index.strtree.STRtree.prototype.xComparator=function(t,e){return jsts.index.strtree.AbstractSTRtree.prototype.compareDoubles(jsts.index.strtree.STRtree.prototype.centreX(t.getBounds()),jsts.index.strtree.STRtree.prototype.centreX(e.getBounds()))},jsts.index.strtree.STRtree.prototype.yComparator=function(t,e){return jsts.index.strtree.AbstractSTRtree.prototype.compareDoubles(jsts.index.strtree.STRtree.prototype.centreY(t.getBounds()),jsts.index.strtree.STRtree.prototype.centreY(e.getBounds()))},jsts.index.strtree.STRtree.prototype.centreX=function(t){return jsts.index.strtree.STRtree.prototype.avg(t.getMinX(),t.getMaxX())},jsts.index.strtree.STRtree.prototype.centreY=function(t){return jsts.index.strtree.STRtree.prototype.avg(t.getMinY(),t.getMaxY())},jsts.index.strtree.STRtree.prototype.avg=function(t,e){return(t+e)/2},jsts.index.strtree.STRtree.prototype.intersectsOp={intersects:function(t,e){return t.intersects(e)}},jsts.index.strtree.STRtree.prototype.createParentBoundables=function(t,e){jsts.util.Assert.isTrue(!(0===t.length));for(var o=Math.ceil(t.length/this.getNodeCapacity()),n=[],r=0;r<t.length;r++)n.push(t[r]);n.sort(this.xComparator);var i=this.verticalSlices(n,Math.ceil(Math.sqrt(o)));return this.createParentBoundablesFromVerticalSlices(i,e)},jsts.index.strtree.STRtree.prototype.createParentBoundablesFromVerticalSlices=function(t,e){jsts.util.Assert.isTrue(t.length>0);for(var o=[],n=0;n<t.length;n++)o=o.concat(this.createParentBoundablesFromVerticalSlice(t[n],e));return o},jsts.index.strtree.STRtree.prototype.createParentBoundablesFromVerticalSlice=function(t,e){return jsts.index.strtree.AbstractSTRtree.prototype.createParentBoundables.call(this,t,e)},jsts.index.strtree.STRtree.prototype.verticalSlices=function(t,e){for(var o,n,r=Math.ceil(t.length/e),i=[],s=0,a=0;e>a;a++)for(i[a]=[],o=0;s<t.length&&r>o;)n=t[s++],i[a].push(n),o++;return i},jsts.index.strtree.STRtree.DEFAULT_NODE_CAPACITY=10,jsts.index.strtree.STRtree.prototype.createNode=function(t){var e=new jsts.index.strtree.AbstractNode(t);return e.computeBounds=function(){for(var t=null,e=this.getChildBoundables(),o=0;o<e.length;o++){var n=e[o];null===t?t=new jsts.geom.Envelope(n.getBounds()):t.expandToInclude(n.getBounds())}return t},e},jsts.index.strtree.STRtree.prototype.getIntersectsOp=function(){return this.intersectsOp},jsts.index.strtree.STRtree.prototype.insert=function(t,e){t.isNull()||jsts.index.strtree.AbstractSTRtree.prototype.insert.call(this,t,e)},jsts.index.strtree.STRtree.prototype.query=function(t,e){return jsts.index.strtree.AbstractSTRtree.prototype.query.apply(this,arguments)},jsts.index.strtree.STRtree.prototype.remove=function(t,e){return jsts.index.strtree.AbstractSTRtree.prototype.remove.call(this,t,e)},jsts.index.strtree.STRtree.prototype.size=function(){return jsts.index.strtree.AbstractSTRtree.prototype.size.call(this)},jsts.index.strtree.STRtree.prototype.depth=function(){return jsts.index.strtree.AbstractSTRtree.prototype.depth.call(this)},jsts.index.strtree.STRtree.prototype.getComparator=function(){return this.yComparator},jsts.index.strtree.STRtree.prototype.nearestNeighbour=function(t){var e=new jsts.index.strtree.BoundablePair(this.getRoot(),this.getRoot(),t);return this.nearestNeighbour4(e)},jsts.index.strtree.STRtree.prototype.nearestNeighbour2=function(t,e,o){var n=new jsts.index.strtree.ItemBoundable(t,e),r=new jsts.index.strtree.BoundablePair(this.getRoot(),n,o);return this.nearestNeighbour4(r)[0]},jsts.index.strtree.STRtree.prototype.nearestNeighbour3=function(t,e){var o=new jsts.index.strtree.BoundablePair(this.getRoot(),t.getRoot(),e);return this.nearestNeighbour4(o)},jsts.index.strtree.STRtree.prototype.nearestNeighbour4=function(t){return this.nearestNeighbour5(t,Double.POSITIVE_INFINITY)},jsts.index.strtree.STRtree.prototype.nearestNeighbour5=function(t,e){var o=e,n=null,r=[];for(r.push(t);!r.isEmpty()&&o>0;){var i=r.pop(),s=i.getDistance();if(s>=o)break;i.isLeaves()?(o=s,n=i):i.expandToQueue(r,o)}return[n.getBoundable(0).getItem(),n.getBoundable(1).getItem()]},jsts.noding.SegmentString=function(){},jsts.noding.SegmentString.prototype.getData=jsts.abstractFunc,jsts.noding.SegmentString.prototype.setData=jsts.abstractFunc,jsts.noding.SegmentString.prototype.size=jsts.abstractFunc,jsts.noding.SegmentString.prototype.getCoordinate=jsts.abstractFunc,jsts.noding.SegmentString.prototype.getCoordinates=jsts.abstractFunc,jsts.noding.SegmentString.prototype.isClosed=jsts.abstractFunc,jsts.noding.NodableSegmentString=function(){},jsts.noding.NodableSegmentString.prototype=new jsts.noding.SegmentString,jsts.noding.NodableSegmentString.prototype.addIntersection=jsts.abstractFunc,jsts.noding.NodedSegmentString=function(t,e){this.nodeList=new jsts.noding.SegmentNodeList(this),this.pts=t,this.data=e},jsts.noding.NodedSegmentString.prototype=new jsts.noding.NodableSegmentString,jsts.noding.NodedSegmentString.constructor=jsts.noding.NodedSegmentString,jsts.noding.NodedSegmentString.getNodedSubstrings=function(t){if(2===arguments.length)return void jsts.noding.NodedSegmentString.getNodedSubstrings2.apply(this,arguments);var e=new javascript.util.ArrayList;return jsts.noding.NodedSegmentString.getNodedSubstrings2(t,e),e},jsts.noding.NodedSegmentString.getNodedSubstrings2=function(t,e){for(var o=t.iterator();o.hasNext();){var n=o.next();n.getNodeList().addSplitEdges(e)}},jsts.noding.NodedSegmentString.prototype.nodeList=null,jsts.noding.NodedSegmentString.prototype.pts=null,jsts.noding.NodedSegmentString.prototype.data=null,jsts.noding.NodedSegmentString.prototype.getData=function(){return this.data},jsts.noding.NodedSegmentString.prototype.setData=function(t){this.data=t},jsts.noding.NodedSegmentString.prototype.getNodeList=function(){return this.nodeList},jsts.noding.NodedSegmentString.prototype.size=function(){return this.pts.length},jsts.noding.NodedSegmentString.prototype.getCoordinate=function(t){return this.pts[t]},jsts.noding.NodedSegmentString.prototype.getCoordinates=function(){return this.pts},jsts.noding.NodedSegmentString.prototype.isClosed=function(){return this.pts[0].equals(this.pts[this.pts.length-1])},jsts.noding.NodedSegmentString.prototype.getSegmentOctant=function(t){return t===this.pts.length-1?-1:this.safeOctant(this.getCoordinate(t),this.getCoordinate(t+1))},jsts.noding.NodedSegmentString.prototype.safeOctant=function(t,e){return t.equals2D(e)?0:jsts.noding.Octant.octant(t,e)},jsts.noding.NodedSegmentString.prototype.addIntersections=function(t,e,o){for(var n=0;n<t.getIntersectionNum();n++)this.addIntersection(t,e,o,n)},jsts.noding.NodedSegmentString.prototype.addIntersection=function(t,e,o,n){if(t instanceof jsts.geom.Coordinate)return void this.addIntersection2.apply(this,arguments);var r=new jsts.geom.Coordinate(t.getIntersection(n));this.addIntersection2(r,e)},jsts.noding.NodedSegmentString.prototype.addIntersection2=function(t,e){this.addIntersectionNode(t,e)},jsts.noding.NodedSegmentString.prototype.addIntersectionNode=function(t,e){var o=e,n=o+1;if(n<this.pts.length){var r=this.pts[n];t.equals2D(r)&&(o=n)}var i=this.nodeList.add(t,o);return i},jsts.noding.NodedSegmentString.prototype.toString=function(){var t=new jsts.geom.GeometryFactory;return(new jsts.io.WKTWriter).write(t.createLineString(this.pts))},jsts.index.chain.MonotoneChainBuilder=function(){},jsts.index.chain.MonotoneChainBuilder.toIntArray=function(t){for(var e=[],o=0;o<t.length;o++)e[o]=t[o];return e},jsts.index.chain.MonotoneChainBuilder.getChains=function(t){return 2===arguments.length?jsts.index.chain.MonotoneChainBuilder.getChains2.apply(this,arguments):jsts.index.chain.MonotoneChainBuilder.getChains2(t,null)},jsts.index.chain.MonotoneChainBuilder.getChains2=function(t,e){for(var o=[],n=jsts.index.chain.MonotoneChainBuilder.getChainStartIndices(t),r=0;r<n.length-1;r++){var i=new jsts.index.chain.MonotoneChain(t,n[r],n[r+1],e);o.push(i)}return o},jsts.index.chain.MonotoneChainBuilder.getChainStartIndices=function(t){var e=0,o=[];o.push(e);do{var n=jsts.index.chain.MonotoneChainBuilder.findChainEnd(t,e);o.push(n),e=n}while(e<t.length-1);var r=jsts.index.chain.MonotoneChainBuilder.toIntArray(o);return r},jsts.index.chain.MonotoneChainBuilder.findChainEnd=function(t,e){for(var o=e;o<t.length-1&&t[o].equals2D(t[o+1]);)o++;if(o>=t.length-1)return t.length-1;for(var n=jsts.geomgraph.Quadrant.quadrant(t[o],t[o+1]),r=e+1;r<t.length;){if(!t[r-1].equals2D(t[r])){var i=jsts.geomgraph.Quadrant.quadrant(t[r-1],t[r]);if(i!==n)break}r++}return r-1},jsts.algorithm.LineIntersector=function(){this.inputLines=[[],[]],this.intPt=[null,null],this.pa=this.intPt[0],this.pb=this.intPt[1],this.result=jsts.algorithm.LineIntersector.NO_INTERSECTION},jsts.algorithm.LineIntersector.NO_INTERSECTION=0,jsts.algorithm.LineIntersector.POINT_INTERSECTION=1,jsts.algorithm.LineIntersector.COLLINEAR_INTERSECTION=2,jsts.algorithm.LineIntersector.prototype.setPrecisionModel=function(t){this.precisionModel=t},jsts.algorithm.LineIntersector.prototype.getEndpoint=function(t,e){return this.inputLines[t][e]},jsts.algorithm.LineIntersector.computeEdgeDistance=function(t,e,o){var n=Math.abs(o.x-e.x),r=Math.abs(o.y-e.y),i=-1;if(t.equals(e))i=0;else if(t.equals(o))i=n>r?n:r;else{var s=Math.abs(t.x-e.x),a=Math.abs(t.y-e.y);i=n>r?s:a,0!==i||t.equals(e)||(i=Math.max(s,a))}if(0===i&&!t.equals(e))throw new jsts.error.IllegalArgumentError(\"Bad distance calculation\");\nreturn i},jsts.algorithm.LineIntersector.nonRobustComputeEdgeDistance=function(t,e,o){var n=t.x-e.x,r=t.y-e.y,i=Math.sqrt(n*n+r*r);if(0!==i||t.equals(e))throw new jsts.error.IllegalArgumentError(\"Invalid distance calculation\");return i},jsts.algorithm.LineIntersector.prototype.result=null,jsts.algorithm.LineIntersector.prototype.inputLines=null,jsts.algorithm.LineIntersector.prototype.intPt=null,jsts.algorithm.LineIntersector.prototype.intLineIndex=null,jsts.algorithm.LineIntersector.prototype._isProper=null,jsts.algorithm.LineIntersector.prototype.pa=null,jsts.algorithm.LineIntersector.prototype.pb=null,jsts.algorithm.LineIntersector.prototype.precisionModel=null,jsts.algorithm.LineIntersector.prototype.computeIntersection=function(t,e,o){throw new jsts.error.AbstractMethodInvocationError},jsts.algorithm.LineIntersector.prototype.isCollinear=function(){return this.result===jsts.algorithm.LineIntersector.COLLINEAR_INTERSECTION},jsts.algorithm.LineIntersector.prototype.computeIntersection=function(t,e,o,n){this.inputLines[0][0]=t,this.inputLines[0][1]=e,this.inputLines[1][0]=o,this.inputLines[1][1]=n,this.result=this.computeIntersect(t,e,o,n)},jsts.algorithm.LineIntersector.prototype.computeIntersect=function(t,e,o,n){throw new jsts.error.AbstractMethodInvocationError},jsts.algorithm.LineIntersector.prototype.isEndPoint=function(){return this.hasIntersection()&&!this._isProper},jsts.algorithm.LineIntersector.prototype.hasIntersection=function(){return this.result!==jsts.algorithm.LineIntersector.NO_INTERSECTION},jsts.algorithm.LineIntersector.prototype.getIntersectionNum=function(){return this.result},jsts.algorithm.LineIntersector.prototype.getIntersection=function(t){return this.intPt[t]},jsts.algorithm.LineIntersector.prototype.computeIntLineIndex=function(){null===this.intLineIndex&&(this.intLineIndex=[[],[]],this.computeIntLineIndex(0),this.computeIntLineIndex(1))},jsts.algorithm.LineIntersector.prototype.isIntersection=function(t){var e;for(e=0;e<this.result;e++)if(this.intPt[e].equals2D(t))return!0;return!1},jsts.algorithm.LineIntersector.prototype.isInteriorIntersection=function(){return 1===arguments.length?this.isInteriorIntersection2.apply(this,arguments):this.isInteriorIntersection(0)?!0:this.isInteriorIntersection(1)?!0:!1},jsts.algorithm.LineIntersector.prototype.isInteriorIntersection2=function(t){var e;for(e=0;e<this.result;e++)if(!this.intPt[e].equals2D(this.inputLines[t][0])&&!this.intPt[e].equals2D(this.inputLines[t][1]))return!0;return!1},jsts.algorithm.LineIntersector.prototype.isProper=function(){return this.hasIntersection()&&this._isProper},jsts.algorithm.LineIntersector.prototype.getIntersectionAlongSegment=function(t,e){return this.computeIntLineIndex(),this.intPt[intLineIndex[t][e]]},jsts.algorithm.LineIntersector.prototype.getIndexAlongSegment=function(t,e){return this.computeIntLineIndex(),this.intLineIndex[t][e]},jsts.algorithm.LineIntersector.prototype.computeIntLineIndex=function(t){var e=this.getEdgeDistance(t,0),o=this.getEdgeDistance(t,1);e>o?(this.intLineIndex[t][0]=0,this.intLineIndex[t][1]=1):(this.intLineIndex[t][0]=1,this.intLineIndex[t][1]=0)},jsts.algorithm.LineIntersector.prototype.getEdgeDistance=function(t,e){var o=jsts.algorithm.LineIntersector.computeEdgeDistance(this.intPt[e],this.inputLines[t][0],this.inputLines[t][1]);return o},jsts.algorithm.RobustLineIntersector=function(){jsts.algorithm.RobustLineIntersector.prototype.constructor.call(this)},jsts.algorithm.RobustLineIntersector.prototype=new jsts.algorithm.LineIntersector,jsts.algorithm.RobustLineIntersector.prototype.computeIntersection=function(t,e,o){return 4===arguments.length?void jsts.algorithm.LineIntersector.prototype.computeIntersection.apply(this,arguments):(this._isProper=!1,jsts.geom.Envelope.intersects(e,o,t)&&0===jsts.algorithm.CGAlgorithms.orientationIndex(e,o,t)&&0===jsts.algorithm.CGAlgorithms.orientationIndex(o,e,t)?(this._isProper=!0,(t.equals(e)||t.equals(o))&&(this._isProper=!1),void(this.result=jsts.algorithm.LineIntersector.POINT_INTERSECTION)):void(this.result=jsts.algorithm.LineIntersector.NO_INTERSECTION))},jsts.algorithm.RobustLineIntersector.prototype.computeIntersect=function(t,e,o,n){if(this._isProper=!1,!jsts.geom.Envelope.intersects(t,e,o,n))return jsts.algorithm.LineIntersector.NO_INTERSECTION;var r=jsts.algorithm.CGAlgorithms.orientationIndex(t,e,o),i=jsts.algorithm.CGAlgorithms.orientationIndex(t,e,n);if(r>0&&i>0||0>r&&0>i)return jsts.algorithm.LineIntersector.NO_INTERSECTION;var s=jsts.algorithm.CGAlgorithms.orientationIndex(o,n,t),a=jsts.algorithm.CGAlgorithms.orientationIndex(o,n,e);if(s>0&&a>0||0>s&&0>a)return jsts.algorithm.LineIntersector.NO_INTERSECTION;var p=0===r&&0===i&&0===s&&0===a;return p?this.computeCollinearIntersection(t,e,o,n):(0===r||0===i||0===s||0===a?(this._isProper=!1,t.equals2D(o)||t.equals2D(n)?this.intPt[0]=t:e.equals2D(o)||e.equals2D(n)?this.intPt[0]=e:0===r?this.intPt[0]=new jsts.geom.Coordinate(o):0===i?this.intPt[0]=new jsts.geom.Coordinate(n):0===s?this.intPt[0]=new jsts.geom.Coordinate(t):0===a&&(this.intPt[0]=new jsts.geom.Coordinate(e))):(this._isProper=!0,this.intPt[0]=this.intersection(t,e,o,n)),jsts.algorithm.LineIntersector.POINT_INTERSECTION)},jsts.algorithm.RobustLineIntersector.prototype.computeCollinearIntersection=function(t,e,o,n){var r=jsts.geom.Envelope.intersects(t,e,o),i=jsts.geom.Envelope.intersects(t,e,n),s=jsts.geom.Envelope.intersects(o,n,t),a=jsts.geom.Envelope.intersects(o,n,e);return r&&i?(this.intPt[0]=o,this.intPt[1]=n,jsts.algorithm.LineIntersector.COLLINEAR_INTERSECTION):s&&a?(this.intPt[0]=t,this.intPt[1]=e,jsts.algorithm.LineIntersector.COLLINEAR_INTERSECTION):r&&s?(this.intPt[0]=o,this.intPt[1]=t,!o.equals(t)||i||a?jsts.algorithm.LineIntersector.COLLINEAR_INTERSECTION:jsts.algorithm.LineIntersector.POINT_INTERSECTION):r&&a?(this.intPt[0]=o,this.intPt[1]=e,!o.equals(e)||i||s?jsts.algorithm.LineIntersector.COLLINEAR_INTERSECTION:jsts.algorithm.LineIntersector.POINT_INTERSECTION):i&&s?(this.intPt[0]=n,this.intPt[1]=t,!n.equals(t)||r||a?jsts.algorithm.LineIntersector.COLLINEAR_INTERSECTION:jsts.algorithm.LineIntersector.POINT_INTERSECTION):i&&a?(this.intPt[0]=n,this.intPt[1]=e,!n.equals(e)||r||s?jsts.algorithm.LineIntersector.COLLINEAR_INTERSECTION:jsts.algorithm.LineIntersector.POINT_INTERSECTION):jsts.algorithm.LineIntersector.NO_INTERSECTION},jsts.algorithm.RobustLineIntersector.prototype.intersection=function(t,e,o,n){var r=this.intersectionWithNormalization(t,e,o,n);return this.isInSegmentEnvelopes(r)||(r=jsts.algorithm.CentralEndpointIntersector.getIntersection(t,e,o,n)),null!==this.precisionModel&&this.precisionModel.makePrecise(r),r},jsts.algorithm.RobustLineIntersector.prototype.intersectionWithNormalization=function(t,e,o,n){var r=new jsts.geom.Coordinate(t),i=new jsts.geom.Coordinate(e),s=new jsts.geom.Coordinate(o),a=new jsts.geom.Coordinate(n),p=new jsts.geom.Coordinate;this.normalizeToEnvCentre(r,i,s,a,p);var u=this.safeHCoordinateIntersection(r,i,s,a);return u.x+=p.x,u.y+=p.y,u},jsts.algorithm.RobustLineIntersector.prototype.safeHCoordinateIntersection=function(t,e,o,n){var r=null;try{r=jsts.algorithm.HCoordinate.intersection(t,e,o,n)}catch(i){if(!(i instanceof jsts.error.NotRepresentableError))throw i;r=jsts.algorithm.CentralEndpointIntersector.getIntersection(t,e,o,n)}return r},jsts.algorithm.RobustLineIntersector.prototype.normalizeToMinimum=function(t,e,o,n,r){r.x=this.smallestInAbsValue(t.x,e.x,o.x,n.x),r.y=this.smallestInAbsValue(t.y,e.y,o.y,n.y),t.x-=r.x,t.y-=r.y,e.x-=r.x,e.y-=r.y,o.x-=r.x,o.y-=r.y,n.x-=r.x,n.y-=r.y},jsts.algorithm.RobustLineIntersector.prototype.normalizeToEnvCentre=function(t,e,o,n,r){var i=t.x<e.x?t.x:e.x,s=t.y<e.y?t.y:e.y,a=t.x>e.x?t.x:e.x,p=t.y>e.y?t.y:e.y,u=o.x<n.x?o.x:n.x,l=o.y<n.y?o.y:n.y,g=o.x>n.x?o.x:n.x,h=o.y>n.y?o.y:n.y,c=i>u?i:u,d=g>a?a:g,f=s>l?s:l,m=h>p?p:h,y=(c+d)/2,j=(f+m)/2;r.x=y,r.y=j,t.x-=r.x,t.y-=r.y,e.x-=r.x,e.y-=r.y,o.x-=r.x,o.y-=r.y,n.x-=r.x,n.y-=r.y},jsts.algorithm.RobustLineIntersector.prototype.smallestInAbsValue=function(t,e,o,n){var r=t,i=Math.abs(r);return Math.abs(e)<i&&(r=e,i=Math.abs(e)),Math.abs(o)<i&&(r=o,i=Math.abs(o)),Math.abs(n)<i&&(r=n),r},jsts.algorithm.RobustLineIntersector.prototype.isInSegmentEnvelopes=function(t){var e=new jsts.geom.Envelope(this.inputLines[0][0],this.inputLines[0][1]),o=new jsts.geom.Envelope(this.inputLines[1][0],this.inputLines[1][1]);return e.contains(t)&&o.contains(t)},jsts.algorithm.HCoordinate=function(){this.x=0,this.y=0,this.w=1,1===arguments.length?this.initFrom1Coordinate(arguments[0]):2===arguments.length&&arguments[0]instanceof jsts.geom.Coordinate?this.initFrom2Coordinates(arguments[0],arguments[1]):2===arguments.length&&arguments[0]instanceof jsts.algorithm.HCoordinate?this.initFrom2HCoordinates(arguments[0],arguments[1]):2===arguments.length?this.initFromXY(arguments[0],arguments[1]):3===arguments.length?this.initFromXYW(arguments[0],arguments[1],arguments[2]):4===arguments.length&&this.initFromXYW(arguments[0],arguments[1],arguments[2],arguments[3])},jsts.algorithm.HCoordinate.intersection=function(t,e,o,n){var r,i,s,a,p,u,l,g,h,c,d;if(r=t.y-e.y,i=e.x-t.x,s=t.x*e.y-e.x*t.y,a=o.y-n.y,p=n.x-o.x,u=o.x*n.y-n.x*o.y,l=i*u-p*s,g=a*s-r*u,h=r*p-a*i,c=l/h,d=g/h,!isFinite(c)||!isFinite(d))throw new jsts.error.NotRepresentableError;return new jsts.geom.Coordinate(c,d)},jsts.algorithm.HCoordinate.prototype.initFrom1Coordinate=function(t){this.x=t.x,this.y=t.y,this.w=1},jsts.algorithm.HCoordinate.prototype.initFrom2Coordinates=function(t,e){this.x=t.y-e.y,this.y=e.x-t.x,this.w=t.x*e.y-e.x*t.y},jsts.algorithm.HCoordinate.prototype.initFrom2HCoordinates=function(t,e){this.x=t.y*e.w-e.y*t.w,this.y=e.x*t.w-t.x*e.w,this.w=t.x*e.y-e.x*t.y},jsts.algorithm.HCoordinate.prototype.initFromXYW=function(t,e,o){this.x=t,this.y=e,this.w=o},jsts.algorithm.HCoordinate.prototype.initFromXY=function(t,e){this.x=t,this.y=e,this.w=1},jsts.algorithm.HCoordinate.prototype.initFrom4Coordinates=function(t,e,o,n){var r,i,s,a,p,u;r=t.y-e.y,i=e.x-t.x,s=t.x*e.y-e.x*t.y,a=o.y-n.y,p=n.x-o.x,u=o.x*n.y-n.x*o.y,this.x=i*u-p*s,this.y=a*s-r*u,this.w=r*p-a*i},jsts.algorithm.HCoordinate.prototype.getX=function(){var t=this.x/this.w;if(!isFinite(t))throw new jsts.error.NotRepresentableError;return t},jsts.algorithm.HCoordinate.prototype.getY=function(){var t=this.y/this.w;if(!isFinite(t))throw new jsts.error.NotRepresentableError;return t},jsts.algorithm.HCoordinate.prototype.getCoordinate=function(){var t=new jsts.geom.Coordinate;return t.x=this.getX(),t.y=this.getY(),t},jsts.geom.LineSegment=function(){0===arguments.length?(this.p0=new jsts.geom.Coordinate,this.p1=new jsts.geom.Coordinate):1===arguments.length?(this.p0=arguments[0].p0,this.p1=arguments[0].p1):2===arguments.length?(this.p0=arguments[0],this.p1=arguments[1]):4===arguments.length&&(this.p0=new jsts.geom.Coordinate(arguments[0],arguments[1]),this.p1=new jsts.geom.Coordinate(arguments[2],arguments[3]))},jsts.geom.LineSegment.prototype.p0=null,jsts.geom.LineSegment.prototype.p1=null,jsts.geom.LineSegment.midPoint=function(t,e){return new jsts.geom.Coordinate((t.x+e.x)/2,(t.y+e.y)/2)},jsts.geom.LineSegment.prototype.getCoordinate=function(t){return 0===t?this.p0:this.p1},jsts.geom.LineSegment.prototype.getLength=function(){return this.p0.distance(this.p1)},jsts.geom.LineSegment.prototype.isHorizontal=function(){return this.p0.y===this.p1.y},jsts.geom.LineSegment.prototype.isVertical=function(){return this.p0.x===this.p1.x},jsts.geom.LineSegment.prototype.orientationIndex=function(t){return t instanceof jsts.geom.LineSegment?this.orientationIndex1(t):t instanceof jsts.geom.Coordinate?this.orientationIndex2(t):void 0},jsts.geom.LineSegment.prototype.orientationIndex1=function(t){var e=jsts.algorithm.CGAlgorithms.orientationIndex(this.p0,this.p1,t.p0),o=jsts.algorithm.CGAlgorithms.orientationIndex(this.p0,this.p1,t.p1);return e>=0&&o>=0?Math.max(e,o):0>=e&&0>=o?Math.max(e,o):0},jsts.geom.LineSegment.prototype.orientationIndex2=function(t){return jsts.algorithm.CGAlgorithms.orientationIndex(this.p0,this.p1,t)},jsts.geom.LineSegment.prototype.reverse=function(){var t=this.p0;this.p0=this.p1,this.p1=t},jsts.geom.LineSegment.prototype.normalize=function(){this.p1.compareTo(this.p0)<0&&this.reverse()},jsts.geom.LineSegment.prototype.angle=function(){return Math.atan2(this.p1.y-this.p0.y,this.p1.x-this.p0.x)},jsts.geom.LineSegment.prototype.midPoint=function(){return jsts.geom.LineSegment.midPoint(this.p0,this.p1)},jsts.geom.LineSegment.prototype.distance=function(t){return t instanceof jsts.geom.LineSegment?this.distance1(t):t instanceof jsts.geom.Coordinate?this.distance2(t):void 0},jsts.geom.LineSegment.prototype.distance1=function(t){return jsts.algorithm.CGAlgorithms.distanceLineLine(this.p0,this.p1,t.p0,t.p1)},jsts.geom.LineSegment.prototype.distance2=function(t){return jsts.algorithm.CGAlgorithms.distancePointLine(t,this.p0,this.p1)},jsts.geom.LineSegment.prototype.pointAlong=function(t){var e=new jsts.geom.Coordinate;return e.x=this.p0.x+t*(this.p1.x-this.p0.x),e.y=this.p0.y+t*(this.p1.y-this.p0.y),e},jsts.geom.LineSegment.prototype.pointAlongOffset=function(t,e){var o=this.p0.x+t*(this.p1.x-this.p0.x),n=this.p0.y+t*(this.p1.y-this.p0.y),r=this.p1.x-this.p0.x,i=this.p1.y-this.p0.y,s=Math.sqrt(r*r+i*i),a=0,p=0;if(0!==e){if(0>=s)throw\"Cannot compute offset from zero-length line segment\";a=e*r/s,p=e*i/s}var u=o-p,l=n+a,g=new jsts.geom.Coordinate(u,l);return g},jsts.geom.LineSegment.prototype.projectionFactor=function(t){if(t.equals(this.p0))return 0;if(t.equals(this.p1))return 1;var e=this.p1.x-this.p0.x,o=this.p1.y-this.p0.y,n=e*e+o*o,r=((t.x-this.p0.x)*e+(t.y-this.p0.y)*o)/n;return r},jsts.geom.LineSegment.prototype.segmentFraction=function(t){var e=this.projectionFactor(t);return 0>e?e=0:(e>1||isNaN(e))&&(e=1),e},jsts.geom.LineSegment.prototype.project=function(t){return t instanceof jsts.geom.Coordinate?this.project1(t):t instanceof jsts.geom.LineSegment?this.project2(t):void 0},jsts.geom.LineSegment.prototype.project1=function(t){if(t.equals(this.p0)||t.equals(this.p1))return new jsts.geom.Coordinate(t);var e=this.projectionFactor(t),o=new jsts.geom.Coordinate;return o.x=this.p0.x+e*(this.p1.x-this.p0.x),o.y=this.p0.y+e*(this.p1.y-this.p0.y),o},jsts.geom.LineSegment.prototype.project2=function(t){var e=this.projectionFactor(t.p0),o=this.projectionFactor(t.p1);if(e>=1&&o>=1)return null;if(0>=e&&0>=o)return null;var n=this.project(t.p0);0>e&&(n=p0),e>1&&(n=p1);var r=this.project(t.p1);return 0>o&&(r=p0),o>1&&(r=p1),new jsts.geom.LineSegment(n,r)},jsts.geom.LineSegment.prototype.closestPoint=function(t){var e=this.projectionFactor(t);if(e>0&&1>e)return this.project(t);var o=this.p0.distance(t),n=this.p1.distance(t);return n>o?this.p0:this.p1},jsts.geom.LineSegment.prototype.closestPoints=function(t){var e=this.intersection(t);if(null!==e)return[e,e];var o,n=[],r=Number.MAX_VALUE,i=this.closestPoint(t.p0);r=i.distance(t.p0),n[0]=i,n[1]=t.p0;var s=this.closestPoint(t.p1);o=s.distance(t.p1),r>o&&(r=o,n[0]=s,n[1]=t.p1);var a=t.closestPoint(this.p0);o=a.distance(this.p0),r>o&&(r=o,n[0]=this.p0,n[1]=a);var p=t.closestPoint(this.p1);return o=p.distance(this.p1),r>o&&(r=o,n[0]=this.p1,n[1]=p),n},jsts.geom.LineSegment.prototype.intersection=function(t){var e=new jsts.algorithm.RobustLineIntersector;return e.computeIntersection(this.p0,this.p1,t.p0,t.p1),e.hasIntersection()?e.getIntersection(0):null},jsts.geom.LineSegment.prototype.setCoordinates=function(t){return t instanceof jsts.geom.Coordinate?void this.setCoordinates2.apply(this,arguments):void this.setCoordinates2(t.p0,t.p1)},jsts.geom.LineSegment.prototype.setCoordinates2=function(t,e){this.p0.x=t.x,this.p0.y=t.y,this.p1.x=e.x,this.p1.y=e.y},jsts.geom.LineSegment.prototype.distancePerpendicular=function(t){return jsts.algorithm.CGAlgorithms.distancePointLinePerpendicular(t,this.p0,this.p1)},jsts.geom.LineSegment.prototype.lineIntersection=function(t){try{var e=jsts.algorithm.HCoordinate.intersection(this.p0,this.p1,t.p0,t.p1);return e}catch(o){}return null},jsts.geom.LineSegment.prototype.toGeometry=function(t){return t.createLineString([this.p0,this.p1])},jsts.geom.LineSegment.prototype.equals=function(t){return t instanceof jsts.geom.LineSegment?this.p0.equals(t.p0)&&this.p1.equals(t.p1):!1},jsts.geom.LineSegment.prototype.compareTo=function(t){var e=this.p0.compareTo(t.p0);return 0!==e?e:this.p1.compareTo(t.p1)},jsts.geom.LineSegment.prototype.equalsTopo=function(t){return this.p0.equals(t.p0)&&this.p1.equals(t.p1)||this.p0.equals(t.p1)&&this.p1.equals(t.p0)},jsts.geom.LineSegment.prototype.toString=function(){return\"LINESTRING(\"+this.p0.x+\" \"+this.p0.y+\", \"+this.p1.x+\" \"+this.p1.y+\")\"},jsts.index.chain.MonotoneChainOverlapAction=function(){this.tempEnv1=new jsts.geom.Envelope,this.tempEnv2=new jsts.geom.Envelope,this.overlapSeg1=new jsts.geom.LineSegment,this.overlapSeg2=new jsts.geom.LineSegment},jsts.index.chain.MonotoneChainOverlapAction.prototype.tempEnv1=null,jsts.index.chain.MonotoneChainOverlapAction.prototype.tempEnv2=null,jsts.index.chain.MonotoneChainOverlapAction.prototype.overlapSeg1=null,jsts.index.chain.MonotoneChainOverlapAction.prototype.overlapSeg2=null,jsts.index.chain.MonotoneChainOverlapAction.prototype.overlap=function(t,e,o,n){this.mc1.getLineSegment(e,this.overlapSeg1),this.mc2.getLineSegment(n,this.overlapSeg2),this.overlap2(this.overlapSeg1,this.overlapSeg2)},jsts.index.chain.MonotoneChainOverlapAction.prototype.overlap2=function(t,e){},function(){var t=jsts.index.chain.MonotoneChainOverlapAction,e=jsts.noding.SinglePassNoder,o=jsts.index.strtree.STRtree,n=jsts.noding.NodedSegmentString,r=jsts.index.chain.MonotoneChainBuilder,i=function(t){this.si=t};i.prototype=new t,i.constructor=i,i.prototype.si=null,i.prototype.overlap=function(t,e,o,n){var r=t.getContext(),i=o.getContext();this.si.processIntersections(r,e,i,n)},jsts.noding.MCIndexNoder=function(){this.monoChains=[],this.index=new o},jsts.noding.MCIndexNoder.prototype=new e,jsts.noding.MCIndexNoder.constructor=jsts.noding.MCIndexNoder,jsts.noding.MCIndexNoder.prototype.monoChains=null,jsts.noding.MCIndexNoder.prototype.index=null,jsts.noding.MCIndexNoder.prototype.idCounter=0,jsts.noding.MCIndexNoder.prototype.nodedSegStrings=null,jsts.noding.MCIndexNoder.prototype.nOverlaps=0,jsts.noding.MCIndexNoder.prototype.getMonotoneChains=function(){return this.monoChains},jsts.noding.MCIndexNoder.prototype.getIndex=function(){return this.index},jsts.noding.MCIndexNoder.prototype.getNodedSubstrings=function(){return n.getNodedSubstrings(this.nodedSegStrings)},jsts.noding.MCIndexNoder.prototype.computeNodes=function(t){this.nodedSegStrings=t;for(var e=t.iterator();e.hasNext();)this.add(e.next());this.intersectChains()},jsts.noding.MCIndexNoder.prototype.intersectChains=function(){for(var t=new i(this.segInt),e=0;e<this.monoChains.length;e++)for(var o=this.monoChains[e],n=this.index.query(o.getEnvelope()),r=0;r<n.length;r++){var s=n[r];if(s.getId()>o.getId()&&(o.computeOverlaps(s,t),this.nOverlaps++),this.segInt.isDone())return}},jsts.noding.MCIndexNoder.prototype.add=function(t){for(var e=r.getChains(t.getCoordinates(),t),o=0;o<e.length;o++){var n=e[o];n.setId(this.idCounter++),this.index.insert(n.getEnvelope(),n),this.monoChains.push(n)}}}(),jsts.simplify.LineSegmentIndex=function(){this.index=new jsts.index.quadtree.Quadtree},jsts.simplify.LineSegmentIndex.prototype.index=null,jsts.simplify.LineSegmentIndex.prototype.add=function(t){if(t instanceof jsts.geom.LineSegment)return void this.add2(t);for(var e=t.getSegments(),o=0;o<e.length;o++){var n=e[o];this.add2(n)}},jsts.simplify.LineSegmentIndex.prototype.add2=function(t){this.index.insert(new jsts.geom.Envelope(t.p0,t.p1),t)},jsts.simplify.LineSegmentIndex.prototype.remove=function(t){this.index.remove(new jsts.geom.Envelope(t.p0,t.p1),t)},jsts.simplify.LineSegmentIndex.prototype.query=function(t){var e=new jsts.geom.Envelope(t.p0,t.p1),o=new jsts.simplify.LineSegmentIndex.LineSegmentVisitor(t);this.index.query(e,o);var n=o.getItems();return n},jsts.simplify.LineSegmentIndex.LineSegmentVisitor=function(t){this.items=[],this.querySeg=t},jsts.simplify.LineSegmentIndex.LineSegmentVisitor.prototype=new jsts.index.ItemVisitor,jsts.simplify.LineSegmentIndex.LineSegmentVisitor.prototype.querySeg=null,jsts.simplify.LineSegmentIndex.LineSegmentVisitor.prototype.items=null,jsts.simplify.LineSegmentIndex.LineSegmentVisitor.prototype.visitItem=function(t){var e=t;jsts.geom.Envelope.intersects(e.p0,e.p1,this.querySeg.p0,this.querySeg.p1)&&this.items.push(t)},jsts.simplify.LineSegmentIndex.LineSegmentVisitor.prototype.getItems=function(){return this.items},jsts.geomgraph.EdgeEndStar=function(){this.edgeMap=new javascript.util.TreeMap,this.edgeList=null,this.ptInAreaLocation=[jsts.geom.Location.NONE,jsts.geom.Location.NONE]},jsts.geomgraph.EdgeEndStar.prototype.edgeMap=null,jsts.geomgraph.EdgeEndStar.prototype.edgeList=null,jsts.geomgraph.EdgeEndStar.prototype.ptInAreaLocation=null,jsts.geomgraph.EdgeEndStar.prototype.insert=function(t){throw new jsts.error.AbstractMethodInvocationError},jsts.geomgraph.EdgeEndStar.prototype.insertEdgeEnd=function(t,e){this.edgeMap.put(t,e),this.edgeList=null},jsts.geomgraph.EdgeEndStar.prototype.getCoordinate=function(){var t=this.iterator();if(!t.hasNext())return null;var e=t.next();return e.getCoordinate()},jsts.geomgraph.EdgeEndStar.prototype.getDegree=function(){return this.edgeMap.size()},jsts.geomgraph.EdgeEndStar.prototype.iterator=function(){return this.getEdges().iterator()},jsts.geomgraph.EdgeEndStar.prototype.getEdges=function(){return null===this.edgeList&&(this.edgeList=new javascript.util.ArrayList(this.edgeMap.values())),this.edgeList},jsts.geomgraph.EdgeEndStar.prototype.getNextCW=function(t){this.getEdges();var e=this.edgeList.indexOf(t),o=e-1;return 0===e&&(o=this.edgeList.length-1),this.edgeList[o]},jsts.geomgraph.EdgeEndStar.prototype.computeLabelling=function(t){this.computeEdgeEndLabels(t[0].getBoundaryNodeRule()),this.propagateSideLabels(0),this.propagateSideLabels(1);for(var e=[!1,!1],o=this.iterator();o.hasNext();)for(var n=o.next(),r=n.getLabel(),i=0;2>i;i++)r.isLine(i)&&r.getLocation(i)===jsts.geom.Location.BOUNDARY&&(e[i]=!0);for(var o=this.iterator();o.hasNext();)for(var n=o.next(),r=n.getLabel(),i=0;2>i;i++)if(r.isAnyNull(i)){var s=jsts.geom.Location.NONE;if(e[i])s=jsts.geom.Location.EXTERIOR;else{var a=n.getCoordinate();s=this.getLocation(i,a,t)}r.setAllLocationsIfNull(i,s)}},jsts.geomgraph.EdgeEndStar.prototype.computeEdgeEndLabels=function(t){for(var e=this.iterator();e.hasNext();){var o=e.next();o.computeLabel(t)}},jsts.geomgraph.EdgeEndStar.prototype.getLocation=function(t,e,o){return this.ptInAreaLocation[t]===jsts.geom.Location.NONE&&(this.ptInAreaLocation[t]=jsts.algorithm.locate.SimplePointInAreaLocator.locate(e,o[t].getGeometry())),this.ptInAreaLocation[t]},jsts.geomgraph.EdgeEndStar.prototype.isAreaLabelsConsistent=function(t){return this.computeEdgeEndLabels(t.getBoundaryNodeRule()),this.checkAreaLabelsConsistent(0)},jsts.geomgraph.EdgeEndStar.prototype.checkAreaLabelsConsistent=function(t){var e=this.getEdges();if(e.size()<=0)return!0;var o=e.size()-1,n=e.get(o).getLabel(),r=n.getLocation(t,jsts.geomgraph.Position.LEFT);jsts.util.Assert.isTrue(r!=jsts.geom.Location.NONE,\"Found unlabelled area edge\");for(var i=r,s=this.iterator();s.hasNext();){var a=s.next(),p=a.getLabel();jsts.util.Assert.isTrue(p.isArea(t),\"Found non-area edge\");var u=p.getLocation(t,jsts.geomgraph.Position.LEFT),l=p.getLocation(t,jsts.geomgraph.Position.RIGHT);if(u===l)return!1;if(l!==i)return!1;i=u}return!0},jsts.geomgraph.EdgeEndStar.prototype.propagateSideLabels=function(t){for(var e=jsts.geom.Location.NONE,o=this.iterator();o.hasNext();){var n=o.next(),r=n.getLabel();r.isArea(t)&&r.getLocation(t,jsts.geomgraph.Position.LEFT)!==jsts.geom.Location.NONE&&(e=r.getLocation(t,jsts.geomgraph.Position.LEFT))}if(e!==jsts.geom.Location.NONE)for(var i=e,o=this.iterator();o.hasNext();){var n=o.next(),r=n.getLabel();if(r.getLocation(t,jsts.geomgraph.Position.ON)===jsts.geom.Location.NONE&&r.setLocation(t,jsts.geomgraph.Position.ON,i),r.isArea(t)){var s=r.getLocation(t,jsts.geomgraph.Position.LEFT),a=r.getLocation(t,jsts.geomgraph.Position.RIGHT);if(a!==jsts.geom.Location.NONE){if(a!==i)throw new jsts.error.TopologyError(\"side location conflict\",n.getCoordinate());s===jsts.geom.Location.NONE&&jsts.util.Assert.shouldNeverReachHere(\"found single null side (at \"+n.getCoordinate()+\")\"),i=s}else jsts.util.Assert.isTrue(r.getLocation(t,jsts.geomgraph.Position.LEFT)===jsts.geom.Location.NONE,\"found single null side\"),r.setLocation(t,jsts.geomgraph.Position.RIGHT,i),r.setLocation(t,jsts.geomgraph.Position.LEFT,i)}}},jsts.geomgraph.EdgeEndStar.prototype.findIndex=function(t){this.iterator();for(var e=0;e<this.edgeList.size();e++){var o=this.edgeList.get(e);if(o===t)return e}return-1},jsts.operation.relate.EdgeEndBundleStar=function(){jsts.geomgraph.EdgeEndStar.apply(this,arguments)},jsts.operation.relate.EdgeEndBundleStar.prototype=new jsts.geomgraph.EdgeEndStar,jsts.operation.relate.EdgeEndBundleStar.prototype.insert=function(t){var e=this.edgeMap.get(t);null===e?(e=new jsts.operation.relate.EdgeEndBundle(t),this.insertEdgeEnd(t,e)):e.insert(t)},jsts.operation.relate.EdgeEndBundleStar.prototype.updateIM=function(t){for(var e=this.iterator();e.hasNext();){var o=e.next();o.updateIM(t)}},jsts.index.ArrayListVisitor=function(){this.items=[]},jsts.index.ArrayListVisitor.prototype.visitItem=function(t){this.items.push(t)},jsts.index.ArrayListVisitor.prototype.getItems=function(){return this.items},jsts.algorithm.distance.DistanceToPoint=function(){},jsts.algorithm.distance.DistanceToPoint.computeDistance=function(t,e,o){if(t instanceof jsts.geom.LineString)jsts.algorithm.distance.DistanceToPoint.computeDistance2(t,e,o);else if(t instanceof jsts.geom.Polygon)jsts.algorithm.distance.DistanceToPoint.computeDistance4(t,e,o);else if(t instanceof jsts.geom.GeometryCollection)for(var n=t,r=0;r<n.getNumGeometries();r++){var i=n.getGeometryN(r);jsts.algorithm.distance.DistanceToPoint.computeDistance(i,e,o)}else o.setMinimum(t.getCoordinate(),e)},jsts.algorithm.distance.DistanceToPoint.computeDistance2=function(t,e,o){for(var n=new jsts.geom.LineSegment,r=t.getCoordinates(),i=0;i<r.length-1;i++){n.setCoordinates(r[i],r[i+1]);var s=n.closestPoint(e);o.setMinimum(s,e)}},jsts.algorithm.distance.DistanceToPoint.computeDistance3=function(t,e,o){var n=t.closestPoint(e);o.setMinimum(n,e)},jsts.algorithm.distance.DistanceToPoint.computeDistance4=function(t,e,o){jsts.algorithm.distance.DistanceToPoint.computeDistance2(t.getExteriorRing(),e,o);for(var n=0;n<t.getNumInteriorRing();n++)jsts.algorithm.distance.DistanceToPoint.computeDistance2(t.getInteriorRingN(n),e,o)},jsts.index.strtree.ItemBoundable=function(t,e){this.bounds=t,this.item=e},jsts.index.strtree.ItemBoundable.prototype=new jsts.index.strtree.Boundable,jsts.index.strtree.ItemBoundable.constructor=jsts.index.strtree.ItemBoundable,jsts.index.strtree.ItemBoundable.prototype.bounds=null,jsts.index.strtree.ItemBoundable.prototype.item=null,jsts.index.strtree.ItemBoundable.prototype.getBounds=function(){return this.bounds},jsts.index.strtree.ItemBoundable.prototype.getItem=function(){return this.item},function(){var t=javascript.util.ArrayList,e=javascript.util.TreeMap;jsts.geomgraph.EdgeList=function(){this.edges=new t,this.ocaMap=new e},jsts.geomgraph.EdgeList.prototype.edges=null,jsts.geomgraph.EdgeList.prototype.ocaMap=null,jsts.geomgraph.EdgeList.prototype.add=function(t){this.edges.add(t);var e=new jsts.noding.OrientedCoordinateArray(t.getCoordinates());this.ocaMap.put(e,t)},jsts.geomgraph.EdgeList.prototype.addAll=function(t){for(var e=t.iterator();e.hasNext();)this.add(e.next())},jsts.geomgraph.EdgeList.prototype.getEdges=function(){return this.edges},jsts.geomgraph.EdgeList.prototype.findEqualEdge=function(t){var e=new jsts.noding.OrientedCoordinateArray(t.getCoordinates()),o=this.ocaMap.get(e);return o},jsts.geomgraph.EdgeList.prototype.getEdges=function(){return this.edges},jsts.geomgraph.EdgeList.prototype.iterator=function(){return this.edges.iterator()},jsts.geomgraph.EdgeList.prototype.get=function(t){return this.edges.get(t)},jsts.geomgraph.EdgeList.prototype.findEdgeIndex=function(t){for(var e=0;e<this.edges.size();e++)if(this.edges.get(e).equals(t))return e;return-1}}(),jsts.operation.IsSimpleOp=function(t){this.geom=t},jsts.operation.IsSimpleOp.prototype.geom=null,jsts.operation.IsSimpleOp.prototype.isClosedEndpointsInInterior=!0,jsts.operation.IsSimpleOp.prototype.nonSimpleLocation=null,jsts.operation.IsSimpleOp.prototype.IsSimpleOp=function(t){this.geom=t},jsts.operation.IsSimpleOp.prototype.isSimple=function(){return this.nonSimpleLocation=null,this.geom instanceof jsts.geom.LineString?this.isSimpleLinearGeometry(this.geom):this.geom instanceof jsts.geom.MultiLineString?this.isSimpleLinearGeometry(this.geom):this.geom instanceof jsts.geom.MultiPoint?this.isSimpleMultiPoint(this.geom):!0},jsts.operation.IsSimpleOp.prototype.isSimpleMultiPoint=function(t){if(t.isEmpty())return!0;for(var e=[],o=0;o<t.getNumGeometries();o++){for(var n=t.getGeometryN(o),r=n.getCoordinate(),i=0;i<e.length;i++){var s=e[i];if(r.equals2D(s))return this.nonSimpleLocation=r,!1}e.push(r)}return!0},jsts.operation.IsSimpleOp.prototype.isSimpleLinearGeometry=function(t){if(t.isEmpty())return!0;var e=new jsts.geomgraph.GeometryGraph(0,t),o=new jsts.algorithm.RobustLineIntersector,n=e.computeSelfNodes(o,!0);return n.hasIntersection()?n.hasProperIntersection()?(this.nonSimpleLocation=n.getProperIntersectionPoint(),!1):this.hasNonEndpointIntersection(e)?!1:this.isClosedEndpointsInInterior&&this.hasClosedEndpointIntersection(e)?!1:!0:!0},jsts.operation.IsSimpleOp.prototype.hasNonEndpointIntersection=function(t){for(var e=t.getEdgeIterator();e.hasNext();)for(var o=e.next(),n=o.getMaximumSegmentIndex(),r=o.getEdgeIntersectionList().iterator();r.hasNext();){var i=r.next();if(!i.isEndPoint(n))return this.nonSimpleLocation=i.getCoordinate(),!0}return!1},jsts.operation.IsSimpleOp.prototype.hasClosedEndpointIntersection=function(t){for(var e=new javascript.util.TreeMap,o=t.getEdgeIterator();o.hasNext();){var n=o.next(),r=(n.getMaximumSegmentIndex(),n.isClosed()),i=n.getCoordinate(0);this.addEndpoint(e,i,r);var s=n.getCoordinate(n.getNumPoints()-1);this.addEndpoint(e,s,r)}for(var o=e.values().iterator();o.hasNext();){var a=o.next();if(a.isClosed&&2!=a.degree)return this.nonSimpleLocation=a.getCoordinate(),!0}return!1},jsts.operation.IsSimpleOp.EndpointInfo=function(t){this.pt=t,this.isClosed=!1,this.degree=0},jsts.operation.IsSimpleOp.EndpointInfo.prototype.pt=null,jsts.operation.IsSimpleOp.EndpointInfo.prototype.isClosed=null,jsts.operation.IsSimpleOp.EndpointInfo.prototype.degree=null,jsts.operation.IsSimpleOp.EndpointInfo.prototype.getCoordinate=function(){return this.pt},jsts.operation.IsSimpleOp.EndpointInfo.prototype.addEndpoint=function(t){this.degree++,this.isClosed=this.isClosed||t},jsts.operation.IsSimpleOp.prototype.addEndpoint=function(t,e,o){var n=t.get(e);null===n&&(n=new jsts.operation.IsSimpleOp.EndpointInfo(e),t.put(e,n)),n.addEndpoint(o)},function(){var t=function(){this.snapTolerance=0,this.seg=new jsts.geom.LineSegment,this.allowSnappingToSourceVertices=!1,this.isClosed=!1,this.srcPts=[],arguments[0]instanceof jsts.geom.LineString?this.initFromLine.apply(this,arguments):this.initFromPoints.apply(this,arguments)};t.prototype.initFromLine=function(t,e){this.initFromPoints(t.getCoordinates(),e)},t.prototype.initFromPoints=function(t,e){this.srcPts=t,this.isClosed=this.calcIsClosed(t),this.snapTolerance=e},t.prototype.setAllowSnappingToSourceVertices=function(t){this.allowSnappingToSourceVertices=t},t.prototype.calcIsClosed=function(t){return t.length<=1?!1:t[0].equals(t[t.length-1])},t.prototype.snapTo=function(t){var e=new jsts.geom.CoordinateList(this.srcPts);return this.snapVertices(e,t),this.snapSegments(e,t),e.toCoordinateArray()},t.prototype.snapVertices=function(t,e){\nvar o,n,r=this.isClosed?t.size()-1:t.size(),i=0;for(i;r>i;i++)o=t.get(i),n=this.findSnapForVertex(o,e),null!==n&&(t.set(i,new jsts.geom.Coordinate(n)),0===i&&this.isClosed&&t.set(t.size()-1,new jsts.geom.Coordinate(n)))},t.prototype.findSnapForVertex=function(t,e){var o=0,n=e.length;for(o=0;n>o;o++){if(t.equals(e[o]))return null;if(t.distance(e[o])<this.snapTolerance)return e[o]}return null},t.prototype.snapSegments=function(t,e){if(0!==e.length){var o,n,r,i=e.length;for(e.length>1&&e[0].equals2D(e[e.length-1])&&(i=e.length-1),o=0;i>o;o++)n=e[o],r=this.findSegmentIndexToSnap(n,t),r>=0&&t.add(r+1,new jsts.geom.Coordinate(n),!1)}},t.prototype.findSegmentIndexToSnap=function(t,e){var o,n=Number.MAX_VALUE,r=-1,i=0;for(i;i<e.size()-1;i++){if(this.seg.p0=e.get(i),this.seg.p1=e.get(i+1),this.seg.p0.equals(t)||this.seg.p1.equals(t)){if(this.allowSnappingToSourceVertices)continue;return-1}o=this.seg.distance(t),o<this.snapTolerance&&n>o&&(n=o,r=i)}return r},jsts.operation.overlay.snap.LineStringSnapper=t}(),function(){var t=javascript.util.ArrayList,e=jsts.geom.GeometryComponentFilter,o=jsts.geom.LineString,n=jsts.operation.polygonize.EdgeRing,r=jsts.operation.polygonize.PolygonizeGraph,i=function(){var n=this,r=function(){};r.prototype=new e,r.prototype.filter=function(t){t instanceof o&&n.add(t)},this.lineStringAdder=new r,this.dangles=new t,this.cutEdges=new t,this.invalidRingLines=new t};i.prototype.lineStringAdder=null,i.prototype.graph=null,i.prototype.dangles=null,i.prototype.cutEdges=null,i.prototype.invalidRingLines=null,i.prototype.holeList=null,i.prototype.shellList=null,i.prototype.polyList=null,i.prototype.add=function(t){if(t instanceof jsts.geom.LineString)return this.add3(t);if(t instanceof jsts.geom.Geometry)return this.add2(t);for(var e=t.iterator();e.hasNext();){var o=e.next();this.add2(o)}},i.prototype.add2=function(t){t.apply(this.lineStringAdder)},i.prototype.add3=function(t){null==this.graph&&(this.graph=new r(t.getFactory())),this.graph.addEdge(t)},i.prototype.getPolygons=function(){return this.polygonize(),this.polyList},i.prototype.getDangles=function(){return this.polygonize(),this.dangles},i.prototype.getCutEdges=function(){return this.polygonize(),this.cutEdges},i.prototype.getInvalidRingLines=function(){return this.polygonize(),this.invalidRingLines},i.prototype.polygonize=function(){if(null==this.polyList&&(this.polyList=new t,null!=this.graph)){this.dangles=this.graph.deleteDangles(),this.cutEdges=this.graph.deleteCutEdges();var e=this.graph.getEdgeRings(),o=new t;this.invalidRingLines=new t,this.findValidRings(e,o,this.invalidRingLines),this.findShellsAndHoles(o),i.assignHolesToShells(this.holeList,this.shellList),this.polyList=new t;for(var n=this.shellList.iterator();n.hasNext();){var r=n.next();this.polyList.add(r.getPolygon())}}},i.prototype.findValidRings=function(t,e,o){for(var n=t.iterator();n.hasNext();){var r=n.next();r.isValid()?e.add(r):o.add(r.getLineString())}},i.prototype.findShellsAndHoles=function(e){this.holeList=new t,this.shellList=new t;for(var o=e.iterator();o.hasNext();){var n=o.next();n.isHole()?this.holeList.add(n):this.shellList.add(n)}},i.assignHolesToShells=function(t,e){for(var o=t.iterator();o.hasNext();){var n=o.next();i.assignHoleToShell(n,e)}},i.assignHoleToShell=function(t,e){var o=n.findEdgeRingContaining(t,e);null!=o&&o.addHole(t.getRing())},jsts.operation.polygonize.Polygonizer=i}(),function(){var t=javascript.util.ArrayList,e=function(){};e.prototype.inputGeom=null,e.prototype.factory=null,e.prototype.pruneEmptyGeometry=!0,e.prototype.preserveGeometryCollectionType=!0,e.prototype.preserveCollections=!1,e.prototype.reserveType=!1,e.prototype.getInputGeometry=function(){return this.inputGeom},e.prototype.transform=function(t){if(this.inputGeom=t,this.factory=t.getFactory(),t instanceof jsts.geom.Point)return this.transformPoint(t,null);if(t instanceof jsts.geom.MultiPoint)return this.transformMultiPoint(t,null);if(t instanceof jsts.geom.LinearRing)return this.transformLinearRing(t,null);if(t instanceof jsts.geom.LineString)return this.transformLineString(t,null);if(t instanceof jsts.geom.MultiLineString)return this.transformMultiLineString(t,null);if(t instanceof jsts.geom.Polygon)return this.transformPolygon(t,null);if(t instanceof jsts.geom.MultiPolygon)return this.transformMultiPolygon(t,null);if(t instanceof jsts.geom.GeometryCollection)return this.transformGeometryCollection(t,null);throw new jsts.error.IllegalArgumentException(\"Unknown Geometry subtype: \"+t.getClass().getName())},e.prototype.createCoordinateSequence=function(t){return this.factory.getCoordinateSequenceFactory().create(t)},e.prototype.copy=function(t){return t.clone()},e.prototype.transformCoordinates=function(t,e){return this.copy(t)},e.prototype.transformPoint=function(t,e){return this.factory.createPoint(this.transformCoordinates(t.getCoordinateSequence(),t))},e.prototype.transformMultiPoint=function(e,o){for(var n=new t,r=0;r<e.getNumGeometries();r++){var i=this.transformPoint(e.getGeometryN(r),e);null!=i&&(i.isEmpty()||n.add(i))}return this.factory.buildGeometry(n)},e.prototype.transformLinearRing=function(t,e){var o=this.transformCoordinates(t.getCoordinateSequence(),t),n=o.length;return n>0&&4>n&&!this.preserveType?this.factory.createLineString(o):this.factory.createLinearRing(o)},e.prototype.transformLineString=function(t,e){return this.factory.createLineString(this.transformCoordinates(t.getCoordinateSequence(),t))},e.prototype.transformMultiLineString=function(e,o){for(var n=new t,r=0;r<e.getNumGeometries();r++){var i=this.transformLineString(e.getGeometryN(r),e);null!=i&&(i.isEmpty()||n.add(i))}return this.factory.buildGeometry(n)},e.prototype.transformPolygon=function(e,o){var n=!0,r=this.transformLinearRing(e.getExteriorRing(),e);null!=r&&r instanceof jsts.geom.LinearRing&&!r.isEmpty()||(n=!1);for(var i=new t,s=0;s<e.getNumInteriorRing();s++){var a=this.transformLinearRing(e.getInteriorRingN(s),e);null==a||a.isEmpty()||(a instanceof jsts.geom.LinearRing||(n=!1),i.add(a))}if(n)return this.factory.createPolygon(r,i.toArray());var p=new t;return null!=r&&p.add(r),p.addAll(i),this.factory.buildGeometry(p)},e.prototype.transformMultiPolygon=function(e,o){for(var n=new t,r=0;r<e.getNumGeometries();r++){var i=this.transformPolygon(e.getGeometryN(r),e);null!=i&&(i.isEmpty()||n.add(i))}return this.factory.buildGeometry(n)},e.prototype.transformGeometryCollection=function(e,o){for(var n=new t,r=0;r<e.getNumGeometries();r++){var i=this.transform(e.getGeometryN(r));null!=i&&(this.pruneEmptyGeometry&&i.isEmpty()||n.add(i))}return this.preserveGeometryCollectionType?this.factory.createGeometryCollection(GeometryFactory.toGeometryArray(n)):this.factory.buildGeometry(n)},jsts.geom.util.GeometryTransformer=e}(),function(){var t=jsts.operation.overlay.snap.LineStringSnapper,e=jsts.geom.PrecisionModel,o=javascript.util.TreeSet,n=function(t,e,o){this.snapTolerance=t,this.snapPts=e,this.isSelfSnap=o||!1};n.prototype=new jsts.geom.util.GeometryTransformer,n.prototype.snapTolerance=null,n.prototype.snapPts=null,n.prototype.isSelfSnap=!1,n.prototype.transformCoordinates=function(t,e){var o=t,n=this.snapLine(o,this.snapPts);return n},n.prototype.snapLine=function(e,o){var n=new t(e,this.snapTolerance);return n.setAllowSnappingToSourceVertices(this.isSelfSnap),n.snapTo(o)};var r=function(t){this.srcGeom=t};r.SNAP_PRECISION_FACTOR=1e-9,r.computeOverlaySnapTolerance=function(t){if(2===arguments.length)return r.computeOverlaySnapTolerance2.apply(this,arguments);var o=this.computeSizeBasedSnapTolerance(t),n=t.getPrecisionModel();if(n.getType()==e.FIXED){var i=1/n.getScale()*2/1.415;i>o&&(o=i)}return o},r.computeSizeBasedSnapTolerance=function(t){var e=t.getEnvelopeInternal(),o=Math.min(e.getHeight(),e.getWidth()),n=o*r.SNAP_PRECISION_FACTOR;return n},r.computeOverlaySnapTolerance2=function(t,e){return Math.min(this.computeOverlaySnapTolerance(t),this.computeOverlaySnapTolerance(e))},r.snap=function(t,e,o){var n=[],i=new r(t);n[0]=i.snapTo(e,o);var s=new r(e);return n[1]=s.snapTo(n[0],o),n},r.snapToSelf=function(t,e,o){var n=new r(t);return n.snapToSelf(e,o)},r.prototype.srcGeom=null,r.prototype.snapTo=function(t,e){var o=this.extractTargetCoordinates(t),r=new n(e,o);return r.transform(this.srcGeom)},r.prototype.snapToSelf=function(t,e){var o=this.extractTargetCoordinates(srcGeom),r=new n(t,o,!0),i=r.transform(srcGeom),s=i;return e&&s instanceof Polygonal&&(s=i.buffer(0)),s},r.prototype.extractTargetCoordinates=function(t){for(var e=new o,n=t.getCoordinates(),r=0;r<n.length;r++)e.add(n[r]);return e.toArray()},r.prototype.computeSnapTolerance=function(t){var e=this.computeMinimumSegmentLength(t),o=e/10;return o},r.prototype.computeMinimumSegmentLength=function(t){for(var e=Number.MAX_VALUE,o=0;o<t.length-1;o++){var n=t[o].distance(t[o+1]);e>n&&(e=n)}return e},jsts.operation.overlay.snap.GeometrySnapper=r}(),jsts.algorithm.PointLocator=function(t){this.boundaryRule=t?t:jsts.algorithm.BoundaryNodeRule.OGC_SFS_BOUNDARY_RULE},jsts.algorithm.PointLocator.prototype.boundaryRule=null,jsts.algorithm.PointLocator.prototype.isIn=null,jsts.algorithm.PointLocator.prototype.numBoundaries=null,jsts.algorithm.PointLocator.prototype.intersects=function(t,e){return this.locate(t,e)!==jsts.geom.Location.EXTERIOR},jsts.algorithm.PointLocator.prototype.locate=function(t,e){return e.isEmpty()?jsts.geom.Location.EXTERIOR:e instanceof jsts.geom.Point?this.locate2(t,e):e instanceof jsts.geom.LineString?this.locate3(t,e):e instanceof jsts.geom.Polygon?this.locate4(t,e):(this.isIn=!1,this.numBoundaries=0,this.computeLocation(t,e),this.boundaryRule.isInBoundary(this.numBoundaries)?jsts.geom.Location.BOUNDARY:this.numBoundaries>0||this.isIn?jsts.geom.Location.INTERIOR:jsts.geom.Location.EXTERIOR)},jsts.algorithm.PointLocator.prototype.computeLocation=function(t,e){if(e instanceof jsts.geom.Point||e instanceof jsts.geom.LineString||e instanceof jsts.geom.Polygon)this.updateLocationInfo(this.locate(t,e));else if(e instanceof jsts.geom.MultiLineString)for(var o=e,n=0;n<o.getNumGeometries();n++){var r=o.getGeometryN(n);this.updateLocationInfo(this.locate(t,r))}else if(e instanceof jsts.geom.MultiPolygon)for(var i=e,n=0;n<i.getNumGeometries();n++){var s=i.getGeometryN(n);this.updateLocationInfo(this.locate(t,s))}else if(e instanceof jsts.geom.MultiPoint||e instanceof jsts.geom.GeometryCollection)for(var n=0;n<e.getNumGeometries();n++){var a=e.getGeometryN(n);a!==e&&this.computeLocation(t,a)}},jsts.algorithm.PointLocator.prototype.updateLocationInfo=function(t){t===jsts.geom.Location.INTERIOR&&(this.isIn=!0),t===jsts.geom.Location.BOUNDARY&&this.numBoundaries++},jsts.algorithm.PointLocator.prototype.locate2=function(t,e){var o=e.getCoordinate();return o.equals2D(t)?jsts.geom.Location.INTERIOR:jsts.geom.Location.EXTERIOR},jsts.algorithm.PointLocator.prototype.locate3=function(t,e){if(!e.getEnvelopeInternal().intersects(t))return jsts.geom.Location.EXTERIOR;var o=e.getCoordinates();return e.isClosed()||!t.equals(o[0])&&!t.equals(o[o.length-1])?jsts.algorithm.CGAlgorithms.isOnLine(t,o)?jsts.geom.Location.INTERIOR:jsts.geom.Location.EXTERIOR:jsts.geom.Location.BOUNDARY},jsts.algorithm.PointLocator.prototype.locateInPolygonRing=function(t,e){return e.getEnvelopeInternal().intersects(t)?jsts.algorithm.CGAlgorithms.locatePointInRing(t,e.getCoordinates()):jsts.geom.Location.EXTERIOR},jsts.algorithm.PointLocator.prototype.locate4=function(t,e){if(e.isEmpty())return jsts.geom.Location.EXTERIOR;var o=e.getExteriorRing(),n=this.locateInPolygonRing(t,o);if(n===jsts.geom.Location.EXTERIOR)return jsts.geom.Location.EXTERIOR;if(n===jsts.geom.Location.BOUNDARY)return jsts.geom.Location.BOUNDARY;for(var r=0;r<e.getNumInteriorRing();r++){var i=e.getInteriorRingN(r),s=this.locateInPolygonRing(t,i);if(s===jsts.geom.Location.INTERIOR)return jsts.geom.Location.EXTERIOR;if(s===jsts.geom.Location.BOUNDARY)return jsts.geom.Location.BOUNDARY}return jsts.geom.Location.INTERIOR},function(){var t=jsts.geom.Location,e=javascript.util.ArrayList,o=javascript.util.TreeMap;jsts.geomgraph.NodeMap=function(t){this.nodeMap=new o,this.nodeFact=t},jsts.geomgraph.NodeMap.prototype.nodeMap=null,jsts.geomgraph.NodeMap.prototype.nodeFact=null,jsts.geomgraph.NodeMap.prototype.addNode=function(t){var e,o;if(t instanceof jsts.geom.Coordinate)return o=t,e=this.nodeMap.get(o),null===e&&(e=this.nodeFact.createNode(o),this.nodeMap.put(o,e)),e;if(t instanceof jsts.geomgraph.Node){var n=t;return o=n.getCoordinate(),e=this.nodeMap.get(o),null===e?(this.nodeMap.put(o,n),n):(e.mergeLabel(n),e)}},jsts.geomgraph.NodeMap.prototype.add=function(t){var e=t.getCoordinate(),o=this.addNode(e);o.add(t)},jsts.geomgraph.NodeMap.prototype.find=function(t){return this.nodeMap.get(t)},jsts.geomgraph.NodeMap.prototype.values=function(){return this.nodeMap.values()},jsts.geomgraph.NodeMap.prototype.iterator=function(){return this.values().iterator()},jsts.geomgraph.NodeMap.prototype.getBoundaryNodes=function(o){for(var n=new e,r=this.iterator();r.hasNext();){var i=r.next();i.getLabel().getLocation(o)===t.BOUNDARY&&n.add(i)}return n}}(),function(){var t=javascript.util.ArrayList;jsts.geomgraph.PlanarGraph=function(e){this.edges=new t,this.edgeEndList=new t,this.nodes=new jsts.geomgraph.NodeMap(e||new jsts.geomgraph.NodeFactory)},jsts.geomgraph.PlanarGraph.prototype.edges=null,jsts.geomgraph.PlanarGraph.prototype.nodes=null,jsts.geomgraph.PlanarGraph.prototype.edgeEndList=null,jsts.geomgraph.PlanarGraph.linkResultDirectedEdges=function(t){for(var e=t.iterator();e.hasNext();){var o=e.next();o.getEdges().linkResultDirectedEdges()}},jsts.geomgraph.PlanarGraph.prototype.getEdgeIterator=function(){return this.edges.iterator()},jsts.geomgraph.PlanarGraph.prototype.getEdgeEnds=function(){return this.edgeEndList},jsts.geomgraph.PlanarGraph.prototype.isBoundaryNode=function(t,e){var o=this.nodes.find(e);if(null===o)return!1;var n=o.getLabel();return null!==n&&n.getLocation(t)===jsts.geom.Location.BOUNDARY?!0:!1},jsts.geomgraph.PlanarGraph.prototype.insertEdge=function(t){this.edges.add(t)},jsts.geomgraph.PlanarGraph.prototype.add=function(t){this.nodes.add(t),this.edgeEndList.add(t)},jsts.geomgraph.PlanarGraph.prototype.getNodeIterator=function(){return this.nodes.iterator()},jsts.geomgraph.PlanarGraph.prototype.getNodes=function(){return this.nodes.values()},jsts.geomgraph.PlanarGraph.prototype.addNode=function(t){return this.nodes.addNode(t)},jsts.geomgraph.PlanarGraph.prototype.addEdges=function(t){for(var e=t.iterator();e.hasNext();){var o=e.next();this.edges.add(o);var n=new jsts.geomgraph.DirectedEdge(o,!0),r=new jsts.geomgraph.DirectedEdge(o,!1);n.setSym(r),r.setSym(n),this.add(n),this.add(r)}},jsts.geomgraph.PlanarGraph.prototype.linkResultDirectedEdges=function(){for(var t=this.nodes.iterator();t.hasNext();){var e=t.next();e.getEdges().linkResultDirectedEdges()}},jsts.geomgraph.PlanarGraph.prototype.findEdgeInSameDirection=function(t,e){var o,n,r=0,i=this.edges.size();for(r;i>r;r++){if(o=this.edges.get(r),n=o.getCoordinates(),this.matchInSameDirection(t,e,n[0],n[1]))return o;if(this.matchInSameDirection(t,e,n[n.length-1],n[n.length-2]))return o}return null},jsts.geomgraph.PlanarGraph.prototype.matchInSameDirection=function(t,e,o,n){return t.equals(o)&&jsts.algorithm.CGAlgorithms.computeOrientation(t,e,n)===jsts.algorithm.CGAlgorithms.COLLINEAR&&jsts.geomgraph.Quadrant.quadrant(t,e)===jsts.geomgraph.Quadrant.quadrant(o,n)?!0:!1},jsts.geomgraph.PlanarGraph.prototype.findEdgeEnd=function(t){for(var e=this.getEdgeEnds().iterator();e.hasNext();){var o=e.next();if(o.getEdge()===t)return o}return null}}(),jsts.noding.SegmentIntersector=function(){},jsts.noding.SegmentIntersector.prototype.processIntersections=jsts.abstractFunc,jsts.noding.SegmentIntersector.prototype.isDone=jsts.abstractFunc,function(){var t=jsts.noding.SegmentIntersector,e=javascript.util.ArrayList;jsts.noding.InteriorIntersectionFinder=function(t){this.li=t,this.intersections=new e,this.interiorIntersection=null},jsts.noding.InteriorIntersectionFinder.prototype=new t,jsts.noding.InteriorIntersectionFinder.constructor=jsts.noding.InteriorIntersectionFinder,jsts.noding.InteriorIntersectionFinder.prototype.findAllIntersections=!1,jsts.noding.InteriorIntersectionFinder.prototype.isCheckEndSegmentsOnly=!1,jsts.noding.InteriorIntersectionFinder.prototype.li=null,jsts.noding.InteriorIntersectionFinder.prototype.interiorIntersection=null,jsts.noding.InteriorIntersectionFinder.prototype.intSegments=null,jsts.noding.InteriorIntersectionFinder.prototype.intersections=null,jsts.noding.InteriorIntersectionFinder.prototype.setFindAllIntersections=function(t){this.findAllIntersections=t},jsts.noding.InteriorIntersectionFinder.prototype.getIntersections=function(){return intersections},jsts.noding.InteriorIntersectionFinder.prototype.setCheckEndSegmentsOnly=function(t){this.isCheckEndSegmentsOnly=t},jsts.noding.InteriorIntersectionFinder.prototype.hasIntersection=function(){return null!=this.interiorIntersection},jsts.noding.InteriorIntersectionFinder.prototype.getInteriorIntersection=function(){return this.interiorIntersection},jsts.noding.InteriorIntersectionFinder.prototype.getIntersectionSegments=function(){return this.intSegments},jsts.noding.InteriorIntersectionFinder.prototype.processIntersections=function(t,e,o,n){if(!this.hasIntersection()&&(t!=o||e!=n)){if(this.isCheckEndSegmentsOnly){var r=this.isEndSegment(t,e)||isEndSegment(o,n);if(!r)return}var i=t.getCoordinates()[e],s=t.getCoordinates()[e+1],a=o.getCoordinates()[n],p=o.getCoordinates()[n+1];this.li.computeIntersection(i,s,a,p),this.li.hasIntersection()&&this.li.isInteriorIntersection()&&(this.intSegments=[],this.intSegments[0]=i,this.intSegments[1]=s,this.intSegments[2]=a,this.intSegments[3]=p,this.interiorIntersection=this.li.getIntersection(0),this.intersections.add(this.interiorIntersection))}},jsts.noding.InteriorIntersectionFinder.prototype.isEndSegment=function(t,e){return 0==e?!0:e>=t.size()-2?!0:!1},jsts.noding.InteriorIntersectionFinder.prototype.isDone=function(){return this.findAllIntersections?!1:null!=this.interiorIntersection}}(),function(){var t=jsts.algorithm.RobustLineIntersector,e=jsts.noding.InteriorIntersectionFinder,o=jsts.noding.MCIndexNoder;jsts.noding.FastNodingValidator=function(e){this.li=new t,this.segStrings=e},jsts.noding.FastNodingValidator.prototype.li=null,jsts.noding.FastNodingValidator.prototype.segStrings=null,jsts.noding.FastNodingValidator.prototype.findAllIntersections=!1,jsts.noding.FastNodingValidator.prototype.segInt=null,jsts.noding.FastNodingValidator.prototype._isValid=!0,jsts.noding.FastNodingValidator.prototype.setFindAllIntersections=function(t){this.findAllIntersections=t},jsts.noding.FastNodingValidator.prototype.getIntersections=function(){return segInt.getIntersections()},jsts.noding.FastNodingValidator.prototype.isValid=function(){return this.execute(),this._isValid},jsts.noding.FastNodingValidator.prototype.getErrorMessage=function(){if(this._isValid)return\"no intersections found\";var t=this.segInt.getIntersectionSegments();return\"found non-noded intersection between \"+jsts.io.WKTWriter.toLineString(t[0],t[1])+\" and \"+jsts.io.WKTWriter.toLineString(t[2],t[3])},jsts.noding.FastNodingValidator.prototype.checkValid=function(){if(this.execute(),!this._isValid)throw new jsts.error.TopologyError(this.getErrorMessage(),this.segInt.getInteriorIntersection())},jsts.noding.FastNodingValidator.prototype.execute=function(){null==this.segInt&&this.checkInteriorIntersections()},jsts.noding.FastNodingValidator.prototype.checkInteriorIntersections=function(){this._isValid=!0,this.segInt=new e(this.li),this.segInt.setFindAllIntersections(this.findAllIntersections);var t=new o;return t.setSegmentIntersector(this.segInt),t.computeNodes(this.segStrings),this.segInt.hasIntersection()?void(this._isValid=!1):void 0}}(),function(){jsts.noding.BasicSegmentString=function(t,e){this.pts=t,this.data=e},jsts.noding.BasicSegmentString.prototype=new jsts.noding.SegmentString,jsts.noding.BasicSegmentString.prototype.pts=null,jsts.noding.BasicSegmentString.prototype.data=null,jsts.noding.BasicSegmentString.prototype.getData=function(){return this.data},jsts.noding.BasicSegmentString.prototype.setData=function(t){this.data=t},jsts.noding.BasicSegmentString.prototype.size=function(){return this.pts.length},jsts.noding.BasicSegmentString.prototype.getCoordinate=function(t){return this.pts[t]},jsts.noding.BasicSegmentString.prototype.getCoordinates=function(){return this.pts},jsts.noding.BasicSegmentString.prototype.isClosed=function(){return this.pts[0].equals(this.pts[this.pts.length-1])},jsts.noding.BasicSegmentString.prototype.getSegmentOctant=function(t){return t==this.pts.length-1?-1:jsts.noding.Octant.octant(this.getCoordinate(t),this.getCoordinate(t+1))}}(),function(){var t=jsts.noding.FastNodingValidator,e=jsts.noding.BasicSegmentString,o=javascript.util.ArrayList;jsts.geomgraph.EdgeNodingValidator=function(e){this.nv=new t(jsts.geomgraph.EdgeNodingValidator.toSegmentStrings(e))},jsts.geomgraph.EdgeNodingValidator.checkValid=function(t){var e=new jsts.geomgraph.EdgeNodingValidator(t);e.checkValid()},jsts.geomgraph.EdgeNodingValidator.toSegmentStrings=function(t){for(var n=new o,r=t.iterator();r.hasNext();){var i=r.next();n.add(new e(i.getCoordinates(),i))}return n},jsts.geomgraph.EdgeNodingValidator.prototype.nv=null,jsts.geomgraph.EdgeNodingValidator.prototype.checkValid=function(){this.nv.checkValid()}}(),jsts.operation.GeometryGraphOperation=function(t,e,o){if(this.li=new jsts.algorithm.RobustLineIntersector,this.arg=[],void 0!==t){if(void 0===e)return this.setComputationPrecision(t.getPrecisionModel()),void(this.arg[0]=new jsts.geomgraph.GeometryGraph(0,t));o=o||jsts.algorithm.BoundaryNodeRule.OGC_SFS_BOUNDARY_RULE,t.getPrecisionModel().compareTo(e.getPrecisionModel())>=0?this.setComputationPrecision(t.getPrecisionModel()):this.setComputationPrecision(e.getPrecisionModel()),this.arg[0]=new jsts.geomgraph.GeometryGraph(0,t,o),this.arg[1]=new jsts.geomgraph.GeometryGraph(1,e,o)}},jsts.operation.GeometryGraphOperation.prototype.li=null,jsts.operation.GeometryGraphOperation.prototype.resultPrecisionModel=null,jsts.operation.GeometryGraphOperation.prototype.arg=null,jsts.operation.GeometryGraphOperation.prototype.getArgGeometry=function(t){return arg[t].getGeometry()},jsts.operation.GeometryGraphOperation.prototype.setComputationPrecision=function(t){this.resultPrecisionModel=t,this.li.setPrecisionModel(this.resultPrecisionModel)},jsts.operation.overlay.OverlayNodeFactory=function(){},jsts.operation.overlay.OverlayNodeFactory.prototype=new jsts.geomgraph.NodeFactory,jsts.operation.overlay.OverlayNodeFactory.constructor=jsts.operation.overlay.OverlayNodeFactory,jsts.operation.overlay.OverlayNodeFactory.prototype.createNode=function(t){return new jsts.geomgraph.Node(t,new jsts.geomgraph.DirectedEdgeStar)},jsts.operation.overlay.PolygonBuilder=function(t){this.shellList=[],this.geometryFactory=t},jsts.operation.overlay.PolygonBuilder.prototype.geometryFactory=null,jsts.operation.overlay.PolygonBuilder.prototype.shellList=null,jsts.operation.overlay.PolygonBuilder.prototype.add=function(t){return 2===arguments.length?void this.add2.apply(this,arguments):void this.add2(t.getEdgeEnds(),t.getNodes())},jsts.operation.overlay.PolygonBuilder.prototype.add2=function(t,e){jsts.geomgraph.PlanarGraph.linkResultDirectedEdges(e);var o=this.buildMaximalEdgeRings(t),n=[],r=this.buildMinimalEdgeRings(o,this.shellList,n);this.sortShellsAndHoles(r,this.shellList,n),this.placeFreeHoles(this.shellList,n)},jsts.operation.overlay.PolygonBuilder.prototype.getPolygons=function(){var t=this.computePolygons(this.shellList);return t},jsts.operation.overlay.PolygonBuilder.prototype.buildMaximalEdgeRings=function(t){for(var e=[],o=t.iterator();o.hasNext();){var n=o.next();if(n.isInResult()&&n.getLabel().isArea()&&null==n.getEdgeRing()){var r=new jsts.operation.overlay.MaximalEdgeRing(n,this.geometryFactory);e.push(r),r.setInResult()}}return e},jsts.operation.overlay.PolygonBuilder.prototype.buildMinimalEdgeRings=function(t,e,o){for(var n=[],r=0;r<t.length;r++){var i=t[r];if(i.getMaxNodeDegree()>2){i.linkDirectedEdgesForMinimalEdgeRings();var s=i.buildMinimalRings(),a=this.findShell(s);null!==a?(this.placePolygonHoles(a,s),e.push(a)):o=o.concat(s)}else n.push(i)}return n},jsts.operation.overlay.PolygonBuilder.prototype.findShell=function(t){for(var e=0,o=null,n=0;n<t.length;n++){var r=t[n];r.isHole()||(o=r,e++)}return jsts.util.Assert.isTrue(1>=e,\"found two shells in MinimalEdgeRing list\"),o},jsts.operation.overlay.PolygonBuilder.prototype.placePolygonHoles=function(t,e){for(var o=0;o<e.length;o++){var n=e[o];n.isHole()&&n.setShell(t)}},jsts.operation.overlay.PolygonBuilder.prototype.sortShellsAndHoles=function(t,e,o){for(var n=0;n<t.length;n++){var r=t[n];r.isHole()?o.push(r):e.push(r)}},jsts.operation.overlay.PolygonBuilder.prototype.placeFreeHoles=function(t,e){for(var o=0;o<e.length;o++){var n=e[o];if(null==n.getShell()){var r=this.findEdgeRingContaining(n,t);if(null===r)throw new jsts.error.TopologyError(\"unable to assign hole to a shell\",n.getCoordinate(0));n.setShell(r)}}},jsts.operation.overlay.PolygonBuilder.prototype.findEdgeRingContaining=function(t,e){for(var o=t.getLinearRing(),n=o.getEnvelopeInternal(),r=o.getCoordinateN(0),i=null,s=null,a=0;a<e.length;a++){var p=e[a],u=p.getLinearRing(),l=u.getEnvelopeInternal();null!==i&&(s=i.getLinearRing().getEnvelopeInternal());var g=!1;l.contains(n)&&jsts.algorithm.CGAlgorithms.isPointInRing(r,u.getCoordinates())&&(g=!0),g&&(null==i||s.contains(l))&&(i=p)}return i},jsts.operation.overlay.PolygonBuilder.prototype.computePolygons=function(t){for(var e=new javascript.util.ArrayList,o=0;o<t.length;o++){var n=t[o],r=n.toPolygon(this.geometryFactory);e.add(r)}return e},jsts.operation.overlay.PolygonBuilder.prototype.containsPoint=function(t){for(var e=0;e<this.shellList.length;e++){var o=this.shellList[e];if(o.containsPoint(t))return!0}return!1},function(){var t=jsts.util.Assert,e=javascript.util.ArrayList,o=function(t,o,n){this.lineEdgesList=new e,this.resultLineList=new e,this.op=t,this.geometryFactory=o,this.ptLocator=n};o.prototype.op=null,o.prototype.geometryFactory=null,o.prototype.ptLocator=null,o.prototype.lineEdgesList=null,o.prototype.resultLineList=null,o.prototype.build=function(t){return this.findCoveredLineEdges(),this.collectLines(t),this.buildLines(t),this.resultLineList},o.prototype.findCoveredLineEdges=function(){for(var t=this.op.getGraph().getNodes().iterator();t.hasNext();){var e=t.next();e.getEdges().findCoveredLineEdges()}for(var o=this.op.getGraph().getEdgeEnds().iterator();o.hasNext();){var n=o.next(),r=n.getEdge();if(n.isLineEdge()&&!r.isCoveredSet()){var i=this.op.isCoveredByA(n.getCoordinate());r.setCovered(i)}}},o.prototype.collectLines=function(t){for(var e=this.op.getGraph().getEdgeEnds().iterator();e.hasNext();){var o=e.next();this.collectLineEdge(o,t,this.lineEdgesList),this.collectBoundaryTouchEdge(o,t,this.lineEdgesList)}},o.prototype.collectLineEdge=function(t,e,o){var n=t.getLabel(),r=t.getEdge();t.isLineEdge()&&(t.isVisited()||!jsts.operation.overlay.OverlayOp.isResultOfOp(n,e)||r.isCovered()||(o.add(r),t.setVisitedEdge(!0)))},o.prototype.collectBoundaryTouchEdge=function(e,o,n){var r=e.getLabel();e.isLineEdge()||e.isVisited()||e.isInteriorAreaEdge()||e.getEdge().isInResult()||(t.isTrue(!(e.isInResult()||e.getSym().isInResult())||!e.getEdge().isInResult()),jsts.operation.overlay.OverlayOp.isResultOfOp(r,o)&&o===jsts.operation.overlay.OverlayOp.INTERSECTION&&(n.add(e.getEdge()),e.setVisitedEdge(!0)))},o.prototype.buildLines=function(t){for(var e=this.lineEdgesList.iterator();e.hasNext();){var o=e.next(),n=(o.getLabel(),this.geometryFactory.createLineString(o.getCoordinates()));this.resultLineList.add(n),o.setInResult(!0)}},o.prototype.labelIsolatedLines=function(t){for(var e=t.iterator();e.hasNext();){var o=e.next(),n=o.getLabel();o.isIsolated()&&(n.isNull(0)?this.labelIsolatedLine(o,0):this.labelIsolatedLine(o,1))}},o.prototype.labelIsolatedLine=function(t,e){var o=ptLocator.locate(t.getCoordinate(),op.getArgGeometry(e));t.getLabel().setLocation(e,o)},jsts.operation.overlay.LineBuilder=o}(),function(){var t=javascript.util.ArrayList,e=function(e,o,n){this.resultPointList=new t,this.op=e,this.geometryFactory=o};e.prototype.op=null,e.prototype.geometryFactory=null,e.prototype.resultPointList=null,e.prototype.build=function(t){return this.extractNonCoveredResultNodes(t),this.resultPointList},e.prototype.extractNonCoveredResultNodes=function(t){for(var e=this.op.getGraph().getNodes().iterator();e.hasNext();){var o=e.next();if(!(o.isInResult()||o.isIncidentEdgeInResult()||0!==o.getEdges().getDegree()&&t!==jsts.operation.overlay.OverlayOp.INTERSECTION)){var n=o.getLabel();jsts.operation.overlay.OverlayOp.isResultOfOp(n,t)&&this.filterCoveredNodeToPoint(o)}}},e.prototype.filterCoveredNodeToPoint=function(t){var e=t.getCoordinate();if(!this.op.isCoveredByLA(e)){var o=this.geometryFactory.createPoint(e);this.resultPointList.add(o)}},jsts.operation.overlay.PointBuilder=e}(),function(){var t=jsts.algorithm.PointLocator,e=jsts.geom.Location,o=jsts.geomgraph.EdgeList,n=jsts.geomgraph.Label,r=jsts.geomgraph.PlanarGraph,i=jsts.geomgraph.Position,s=jsts.geomgraph.EdgeNodingValidator,a=jsts.operation.GeometryGraphOperation,p=jsts.operation.overlay.OverlayNodeFactory,u=jsts.operation.overlay.PolygonBuilder,l=jsts.operation.overlay.LineBuilder,g=jsts.operation.overlay.PointBuilder,h=jsts.util.Assert,c=javascript.util.ArrayList;jsts.operation.overlay.OverlayOp=function(e,n){this.ptLocator=new t,this.edgeList=new o,this.resultPolyList=new c,this.resultLineList=new c,this.resultPointList=new c,a.call(this,e,n),this.graph=new r(new p),this.geomFact=e.getFactory()},jsts.operation.overlay.OverlayOp.prototype=new a,jsts.operation.overlay.OverlayOp.constructor=jsts.operation.overlay.OverlayOp,jsts.operation.overlay.OverlayOp.INTERSECTION=1,jsts.operation.overlay.OverlayOp.UNION=2,jsts.operation.overlay.OverlayOp.DIFFERENCE=3,jsts.operation.overlay.OverlayOp.SYMDIFFERENCE=4,jsts.operation.overlay.OverlayOp.overlayOp=function(t,e,o){var n=new jsts.operation.overlay.OverlayOp(t,e),r=n.getResultGeometry(o);return r},jsts.operation.overlay.OverlayOp.isResultOfOp=function(t,e){if(3===arguments.length)return jsts.operation.overlay.OverlayOp.isResultOfOp2.apply(this,arguments);var o=t.getLocation(0),n=t.getLocation(1);return jsts.operation.overlay.OverlayOp.isResultOfOp2(o,n,e)},jsts.operation.overlay.OverlayOp.isResultOfOp2=function(t,o,n){switch(t==e.BOUNDARY&&(t=e.INTERIOR),o==e.BOUNDARY&&(o=e.INTERIOR),n){case jsts.operation.overlay.OverlayOp.INTERSECTION:return t==e.INTERIOR&&o==e.INTERIOR;case jsts.operation.overlay.OverlayOp.UNION:return t==e.INTERIOR||o==e.INTERIOR;case jsts.operation.overlay.OverlayOp.DIFFERENCE:return t==e.INTERIOR&&o!=e.INTERIOR;case jsts.operation.overlay.OverlayOp.SYMDIFFERENCE:return t==e.INTERIOR&&o!=e.INTERIOR||t!=e.INTERIOR&&o==e.INTERIOR}return!1},jsts.operation.overlay.OverlayOp.prototype.ptLocator=null,jsts.operation.overlay.OverlayOp.prototype.geomFact=null,jsts.operation.overlay.OverlayOp.prototype.resultGeom=null,jsts.operation.overlay.OverlayOp.prototype.graph=null,jsts.operation.overlay.OverlayOp.prototype.edgeList=null,jsts.operation.overlay.OverlayOp.prototype.resultPolyList=null,jsts.operation.overlay.OverlayOp.prototype.resultLineList=null,jsts.operation.overlay.OverlayOp.prototype.resultPointList=null,jsts.operation.overlay.OverlayOp.prototype.getResultGeometry=function(t){return this.computeOverlay(t),this.resultGeom},jsts.operation.overlay.OverlayOp.prototype.getGraph=function(){return this.graph},jsts.operation.overlay.OverlayOp.prototype.computeOverlay=function(t){this.copyPoints(0),this.copyPoints(1),this.arg[0].computeSelfNodes(this.li,!1),this.arg[1].computeSelfNodes(this.li,!1),this.arg[0].computeEdgeIntersections(this.arg[1],this.li,!0);var e=new c;this.arg[0].computeSplitEdges(e),\nthis.arg[1].computeSplitEdges(e);this.insertUniqueEdges(e),this.computeLabelsFromDepths(),this.replaceCollapsedEdges(),s.checkValid(this.edgeList.getEdges()),this.graph.addEdges(this.edgeList.getEdges()),this.computeLabelling(),this.labelIncompleteNodes(),this.findResultAreaEdges(t),this.cancelDuplicateResultEdges();var o=new u(this.geomFact);o.add(this.graph),this.resultPolyList=o.getPolygons();var n=new l(this,this.geomFact,this.ptLocator);this.resultLineList=n.build(t);var r=new g(this,this.geomFact,this.ptLocator);this.resultPointList=r.build(t),this.resultGeom=this.computeGeometry(this.resultPointList,this.resultLineList,this.resultPolyList,t)},jsts.operation.overlay.OverlayOp.prototype.insertUniqueEdges=function(t){for(var e=t.iterator();e.hasNext();){var o=e.next();this.insertUniqueEdge(o)}},jsts.operation.overlay.OverlayOp.prototype.insertUniqueEdge=function(t){var e=this.edgeList.findEqualEdge(t);if(null!==e){var o=e.getLabel(),r=t.getLabel();e.isPointwiseEqual(t)||(r=new n(t.getLabel()),r.flip());var i=e.getDepth();i.isNull()&&i.add(o),i.add(r),o.merge(r)}else this.edgeList.add(t)},jsts.operation.overlay.OverlayOp.prototype.computeLabelsFromDepths=function(){for(var t=this.edgeList.iterator();t.hasNext();){var e=t.next(),o=e.getLabel(),n=e.getDepth();if(!n.isNull()){n.normalize();for(var r=0;2>r;r++)o.isNull(r)||!o.isArea()||n.isNull(r)||(0==n.getDelta(r)?o.toLine(r):(h.isTrue(!n.isNull(r,i.LEFT),\"depth of LEFT side has not been initialized\"),o.setLocation(r,i.LEFT,n.getLocation(r,i.LEFT)),h.isTrue(!n.isNull(r,i.RIGHT),\"depth of RIGHT side has not been initialized\"),o.setLocation(r,i.RIGHT,n.getLocation(r,i.RIGHT))))}}},jsts.operation.overlay.OverlayOp.prototype.replaceCollapsedEdges=function(){for(var t=new c,e=this.edgeList.iterator();e.hasNext();){var o=e.next();o.isCollapsed()&&(e.remove(),t.add(o.getCollapsedEdge()))}this.edgeList.addAll(t)},jsts.operation.overlay.OverlayOp.prototype.copyPoints=function(t){for(var e=this.arg[t].getNodeIterator();e.hasNext();){var o=e.next(),n=this.graph.addNode(o.getCoordinate());n.setLabel(t,o.getLabel().getLocation(t))}},jsts.operation.overlay.OverlayOp.prototype.computeLabelling=function(){for(var t=this.graph.getNodes().iterator();t.hasNext();){var e=t.next();e.getEdges().computeLabelling(this.arg)}this.mergeSymLabels(),this.updateNodeLabelling()},jsts.operation.overlay.OverlayOp.prototype.mergeSymLabels=function(){for(var t=this.graph.getNodes().iterator();t.hasNext();){var e=t.next();e.getEdges().mergeSymLabels()}},jsts.operation.overlay.OverlayOp.prototype.updateNodeLabelling=function(){for(var t=this.graph.getNodes().iterator();t.hasNext();){var e=t.next(),o=e.getEdges().getLabel();e.getLabel().merge(o)}},jsts.operation.overlay.OverlayOp.prototype.labelIncompleteNodes=function(){for(var t=0,e=this.graph.getNodes().iterator();e.hasNext();){var o=e.next(),n=o.getLabel();o.isIsolated()&&(t++,n.isNull(0)?this.labelIncompleteNode(o,0):this.labelIncompleteNode(o,1)),o.getEdges().updateLabelling(n)}},jsts.operation.overlay.OverlayOp.prototype.labelIncompleteNode=function(t,e){var o=this.ptLocator.locate(t.getCoordinate(),this.arg[e].getGeometry());t.getLabel().setLocation(e,o)},jsts.operation.overlay.OverlayOp.prototype.findResultAreaEdges=function(t){for(var e=this.graph.getEdgeEnds().iterator();e.hasNext();){var o=e.next(),n=o.getLabel();n.isArea()&&!o.isInteriorAreaEdge()&&jsts.operation.overlay.OverlayOp.isResultOfOp(n.getLocation(0,i.RIGHT),n.getLocation(1,i.RIGHT),t)&&o.setInResult(!0)}},jsts.operation.overlay.OverlayOp.prototype.cancelDuplicateResultEdges=function(){for(var t=this.graph.getEdgeEnds().iterator();t.hasNext();){var e=t.next(),o=e.getSym();e.isInResult()&&o.isInResult()&&(e.setInResult(!1),o.setInResult(!1))}},jsts.operation.overlay.OverlayOp.prototype.isCoveredByLA=function(t){return this.isCovered(t,this.resultLineList)?!0:this.isCovered(t,this.resultPolyList)?!0:!1},jsts.operation.overlay.OverlayOp.prototype.isCoveredByA=function(t){return this.isCovered(t,this.resultPolyList)?!0:!1},jsts.operation.overlay.OverlayOp.prototype.isCovered=function(t,o){for(var n=o.iterator();n.hasNext();){var r=n.next(),i=this.ptLocator.locate(t,r);if(i!=e.EXTERIOR)return!0}return!1},jsts.operation.overlay.OverlayOp.prototype.computeGeometry=function(t,e,o,n){var r=new c;return r.addAll(t),r.addAll(e),r.addAll(o),this.geomFact.buildGeometry(r)},jsts.operation.overlay.OverlayOp.prototype.createEmptyResult=function(t){var e=null;switch(resultDimension(t,this.arg[0].getGeometry(),this.arg[1].getGeometry())){case-1:e=geomFact.createGeometryCollection();break;case 0:e=geomFact.createPoint(null);break;case 1:e=geomFact.createLineString(null);break;case 2:e=geomFact.createPolygon(null,null)}return e},jsts.operation.overlay.OverlayOp.prototype.resultDimension=function(t,e,o){var n=e.getDimension(),r=o.getDimension(),i=-1;switch(t){case jsts.operation.overlay.OverlayOp.INTERSECTION:i=Math.min(n,r);break;case jsts.operation.overlay.OverlayOp.UNION:i=Math.max(n,r);break;case jsts.operation.overlay.OverlayOp.DIFFERENCE:i=n;break;case jsts.operation.overlay.OverlayOp.SYMDIFFERENCE:i=Math.max(n,r)}return i}}(),function(){var t=jsts.operation.overlay.OverlayOp,e=jsts.operation.overlay.snap.GeometrySnapper,o=function(t,e){this.geom=[],this.geom[0]=t,this.geom[1]=e,this.computeSnapTolerance()};o.overlayOp=function(t,e,n){var r=new o(t,e);return r.getResultGeometry(n)},o.intersection=function(e,o){return this.overlayOp(e,o,t.INTERSECTION)},o.union=function(e,o){return this.overlayOp(e,o,t.UNION)},o.difference=function(e,o){return overlayOp(e,o,t.DIFFERENCE)},o.symDifference=function(e,o){return overlayOp(e,o,t.SYMDIFFERENCE)},o.prototype.geom=null,o.prototype.snapTolerance=null,o.prototype.computeSnapTolerance=function(){this.snapTolerance=e.computeOverlaySnapTolerance(this.geom[0],this.geom[1])},o.prototype.getResultGeometry=function(e){var o=this.snap(this.geom),n=t.overlayOp(o[0],o[1],e);return this.prepareResult(n)},o.prototype.selfSnap=function(t){var o=new e(t),n=o.snapTo(t,this.snapTolerance);return n},o.prototype.snap=function(t){var o=t,n=e.snap(o[0],o[1],this.snapTolerance);return n},o.prototype.prepareResult=function(t){return t},o.prototype.cbr=null,o.prototype.removeCommonBits=function(t){this.cbr=new jsts.precision.CommonBitsRemover,this.cbr.add(this.geom[0]),this.cbr.add(this.geom[1]);var e=[];return e[0]=cbr.removeCommonBits(this.geom[0].clone()),e[1]=cbr.removeCommonBits(this.geom[1].clone()),e},jsts.operation.overlay.snap.SnapOverlayOp=o}(),jsts.geomgraph.index.EdgeSetIntersector=function(){},jsts.geomgraph.index.EdgeSetIntersector.prototype.computeIntersections=function(t,e,o){throw new jsts.error.AbstractMethodInvocationError},jsts.geomgraph.index.EdgeSetIntersector.prototype.computeIntersections2=function(t,e,o){throw new jsts.error.AbstractMethodInvocationError},jsts.geomgraph.index.SimpleMCSweepLineIntersector=function(){this.events=[]},jsts.geomgraph.index.SimpleMCSweepLineIntersector.prototype=new jsts.geomgraph.index.EdgeSetIntersector,jsts.geomgraph.index.SimpleMCSweepLineIntersector.prototype.events=null,jsts.geomgraph.index.SimpleMCSweepLineIntersector.prototype.nOverlaps=0,jsts.geomgraph.index.SimpleMCSweepLineIntersector.prototype.computeIntersections=function(t,e,o){return e instanceof javascript.util.List?void this.computeIntersections2.apply(this,arguments):(o?this.addList2(t,null):this.addList(t),void this.computeIntersections3(e))},jsts.geomgraph.index.SimpleMCSweepLineIntersector.prototype.computeIntersections2=function(t,e,o){this.addList2(t,t),this.addList2(e,e),this.computeIntersections3(o)},jsts.geomgraph.index.SimpleMCSweepLineIntersector.prototype.add=function(t,e){if(t instanceof javascript.util.List)return void this.addList.apply(this,arguments);for(var o=t.getMonotoneChainEdge(),n=o.getStartIndexes(),r=0;r<n.length-1;r++){var i=new jsts.geomgraph.index.MonotoneChain(o,r),s=new jsts.geomgraph.index.SweepLineEvent(o.getMinX(r),i,e);this.events.push(s),this.events.push(new jsts.geomgraph.index.SweepLineEvent(o.getMaxX(r),s))}},jsts.geomgraph.index.SimpleMCSweepLineIntersector.prototype.addList=function(t){for(var e=t.iterator();e.hasNext();){var o=e.next();this.add(o,o)}},jsts.geomgraph.index.SimpleMCSweepLineIntersector.prototype.addList2=function(t,e){for(var o=t.iterator();o.hasNext();){var n=o.next();this.add(n,e)}},jsts.geomgraph.index.SimpleMCSweepLineIntersector.prototype.prepareEvents=function(){this.events.sort(function(t,e){return t.compareTo(e)});for(var t=0;t<this.events.length;t++){var e=this.events[t];e.isDelete()&&e.getInsertEvent().setDeleteEventIndex(t)}},jsts.geomgraph.index.SimpleMCSweepLineIntersector.prototype.computeIntersections3=function(t){this.nOverlaps=0,this.prepareEvents();for(var e=0;e<this.events.length;e++){var o=this.events[e];o.isInsert()&&this.processOverlaps(e,o.getDeleteEventIndex(),o,t)}},jsts.geomgraph.index.SimpleMCSweepLineIntersector.prototype.processOverlaps=function(t,e,o,n){for(var r=o.getObject(),i=t;e>i;i++){var s=this.events[i];if(s.isInsert()){var a=s.getObject();o.isSameLabel(s)||(r.computeIntersections(a,n),this.nOverlaps++)}}},jsts.algorithm.locate.SimplePointInAreaLocator=function(t){this.geom=t},jsts.algorithm.locate.SimplePointInAreaLocator.locate=function(t,e){return e.isEmpty()?jsts.geom.Location.EXTERIOR:jsts.algorithm.locate.SimplePointInAreaLocator.containsPoint(t,e)?jsts.geom.Location.INTERIOR:jsts.geom.Location.EXTERIOR},jsts.algorithm.locate.SimplePointInAreaLocator.containsPoint=function(t,e){if(e instanceof jsts.geom.Polygon)return jsts.algorithm.locate.SimplePointInAreaLocator.containsPointInPolygon(t,e);if(e instanceof jsts.geom.GeometryCollection||e instanceof jsts.geom.MultiPoint||e instanceof jsts.geom.MultiLineString||e instanceof jsts.geom.MultiPolygon)for(var o=0;o<e.geometries.length;o++){var n=e.geometries[o];if(n!==e&&jsts.algorithm.locate.SimplePointInAreaLocator.containsPoint(t,n))return!0}return!1},jsts.algorithm.locate.SimplePointInAreaLocator.containsPointInPolygon=function(t,e){if(e.isEmpty())return!1;var o=e.getExteriorRing();if(!jsts.algorithm.locate.SimplePointInAreaLocator.isPointInRing(t,o))return!1;for(var n=0;n<e.getNumInteriorRing();n++){var r=e.getInteriorRingN(n);if(jsts.algorithm.locate.SimplePointInAreaLocator.isPointInRing(t,r))return!1}return!0},jsts.algorithm.locate.SimplePointInAreaLocator.isPointInRing=function(t,e){return e.getEnvelopeInternal().intersects(t)?jsts.algorithm.CGAlgorithms.isPointInRing(t,e.getCoordinates()):!1},jsts.algorithm.locate.SimplePointInAreaLocator.prototype.geom=null,jsts.algorithm.locate.SimplePointInAreaLocator.prototype.locate=function(t){return jsts.algorithm.locate.SimplePointInAreaLocator.locate(t,geom)},function(){var t=jsts.geom.Location,e=jsts.geomgraph.Position,o=jsts.geomgraph.EdgeEndStar,n=jsts.util.Assert;jsts.geomgraph.DirectedEdgeStar=function(){jsts.geomgraph.EdgeEndStar.call(this)},jsts.geomgraph.DirectedEdgeStar.prototype=new o,jsts.geomgraph.DirectedEdgeStar.constructor=jsts.geomgraph.DirectedEdgeStar,jsts.geomgraph.DirectedEdgeStar.prototype.resultAreaEdgeList=null,jsts.geomgraph.DirectedEdgeStar.prototype.label=null,jsts.geomgraph.DirectedEdgeStar.prototype.insert=function(t){var e=t;this.insertEdgeEnd(e,e)},jsts.geomgraph.DirectedEdgeStar.prototype.getLabel=function(){return this.label},jsts.geomgraph.DirectedEdgeStar.prototype.getOutgoingDegree=function(){for(var t=0,e=this.iterator();e.hasNext();){var o=e.next();o.isInResult()&&t++}return t},jsts.geomgraph.DirectedEdgeStar.prototype.getOutgoingDegree=function(t){for(var e=0,o=this.iterator();o.hasNext();){var n=o.next();n.getEdgeRing()===t&&e++}return e},jsts.geomgraph.DirectedEdgeStar.prototype.getRightmostEdge=function(){var t=this.getEdges(),e=t.size();if(1>e)return null;var o=t.get(0);if(1==e)return o;var r=t.get(e-1),i=o.getQuadrant(),s=r.getQuadrant();if(jsts.geomgraph.Quadrant.isNorthern(i)&&jsts.geomgraph.Quadrant.isNorthern(s))return o;if(!jsts.geomgraph.Quadrant.isNorthern(i)&&!jsts.geomgraph.Quadrant.isNorthern(s))return r;return 0!=o.getDy()?o:0!=r.getDy()?r:(n.shouldNeverReachHere(\"found two horizontal edges incident on node\"),null)},jsts.geomgraph.DirectedEdgeStar.prototype.computeLabelling=function(e){o.prototype.computeLabelling.call(this,e),this.label=new jsts.geomgraph.Label(t.NONE);for(var n=this.iterator();n.hasNext();)for(var r=n.next(),i=r.getEdge(),s=i.getLabel(),a=0;2>a;a++){var p=s.getLocation(a);(p===t.INTERIOR||p===t.BOUNDARY)&&this.label.setLocation(a,t.INTERIOR)}},jsts.geomgraph.DirectedEdgeStar.prototype.mergeSymLabels=function(){for(var t=this.iterator();t.hasNext();){var e=t.next(),o=e.getLabel();o.merge(e.getSym().getLabel())}},jsts.geomgraph.DirectedEdgeStar.prototype.updateLabelling=function(t){for(var e=this.iterator();e.hasNext();){var o=e.next(),n=o.getLabel();n.setAllLocationsIfNull(0,t.getLocation(0)),n.setAllLocationsIfNull(1,t.getLocation(1))}},jsts.geomgraph.DirectedEdgeStar.prototype.getResultAreaEdges=function(){if(null!==this.resultAreaEdgeList)return this.resultAreaEdgeList;this.resultAreaEdgeList=new javascript.util.ArrayList;for(var t=this.iterator();t.hasNext();){var e=t.next();(e.isInResult()||e.getSym().isInResult())&&this.resultAreaEdgeList.add(e)}return this.resultAreaEdgeList},jsts.geomgraph.DirectedEdgeStar.prototype.SCANNING_FOR_INCOMING=1,jsts.geomgraph.DirectedEdgeStar.prototype.LINKING_TO_OUTGOING=2,jsts.geomgraph.DirectedEdgeStar.prototype.linkResultDirectedEdges=function(){this.getResultAreaEdges();for(var t=null,e=null,o=this.SCANNING_FOR_INCOMING,r=0;r<this.resultAreaEdgeList.size();r++){var i=this.resultAreaEdgeList.get(r),s=i.getSym();if(i.getLabel().isArea())switch(null===t&&i.isInResult()&&(t=i),o){case this.SCANNING_FOR_INCOMING:if(!s.isInResult())continue;e=s,o=this.LINKING_TO_OUTGOING;break;case this.LINKING_TO_OUTGOING:if(!i.isInResult())continue;e.setNext(i),o=this.SCANNING_FOR_INCOMING}}if(o===this.LINKING_TO_OUTGOING){if(null===t)throw new jsts.error.TopologyError(\"no outgoing dirEdge found\",this.getCoordinate());n.isTrue(t.isInResult(),\"unable to link last incoming dirEdge\"),e.setNext(t)}},jsts.geomgraph.DirectedEdgeStar.prototype.linkMinimalDirectedEdges=function(t){for(var e=null,o=null,r=this.SCANNING_FOR_INCOMING,i=this.resultAreaEdgeList.size()-1;i>=0;i--){var s=this.resultAreaEdgeList.get(i),a=s.getSym();switch(null===e&&s.getEdgeRing()===t&&(e=s),r){case this.SCANNING_FOR_INCOMING:if(a.getEdgeRing()!=t)continue;o=a,r=this.LINKING_TO_OUTGOING;break;case this.LINKING_TO_OUTGOING:if(s.getEdgeRing()!==t)continue;o.setNextMin(s),r=this.SCANNING_FOR_INCOMING}}r===this.LINKING_TO_OUTGOING&&(n.isTrue(null!==e,\"found null for first outgoing dirEdge\"),n.isTrue(e.getEdgeRing()===t,\"unable to link last incoming dirEdge\"),o.setNextMin(e))},jsts.geomgraph.DirectedEdgeStar.prototype.linkAllDirectedEdges=function(){this.getEdges();for(var t=null,e=null,o=this.edgeList.size()-1;o>=0;o--){var n=this.edgeList.get(o),r=n.getSym();null===e&&(e=r),null!==t&&r.setNext(t),t=n}e.setNext(t)},jsts.geomgraph.DirectedEdgeStar.prototype.findCoveredLineEdges=function(){for(var e=t.NONE,o=this.iterator();o.hasNext();){var n=o.next(),r=n.getSym();if(!n.isLineEdge()){if(n.isInResult()){e=t.INTERIOR;break}if(r.isInResult()){e=t.EXTERIOR;break}}}if(e!==t.NONE)for(var i=e,o=this.iterator();o.hasNext();){var n=o.next(),r=n.getSym();n.isLineEdge()?n.getEdge().setCovered(i===t.INTERIOR):(n.isInResult()&&(i=t.EXTERIOR),r.isInResult()&&(i=t.INTERIOR))}},jsts.geomgraph.DirectedEdgeStar.prototype.computeDepths=function(t){if(2===arguments.length)return void this.computeDepths2.apply(this,arguments);var o=this.findIndex(t),n=(t.getLabel(),t.getDepth(e.LEFT)),r=t.getDepth(e.RIGHT),i=this.computeDepths2(o+1,this.edgeList.size(),n),s=this.computeDepths2(0,o,i);if(s!=r)throw new jsts.error.TopologyError(\"depth mismatch at \"+t.getCoordinate())},jsts.geomgraph.DirectedEdgeStar.prototype.computeDepths2=function(t,o,n){for(var r=n,i=t;o>i;i++){var s=this.edgeList.get(i);s.getLabel();s.setEdgeDepths(e.RIGHT,r),r=s.getDepth(e.LEFT)}return r}}(),jsts.algorithm.CentroidLine=function(){this.centSum=new jsts.geom.Coordinate},jsts.algorithm.CentroidLine.prototype.centSum=null,jsts.algorithm.CentroidLine.prototype.totalLength=0,jsts.algorithm.CentroidLine.prototype.add=function(t){if(t instanceof Array)return void this.add2.apply(this,arguments);if(t instanceof jsts.geom.LineString)this.add(t.getCoordinates());else if(t instanceof jsts.geom.Polygon){var e=t;this.add(e.getExteriorRing().getCoordinates());for(var o=0;o<e.getNumInteriorRing();o++)this.add(e.getInteriorRingN(o).getCoordinates())}else if(t instanceof jsts.geom.GeometryCollection||t instanceof jsts.geom.MultiPoint||t instanceof jsts.geom.MultiLineString||t instanceof jsts.geom.MultiPolygon)for(var n=t,o=0;o<n.getNumGeometries();o++)this.add(n.getGeometryN(o))},jsts.algorithm.CentroidLine.prototype.getCentroid=function(){var t=new jsts.geom.Coordinate;return t.x=this.centSum.x/this.totalLength,t.y=this.centSum.y/this.totalLength,t},jsts.algorithm.CentroidLine.prototype.add2=function(t){for(var e=0;e<t.length-1;e++){var o=t[e].distance(t[e+1]);this.totalLength+=o;var n=(t[e].x+t[e+1].x)/2;this.centSum.x+=o*n;var r=(t[e].y+t[e+1].y)/2;this.centSum.y+=o*r}},jsts.index.IntervalSize=function(){},jsts.index.IntervalSize.MIN_BINARY_EXPONENT=-50,jsts.index.IntervalSize.isZeroWidth=function(t,e){var o=e-t;if(0===o)return!0;var n,r,i;return n=Math.max(Math.abs(t),Math.abs(e)),r=o/n,i=jsts.index.DoubleBits.exponent(r),i<=jsts.index.IntervalSize.MIN_BINARY_EXPONENT},jsts.geomgraph.index.SimpleEdgeSetIntersector=function(){},jsts.geomgraph.index.SimpleEdgeSetIntersector.prototype=new jsts.geomgraph.index.EdgeSetIntersector,jsts.geomgraph.index.SimpleEdgeSetIntersector.prototype.nOverlaps=0,jsts.geomgraph.index.SimpleEdgeSetIntersector.prototype.computeIntersections=function(t,e,o){if(e instanceof javascript.util.List)return void this.computeIntersections2.apply(this,arguments);this.nOverlaps=0;for(var n=t.iterator();n.hasNext();)for(var r=n.next(),i=t.iterator();i.hasNext();){var s=i.next();(o||r!=s)&&this.computeIntersects(r,s,e)}},jsts.geomgraph.index.SimpleEdgeSetIntersector.prototype.computeIntersections2=function(t,e,o){this.nOverlaps=0;for(var n=t.iterator();n.hasNext();)for(var r=n.next(),i=e.iterator();i.hasNext();){var s=i.next();this.computeIntersects(r,s,o)}},jsts.geomgraph.index.SimpleEdgeSetIntersector.prototype.computeIntersects=function(t,e,o){var n,r,i=t.getCoordinates(),s=e.getCoordinates();for(n=0;n<i.length-1;n++)for(r=0;r<s.length-1;r++)o.addIntersections(t,n,e,r)},jsts.geomgraph.Edge=function(t,e){this.pts=t,this.label=e,this.eiList=new jsts.geomgraph.EdgeIntersectionList(this),this.depth=new jsts.geomgraph.Depth},jsts.geomgraph.Edge.prototype=new jsts.geomgraph.GraphComponent,jsts.geomgraph.Edge.constructor=jsts.geomgraph.Edge,jsts.geomgraph.Edge.updateIM=function(t,e){e.setAtLeastIfValid(t.getLocation(0,jsts.geomgraph.Position.ON),t.getLocation(1,jsts.geomgraph.Position.ON),1),t.isArea()&&(e.setAtLeastIfValid(t.getLocation(0,jsts.geomgraph.Position.LEFT),t.getLocation(1,jsts.geomgraph.Position.LEFT),2),e.setAtLeastIfValid(t.getLocation(0,jsts.geomgraph.Position.RIGHT),t.getLocation(1,jsts.geomgraph.Position.RIGHT),2))},jsts.geomgraph.Edge.prototype.pts=null,jsts.geomgraph.Edge.prototype.env=null,jsts.geomgraph.Edge.prototype.name=null,jsts.geomgraph.Edge.prototype.mce=null,jsts.geomgraph.Edge.prototype._isIsolated=!0,jsts.geomgraph.Edge.prototype.depth=null,jsts.geomgraph.Edge.prototype.depthDelta=0,jsts.geomgraph.Edge.prototype.eiList=null,jsts.geomgraph.Edge.prototype.getNumPoints=function(){return this.pts.length},jsts.geomgraph.Edge.prototype.getEnvelope=function(){if(null===this.env){this.env=new jsts.geom.Envelope;for(var t=0;t<this.pts.length;t++)this.env.expandToInclude(pts[t])}return env},jsts.geomgraph.Edge.prototype.getDepth=function(){return this.depth},jsts.geomgraph.Edge.prototype.getDepthDelta=function(){return this.depthDelta},jsts.geomgraph.Edge.prototype.setDepthDelta=function(t){this.depthDelta=t},jsts.geomgraph.Edge.prototype.getCoordinates=function(){return this.pts},jsts.geomgraph.Edge.prototype.getCoordinate=function(t){return void 0===t?this.pts.length>0?this.pts[0]:null:this.pts[t]},jsts.geomgraph.Edge.prototype.isClosed=function(){return this.pts[0].equals(this.pts[this.pts.length-1])},jsts.geomgraph.Edge.prototype.setIsolated=function(t){this._isIsolated=t},jsts.geomgraph.Edge.prototype.isIsolated=function(){return this._isIsolated},jsts.geomgraph.Edge.prototype.addIntersections=function(t,e,o){for(var n=0;n<t.getIntersectionNum();n++)this.addIntersection(t,e,o,n)},jsts.geomgraph.Edge.prototype.addIntersection=function(t,e,o,n){var r=new jsts.geom.Coordinate(t.getIntersection(n)),i=e,s=t.getEdgeDistance(o,n),a=i+1;if(a<this.pts.length){var p=this.pts[a];r.equals2D(p)&&(i=a,s=0)}this.eiList.add(r,i,s)},jsts.geomgraph.Edge.prototype.getMaximumSegmentIndex=function(){return this.pts.length-1},jsts.geomgraph.Edge.prototype.getEdgeIntersectionList=function(){return this.eiList},jsts.geomgraph.Edge.prototype.getMonotoneChainEdge=function(){return null==this.mce&&(this.mce=new jsts.geomgraph.index.MonotoneChainEdge(this)),this.mce},jsts.geomgraph.Edge.prototype.isClosed=function(){return this.pts[0].equals(this.pts[this.pts.length-1])},jsts.geomgraph.Edge.prototype.isCollapsed=function(){return this.label.isArea()?3!=this.pts.length?!1:this.pts[0].equals(this.pts[2])?!0:!1:!1},jsts.geomgraph.Edge.prototype.getCollapsedEdge=function(){var t=[];t[0]=this.pts[0],t[1]=this.pts[1];var e=new jsts.geomgraph.Edge(t,jsts.geomgraph.Label.toLineLabel(this.label));return e},jsts.geomgraph.Edge.prototype.computeIM=function(t){jsts.geomgraph.Edge.updateIM(this.label,t)},jsts.geomgraph.Edge.prototype.isPointwiseEqual=function(t){if(this.pts.length!=t.pts.length)return!1;for(var e=0;e<this.pts.length;e++)if(!this.pts[e].equals2D(t.pts[e]))return!1;return!0},jsts.noding.Octant=function(){throw jsts.error.AbstractMethodInvocationError()},jsts.noding.Octant.octant=function(t,e){if(t instanceof jsts.geom.Coordinate)return jsts.noding.Octant.octant2.apply(this,arguments);if(0===t&&0===e)throw new jsts.error.IllegalArgumentError(\"Cannot compute the octant for point ( \"+t+\", \"+e+\" )\");var o=Math.abs(t),n=Math.abs(e);return t>=0?e>=0?o>=n?0:1:o>=n?7:6:e>=0?o>=n?3:2:o>=n?4:5},jsts.noding.Octant.octant2=function(t,e){var o=e.x-t.x,n=e.y-t.y;if(0===o&&0===n)throw new jsts.error.IllegalArgumentError(\"Cannot compute the octant for two identical points \"+t);return jsts.noding.Octant.octant(o,n)},jsts.operation.union.UnionInteracting=function(t,e){this.g0=t,this.g1=e,this.geomFactory=t.getFactory(),this.interacts0=[],this.interacts1=[]},jsts.operation.union.UnionInteracting.union=function(t,e){var o=new jsts.operation.union.UnionInteracting(t,e);return o.union()},jsts.operation.union.UnionInteracting.prototype.geomFactory=null,jsts.operation.union.UnionInteracting.prototype.g0=null,jsts.operation.union.UnionInteracting.prototype.g1=null,jsts.operation.union.UnionInteracting.prototype.interacts0=null,jsts.operation.union.UnionInteracting.prototype.interacts1=null,jsts.operation.union.UnionInteracting.prototype.union=function(){this.computeInteracting();var t=this.extractElements(this.g0,this.interacts0,!0),e=this.extractElements(this.g1,this.interacts1,!0);t.isEmpty()||e.isEmpty();var o=in0.union(e),n=this.extractElements(this.g0,this.interacts0,!1),r=this.extractElements(this.g1,this.interacts1,!1),i=jsts.geom.util.GeometryCombiner.combine(o,n,r);return i},jsts.operation.union.UnionInteracting.prototype.bufferUnion=function(t,e){var o=t.getFactory(),n=o.createGeometryCollection([t,e]),r=n.buffer(0);return r},jsts.operation.union.UnionInteracting.prototype.computeInteracting=function(t){if(t){for(var e=!1,o=0,n=g1.getNumGeometries();n>o;o++){var r=this.g1.getGeometryN(o),i=r.getEnvelopeInternal().intersects(t.getEnvelopeInternal());i&&(this.interacts1[o]=!0,e=!0)}return e}for(var o=0,n=this.g0.getNumGeometries();n>o;o++){var s=this.g0.getGeometryN(o);this.interacts0[o]=this.computeInteracting(s)}},jsts.operation.union.UnionInteracting.prototype.extractElements=function(t,e,o){for(var n=[],r=0,i=t.getNumGeometries();i>r;r++){var s=t.getGeometryN(r);e[r]===o&&n.push(s)}return this.geomFactory.buildGeometry(n)},jsts.triangulate.quadedge.TrianglePredicate=function(){},jsts.triangulate.quadedge.TrianglePredicate.isInCircleNonRobust=function(t,e,o,n){var r=(t.x*t.x+t.y*t.y)*jsts.triangulate.quadedge.TrianglePredicate.triArea(e,o,n)-(e.x*e.x+e.y*e.y)*jsts.triangulate.quadedge.TrianglePredicate.triArea(t,o,n)+(o.x*o.x+o.y*o.y)*jsts.triangulate.quadedge.TrianglePredicate.triArea(t,e,n)-(n.x*n.x+n.y*n.y)*jsts.triangulate.quadedge.TrianglePredicate.triArea(t,e,o)>0;return r},jsts.triangulate.quadedge.TrianglePredicate.isInCircleNormalized=function(t,e,o,n){var r,i,s,a,p,u,l,g,h,c,d,f,m;return r=t.x-n.x,i=t.y-n.y,s=e.x-n.x,a=e.y-n.y,p=o.x-n.x,u=o.y-n.y,l=r*a-s*i,g=s*u-p*a,h=p*i-r*u,c=r*r+i*i,d=s*s+a*a,f=p*p+u*u,m=c*g+d*h+f*l,m>0},jsts.triangulate.quadedge.TrianglePredicate.triArea=function(t,e,o){return(e.x-t.x)*(o.y-t.y)-(e.y-t.y)*(o.x-t.x)},jsts.triangulate.quadedge.TrianglePredicate.isInCircleRobust=function(t,e,o,n){return jsts.triangulate.quadedge.TrianglePredicate.isInCircleNormalized(t,e,o,n)},jsts.triangulate.quadedge.TrianglePredicate.isInCircleDDSlow=function(t,e,o,n){var r,i,s,a,p,u,l,g,h,c,d,f,m,y;return r=jsts.math.DD.valueOf(n.x),i=jsts.math.DD.valueOf(n.y),s=jsts.math.DD.valueOf(t.x),a=jsts.math.DD.valueOf(t.y),p=jsts.math.DD.valueOf(e.x),u=jsts.math.DD.valueOf(e.y),l=jsts.math.DD.valueOf(o.x),g=jsts.math.DD.valueOf(o.y),h=s.multiply(s).add(a.multiply(a)).multiply(jsts.triangulate.quadedge.TrianglePredicate.triAreaDDSlow(p,u,l,g,r,i)),c=p.multiply(p).add(u.multiply(u)).multiply(jsts.triangulate.quadedge.TrianglePredicate.triAreaDDSlow(s,a,l,g,r,i)),d=l.multiply(l).add(g.multiply(g)).multiply(jsts.triangulate.quadedge.TrianglePredicate.triAreaDDSlow(s,a,p,u,r,i)),f=r.multiply(r).add(i.multiply(i)).multiply(jsts.triangulate.quadedge.TrianglePredicate.triAreaDDSlow(s,a,p,u,l,g)),m=h.subtract(c).add(d).subtract(f),y=m.doubleValue()>0},jsts.triangulate.quadedge.TrianglePredicate.triAreaDDSlow=function(t,e,o,n,r,i){return o.subtract(t).multiply(i.subtract(e)).subtract(n.subtract(e).multiply(r.subtract(t)))},jsts.triangulate.quadedge.TrianglePredicate.isInCircleDDFast=function(t,e,o,n){var r,i,s,a,p,u;return r=jsts.math.DD.sqr(t.x).selfAdd(jsts.math.DD.sqr(t.y)).selfMultiply(jsts.triangulate.quadedge.TrianglePredicate.triAreaDDFast(e,o,n)),i=jsts.math.DD.sqr(e.x).selfAdd(jsts.math.DD.sqr(e.y)).selfMultiply(jsts.triangulate.quadedge.TrianglePredicate.triAreaDDFast(t,o,n)),s=jsts.math.DD.sqr(o.x).selfAdd(jsts.math.DD.sqr(o.y)).selfMultiply(jsts.triangulate.quadedge.TrianglePredicate.triAreaDDFast(t,e,n)),a=jsts.math.DD.sqr(n.x).selfAdd(jsts.math.DD.sqr(n.y)).selfMultiply(jsts.triangulate.quadedge.TrianglePredicate.triAreaDDFast(t,e,o)),p=r.selfSubtract(i).selfAdd(s).selfSubtract(a),u=p.doubleValue()>0},jsts.triangulate.quadedge.TrianglePredicate.triAreaDDFast=function(t,e,o){var n,r;return n=jsts.math.DD.valueOf(e.x).selfSubtract(t.x).selfMultiply(jsts.math.DD.valueOf(o.y).selfSubtract(t.y)),r=jsts.math.DD.valueOf(e.y).selSubtract(t.y).selfMultiply(jsts.math.DD.valueOf(o.x).selfSubtract(t.x)),n.selfSubtract(r)},jsts.triangulate.quadedge.TrianglePredicate.isInCircleDDNormalized=function(t,e,o,n){var r,i,s,a,p,u,l,g,h,c,d,f,m,y;return r=jsts.math.DD.valueOf(t.x).selfSubtract(n.x),i=jsts.math.DD.valueOf(t.y).selfSubtract(n.y),s=jsts.math.DD.valueOf(e.x).selfSubtract(n.x),s=jsts.math.DD.valueOf(e.y).selfSubtract(n.y),p=jsts.math.DD.valueOf(o.x).selfSubtract(n.x),p=jsts.math.DD.valueOf(o.y).selfSubtract(n.y),l=r.multiply(a).selfSubtract(s.multiply(i)),g=s.multiply(u).selfSubtract(p.multiply(a)),h=p.multiply(i).selfSubtract(r.multiply(u)),c=r.multiply(r).selfAdd(i.multiply(i)),d=s.multiply(s).selfAdd(a.multiply(a)),f=p.multiply(p).selfAdd(u.multiply(u)),m=c.selfMultiply(g).selfAdd(d.selfMultiply(h)).selfAdd(f.selfMultiply(l)),y=m.doubleValue()>0},jsts.triangulate.quadedge.TrianglePredicate.isInCircleCC=function(t,e,o,n){var r,i,s;return r=jsts.geom.Triangle.circumcentre(t,e,o),i=t.distance(r),s=n.distance(r)-i,0>=s},jsts.operation.union.PointGeometryUnion=function(t,e){this.pointGeom=t,this.otherGeom=e,this.geomFact=e.getFactory()},jsts.operation.union.PointGeometryUnion.union=function(t,e){var o=new jsts.operation.union.PointGeometryUnion(t,e);return o.union()},jsts.operation.union.PointGeometryUnion.prototype.pointGeom=null,jsts.operation.union.PointGeometryUnion.prototype.otherGeom=null,jsts.operation.union.PointGeometryUnion.prototype.geomFact=null,jsts.operation.union.PointGeometryUnion.prototype.union=function(){for(var t=new jsts.algorithm.PointLocator,e=[],o=0,n=this.pointGeom.getNumGeometries();n>o;o++){var r=this.pointGeom.getGeometryN(o),i=r.getCoordinate(),s=t.locate(i,this.otherGeom);if(s===jsts.geom.Location.EXTERIOR){for(var a=!0,p=e.length;o--;)if(e[p].equals(i)){a=!1;break}a&&e.push(i)}}if(e.sort(function(t,e){return t.compareTo(e)}),0===e.length)return this.otherGeom;var u=null,l=jsts.geom.CoordinateArrays.toCoordinateArray(e);return u=1===l.length?this.geomFact.createPoint(l[0]):this.geomFact.createMultiPoint(l),jsts.geom.util.GeometryCombiner.combine(u,this.otherGeom)},jsts.noding.IntersectionFinderAdder=function(t){this.li=t,this.interiorIntersections=new javascript.util.ArrayList},jsts.noding.IntersectionFinderAdder.prototype=new jsts.noding.SegmentIntersector,jsts.noding.IntersectionFinderAdder.constructor=jsts.noding.IntersectionFinderAdder,jsts.noding.IntersectionFinderAdder.prototype.li=null,jsts.noding.IntersectionFinderAdder.prototype.interiorIntersections=null,jsts.noding.IntersectionFinderAdder.prototype.getInteriorIntersections=function(){return this.interiorIntersections},jsts.noding.IntersectionFinderAdder.prototype.processIntersections=function(t,e,o,n){if(t!==o||e!==n){var r=t.getCoordinates()[e],i=t.getCoordinates()[e+1],s=o.getCoordinates()[n],a=o.getCoordinates()[n+1];if(this.li.computeIntersection(r,i,s,a),this.li.hasIntersection()&&this.li.isInteriorIntersection()){for(var p=0;p<this.li.getIntersectionNum();p++)this.interiorIntersections.add(this.li.getIntersection(p));t.addIntersections(this.li,e,0),o.addIntersections(this.li,n,1)}}},jsts.noding.IntersectionFinderAdder.prototype.isDone=function(){return!1},jsts.noding.snapround.MCIndexSnapRounder=function(t){this.pm=t,this.li=new jsts.algorithm.RobustLineIntersector,this.li.setPrecisionModel(t),this.scaleFactor=t.getScale()},jsts.noding.snapround.MCIndexSnapRounder.prototype=new jsts.noding.Noder,jsts.noding.snapround.MCIndexSnapRounder.constructor=jsts.noding.snapround.MCIndexSnapRounder,jsts.noding.snapround.MCIndexSnapRounder.prototype.pm=null,jsts.noding.snapround.MCIndexSnapRounder.prototype.li=null,jsts.noding.snapround.MCIndexSnapRounder.prototype.scaleFactor=null,jsts.noding.snapround.MCIndexSnapRounder.prototype.noder=null,jsts.noding.snapround.MCIndexSnapRounder.prototype.pointSnapper=null,jsts.noding.snapround.MCIndexSnapRounder.prototype.nodedSegStrings=null,jsts.noding.snapround.MCIndexSnapRounder.prototype.getNodedSubstrings=function(){return jsts.noding.NodedSegmentString.getNodedSubstrings(this.nodedSegStrings)},jsts.noding.snapround.MCIndexSnapRounder.prototype.computeNodes=function(t){this.nodedSegStrings=t,this.noder=new jsts.noding.MCIndexNoder,this.pointSnapper=new jsts.noding.snapround.MCIndexPointSnapper(this.noder.getIndex()),this.snapRound(t,this.li)},jsts.noding.snapround.MCIndexSnapRounder.prototype.snapRound=function(t,e){var o=this.findInteriorIntersections(t,e);this.computeIntersectionSnaps(o),this.computeVertexSnaps(t)},jsts.noding.snapround.MCIndexSnapRounder.prototype.findInteriorIntersections=function(t,e){var o=new jsts.noding.IntersectionFinderAdder(e);return this.noder.setSegmentIntersector(o),this.noder.computeNodes(t),\no.getInteriorIntersections()},jsts.noding.snapround.MCIndexSnapRounder.prototype.computeIntersectionSnaps=function(t){for(var e=t.iterator();e.hasNext();){var o=e.next(),n=new jsts.noding.snapround.HotPixel(o,this.scaleFactor,this.li);this.pointSnapper.snap(n)}},jsts.noding.snapround.MCIndexSnapRounder.prototype.computeVertexSnaps=function(t){if(t instanceof jsts.noding.NodedSegmentString)return void this.computeVertexSnaps2.apply(this,arguments);for(var e=t.iterator();e.hasNext();){var o=e.next();this.computeVertexSnaps(o)}},jsts.noding.snapround.MCIndexSnapRounder.prototype.computeVertexSnaps2=function(t){for(var e=t.getCoordinates(),o=0;o<e.length-1;o++){var n=new jsts.noding.snapround.HotPixel(e[o],this.scaleFactor,this.li),r=this.pointSnapper.snap(n,t,o);r&&t.addIntersection(e[o],o)}},jsts.operation.valid.ConnectedInteriorTester=function(t){this.geomGraph=t,this.geometryFactory=new jsts.geom.GeometryFactory,this.disconnectedRingcoord=null},jsts.operation.valid.ConnectedInteriorTester.findDifferentPoint=function(t,e){var o=0,n=t.length;for(o;n>o;o++)if(!t[o].equals(e))return t[o];return null},jsts.operation.valid.ConnectedInteriorTester.prototype.getCoordinate=function(){return this.disconnectedRingcoord},jsts.operation.valid.ConnectedInteriorTester.prototype.isInteriorsConnected=function(){var t=new javascript.util.ArrayList;this.geomGraph.computeSplitEdges(t);var e=new jsts.geomgraph.PlanarGraph(new jsts.operation.overlay.OverlayNodeFactory);e.addEdges(t),this.setInteriorEdgesInResult(e),e.linkResultDirectedEdges();var o=this.buildEdgeRings(e.getEdgeEnds());return this.visitShellInteriors(this.geomGraph.getGeometry(),e),!this.hasUnvisitedShellEdge(o)},jsts.operation.valid.ConnectedInteriorTester.prototype.setInteriorEdgesInResult=function(t){for(var e,o=t.getEdgeEnds().iterator();o.hasNext();)e=o.next(),e.getLabel().getLocation(0,jsts.geomgraph.Position.RIGHT)==jsts.geom.Location.INTERIOR&&e.setInResult(!0)},jsts.operation.valid.ConnectedInteriorTester.prototype.buildEdgeRings=function(t){for(var e=new javascript.util.ArrayList,o=t.iterator();o.hasNext();){var n=o.next();if(n.isInResult()&&null==n.getEdgeRing()){var r=new jsts.operation.overlay.MaximalEdgeRing(n,this.geometryFactory);r.linkDirectedEdgesForMinimalEdgeRings();var i=r.buildMinimalRings(),s=0,a=i.length;for(s;a>s;s++)e.add(i[s])}}return e},jsts.operation.valid.ConnectedInteriorTester.prototype.visitShellInteriors=function(t,e){if(t instanceof jsts.geom.Polygon){var o=t;this.visitInteriorRing(o.getExteriorRing(),e)}if(t instanceof jsts.geom.MultiPolygon)for(var n=t,r=0;r<n.getNumGeometries();r++){var o=n.getGeometryN(r);this.visitInteriorRing(o.getExteriorRing(),e)}},jsts.operation.valid.ConnectedInteriorTester.prototype.visitInteriorRing=function(t,e){var o=t.getCoordinates(),n=o[0],r=jsts.operation.valid.ConnectedInteriorTester.findDifferentPoint(o,n),i=e.findEdgeInSameDirection(n,r),s=e.findEdgeEnd(i),a=null;s.getLabel().getLocation(0,jsts.geomgraph.Position.RIGHT)==jsts.geom.Location.INTERIOR?a=s:s.getSym().getLabel().getLocation(0,jsts.geomgraph.Position.RIGHT)==jsts.geom.Location.INTERIOR&&(a=s.getSym()),this.visitLinkedDirectedEdges(a)},jsts.operation.valid.ConnectedInteriorTester.prototype.visitLinkedDirectedEdges=function(t){var e=t,o=t;do o.setVisited(!0),o=o.getNext();while(o!=e)},jsts.operation.valid.ConnectedInteriorTester.prototype.hasUnvisitedShellEdge=function(t){for(var e=0;e<t.size();e++){var o=t.get(e);if(!o.isHole()){var n=o.getEdges(),r=n[0];if(r.getLabel().getLocation(0,jsts.geomgraph.Position.RIGHT)==jsts.geom.Location.INTERIOR)for(var i=0;i<n.length;i++)if(r=n[i],!r.isVisited())return disconnectedRingcoord=r.getCoordinate(),!0}}return!1},jsts.algorithm.InteriorPointLine=function(t){this.centroid,this.minDistance=Number.MAX_VALUE,this.interiorPoint=null,this.centroid=t.getCentroid().getCoordinate(),this.addInterior(t),null==this.interiorPoint&&this.addEndpoints(t)},jsts.algorithm.InteriorPointLine.prototype.getInteriorPoint=function(){return this.interiorPoint},jsts.algorithm.InteriorPointLine.prototype.addInterior=function(t){if(t instanceof jsts.geom.LineString)this.addInteriorCoord(t.getCoordinates());else if(t instanceof jsts.geom.GeometryCollection)for(var e=0;e<t.getNumGeometries();e++)this.addInterior(t.getGeometryN(e))},jsts.algorithm.InteriorPointLine.prototype.addInteriorCoord=function(t){for(var e=1;e<t.length-1;e++)this.add(t[e])},jsts.algorithm.InteriorPointLine.prototype.addEndpoints=function(t){if(t instanceof jsts.geom.LineString)this.addEndpointsCoord(t.getCoordinates());else if(t instanceof jsts.geom.GeometryCollection)for(var e=0;e<t.getNumGeometries();e++)this.addEndpoints(t.getGeometryN(e))},jsts.algorithm.InteriorPointLine.prototype.addEndpointsCoord=function(t){this.add(t[0]),this.add(t[t.length-1])},jsts.algorithm.InteriorPointLine.prototype.add=function(t){var e=t.distance(this.centroid);e<this.minDistance&&(this.interiorPoint=new jsts.geom.Coordinate(t),this.minDistance=e)},jsts.index.chain.MonotoneChainSelectAction=function(){this.tempEnv1=new jsts.geom.Envelope,this.selectedSegment=new jsts.geom.LineSegment},jsts.index.chain.MonotoneChainSelectAction.prototype.tempEnv1=null,jsts.index.chain.MonotoneChainSelectAction.prototype.selectedSegment=null,jsts.index.chain.MonotoneChainSelectAction.prototype.select=function(t,e){t.getLineSegment(e,this.selectedSegment),this.select2(this.selectedSegment)},jsts.index.chain.MonotoneChainSelectAction.prototype.select2=function(t){},jsts.algorithm.MCPointInRing=function(t){this.ring=t,this.tree=null,this.crossings=0,this.interval=new jsts.index.bintree.Interval,this.buildIndex()},jsts.algorithm.MCPointInRing.MCSelecter=function(t,e){this.parent=e,this.p=t},jsts.algorithm.MCPointInRing.MCSelecter.prototype=new jsts.index.chain.MonotoneChainSelectAction,jsts.algorithm.MCPointInRing.MCSelecter.prototype.constructor=jsts.algorithm.MCPointInRing.MCSelecter,jsts.algorithm.MCPointInRing.MCSelecter.prototype.select2=function(t){this.parent.testLineSegment.apply(this.parent,[this.p,t])},jsts.algorithm.MCPointInRing.prototype.buildIndex=function(){this.tree=new jsts.index.bintree.Bintree;for(var t=jsts.geom.CoordinateArrays.removeRepeatedPoints(this.ring.getCoordinates()),e=jsts.index.chain.MonotoneChainBuilder.getChains(t),o=0;o<e.length;o++){var n=e[o],r=n.getEnvelope();this.interval.min=r.getMinY(),this.interval.max=r.getMaxY(),this.tree.insert(this.interval,n)}},jsts.algorithm.MCPointInRing.prototype.isInside=function(t){this.crossings=0;var e=new jsts.geom.Envelope(-Number.MAX_VALUE,Number.MAX_VALUE,t.y,t.y);this.interval.min=t.y,this.interval.max=t.y;for(var o=this.tree.query(this.interval),n=new jsts.algorithm.MCPointInRing.MCSelecter(t,this),r=o.iterator();r.hasNext();){var i=r.next();this.testMonotoneChain(e,n,i)}return this.crossings%2==1?!0:!1},jsts.algorithm.MCPointInRing.prototype.testMonotoneChain=function(t,e,o){o.select(t,e)},jsts.algorithm.MCPointInRing.prototype.testLineSegment=function(t,e){var o,n,r,i,s,a,p;a=e.p0,p=e.p1,n=a.x-t.x,r=a.y-t.y,i=p.x-t.x,s=p.y-t.y,(r>0&&0>=s||s>0&&0>=r)&&(o=jsts.algorithm.RobustDeterminant.signOfDet2x2(n,r,i,s)/(s-r),o>0&&this.crossings++)},jsts.operation.valid.TopologyValidationError=function(t,e){this.errorType=t,this.pt=null,null!=e&&(this.pt=e.clone())},jsts.operation.valid.TopologyValidationError.HOLE_OUTSIDE_SHELL=2,jsts.operation.valid.TopologyValidationError.NESTED_HOLES=3,jsts.operation.valid.TopologyValidationError.DISCONNECTED_INTERIOR=4,jsts.operation.valid.TopologyValidationError.SELF_INTERSECTION=5,jsts.operation.valid.TopologyValidationError.RING_SELF_INTERSECTION=6,jsts.operation.valid.TopologyValidationError.NESTED_SHELLS=7,jsts.operation.valid.TopologyValidationError.DUPLICATE_RINGS=8,jsts.operation.valid.TopologyValidationError.TOO_FEW_POINTS=9,jsts.operation.valid.TopologyValidationError.INVALID_COORDINATE=10,jsts.operation.valid.TopologyValidationError.RING_NOT_CLOSED=11,jsts.operation.valid.TopologyValidationError.prototype.errMsg=[\"Topology Validation Error\",\"Repeated Point\",\"Hole lies outside shell\",\"Holes are nested\",\"Interior is disconnected\",\"Self-intersection\",\"Ring Self-intersection\",\"Nested shells\",\"Duplicate Rings\",\"Too few distinct points in geometry component\",\"Invalid Coordinate\",\"Ring is not closed\"],jsts.operation.valid.TopologyValidationError.prototype.getCoordinate=function(){return this.pt},jsts.operation.valid.TopologyValidationError.prototype.getErrorType=function(){return this.errorType},jsts.operation.valid.TopologyValidationError.prototype.getMessage=function(){return this.errMsg[this.errorType]},jsts.operation.valid.TopologyValidationError.prototype.toString=function(){var t=\"\";return null!=this.pt?(t=\" at or near point \"+this.pt,this.getMessage()+t):t},function(){jsts.geom.MultiPolygon=function(t,e){this.geometries=t||[],this.factory=e},jsts.geom.MultiPolygon.prototype=new jsts.geom.GeometryCollection,jsts.geom.MultiPolygon.constructor=jsts.geom.MultiPolygon,jsts.geom.MultiPolygon.prototype.getBoundary=function(){if(this.isEmpty())return this.getFactory().createMultiLineString(null);for(var t=[],e=0;e<this.geometries.length;e++)for(var o=this.geometries[e],n=o.getBoundary(),r=0;r<n.getNumGeometries();r++)t.push(n.getGeometryN(r));return this.getFactory().createMultiLineString(t)},jsts.geom.MultiPolygon.prototype.equalsExact=function(t,e){return this.isEquivalentClass(t)?jsts.geom.GeometryCollection.prototype.equalsExact.call(this,t,e):!1},jsts.geom.MultiPolygon.prototype.CLASS_NAME=\"jsts.geom.MultiPolygon\"}(),jsts.geom.CoordinateSequenceFilter=function(){},jsts.geom.CoordinateSequenceFilter.prototype.filter=jsts.abstractFunc,jsts.geom.CoordinateSequenceFilter.prototype.isDone=jsts.abstractFunc,jsts.geom.CoordinateSequenceFilter.prototype.isGeometryChanged=jsts.abstractFunc,function(){var t=function(){if(this.min=0,this.max=0,1===arguments.length){var t=arguments[0];this.init(t.min,t.max)}else 2===arguments.length&&this.init(arguments[0],arguments[1])};t.prototype.init=function(t,e){this.min=t,this.max=e,t>e&&(this.min=e,this.max=t)},t.prototype.getMin=function(){return this.min},t.prototype.getMax=function(){return this.max},t.prototype.getWidth=function(){return this.max-this.min},t.prototype.expandToInclude=function(t){t.max>this.max&&(this.max=t.max),t.min<this.min&&(this.min=t.min)},t.prototype.overlaps=function(){return 1===arguments.length?this.overlapsInterval.apply(this,arguments):this.overlapsMinMax.apply(this,arguments)},t.prototype.overlapsInterval=function(t){return this.overlaps(t.min,t.max)},t.prototype.overlapsMinMax=function(t,e){return this.min>e||this.max<t?!1:!0},t.prototype.contains=function(){var t;return arguments[0]instanceof jsts.index.bintree.Interval?(t=arguments[0],this.containsMinMax(t.min,t.max)):1===arguments.length?this.containsPoint(arguments[0]):this.containsMinMax(arguments[0],arguments[1])},t.prototype.containsMinMax=function(t,e){return t>=this.min&&e<=this.max},t.prototype.containsPoint=function(t){return t>=this.min&&t<=this.max},jsts.index.bintree.Interval=t}(),jsts.index.DoubleBits=function(){},jsts.index.DoubleBits.powerOf2=function(t){return Math.pow(2,t)},jsts.index.DoubleBits.exponent=function(t){return jsts.index.DoubleBits.CVTFWD(64,t)-1023},jsts.index.DoubleBits.CVTFWD=function(t,e){var o,n,r,i,s=\"\",a={32:{d:127,c:128,b:0,a:0},64:{d:32752,c:0,b:0,a:0}},p={32:8,64:11}[t];if(i||(o=0>e||0>1/e,isFinite(e)||(i=a[t],o&&(i.d+=1<<t/4-1),n=Math.pow(2,p)-1,r=0)),!i){for(n={32:127,64:1023}[t],r=Math.abs(e);r>=2;)n++,r/=2;for(;1>r&&n>0;)n--,r*=2;0>=n&&(r/=2,s=\"Zero or Denormal\"),32===t&&n>254&&(s=\"Too big for Single\",i={d:o?255:127,c:128,b:0,a:0},n=Math.pow(2,p)-1,r=0)}return n},function(){var t=jsts.index.DoubleBits,e=jsts.index.bintree.Interval,o=function(t){this.pt=0,this.level=0,this.computeKey(t)};o.computeLevel=function(e){var o,n=e.getWidth();return o=t.exponent(n)+1},o.prototype.getPoint=function(){return this.pt},o.prototype.getLevel=function(){return this.level},o.prototype.getInterval=function(){return this.interval},o.prototype.computeKey=function(t){for(this.level=o.computeLevel(t),this.interval=new e,this.computeInterval(this.level,t);!this.interval.contains(t);)this.level+=1,this.computeInterval(this.level,t)},o.prototype.computeInterval=function(e,o){var n=t.powerOf2(e);this.pt=Math.floor(o.getMin()/n)*n,this.interval.init(this.pt,this.pt+n)},jsts.index.bintree.Key=o}(),jsts.operation.buffer.SubgraphDepthLocater=function(t){this.subgraphs=[],this.seg=new jsts.geom.LineSegment,this.subgraphs=t},jsts.operation.buffer.SubgraphDepthLocater.prototype.subgraphs=null,jsts.operation.buffer.SubgraphDepthLocater.prototype.seg=null,jsts.operation.buffer.SubgraphDepthLocater.prototype.getDepth=function(t){var e=this.findStabbedSegments(t);if(0===e.length)return 0;e.sort();var o=e[0];return o.leftDepth},jsts.operation.buffer.SubgraphDepthLocater.prototype.findStabbedSegments=function(t){if(3===arguments.length)return void this.findStabbedSegments2.apply(this,arguments);for(var e=[],o=0;o<this.subgraphs.length;o++){var n=this.subgraphs[o],r=n.getEnvelope();t.y<r.getMinY()||t.y>r.getMaxY()||this.findStabbedSegments2(t,n.getDirectedEdges(),e)}return e},jsts.operation.buffer.SubgraphDepthLocater.prototype.findStabbedSegments2=function(t,e,o){if(arguments[1]instanceof jsts.geomgraph.DirectedEdge)return void this.findStabbedSegments3(t,e,o);for(var n=e.iterator();n.hasNext();){var r=n.next();r.isForward()&&this.findStabbedSegments3(t,r,o)}},jsts.operation.buffer.SubgraphDepthLocater.prototype.findStabbedSegments3=function(t,e,o){for(var n=e.getEdge().getCoordinates(),r=0;r<n.length-1;r++){this.seg.p0=n[r],this.seg.p1=n[r+1],this.seg.p0.y>this.seg.p1.y&&this.seg.reverse();var i=Math.max(this.seg.p0.x,this.seg.p1.x);if(!(i<t.x||this.seg.isHorizontal()||t.y<this.seg.p0.y||t.y>this.seg.p1.y||jsts.algorithm.CGAlgorithms.computeOrientation(this.seg.p0,this.seg.p1,t)===jsts.algorithm.CGAlgorithms.RIGHT)){var s=e.getDepth(jsts.geomgraph.Position.LEFT);this.seg.p0.equals(n[r])||(s=e.getDepth(jsts.geomgraph.Position.RIGHT));var a=new jsts.operation.buffer.SubgraphDepthLocater.DepthSegment(this.seg,s);o.push(a)}}},jsts.operation.buffer.SubgraphDepthLocater.DepthSegment=function(t,e){this.upwardSeg=new jsts.geom.LineSegment(t),this.leftDepth=e},jsts.operation.buffer.SubgraphDepthLocater.DepthSegment.prototype.upwardSeg=null,jsts.operation.buffer.SubgraphDepthLocater.DepthSegment.prototype.leftDepth=null,jsts.operation.buffer.SubgraphDepthLocater.DepthSegment.prototype.compareTo=function(t){var e=t,o=this.upwardSeg.orientationIndex(e.upwardSeg);return 0===o&&(o=-1*e.upwardSeg.orientationIndex(upwardSeg)),0!==o?o:this.compareX(this.upwardSeg,e.upwardSeg)},jsts.operation.buffer.SubgraphDepthLocater.DepthSegment.prototype.compareX=function(t,e){var o=t.p0.compareTo(e.p0);return 0!==o?o:t.p1.compareTo(e.p1)},jsts.noding.snapround.HotPixel=function(t,e,o){this.corner=[],this.originalPt=t,this.pt=t,this.scaleFactor=e,this.li=o,1!==this.scaleFactor&&(this.pt=new jsts.geom.Coordinate(this.scale(t.x),this.scale(t.y)),this.p0Scaled=new jsts.geom.Coordinate,this.p1Scaled=new jsts.geom.Coordinate),this.initCorners(this.pt)},jsts.noding.snapround.HotPixel.prototype.li=null,jsts.noding.snapround.HotPixel.prototype.pt=null,jsts.noding.snapround.HotPixel.prototype.originalPt=null,jsts.noding.snapround.HotPixel.prototype.ptScaled=null,jsts.noding.snapround.HotPixel.prototype.p0Scaled=null,jsts.noding.snapround.HotPixel.prototype.p1Scaled=null,jsts.noding.snapround.HotPixel.prototype.scaleFactor=void 0,jsts.noding.snapround.HotPixel.prototype.minx=void 0,jsts.noding.snapround.HotPixel.prototype.maxx=void 0,jsts.noding.snapround.HotPixel.prototype.miny=void 0,jsts.noding.snapround.HotPixel.prototype.maxy=void 0,jsts.noding.snapround.HotPixel.prototype.corner=null,jsts.noding.snapround.HotPixel.prototype.safeEnv=null,jsts.noding.snapround.HotPixel.prototype.getCoordinate=function(){return this.originalPt},jsts.noding.snapround.HotPixel.SAFE_ENV_EXPANSION_FACTOR=.75,jsts.noding.snapround.HotPixel.prototype.getSafeEnvelope=function(){if(null===this.safeEnv){var t=jsts.noding.snapround.HotPixel.SAFE_ENV_EXPANSION_FACTOR/this.scaleFactor;this.safeEnv=new jsts.geom.Envelope(this.originalPt.x-t,this.originalPt.x+t,this.originalPt.y-t,this.originalPt.y+t)}return this.safeEnv},jsts.noding.snapround.HotPixel.prototype.initCorners=function(t){var e=.5;this.minx=t.x-e,this.maxx=t.x+e,this.miny=t.y-e,this.maxy=t.y+e,this.corner[0]=new jsts.geom.Coordinate(this.maxx,this.maxy),this.corner[1]=new jsts.geom.Coordinate(this.minx,this.maxy),this.corner[2]=new jsts.geom.Coordinate(this.minx,this.miny),this.corner[3]=new jsts.geom.Coordinate(this.maxx,this.miny)},jsts.noding.snapround.HotPixel.prototype.scale=function(t){return Math.round(t*this.scaleFactor)},jsts.noding.snapround.HotPixel.prototype.intersects=function(t,e){return 1===this.scaleFactor?this.intersectsScaled(t,e):(this.copyScaled(t,this.p0Scaled),this.copyScaled(e,this.p1Scaled),this.intersectsScaled(this.p0Scaled,this.p1Scaled))},jsts.noding.snapround.HotPixel.prototype.copyScaled=function(t,e){e.x=this.scale(t.x),e.y=this.scale(t.y)},jsts.noding.snapround.HotPixel.prototype.intersectsScaled=function(t,e){var o=Math.min(t.x,e.x),n=Math.max(t.x,e.x),r=Math.min(t.y,e.y),i=Math.max(t.y,e.y),s=this.maxx<o||this.minx>n||this.maxy<r||this.miny>i;if(s)return!1;var a=this.intersectsToleranceSquare(t,e);return jsts.util.Assert.isTrue(!(s&&a),\"Found bad envelope test\"),a},jsts.noding.snapround.HotPixel.prototype.intersectsToleranceSquare=function(t,e){var o=!1,n=!1;return this.li.computeIntersection(t,e,this.corner[0],this.corner[1]),this.li.isProper()?!0:(this.li.computeIntersection(t,e,this.corner[1],this.corner[2]),this.li.isProper()?!0:(this.li.hasIntersection()&&(o=!0),this.li.computeIntersection(t,e,this.corner[2],this.corner[3]),this.li.isProper()?!0:(this.li.hasIntersection()&&(n=!0),this.li.computeIntersection(t,e,this.corner[3],this.corner[0]),this.li.isProper()?!0:o&&n?!0:t.equals(this.pt)?!0:e.equals(this.pt)?!0:!1)))},jsts.noding.snapround.HotPixel.prototype.intersectsPixelClosure=function(t,e){return this.li.computeIntersection(t,e,this.corner[0],this.corner[1]),this.li.hasIntersection()?!0:(this.li.computeIntersection(t,e,this.corner[1],this.corner[2]),this.li.hasIntersection()?!0:(this.li.computeIntersection(t,e,this.corner[2],this.corner[3]),this.li.hasIntersection()?!0:(this.li.computeIntersection(t,e,this.corner[3],this.corner[0]),this.li.hasIntersection()?!0:!1)))},jsts.noding.snapround.HotPixel.prototype.addSnappedNode=function(t,e){var o=t.getCoordinate(e),n=t.getCoordinate(e+1);return this.intersects(o,n)?(t.addIntersection(this.getCoordinate(),e),!0):!1},jsts.operation.buffer.BufferInputLineSimplifier=function(t){this.inputLine=t},jsts.operation.buffer.BufferInputLineSimplifier.simplify=function(t,e){var o=new jsts.operation.buffer.BufferInputLineSimplifier(t);return o.simplify(e)},jsts.operation.buffer.BufferInputLineSimplifier.INIT=0,jsts.operation.buffer.BufferInputLineSimplifier.DELETE=1,jsts.operation.buffer.BufferInputLineSimplifier.KEEP=1,jsts.operation.buffer.BufferInputLineSimplifier.prototype.inputLine=null,jsts.operation.buffer.BufferInputLineSimplifier.prototype.distanceTol=null,jsts.operation.buffer.BufferInputLineSimplifier.prototype.isDeleted=null,jsts.operation.buffer.BufferInputLineSimplifier.prototype.angleOrientation=jsts.algorithm.CGAlgorithms.COUNTERCLOCKWISE,jsts.operation.buffer.BufferInputLineSimplifier.prototype.simplify=function(t){this.distanceTol=Math.abs(t),0>t&&(this.angleOrientation=jsts.algorithm.CGAlgorithms.CLOCKWISE),this.isDeleted=[],this.isDeleted.length=this.inputLine.length;var e=!1;do e=this.deleteShallowConcavities();while(e);return this.collapseLine()},jsts.operation.buffer.BufferInputLineSimplifier.prototype.deleteShallowConcavities=function(){for(var t=1,e=(this.inputLine.length-1,this.findNextNonDeletedIndex(t)),o=this.findNextNonDeletedIndex(e),n=!1;o<this.inputLine.length;){var r=!1;this.isDeletable(t,e,o,this.distanceTol)&&(this.isDeleted[e]=jsts.operation.buffer.BufferInputLineSimplifier.DELETE,r=!0,n=!0),t=r?o:e,e=this.findNextNonDeletedIndex(t),o=this.findNextNonDeletedIndex(e)}return n},jsts.operation.buffer.BufferInputLineSimplifier.prototype.findNextNonDeletedIndex=function(t){for(var e=t+1;e<this.inputLine.length&&this.isDeleted[e]===jsts.operation.buffer.BufferInputLineSimplifier.DELETE;)e++;return e},jsts.operation.buffer.BufferInputLineSimplifier.prototype.collapseLine=function(){for(var t=[],e=0;e<this.inputLine.length;e++)this.isDeleted[e]!==jsts.operation.buffer.BufferInputLineSimplifier.DELETE&&t.push(this.inputLine[e]);return t},jsts.operation.buffer.BufferInputLineSimplifier.prototype.isDeletable=function(t,e,o,n){var r=this.inputLine[t],i=this.inputLine[e],s=this.inputLine[o];return this.isConcave(r,i,s)&&this.isShallow(r,i,s,n)?this.isShallowSampled(r,i,t,o,n):!1},jsts.operation.buffer.BufferInputLineSimplifier.prototype.isShallowConcavity=function(t,e,o,n){var r=jsts.algorithm.CGAlgorithms.computeOrientation(t,e,o),i=r===this.angleOrientation;if(!i)return!1;var s=jsts.algorithm.CGAlgorithms.distancePointLine(e,t,o);return n>s},jsts.operation.buffer.BufferInputLineSimplifier.NUM_PTS_TO_CHECK=10,jsts.operation.buffer.BufferInputLineSimplifier.prototype.isShallowSampled=function(t,e,o,n,r){var i=parseInt((n-o)/jsts.operation.buffer.BufferInputLineSimplifier.NUM_PTS_TO_CHECK);0>=i&&(i=1);for(var s=o;n>s;s+=i)if(!this.isShallow(t,e,this.inputLine[s],r))return!1;return!0},jsts.operation.buffer.BufferInputLineSimplifier.prototype.isShallow=function(t,e,o,n){var r=jsts.algorithm.CGAlgorithms.distancePointLine(e,t,o);return n>r},jsts.operation.buffer.BufferInputLineSimplifier.prototype.isConcave=function(t,e,o){var n=jsts.algorithm.CGAlgorithms.computeOrientation(t,e,o),r=n===this.angleOrientation;return r},jsts.geomgraph.index.SweepLineEvent=function(t,e,o){return e instanceof jsts.geomgraph.index.SweepLineEvent?(this.eventType=jsts.geomgraph.index.SweepLineEvent.DELETE,this.xValue=t,void(this.insertEvent=e)):(this.eventType=jsts.geomgraph.index.SweepLineEvent.INSERT,this.label=o,this.xValue=t,void(this.obj=e))},jsts.geomgraph.index.SweepLineEvent.INSERT=1,jsts.geomgraph.index.SweepLineEvent.DELETE=2,jsts.geomgraph.index.SweepLineEvent.prototype.label=null,jsts.geomgraph.index.SweepLineEvent.prototype.xValue=null,jsts.geomgraph.index.SweepLineEvent.prototype.eventType=null,jsts.geomgraph.index.SweepLineEvent.prototype.insertEvent=null,jsts.geomgraph.index.SweepLineEvent.prototype.deleteEventIndex=null,jsts.geomgraph.index.SweepLineEvent.prototype.obj=null,jsts.geomgraph.index.SweepLineEvent.prototype.isInsert=function(){return this.eventType==jsts.geomgraph.index.SweepLineEvent.INSERT},jsts.geomgraph.index.SweepLineEvent.prototype.isDelete=function(){return this.eventType==jsts.geomgraph.index.SweepLineEvent.DELETE},jsts.geomgraph.index.SweepLineEvent.prototype.getInsertEvent=function(){return this.insertEvent},jsts.geomgraph.index.SweepLineEvent.prototype.getDeleteEventIndex=function(){return this.deleteEventIndex},jsts.geomgraph.index.SweepLineEvent.prototype.setDeleteEventIndex=function(t){this.deleteEventIndex=t},jsts.geomgraph.index.SweepLineEvent.prototype.getObject=function(){return this.obj},jsts.geomgraph.index.SweepLineEvent.prototype.isSameLabel=function(t){return null==this.label?!1:this.label==t.label},jsts.geomgraph.index.SweepLineEvent.prototype.compareTo=function(t){return this.xValue<t.xValue?-1:this.xValue>t.xValue?1:this.eventType<t.eventType?-1:this.eventType>t.eventType?1:0},jsts.geom.CoordinateList=function(t,e){this.array=[],e=void 0===e?!0:e,void 0!==t&&this.add(t,e)},jsts.geom.CoordinateList.prototype=new javascript.util.ArrayList,jsts.geom.CoordinateList.prototype.iterator=null,jsts.geom.CoordinateList.prototype.remove=null,jsts.geom.CoordinateList.prototype.get=function(t){return this.array[t]},jsts.geom.CoordinateList.prototype.set=function(t,e){var o=this.array[t];return this.array[t]=e,o},jsts.geom.CoordinateList.prototype.size=function(){return this.array.length},jsts.geom.CoordinateList.prototype.add=function(){return arguments.length>1?this.addCoordinates.apply(this,arguments):this.array.push(arguments[0])},jsts.geom.CoordinateList.prototype.addCoordinates=function(t,e,o){if(t instanceof jsts.geom.Coordinate)return this.addCoordinate.apply(this,arguments);if(\"number\"==typeof t)return this.insertCoordinate.apply(this,arguments);if(o=o||!0)for(var n=0;n<t.length;n++)this.addCoordinate(t[n],e);else for(var n=t.length-1;n>=0;n--)this.addCoordinate(t[n],e);return!0},jsts.geom.CoordinateList.prototype.addCoordinate=function(t,e){if(!e&&this.size()>=1){var o=this.get(this.size()-1);if(o.equals2D(t))return}this.add(t)},jsts.geom.CoordinateList.prototype.insertCoordinate=function(t,e,o){if(!o){var n=t>0?t-1:-1;if(-1!==n&&this.get(n).equals2D(e))return;var r=t<this.size()-1?t+1:-1;if(-1!==r&&this.get(r).equals2D(e))return}this.array.splice(t,0,e)},jsts.geom.CoordinateList.prototype.closeRing=function(){this.size()>0&&this.addCoordinate(new jsts.geom.Coordinate(this.get(0)),!1)},jsts.geom.CoordinateList.prototype.toArray=function(){return this.array},jsts.geom.CoordinateList.prototype.toCoordinateArray=function(){return this.array},jsts.operation.buffer.OffsetSegmentGenerator=function(t,e,o){this.seg0=new jsts.geom.LineSegment,this.seg1=new jsts.geom.LineSegment,this.offset0=new jsts.geom.LineSegment,this.offset1=new jsts.geom.LineSegment,this.precisionModel=t,this.bufParams=e,this.li=new jsts.algorithm.RobustLineIntersector,this.filletAngleQuantum=Math.PI/2/e.getQuadrantSegments(),this.bufParams.getQuadrantSegments()>=8&&this.bufParams.getJoinStyle()===jsts.operation.buffer.BufferParameters.JOIN_ROUND&&(this.closingSegLengthFactor=jsts.operation.buffer.OffsetSegmentGenerator.MAX_CLOSING_SEG_LEN_FACTOR),this.init(o)},jsts.operation.buffer.OffsetSegmentGenerator.OFFSET_SEGMENT_SEPARATION_FACTOR=.001,jsts.operation.buffer.OffsetSegmentGenerator.INSIDE_TURN_VERTEX_SNAP_DISTANCE_FACTOR=.001,jsts.operation.buffer.OffsetSegmentGenerator.CURVE_VERTEX_SNAP_DISTANCE_FACTOR=1e-6,jsts.operation.buffer.OffsetSegmentGenerator.MAX_CLOSING_SEG_LEN_FACTOR=80,jsts.operation.buffer.OffsetSegmentGenerator.prototype.maxCurveSegmentError=0,jsts.operation.buffer.OffsetSegmentGenerator.prototype.filletAngleQuantum=null,jsts.operation.buffer.OffsetSegmentGenerator.prototype.closingSegLengthFactor=1,jsts.operation.buffer.OffsetSegmentGenerator.prototype.segList=null,jsts.operation.buffer.OffsetSegmentGenerator.prototype.distance=0,jsts.operation.buffer.OffsetSegmentGenerator.prototype.precisionModel=null,jsts.operation.buffer.OffsetSegmentGenerator.prototype.bufParams=null,jsts.operation.buffer.OffsetSegmentGenerator.prototype.li=null,jsts.operation.buffer.OffsetSegmentGenerator.prototype.s0=null,jsts.operation.buffer.OffsetSegmentGenerator.prototype.s1=null,jsts.operation.buffer.OffsetSegmentGenerator.prototype.s2=null,jsts.operation.buffer.OffsetSegmentGenerator.prototype.seg0=null,jsts.operation.buffer.OffsetSegmentGenerator.prototype.seg1=null,jsts.operation.buffer.OffsetSegmentGenerator.prototype.offset0=null,jsts.operation.buffer.OffsetSegmentGenerator.prototype.offset1=null,jsts.operation.buffer.OffsetSegmentGenerator.prototype.side=0,jsts.operation.buffer.OffsetSegmentGenerator.prototype.hasNarrowConcaveAngle=!1,jsts.operation.buffer.OffsetSegmentGenerator.prototype.hasNarrowConcaveAngle=function(){return this.hasNarrowConcaveAngle},jsts.operation.buffer.OffsetSegmentGenerator.prototype.init=function(t){this.distance=t,this.maxCurveSegmentError=this.distance*(1-Math.cos(this.filletAngleQuantum/2)),this.segList=new jsts.operation.buffer.OffsetSegmentString,this.segList.setPrecisionModel(this.precisionModel),this.segList.setMinimumVertexDistance(this.distance*jsts.operation.buffer.OffsetSegmentGenerator.CURVE_VERTEX_SNAP_DISTANCE_FACTOR)},jsts.operation.buffer.OffsetSegmentGenerator.prototype.initSideSegments=function(t,e,o){this.s1=t,this.s2=e,this.side=o,this.seg1.setCoordinates(this.s1,this.s2),this.computeOffsetSegment(this.seg1,this.side,this.distance,this.offset1)},jsts.operation.buffer.OffsetSegmentGenerator.prototype.getCoordinates=function(){return this.segList.getCoordinates()},jsts.operation.buffer.OffsetSegmentGenerator.prototype.closeRing=function(){this.segList.closeRing()},jsts.operation.buffer.OffsetSegmentGenerator.prototype.addSegments=function(t,e){this.segList.addPts(t,e)},jsts.operation.buffer.OffsetSegmentGenerator.prototype.addFirstSegment=function(){this.segList.addPt(this.offset1.p0)},jsts.operation.buffer.OffsetSegmentGenerator.prototype.addLastSegment=function(){this.segList.addPt(this.offset1.p1)},jsts.operation.buffer.OffsetSegmentGenerator.prototype.addNextSegment=function(t,e){if(this.s0=this.s1,this.s1=this.s2,this.s2=t,this.seg0.setCoordinates(this.s0,this.s1),this.computeOffsetSegment(this.seg0,this.side,this.distance,this.offset0),this.seg1.setCoordinates(this.s1,this.s2),this.computeOffsetSegment(this.seg1,this.side,this.distance,this.offset1),!this.s1.equals(this.s2)){var o=jsts.algorithm.CGAlgorithms.computeOrientation(this.s0,this.s1,this.s2),n=o===jsts.algorithm.CGAlgorithms.CLOCKWISE&&this.side===jsts.geomgraph.Position.LEFT||o===jsts.algorithm.CGAlgorithms.COUNTERCLOCKWISE&&this.side===jsts.geomgraph.Position.RIGHT;0==o?this.addCollinear(e):n?this.addOutsideTurn(o,e):this.addInsideTurn(o,e)}},jsts.operation.buffer.OffsetSegmentGenerator.prototype.addCollinear=function(t){this.li.computeIntersection(this.s0,this.s1,this.s1,this.s2);var e=this.li.getIntersectionNum();e>=2&&(this.bufParams.getJoinStyle()===jsts.operation.buffer.BufferParameters.JOIN_BEVEL||this.bufParams.getJoinStyle()===jsts.operation.buffer.BufferParameters.JOIN_MITRE?(t&&this.segList.addPt(this.offset0.p1),this.segList.addPt(this.offset1.p0)):this.addFillet(this.s1,this.offset0.p1,this.offset1.p0,jsts.algorithm.CGAlgorithms.CLOCKWISE,this.distance))},jsts.operation.buffer.OffsetSegmentGenerator.prototype.addOutsideTurn=function(t,e){return this.offset0.p1.distance(this.offset1.p0)<this.distance*jsts.operation.buffer.OffsetSegmentGenerator.OFFSET_SEGMENT_SEPARATION_FACTOR?void this.segList.addPt(this.offset0.p1):void(this.bufParams.getJoinStyle()===jsts.operation.buffer.BufferParameters.JOIN_MITRE?this.addMitreJoin(this.s1,this.offset0,this.offset1,this.distance):this.bufParams.getJoinStyle()===jsts.operation.buffer.BufferParameters.JOIN_BEVEL?this.addBevelJoin(this.offset0,this.offset1):(e&&this.segList.addPt(this.offset0.p1),this.addFillet(this.s1,this.offset0.p1,this.offset1.p0,t,this.distance),this.segList.addPt(this.offset1.p0)))},jsts.operation.buffer.OffsetSegmentGenerator.prototype.addInsideTurn=function(t,e){if(this.li.computeIntersection(this.offset0.p0,this.offset0.p1,this.offset1.p0,this.offset1.p1),this.li.hasIntersection())this.segList.addPt(this.li.getIntersection(0));else if(this.hasNarrowConcaveAngle=!0,this.offset0.p1.distance(this.offset1.p0)<this.distance*jsts.operation.buffer.OffsetSegmentGenerator.INSIDE_TURN_VERTEX_SNAP_DISTANCE_FACTOR)this.segList.addPt(this.offset0.p1);else{if(this.segList.addPt(this.offset0.p1),this.closingSegLengthFactor>0){var o=new jsts.geom.Coordinate((this.closingSegLengthFactor*this.offset0.p1.x+this.s1.x)/(this.closingSegLengthFactor+1),(this.closingSegLengthFactor*this.offset0.p1.y+this.s1.y)/(this.closingSegLengthFactor+1));this.segList.addPt(o);var n=new jsts.geom.Coordinate((this.closingSegLengthFactor*this.offset1.p0.x+this.s1.x)/(this.closingSegLengthFactor+1),(this.closingSegLengthFactor*this.offset1.p0.y+this.s1.y)/(this.closingSegLengthFactor+1));this.segList.addPt(n)}else this.segList.addPt(this.s1);this.segList.addPt(this.offset1.p0)}},jsts.operation.buffer.OffsetSegmentGenerator.prototype.computeOffsetSegment=function(t,e,o,n){var r=e===jsts.geomgraph.Position.LEFT?1:-1,i=t.p1.x-t.p0.x,s=t.p1.y-t.p0.y,a=Math.sqrt(i*i+s*s),p=r*o*i/a,u=r*o*s/a;n.p0.x=t.p0.x-u,\nn.p0.y=t.p0.y+p,n.p1.x=t.p1.x-u,n.p1.y=t.p1.y+p},jsts.operation.buffer.OffsetSegmentGenerator.prototype.addLineEndCap=function(t,e){var o=new jsts.geom.LineSegment(t,e),n=new jsts.geom.LineSegment;this.computeOffsetSegment(o,jsts.geomgraph.Position.LEFT,this.distance,n);var r=new jsts.geom.LineSegment;this.computeOffsetSegment(o,jsts.geomgraph.Position.RIGHT,this.distance,r);var i=e.x-t.x,s=e.y-t.y,a=Math.atan2(s,i);switch(this.bufParams.getEndCapStyle()){case jsts.operation.buffer.BufferParameters.CAP_ROUND:this.segList.addPt(n.p1),this.addFillet(e,a+Math.PI/2,a-Math.PI/2,jsts.algorithm.CGAlgorithms.CLOCKWISE,this.distance),this.segList.addPt(r.p1);break;case jsts.operation.buffer.BufferParameters.CAP_FLAT:this.segList.addPt(n.p1),this.segList.addPt(r.p1);break;case jsts.operation.buffer.BufferParameters.CAP_SQUARE:var p=new jsts.geom.Coordinate;p.x=Math.abs(this.distance)*Math.cos(a),p.y=Math.abs(this.distance)*Math.sin(a);var u=new jsts.geom.Coordinate(n.p1.x+p.x,n.p1.y+p.y),l=new jsts.geom.Coordinate(r.p1.x+p.x,r.p1.y+p.y);this.segList.addPt(u),this.segList.addPt(l)}},jsts.operation.buffer.OffsetSegmentGenerator.prototype.addMitreJoin=function(t,e,o,n){var r=!0,i=null;try{i=jsts.algorithm.HCoordinate.intersection(e.p0,e.p1,o.p0,o.p1);var s=0>=n?1:i.distance(t)/Math.abs(n);s>this.bufParams.getMitreLimit()&&(this.isMitreWithinLimit=!1)}catch(a){a instanceof jsts.error.NotRepresentableError&&(i=new jsts.geom.Coordinate(0,0),this.isMitreWithinLimit=!1)}r?this.segList.addPt(i):this.addLimitedMitreJoin(e,o,n,bufParams.getMitreLimit())},jsts.operation.buffer.OffsetSegmentGenerator.prototype.addLimitedMitreJoin=function(t,e,o,n){var r=this.seg0.p1,i=jsts.algorithm.Angle.angle(r,this.seg0.p0),s=(jsts.algorithm.Angle.angle(r,this.seg1.p1),jsts.algorithm.Angle.angleBetweenOriented(this.seg0.p0,r,this.seg1.p1)),a=s/2,p=jsts.algorithm.Angle.normalize(i+a),u=jsts.algorithm.Angle.normalize(p+Math.PI),l=n*o,g=l*Math.abs(Math.sin(a)),h=o-g,c=r.x+l*Math.cos(u),d=r.y+l*Math.sin(u),f=new jsts.geom.Coordinate(c,d),m=new jsts.geom.LineSegment(r,f),y=m.pointAlongOffset(1,h),j=m.pointAlongOffset(1,-h);this.side==jsts.geomgraph.Position.LEFT?(this.segList.addPt(y),this.segList.addPt(j)):(this.segList.addPt(j),this.segList.addPt(y))},jsts.operation.buffer.OffsetSegmentGenerator.prototype.addBevelJoin=function(t,e){this.segList.addPt(t.p1),this.segList.addPt(e.p0)},jsts.operation.buffer.OffsetSegmentGenerator.prototype.addFillet=function(t,e,o,n,r){if(!(o instanceof jsts.geom.Coordinate))return void this.addFillet2.apply(this,arguments);var i=e.x-t.x,s=e.y-t.y,a=Math.atan2(s,i),p=o.x-t.x,u=o.y-t.y,l=Math.atan2(u,p);n===jsts.algorithm.CGAlgorithms.CLOCKWISE?l>=a&&(a+=2*Math.PI):a>=l&&(a-=2*Math.PI),this.segList.addPt(e),this.addFillet(t,a,l,n,r),this.segList.addPt(o)},jsts.operation.buffer.OffsetSegmentGenerator.prototype.addFillet2=function(t,e,o,n,r){var i=n===jsts.algorithm.CGAlgorithms.CLOCKWISE?-1:1,s=Math.abs(e-o),a=parseInt(s/this.filletAngleQuantum+.5);if(!(1>a)){var p,u;p=0,u=s/a;for(var l=p,g=new jsts.geom.Coordinate;s>l;){var h=e+i*l;g.x=t.x+r*Math.cos(h),g.y=t.y+r*Math.sin(h),this.segList.addPt(g),l+=u}}},jsts.operation.buffer.OffsetSegmentGenerator.prototype.createCircle=function(t){var e=new jsts.geom.Coordinate(t.x+this.distance,t.y);this.segList.addPt(e),this.addFillet(t,0,2*Math.PI,-1,this.distance),this.segList.closeRing()},jsts.operation.buffer.OffsetSegmentGenerator.prototype.createSquare=function(t){this.segList.addPt(new jsts.geom.Coordinate(t.x+distance,t.y+distance)),this.segList.addPt(new jsts.geom.Coordinate(t.x+distance,t.y-distance)),this.segList.addPt(new jsts.geom.Coordinate(t.x-distance,t.y-distance)),this.segList.addPt(new jsts.geom.Coordinate(t.x-distance,t.y+distance)),this.segList.closeRing()},jsts.operation.overlay.MaximalEdgeRing=function(t,e){jsts.geomgraph.EdgeRing.call(this,t,e)},jsts.operation.overlay.MaximalEdgeRing.prototype=new jsts.geomgraph.EdgeRing,jsts.operation.overlay.MaximalEdgeRing.constructor=jsts.operation.overlay.MaximalEdgeRing,jsts.operation.overlay.MaximalEdgeRing.prototype.getNext=function(t){return t.getNext()},jsts.operation.overlay.MaximalEdgeRing.prototype.setEdgeRing=function(t,e){t.setEdgeRing(e)},jsts.operation.overlay.MaximalEdgeRing.prototype.linkDirectedEdgesForMinimalEdgeRings=function(){var t=this.startDe;do{var e=t.getNode();e.getEdges().linkMinimalDirectedEdges(this),t=t.getNext()}while(t!=this.startDe)},jsts.operation.overlay.MaximalEdgeRing.prototype.buildMinimalRings=function(){var t=[],e=this.startDe;do{if(null===e.getMinEdgeRing()){var o=new jsts.operation.overlay.MinimalEdgeRing(e,this.geometryFactory);t.push(o)}e=e.getNext()}while(e!=this.startDe);return t},jsts.algorithm.CentroidPoint=function(){this.centSum=new jsts.geom.Coordinate},jsts.algorithm.CentroidPoint.prototype.ptCount=0,jsts.algorithm.CentroidPoint.prototype.centSum=null,jsts.algorithm.CentroidPoint.prototype.add=function(t){if(t instanceof jsts.geom.Point)this.add2(t.getCoordinate());else if(t instanceof jsts.geom.GeometryCollection||t instanceof jsts.geom.MultiPoint||t instanceof jsts.geom.MultiLineString||t instanceof jsts.geom.MultiPolygon)for(var e=t,o=0;o<e.getNumGeometries();o++)this.add(e.getGeometryN(o))},jsts.algorithm.CentroidPoint.prototype.add2=function(t){this.ptCount+=1,this.centSum.x+=t.x,this.centSum.y+=t.y},jsts.algorithm.CentroidPoint.prototype.getCentroid=function(){var t=new jsts.geom.Coordinate;return t.x=this.centSum.x/this.ptCount,t.y=this.centSum.y/this.ptCount,t},jsts.operation.distance.ConnectedElementLocationFilter=function(t){this.locations=t},jsts.operation.distance.ConnectedElementLocationFilter.prototype=new jsts.geom.GeometryFilter,jsts.operation.distance.ConnectedElementLocationFilter.prototype.locations=null,jsts.operation.distance.ConnectedElementLocationFilter.getLocations=function(t){var e=[];return t.apply(new jsts.operation.distance.ConnectedElementLocationFilter(e)),e},jsts.operation.distance.ConnectedElementLocationFilter.prototype.filter=function(t){(t instanceof jsts.geom.Point||t instanceof jsts.geom.LineString||t instanceof jsts.geom.Polygon)&&this.locations.push(new jsts.operation.distance.GeometryLocation(t,0,t.getCoordinate()))},jsts.geomgraph.index.MonotoneChainEdge=function(t){this.e=t,this.pts=t.getCoordinates();var e=new jsts.geomgraph.index.MonotoneChainIndexer;this.startIndex=e.getChainStartIndices(this.pts)},jsts.geomgraph.index.MonotoneChainEdge.prototype.e=null,jsts.geomgraph.index.MonotoneChainEdge.prototype.pts=null,jsts.geomgraph.index.MonotoneChainEdge.prototype.startIndex=null,jsts.geomgraph.index.MonotoneChainEdge.prototype.env1=new jsts.geom.Envelope,jsts.geomgraph.index.MonotoneChainEdge.prototype.env2=new jsts.geom.Envelope,jsts.geomgraph.index.MonotoneChainEdge.prototype.getCoordinates=function(){return this.pts},jsts.geomgraph.index.MonotoneChainEdge.prototype.getStartIndexes=function(){return this.startIndex},jsts.geomgraph.index.MonotoneChainEdge.prototype.getMinX=function(t){var e=this.pts[this.startIndex[t]].x,o=this.pts[this.startIndex[t+1]].x;return o>e?e:o},jsts.geomgraph.index.MonotoneChainEdge.prototype.getMaxX=function(t){var e=this.pts[this.startIndex[t]].x,o=this.pts[this.startIndex[t+1]].x;return e>o?e:o},jsts.geomgraph.index.MonotoneChainEdge.prototype.computeIntersects=function(t,e){for(var o=0;o<this.startIndex.length-1;o++)for(var n=0;n<t.startIndex.length-1;n++)this.computeIntersectsForChain(o,t,n,e)},jsts.geomgraph.index.MonotoneChainEdge.prototype.computeIntersectsForChain=function(t,e,o,n){this.computeIntersectsForChain2(this.startIndex[t],this.startIndex[t+1],e,e.startIndex[o],e.startIndex[o+1],n)},jsts.geomgraph.index.MonotoneChainEdge.prototype.computeIntersectsForChain2=function(t,e,o,n,r,i){var s=this.pts[t],a=this.pts[e],p=o.pts[n],u=o.pts[r];if(e-t==1&&r-n==1)return void i.addIntersections(this.e,t,o.e,n);if(this.env1.init(s,a),this.env2.init(p,u),this.env1.intersects(this.env2)){var l=Math.floor((t+e)/2),g=Math.floor((n+r)/2);l>t&&(g>n&&this.computeIntersectsForChain2(t,l,o,n,g,i),r>g&&this.computeIntersectsForChain2(t,l,o,g,r,i)),e>l&&(g>n&&this.computeIntersectsForChain2(l,e,o,n,g,i),r>g&&this.computeIntersectsForChain2(l,e,o,g,r,i))}},function(){var t=javascript.util.ArrayList;jsts.operation.relate.EdgeEndBuilder=function(){},jsts.operation.relate.EdgeEndBuilder.prototype.computeEdgeEnds=function(e){if(2==arguments.length)return void this.computeEdgeEnds2.apply(this,arguments);for(var o=new t,n=e;n.hasNext();){var r=n.next();this.computeEdgeEnds2(r,o)}return o},jsts.operation.relate.EdgeEndBuilder.prototype.computeEdgeEnds2=function(t,e){var o=t.getEdgeIntersectionList();o.addEndpoints();var n=o.iterator(),r=null,i=null;if(n.hasNext()){var s=n.next();do r=i,i=s,s=null,n.hasNext()&&(s=n.next()),null!==i&&(this.createEdgeEndForPrev(t,e,i,r),this.createEdgeEndForNext(t,e,i,s));while(null!==i)}},jsts.operation.relate.EdgeEndBuilder.prototype.createEdgeEndForPrev=function(t,e,o,n){var r=o.segmentIndex;if(0===o.dist){if(0===r)return;r--}var i=t.getCoordinate(r);null!==n&&n.segmentIndex>=r&&(i=n.coord);var s=new jsts.geomgraph.Label(t.getLabel());s.flip();var a=new jsts.geomgraph.EdgeEnd(t,o.coord,i,s);e.add(a)},jsts.operation.relate.EdgeEndBuilder.prototype.createEdgeEndForNext=function(t,e,o,n){var r=o.segmentIndex+1;if(!(r>=t.getNumPoints()&&null===n)){var i=t.getCoordinate(r);null!==n&&n.segmentIndex===o.segmentIndex&&(i=n.coord);var s=new jsts.geomgraph.EdgeEnd(t,o.coord,i,new jsts.geomgraph.Label(t.getLabel()));e.add(s)}}}(),function(){var t=javascript.util.ArrayList,e=javascript.util.TreeSet,o=jsts.geom.CoordinateFilter;jsts.util.UniqueCoordinateArrayFilter=function(){this.treeSet=new e,this.list=new t},jsts.util.UniqueCoordinateArrayFilter.prototype=new o,jsts.util.UniqueCoordinateArrayFilter.prototype.treeSet=null,jsts.util.UniqueCoordinateArrayFilter.prototype.list=null,jsts.util.UniqueCoordinateArrayFilter.prototype.getCoordinates=function(){return this.list.toArray()},jsts.util.UniqueCoordinateArrayFilter.prototype.filter=function(t){this.treeSet.contains(t)||(this.list.add(t),this.treeSet.add(t))}}(),function(){var t=jsts.algorithm.CGAlgorithms,e=jsts.util.UniqueCoordinateArrayFilter,o=jsts.util.Assert,n=javascript.util.Stack,r=javascript.util.ArrayList,i=javascript.util.Arrays,s=function(t){this.origin=t};s.prototype.origin=null,s.prototype.compare=function(t,e){var o=t,n=e;return s.polarCompare(this.origin,o,n)},s.polarCompare=function(e,o,n){var r=o.x-e.x,i=o.y-e.y,s=n.x-e.x,a=n.y-e.y,p=t.computeOrientation(e,o,n);if(p==t.COUNTERCLOCKWISE)return 1;if(p==t.CLOCKWISE)return-1;var u=r*r+i*i,l=s*s+a*a;return l>u?-1:u>l?1:0},jsts.algorithm.ConvexHull=function(){if(1===arguments.length){var t=arguments[0];this.inputPts=jsts.algorithm.ConvexHull.extractCoordinates(t),this.geomFactory=t.getFactory()}else this.pts=arguments[0],this.geomFactory=arguments[1]},jsts.algorithm.ConvexHull.prototype.geomFactory=null,jsts.algorithm.ConvexHull.prototype.inputPts=null,jsts.algorithm.ConvexHull.extractCoordinates=function(t){var o=new e;return t.apply(o),o.getCoordinates()},jsts.algorithm.ConvexHull.prototype.getConvexHull=function(){if(0==this.inputPts.length)return this.geomFactory.createGeometryCollection(null);if(1==this.inputPts.length)return this.geomFactory.createPoint(this.inputPts[0]);if(2==this.inputPts.length)return this.geomFactory.createLineString(this.inputPts);var t=this.inputPts;this.inputPts.length>50&&(t=this.reduce(this.inputPts));var e=this.preSort(t),o=this.grahamScan(e),n=o.toArray();return this.lineOrPolygon(n)},jsts.algorithm.ConvexHull.prototype.reduce=function(e){var o=this.computeOctRing(e);if(null==o)return this.inputPts;for(var n=new javascript.util.TreeSet,r=0;r<o.length;r++)n.add(o[r]);for(var r=0;r<e.length;r++)t.isPointInRing(e[r],o)||n.add(e[r]);var i=n.toArray();return i.length<3?this.padArray3(i):i},jsts.algorithm.ConvexHull.prototype.padArray3=function(t){for(var e=[],o=0;o<e.length;o++)o<t.length?e[o]=t[o]:e[o]=t[0];return e},jsts.algorithm.ConvexHull.prototype.preSort=function(t){for(var e,o=1;o<t.length;o++)(t[o].y<t[0].y||t[o].y==t[0].y&&t[o].x<t[0].x)&&(e=t[0],t[0]=t[o],t[o]=e);return i.sort(t,1,t.length,new s(t[0])),t},jsts.algorithm.ConvexHull.prototype.grahamScan=function(e){var o,r=new n;o=r.push(e[0]),o=r.push(e[1]),o=r.push(e[2]);for(var i=3;i<e.length;i++){for(o=r.pop();!r.empty()&&t.computeOrientation(r.peek(),o,e[i])>0;)o=r.pop();o=r.push(o),o=r.push(e[i])}return o=r.push(e[0]),r},jsts.algorithm.ConvexHull.prototype.isBetween=function(e,o,n){if(0!==t.computeOrientation(e,o,n))return!1;if(e.x!=n.x){if(e.x<=o.x&&o.x<=n.x)return!0;if(n.x<=o.x&&o.x<=e.x)return!0}if(e.y!=n.y){if(e.y<=o.y&&o.y<=n.y)return!0;if(n.y<=o.y&&o.y<=e.y)return!0}return!1},jsts.algorithm.ConvexHull.prototype.computeOctRing=function(t){var e=this.computeOctPts(t),o=new jsts.geom.CoordinateList;return o.add(e,!1),o.size()<3?null:(o.closeRing(),o.toCoordinateArray())},jsts.algorithm.ConvexHull.prototype.computeOctPts=function(t){for(var e=[],o=0;8>o;o++)e[o]=t[0];for(var n=1;n<t.length;n++)t[n].x<e[0].x&&(e[0]=t[n]),t[n].x-t[n].y<e[1].x-e[1].y&&(e[1]=t[n]),t[n].y>e[2].y&&(e[2]=t[n]),t[n].x+t[n].y>e[3].x+e[3].y&&(e[3]=t[n]),t[n].x>e[4].x&&(e[4]=t[n]),t[n].x-t[n].y>e[5].x-e[5].y&&(e[5]=t[n]),t[n].y<e[6].y&&(e[6]=t[n]),t[n].x+t[n].y<e[7].x+e[7].y&&(e[7]=t[n]);return e},jsts.algorithm.ConvexHull.prototype.lineOrPolygon=function(t){if(t=this.cleanRing(t),3==t.length)return this.geomFactory.createLineString([t[0],t[1]]);var e=this.geomFactory.createLinearRing(t);return this.geomFactory.createPolygon(e,null)},jsts.algorithm.ConvexHull.prototype.cleanRing=function(t){o.equals(t[0],t[t.length-1]);for(var e=new r,n=null,i=0;i<=t.length-2;i++){var s=t[i],a=t[i+1];s.equals(a)||null!=n&&this.isBetween(n,s,a)||(e.add(s),n=s)}e.add(t[t.length-1]);var p=[];return e.toArray(p)}}(),jsts.algorithm.MinimumDiameter=function(t,e){this.convexHullPts=null,this.minBaseSeg=new jsts.geom.LineSegment,this.minWidthPt=null,this.minPtIndex=0,this.minWidth=0,jsts.algorithm.MinimumDiameter.inputGeom=t,jsts.algorithm.MinimumDiameter.isConvex=e||!1},jsts.algorithm.MinimumDiameter.inputGeom=null,jsts.algorithm.MinimumDiameter.isConvex=!1,jsts.algorithm.MinimumDiameter.nextIndex=function(t,e){return e++,e>=t.length&&(e=0),e},jsts.algorithm.MinimumDiameter.computeC=function(t,e,o){return t*o.y-e*o.x},jsts.algorithm.MinimumDiameter.computeSegmentForLine=function(t,e,o){var n,r;return Math.abs(e)>Math.abs(t)?(n=new jsts.geom.Coordinate(0,o/e),r=new jsts.geom.Coordinate(1,o/e-t/e)):(n=new jsts.geom.Coordinate(o/t,0),r=new jsts.geom.Coordinate(o/t-e/t,1)),new jsts.geom.LineSegment(n,r)},jsts.algorithm.MinimumDiameter.prototype.getLength=function(){return this.computeMinimumDiameter(),this.minWidth},jsts.algorithm.MinimumDiameter.prototype.getWidthCoordinate=function(){return this.computeMinimumDiameter(),this.minWidthPt},jsts.algorithm.MinimumDiameter.prototype.getSupportingSegment=function(){this.computeMinimumDiameter();var t=[this.minBaseSeg.p0,this.minBaseSeg.p1];return jsts.algorithm.MinimumDiameter.inputGeom.getFactory().createLineString(t)},jsts.algorithm.MinimumDiameter.prototype.getDiameter=function(){if(this.computeMinimumDiameter(),null===this.minWidthPt)return jsts.algorithm.MinimumDiameter.inputGeom.getFactory().createLineString(null);var t=this.minBaseSeg.project(this.minWidthPt);return jsts.algorithm.MinimumDiameter.inputGeom.getFactory().createLineString([t,this.minWidthPt])},jsts.algorithm.MinimumDiameter.prototype.computeMinimumDiameter=function(){if(null===this.minWidthPt)if(jsts.algorithm.MinimumDiameter.isConvex)this.computeWidthConvex(jsts.algorithm.MinimumDiameter.inputGeom);else{var t=new jsts.algorithm.ConvexHull(jsts.algorithm.MinimumDiameter.inputGeom).getConvexHull();this.computeWidthConvex(t)}},jsts.algorithm.MinimumDiameter.prototype.computeWidthConvex=function(t){t instanceof jsts.geom.Polygon?this.convexHullPts=t.getExteriorRing().getCoordinates():this.convexHullPts=t.getCoordinates(),0===this.convexHullPts.length?(this.minWidth=0,this.minWidthPt=null,this.minBaseSeg=null):1===this.convexHullPts.length?(this.minWidth=0,this.minWidthPt=this.convexHullPts[0],this.minBaseSeg.p0=this.convexHullPts[0],this.minBaseSeg.p1=this.convexHullPts[0]):2===this.convexHullPts.length||3===this.convexHullPts.length?(this.minWidth=0,this.minWidthPt=this.convexHullPts[0],this.minBaseSeg.p0=this.convexHullPts[0],this.minBaseSeg.p1=this.convexHullPts[1]):this.computeConvexRingMinDiameter(this.convexHullPts)},jsts.algorithm.MinimumDiameter.prototype.computeConvexRingMinDiameter=function(t){this.minWidth=Number.MAX_VALUE;for(var e=1,o=new jsts.geom.LineSegment,n=0;n<t.length-1;n++)o.p0=t[n],o.p1=t[n+1],e=this.findMaxPerpDistance(t,o,e)},jsts.algorithm.MinimumDiameter.prototype.findMaxPerpDistance=function(t,e,o){for(var n=e.distancePerpendicular(t[o]),r=n,i=o,s=i;r>=n;)n=r,i=s,s=jsts.algorithm.MinimumDiameter.nextIndex(t,i),r=e.distancePerpendicular(t[s]);return n<this.minWidth&&(this.minPtIndex=i,this.minWidth=n,this.minWidthPt=t[this.minPtIndex],this.minBaseSeg=new jsts.geom.LineSegment(e)),i},jsts.algorithm.MinimumDiameter.prototype.getMinimumRectangle=function(){if(this.computeMinimumDiameter(),0===this.minWidth)return this.minBaseSeg.p0.equals2D(this.minBaseSeg.p1)?jsts.algorithm.MinimumDiameter.inputGeom.getFactory().createPoint(this.minBaseSeg.p0):this.minBaseSeg.toGeometry(jsts.algorithm.MinimumDiameter.inputGeom.getFactory());for(var t=this.minBaseSeg.p1.x-this.minBaseSeg.p0.x,e=this.minBaseSeg.p1.y-this.minBaseSeg.p0.y,o=Number.MAX_VALUE,n=-Number.MAX_VALUE,r=Number.MAX_VALUE,i=-Number.MAX_VALUE,s=0;s<this.convexHullPts.length;s++){var a=jsts.algorithm.MinimumDiameter.computeC(t,e,this.convexHullPts[s]);a>n&&(n=a),o>a&&(o=a);var p=jsts.algorithm.MinimumDiameter.computeC(-e,t,this.convexHullPts[s]);p>i&&(i=p),r>p&&(r=p)}var u=jsts.algorithm.MinimumDiameter.computeSegmentForLine(-t,-e,i),l=jsts.algorithm.MinimumDiameter.computeSegmentForLine(-t,-e,r),g=jsts.algorithm.MinimumDiameter.computeSegmentForLine(-e,t,n),h=jsts.algorithm.MinimumDiameter.computeSegmentForLine(-e,t,o),c=g.lineIntersection(u),d=h.lineIntersection(u),f=h.lineIntersection(l),m=g.lineIntersection(l),y=jsts.algorithm.MinimumDiameter.inputGeom.getFactory().createLinearRing([c,d,f,m,c]);return jsts.algorithm.MinimumDiameter.inputGeom.getFactory().createPolygon(y,null)},function(){jsts.io.GeoJSONParser=function(t){this.geometryFactory=t||new jsts.geom.GeometryFactory,this.geometryTypes=[\"Point\",\"MultiPoint\",\"LineString\",\"MultiLineString\",\"Polygon\",\"MultiPolygon\"]},jsts.io.GeoJSONParser.prototype.read=function(t){var e;e=\"string\"==typeof t?JSON.parse(t):t;var o=e.type;if(!this.parse[o])throw new Error(\"Unknown GeoJSON type: \"+e.type);return-1!=this.geometryTypes.indexOf(o)?this.parse[o].apply(this,[e.coordinates]):\"GeometryCollection\"===o?this.parse[o].apply(this,[e.geometries]):this.parse[o].apply(this,[e])},jsts.io.GeoJSONParser.prototype.parse={Feature:function(t){var e={};for(var o in t)e[o]=t[o];if(t.geometry){var n=t.geometry.type;if(!this.parse[n])throw new Error(\"Unknown GeoJSON type: \"+t.type);e.geometry=this.read(t.geometry)}return t.bbox&&(e.bbox=this.parse.bbox.apply(this,[t.bbox])),e},FeatureCollection:function(t){var e={};if(t.features){e.features=[];for(var o=0;o<t.features.length;++o)e.features.push(this.read(t.features[o]))}return t.bbox&&(e.bbox=this.parse.bbox.apply(this,[t.bbox])),e},coordinates:function(t){for(var e=[],o=0;o<t.length;++o){var n=t[o];e.push(new jsts.geom.Coordinate(n[0],n[1]))}return e},bbox:function(t){return this.geometryFactory.createLinearRing([new jsts.geom.Coordinate(t[0],t[1]),new jsts.geom.Coordinate(t[2],t[1]),new jsts.geom.Coordinate(t[2],t[3]),new jsts.geom.Coordinate(t[0],t[3]),new jsts.geom.Coordinate(t[0],t[1])])},Point:function(t){var e=new jsts.geom.Coordinate(t[0],t[1]);return this.geometryFactory.createPoint(e)},MultiPoint:function(t){for(var e=[],o=0;o<t.length;++o)e.push(this.parse.Point.apply(this,[t[o]]));return this.geometryFactory.createMultiPoint(e)},LineString:function(t){var e=this.parse.coordinates.apply(this,[t]);return this.geometryFactory.createLineString(e)},MultiLineString:function(t){for(var e=[],o=0;o<t.length;++o)e.push(this.parse.LineString.apply(this,[t[o]]));return this.geometryFactory.createMultiLineString(e)},Polygon:function(t){for(var e=this.parse.coordinates.apply(this,[t[0]]),o=this.geometryFactory.createLinearRing(e),n=[],r=1;r<t.length;++r){var i=t[r],s=this.parse.coordinates.apply(this,[i]),a=this.geometryFactory.createLinearRing(s);n.push(a)}return this.geometryFactory.createPolygon(o,n)},MultiPolygon:function(t){for(var e=[],o=0;o<t.length;++o){var n=t[o];e.push(this.parse.Polygon.apply(this,[n]))}return this.geometryFactory.createMultiPolygon(e)},GeometryCollection:function(t){for(var e=[],o=0;o<t.length;++o){var n=t[o];e.push(this.read(n))}return this.geometryFactory.createGeometryCollection(e)}},jsts.io.GeoJSONParser.prototype.write=function(t){var e=t.CLASS_NAME.slice(10);if(!this.extract[e])throw new Error(\"Geometry is not supported\");return this.extract[e].apply(this,[t])},jsts.io.GeoJSONParser.prototype.extract={coordinate:function(t){return[t.x,t.y]},Point:function(t){var e=this.extract.coordinate.apply(this,[t.coordinate]);return{type:\"Point\",coordinates:e}},MultiPoint:function(t){for(var e=[],o=0;o<t.geometries.length;++o){var n=t.geometries[o],r=this.extract.Point.apply(this,[n]);e.push(r.coordinates)}return{type:\"MultiPoint\",coordinates:e}},LineString:function(t){for(var e=[],o=0;o<t.points.length;++o){var n=t.points[o];e.push(this.extract.coordinate.apply(this,[n]))}return{type:\"LineString\",coordinates:e}},MultiLineString:function(t){for(var e=[],o=0;o<t.geometries.length;++o){var n=t.geometries[o],r=this.extract.LineString.apply(this,[n]);e.push(r.coordinates)}return{type:\"MultiLineString\",coordinates:e}},Polygon:function(t){var e=[],o=this.extract.LineString.apply(this,[t.shell]);e.push(o.coordinates);for(var n=0;n<t.holes.length;++n){var r=t.holes[n],i=this.extract.LineString.apply(this,[r]);e.push(i.coordinates)}return{type:\"Polygon\",coordinates:e}},MultiPolygon:function(t){for(var e=[],o=0;o<t.geometries.length;++o){var n=t.geometries[o],r=this.extract.Polygon.apply(this,[n]);e.push(r.coordinates)}return{type:\"MultiPolygon\",coordinates:e}},GeometryCollection:function(t){for(var e=[],o=0;o<t.geometries.length;++o){var n=t.geometries[o],r=n.CLASS_NAME.slice(10);e.push(this.extract[r].apply(this,[n]))}return{type:\"GeometryCollection\",geometries:e}}}}(),jsts.triangulate.quadedge.Vertex=function(){1===arguments.length?this.initFromCoordinate(arguments[0]):this.initFromXY(arguments[0],arguments[1])},jsts.triangulate.quadedge.Vertex.LEFT=0,jsts.triangulate.quadedge.Vertex.RIGHT=1,jsts.triangulate.quadedge.Vertex.BEYOND=2,jsts.triangulate.quadedge.Vertex.BEHIND=3,jsts.triangulate.quadedge.Vertex.BETWEEN=4,jsts.triangulate.quadedge.Vertex.ORIGIN=5,jsts.triangulate.quadedge.Vertex.DESTINATION=6,jsts.triangulate.quadedge.Vertex.prototype.initFromXY=function(t,e){this.p=new jsts.geom.Coordinate(t,e)},jsts.triangulate.quadedge.Vertex.prototype.initFromCoordinate=function(t){this.p=new jsts.geom.Coordinate(t)},jsts.triangulate.quadedge.Vertex.prototype.getX=function(){return this.p.x},jsts.triangulate.quadedge.Vertex.prototype.getY=function(){return this.p.y},jsts.triangulate.quadedge.Vertex.prototype.getZ=function(){return this.p.z},jsts.triangulate.quadedge.Vertex.prototype.setZ=function(t){this.p.z=t},jsts.triangulate.quadedge.Vertex.prototype.getCoordinate=function(){return this.p},jsts.triangulate.quadedge.Vertex.prototype.toString=function(){return\"POINT (\"+this.p.x+\" \"+this.p.y+\")\"},jsts.triangulate.quadedge.Vertex.prototype.equals=function(){return 1===arguments.length?this.equalsExact(arguments[0]):this.equalsWithTolerance(arguments[0],arguments[1])},jsts.triangulate.quadedge.Vertex.prototype.equalsExact=function(t){return this.p.x===t.getX()&&this.p.y===t.getY()},jsts.triangulate.quadedge.Vertex.prototype.equalsWithTolerance=function(t,e){return this.p.distance(t.getCoordinate())<e},jsts.triangulate.quadedge.Vertex.prototype.classify=function(t,e){var o,n,r,i;return o=this,n=e.sub(t),r=o.sub(t),i=n.crossProduct(r),i>0?jsts.triangulate.quadedge.Vertex.LEFT:0>i?jsts.triangulate.quadedge.Vertex.RIGHT:n.getX()*r.getX()<0||n.getY()*r.getY()<0?jsts.triangulate.quadedge.Vertex.BEHIND:n.magn()<r.magn()?jsts.triangulate.quadedge.Vertex.BEYOND:t.equals(o)?jsts.triangulate.quadedge.Vertex.ORIGIN:e.equals(o)?jsts.triangulate.quadedge.Vertex.DESTINATION:jsts.triangulate.quadedge.Vertex.BETWEEN},jsts.triangulate.quadedge.Vertex.prototype.crossProduct=function(t){return this.p.x*t.getY()-this.p.y*t.getX()},jsts.triangulate.quadedge.Vertex.prototype.dot=function(t){return this.p.x*t.getX()+this.p.y*t.getY()},jsts.triangulate.quadedge.Vertex.prototype.times=function(t){return new jsts.triangulate.quadedge.Vertex(t*this.p.x,t*this.p.y)},jsts.triangulate.quadedge.Vertex.prototype.sum=function(t){return new jsts.triangulate.quadedge.Vertex(this.p.x+t.getX(),this.p.y+t.getY())},jsts.triangulate.quadedge.Vertex.prototype.sub=function(t){return new jsts.triangulate.quadedge.Vertex(this.p.x-t.getX(),this.p.y-t.getY())},jsts.triangulate.quadedge.Vertex.prototype.magn=function(){return Math.sqrt(this.p.x*this.p.x+this.p.y*this.p.y)},jsts.triangulate.quadedge.Vertex.prototype.cross=function(){return new Vertex(this.p.y,-this.p.x)},jsts.triangulate.quadedge.Vertex.prototype.isInCircle=function(t,e,o){return jsts.triangulate.quadedge.TrianglePredicate.isInCircleRobust(t.p,e.p,o.p,this.p)},jsts.triangulate.quadedge.Vertex.prototype.isCCW=function(t,e){return(t.p.x-this.p.x)*(e.p.y-this.p.y)-(t.p.y-this.p.y)*(e.p.x-this.p.x)>0},jsts.triangulate.quadedge.Vertex.prototype.rightOf=function(t){return this.isCCW(t.dest(),t.orig())},jsts.triangulate.quadedge.Vertex.prototype.leftOf=function(t){return this.isCCW(t.orig(),t.dest())},jsts.triangulate.quadedge.Vertex.prototype.bisector=function(t,e){var o,n,r,i;return o=e.getX()-t.getX(),n=e.getY()-t.getY(),r=new jsts.algorithm.HCoordinate(t.getX()+o/2,t.getY()+n/2,1),i=new jsts.algorithm.HCoordinate(t.getX()-n+o/2,t.getY()+o+n/2,1),new jsts.algorithm.HCoordinate(r,i)},jsts.triangulate.quadedge.Vertex.prototype.distance=function(t,e){return t.p.distance(e.p)},jsts.triangulate.quadedge.Vertex.prototype.circumRadiusRatio=function(t,e){var o,n,r,i;return o=this.circleCenter(t,e),n=this.distance(o,t),r=this.distance(this,t),i=this.distance(t,e),r>i&&(r=i),i=this.distance(e,this),r>i&&(r=i),n/r},jsts.triangulate.quadedge.Vertex.prototype.midPoint=function(t){var e,o;return e=(this.p.x+t.getX())/2,o=(this.p.y+t.getY())/2,new jsts.triangulate.quadedge.Vertex(e,o)},jsts.triangulate.quadedge.Vertex.prototype.circleCenter=function(t,e){var o,n,r,i,s;o=new jsts.triangulate.quadedge.Vertex(this.getX(),this.getY()),n=this.bisector(o,t),r=this.bisector(t,e),i=new jsts.algorithm.HCoordinate(n,r),s=null;try{s=new jsts.triangulate.quadedge.Vertex(i.getX(),i.getY())}catch(a){}return s},jsts.operation.valid.IsValidOp=function(t){this.parentGeometry=t,this.isSelfTouchingRingFormingHoleValid=!1,this.validErr=null},jsts.operation.valid.IsValidOp.isValid=function(t){if(arguments[0]instanceof jsts.geom.Coordinate)return isNaN(t.x)?!1:isFinite(t.x)||isNaN(t.x)?isNaN(t.y)?!1:isFinite(t.y)||isNaN(t.y)?!0:!1:!1;var e=new jsts.operation.valid.IsValidOp(t);return e.isValid()},jsts.operation.valid.IsValidOp.findPtNotNode=function(t,e,o){for(var n=o.findEdge(e),r=n.getEdgeIntersectionList(),i=0;i<t.length;i++){var s=t[i];if(!r.isIntersection(s))return s}return null},jsts.operation.valid.IsValidOp.prototype.setSelfTouchingRingFormingHoleValid=function(t){this.isSelfTouchingRingFormingHoleValid=t},jsts.operation.valid.IsValidOp.prototype.isValid=function(){return this.checkValid(this.parentGeometry),null==this.validErr},jsts.operation.valid.IsValidOp.prototype.getValidationError=function(){return this.checkValid(this.parentGeometry),this.validErr},jsts.operation.valid.IsValidOp.prototype.checkValid=function(t){if(this.validErr=null,!t.isEmpty())if(t instanceof jsts.geom.Point)this.checkValidPoint(t);else if(t instanceof jsts.geom.MultiPoint)this.checkValidMultiPoint(t);else if(t instanceof jsts.geom.LinearRing)this.checkValidLinearRing(t);else if(t instanceof jsts.geom.LineString)this.checkValidLineString(t);else if(t instanceof jsts.geom.Polygon)this.checkValidPolygon(t);else if(t instanceof jsts.geom.MultiPolygon)this.checkValidMultiPolygon(t);else{if(!(t instanceof jsts.geom.GeometryCollection))throw t.constructor;this.checkValidGeometryCollection(t)}},jsts.operation.valid.IsValidOp.prototype.checkValidPoint=function(t){this.checkInvalidCoordinates(t.getCoordinates())},jsts.operation.valid.IsValidOp.prototype.checkValidMultiPoint=function(t){this.checkInvalidCoordinates(t.getCoordinates())},jsts.operation.valid.IsValidOp.prototype.checkValidLineString=function(t){if(this.checkInvalidCoordinates(t.getCoordinates()),null==this.validErr){var e=new jsts.geomgraph.GeometryGraph(0,t);this.checkTooFewPoints(e)}},jsts.operation.valid.IsValidOp.prototype.checkValidLinearRing=function(t){if(this.checkInvalidCoordinates(t.getCoordinates()),null==this.validErr&&(this.checkClosedRing(t),null==this.validErr)){var e=new jsts.geomgraph.GeometryGraph(0,t);if(this.checkTooFewPoints(e),null==this.validErr){var o=new jsts.algorithm.RobustLineIntersector;e.computeSelfNodes(o,!0),this.checkNoSelfIntersectingRings(e)}}},jsts.operation.valid.IsValidOp.prototype.checkValidPolygon=function(t){if(this.checkInvalidCoordinates(t),null==this.validErr&&(this.checkClosedRings(t),null==this.validErr)){var e=new jsts.geomgraph.GeometryGraph(0,t);this.checkTooFewPoints(e),null==this.validErr&&(this.checkConsistentArea(e),null==this.validErr&&(this.isSelfTouchingRingFormingHoleValid||(this.checkNoSelfIntersectingRings(e),null==this.validErr))&&(this.checkHolesInShell(t,e),null==this.validErr&&(this.checkHolesNotNested(t,e),null==this.validErr&&this.checkConnectedInteriors(e))))}},jsts.operation.valid.IsValidOp.prototype.checkValidMultiPolygon=function(t){for(var e=t.getNumGeometries(),o=0;e>o;o++){var n=t.getGeometryN(o);if(this.checkInvalidCoordinates(n),null!=this.validErr)return;if(this.checkClosedRings(n),null!=this.validErr)return}var r=new jsts.geomgraph.GeometryGraph(0,t);if(this.checkTooFewPoints(r),null==this.validErr&&(this.checkConsistentArea(r),null==this.validErr&&(this.isSelfTouchingRingFormingHoleValid||(this.checkNoSelfIntersectingRings(r),null==this.validErr)))){for(var o=0;o<t.getNumGeometries();o++){var n=t.getGeometryN(o);if(this.checkHolesInShell(n,r),null!=this.validErr)return}for(var o=0;o<t.getNumGeometries();o++){var n=t.getGeometryN(o);if(this.checkHolesNotNested(n,r),null!=this.validErr)return}this.checkShellsNotNested(t,r),null==this.validErr&&this.checkConnectedInteriors(r)}},jsts.operation.valid.IsValidOp.prototype.checkValidGeometryCollection=function(t){for(var e=0;e<t.getNumGeometries();e++){var o=t.getGeometryN(e);if(this.checkValid(o),null!=this.validErr)return}},jsts.operation.valid.IsValidOp.prototype.checkInvalidCoordinates=function(t){if(t instanceof jsts.geom.Polygon){var e=t;if(this.checkInvalidCoordinates(e.getExteriorRing().getCoordinates()),null!=this.validErr)return;for(var o=0;o<e.getNumInteriorRing();o++)if(this.checkInvalidCoordinates(e.getInteriorRingN(o).getCoordinates()),null!=this.validErr)return}else for(var n=t,o=0;o<n.length;o++)if(!jsts.operation.valid.IsValidOp.isValid(n[o]))return void(this.validErr=new jsts.operation.valid.TopologyValidationError(jsts.operation.valid.TopologyValidationError.INVALID_COORDINATE,n[o]))},jsts.operation.valid.IsValidOp.prototype.checkClosedRings=function(t){if(this.checkClosedRing(t.getExteriorRing()),null==this.validErr)for(var e=0;e<t.getNumInteriorRing();e++)if(this.checkClosedRing(t.getInteriorRingN(e)),null!=this.validErr)return},jsts.operation.valid.IsValidOp.prototype.checkClosedRing=function(t){\nif(!t.isClosed()){var e=null;t.getNumPoints()>=1&&(e=t.getCoordinateN(0)),this.validErr=new jsts.operation.valid.TopologyValidationError(jsts.operation.valid.TopologyValidationError.RING_NOT_CLOSED,e)}},jsts.operation.valid.IsValidOp.prototype.checkTooFewPoints=function(t){return t.hasTooFewPoints?void(this.validErr=new jsts.operation.valid.TopologyValidationError(jsts.operation.valid.TopologyValidationError.TOO_FEW_POINTS,t.getInvalidPoint())):void 0},jsts.operation.valid.IsValidOp.prototype.checkConsistentArea=function(t){var e=new jsts.operation.valid.ConsistentAreaTester(t),o=e.isNodeConsistentArea();return o?void(e.hasDuplicateRings()&&(this.validErr=new jsts.operation.valid.TopologyValidationError(jsts.operation.valid.TopologyValidationError.DUPLICATE_RINGS,e.getInvalidPoint()))):void(this.validErr=new jsts.operation.valid.TopologyValidationError(jsts.operation.valid.TopologyValidationError.SELF_INTERSECTION,e.getInvalidPoint()))},jsts.operation.valid.IsValidOp.prototype.checkNoSelfIntersectingRings=function(t){for(var e=t.getEdgeIterator();e.hasNext();){var o=e.next();if(this.checkNoSelfIntersectingRing(o.getEdgeIntersectionList()),null!=this.validErr)return}},jsts.operation.valid.IsValidOp.prototype.checkNoSelfIntersectingRing=function(t){for(var e=[],o=!0,n=t.iterator();n.hasNext();){var r=n.next();if(o)o=!1;else{if(e.indexOf(r.coord)>=0)return void(this.validErr=new jsts.operation.valid.TopologyValidationError(jsts.operation.valid.TopologyValidationError.RING_SELF_INTERSECTION,r.coord));e.push(r.coord)}}},jsts.operation.valid.IsValidOp.prototype.checkHolesInShell=function(t,e){for(var o=t.getExteriorRing(),n=new jsts.algorithm.MCPointInRing(o),r=0;r<t.getNumInteriorRing();r++){var i=t.getInteriorRingN(r),s=jsts.operation.valid.IsValidOp.findPtNotNode(i.getCoordinates(),o,e);if(null==s)return;var a=!n.isInside(s);if(a)return void(this.validErr=new jsts.operation.valid.TopologyValidationError(jsts.operation.valid.TopologyValidationError.HOLE_OUTSIDE_SHELL,s))}},jsts.operation.valid.IsValidOp.prototype.checkHolesNotNested=function(t,e){for(var o=new jsts.operation.valid.IndexedNestedRingTester(e),n=0;n<t.getNumInteriorRing();n++){var r=t.getInteriorRingN(n);o.add(r)}var i=o.isNonNested();i||(this.validErr=new jsts.operation.valid.TopologyValidationError(jsts.operation.valid.TopologyValidationError.NESTED_HOLES,o.getNestedPoint()))},jsts.operation.valid.IsValidOp.prototype.checkShellsNotNested=function(t,e){for(var o=0;o<t.getNumGeometries();o++)for(var n=t.getGeometryN(o),r=n.getExteriorRing(),i=0;i<t.getNumGeometries();i++)if(o!=i){var s=t.getGeometryN(i);if(this.checkShellNotNested(r,s,e),null!=this.validErr)return}},jsts.operation.valid.IsValidOp.prototype.checkShellNotNested=function(t,e,o){var n=t.getCoordinates(),r=e.getExteriorRing(),i=r.getCoordinates(),s=jsts.operation.valid.IsValidOp.findPtNotNode(n,r,o);if(null!=s){var a=jsts.algorithm.CGAlgorithms.isPointInRing(s,i);if(a){if(e.getNumInteriorRing()<=0)return void(this.validErr=new jsts.operation.valid.TopologyValidationError(jsts.operation.valid.TopologyValidationError.NESTED_SHELLS,s));for(var p=null,u=0;u<e.getNumInteriorRing();u++){var l=e.getInteriorRingN(u);if(p=this.checkShellInsideHole(t,l,o),null==p)return}this.validErr=new jsts.operation.valid.TopologyValidationError(jsts.operation.valid.TopologyValidationError.NESTED_SHELLS,p)}}},jsts.operation.valid.IsValidOp.prototype.checkShellInsideHole=function(t,e,o){var n=t.getCoordinates(),r=e.getCoordinates(),i=jsts.operation.valid.IsValidOp.findPtNotNode(n,e,o);if(null!=i){var s=jsts.algorithm.CGAlgorithms.isPointInRing(i,r);if(!s)return i}var a=jsts.operation.valid.IsValidOp.findPtNotNode(r,t,o);if(null!=a){var p=jsts.algorithm.CGAlgorithms.isPointInRing(a,n);return p?a:null}return jsts.util.Assert.shouldNeverReachHere(\"points in shell and hole appear to be equal\"),null},jsts.operation.valid.IsValidOp.prototype.checkConnectedInteriors=function(t){var e=new jsts.operation.valid.ConnectedInteriorTester(t);e.isInteriorsConnected()||(this.validErr=new jsts.operation.valid.TopologyValidationError(jsts.operation.valid.TopologyValidationError.DISCONNECTED_INTERIOR,e.getCoordinate()))},jsts.algorithm.RobustDeterminant=function(){},jsts.algorithm.RobustDeterminant.signOfDet2x2=function(t,e,o,n){var r,i,s,a;if(a=0,r=1,0===t||0===n)return 0===e||0===o?0:e>0?o>0?-r:r:o>0?r:-r;if(0===e||0===o)return n>0?t>0?r:-r:t>0?-r:r;if(e>0?n>0?e>n&&(r=-r,i=t,t=o,o=i,i=e,e=n,n=i):-n>=e?(r=-r,o=-o,n=-n):(i=t,t=-o,o=i,i=e,e=-n,n=i):n>0?n>=-e?(r=-r,t=-t,e=-e):(i=-t,t=o,o=i,i=-e,e=n,n=i):e>=n?(t=-t,e=-e,o=-o,n=-n):(r=-r,i=-t,t=-o,o=i,i=-e,e=-n,n=i),t>0){if(!(o>0))return r;if(t>o)return r}else{if(o>0)return-r;if(!(t>=o))return-r;r=-r,t=-t,o=-o}for(;;){if(a+=1,s=Math.floor(o/t),o-=s*t,n-=s*e,0>n)return-r;if(n>e)return r;if(t>o+o){if(n+n>e)return r}else{if(e>n+n)return-r;o=t-o,n=e-n,r=-r}if(0===n)return 0===o?0:-r;if(0===o)return r;if(s=Math.floor(t/o),t-=s*o,e-=s*n,0>e)return r;if(e>n)return-r;if(o>t+t){if(e+e>n)return-r}else{if(n>e+e)return r;t=o-t,e=n-e,r=-r}if(0===e)return 0===t?0:r;if(0===t)return-r}},jsts.algorithm.RobustDeterminant.orientationIndex=function(t,e,o){var n=e.x-t.x,r=e.y-t.y,i=o.x-e.x,s=o.y-e.y;return jsts.algorithm.RobustDeterminant.signOfDet2x2(n,r,i,s)},jsts.index.quadtree.NodeBase=function(){this.subnode=new Array(4),this.subnode[0]=null,this.subnode[1]=null,this.subnode[2]=null,this.subnode[3]=null,this.items=[]},jsts.index.quadtree.NodeBase.prototype.getSubnodeIndex=function(t,e){var o=-1;return t.getMinX()>=e.x&&(t.getMinY()>=e.y&&(o=3),t.getMaxY()<=e.y&&(o=1)),t.getMaxX()<=e.x&&(t.getMinY()>=e.y&&(o=2),t.getMaxY()<=e.y&&(o=0)),o},jsts.index.quadtree.NodeBase.prototype.getItems=function(){return this.items},jsts.index.quadtree.NodeBase.prototype.hasItems=function(){return this.items.length>0},jsts.index.quadtree.NodeBase.prototype.add=function(t){this.items.push(t)},jsts.index.quadtree.NodeBase.prototype.remove=function(t,e){if(!this.isSearchMatch(t))return!1;var o=!1,n=0;for(n;4>n;n++)if(null!==this.subnode[n]&&(o=this.subnode[n].remove(t,e))){this.subnode[n].isPrunable()&&(this.subnode[n]=null);break}if(o)return o;if(-1!==this.items.indexOf(e)){for(var n=this.items.length-1;n>=0;n--)this.items[n]===e&&this.items.splice(n,1);o=!0}return o},jsts.index.quadtree.NodeBase.prototype.isPrunable=function(){return!(this.hasChildren()||this.hasItems())},jsts.index.quadtree.NodeBase.prototype.hasChildren=function(){var t=0;for(t;4>t;t++)if(null!==this.subnode[t])return!0;return!1},jsts.index.quadtree.NodeBase.prototype.isEmpty=function(){var t=!0;this.items.length>0&&(t=!1);var e=0;for(e;4>e;e++)null!==this.subnode[e]&&(this.subnode[e].isEmpty()||(t=!1));return t},jsts.index.quadtree.NodeBase.prototype.addAllItems=function(t){t=t.concat(this.items);var e=0;for(e;4>e;e++)null!==this.subnode[e]&&(t=this.subnode[e].addAllItems(t));return t},jsts.index.quadtree.NodeBase.prototype.addAllItemsFromOverlapping=function(t,e){if(this.isSearchMatch(t)){e=e.concat(this.items);var o=0;for(o;4>o;o++)null!==this.subnode[o]&&(e=this.subnode[o].addAllItemsFromOverlapping(t,e))}},jsts.index.quadtree.NodeBase.prototype.visit=function(t,e){if(this.isSearchMatch(t)){this.visitItems(t,e);var o=0;for(o;4>o;o++)null!==this.subnode[o]&&this.subnode[o].visit(t,e)}},jsts.index.quadtree.NodeBase.prototype.visitItems=function(t,e){var o=0,n=this.items.length;for(o;n>o;o++)e.visitItem(this.items[o])},jsts.index.quadtree.NodeBase.prototype.depth=function(){var t,e=0,o=0;for(o;4>o;o++)null!==this.subnode[o]&&(t=this.subnode[o].depth(),t>e&&(e=t));return e+1},jsts.index.quadtree.NodeBase.prototype.size=function(){var t=0,e=0;for(e;4>e;e++)null!==this.subnode[e]&&(t+=this.subnode[e].size());return t+this.items.length},jsts.index.quadtree.NodeBase.prototype.getNodeCount=function(){var t=0,e=0;for(e;4>e;e++)null!==this.subnode[e]&&(t+=this.subnode[e].size());return t+1},jsts.index.quadtree.Node=function(t,e){jsts.index.quadtree.NodeBase.prototype.constructor.apply(this,arguments),this.env=t,this.level=e,this.centre=new jsts.geom.Coordinate,this.centre.x=(t.getMinX()+t.getMaxX())/2,this.centre.y=(t.getMinY()+t.getMaxY())/2},jsts.index.quadtree.Node.prototype=new jsts.index.quadtree.NodeBase,jsts.index.quadtree.Node.createNode=function(t){var e,o;return e=new jsts.index.quadtree.Key(t),o=new jsts.index.quadtree.Node(e.getEnvelope(),e.getLevel())},jsts.index.quadtree.Node.createExpanded=function(t,e){var o,n=new jsts.geom.Envelope(e);return null!==t&&n.expandToInclude(t.env),o=jsts.index.quadtree.Node.createNode(n),null!==t&&o.insertNode(t),o},jsts.index.quadtree.Node.prototype.getEnvelope=function(){return this.env},jsts.index.quadtree.Node.prototype.isSearchMatch=function(t){return this.env.intersects(t)},jsts.index.quadtree.Node.prototype.getNode=function(t){var e,o=this.getSubnodeIndex(t,this.centre);return-1!==o?(e=this.getSubnode(o),e.getNode(t)):this},jsts.index.quadtree.Node.prototype.find=function(t){var e,o=this.getSubnodeIndex(t,this.centre);return-1===o?this:null!==this.subnode[o]?(e=this.subnode[o],e.find(t)):this},jsts.index.quadtree.Node.prototype.insertNode=function(t){var e,o=this.getSubnodeIndex(t.env,this.centre);t.level===this.level-1?this.subnode[o]=t:(e=this.createSubnode(o),e.insertNode(t),this.subnode[o]=e)},jsts.index.quadtree.Node.prototype.getSubnode=function(t){return null===this.subnode[t]&&(this.subnode[t]=this.createSubnode(t)),this.subnode[t]},jsts.index.quadtree.Node.prototype.createSubnode=function(t){var e,o,n=0,r=0,i=0,s=0;switch(t){case 0:n=this.env.getMinX(),r=this.centre.x,i=this.env.getMinY(),s=this.centre.y;break;case 1:n=this.centre.x,r=this.env.getMaxX(),i=this.env.getMinY(),s=this.centre.y;break;case 2:n=this.env.getMinX(),r=this.centre.x,i=this.centre.y,s=this.env.getMaxY();break;case 3:n=this.centre.x,r=this.env.getMaxX(),i=this.centre.y,s=this.env.getMaxY()}return e=new jsts.geom.Envelope(n,r,i,s),o=new jsts.index.quadtree.Node(e,this.level-1)},function(){jsts.triangulate.quadedge.QuadEdge=function(){this.rot=null,this.vertex=null,this.next=null,this.data=null};var t=jsts.triangulate.quadedge.QuadEdge;jsts.triangulate.quadedge.QuadEdge.makeEdge=function(e,o){var n,r,i,s,a;return n=new t,r=new t,i=new t,s=new t,n.rot=r,r.rot=i,i.rot=s,s.rot=n,n.setNext(n),r.setNext(s),i.setNext(i),s.setNext(r),a=n,a.setOrig(e),a.setDest(o),a},jsts.triangulate.quadedge.QuadEdge.connect=function(e,o){var n=t.makeEdge(e.dest(),o.orig());return t.splice(n,e.lNext()),t.splice(n.sym(),o),n},jsts.triangulate.quadedge.QuadEdge.splice=function(t,e){var o,n,r,i,s,a;o=t.oNext().rot,n=e.oNext().rot,r=e.oNext(),i=t.oNext(),s=n.oNext(),a=o.oNext(),t.setNext(r),e.setNext(i),o.setNext(s),n.setNext(a)},jsts.triangulate.quadedge.QuadEdge.swap=function(e){var o,n;o=e.oPrev(),n=e.sym().oPrev(),t.splice(e,o),t.splice(e.sym(),n),t.splice(e,o.lNext()),t.splice(e.sym(),n.lNext()),e.setOrig(o.dest()),e.setDest(n.dest())},jsts.triangulate.quadedge.QuadEdge.prototype.getPrimary=function(){return this.orig().getCoordinate().compareTo(this.dest().getCoordinate())<=0?this:this.sym()},jsts.triangulate.quadedge.QuadEdge.prototype.setData=function(t){this.data=t},jsts.triangulate.quadedge.QuadEdge.prototype.getData=function(){return this.data},jsts.triangulate.quadedge.QuadEdge.prototype.delete_jsts=function(){this.rot=null},jsts.triangulate.quadedge.QuadEdge.prototype.isLive=function(){return null!==this.rot},jsts.triangulate.quadedge.QuadEdge.prototype.setNext=function(t){this.next=t},jsts.triangulate.quadedge.QuadEdge.prototype.invRot=function(){return this.rot.sym()},jsts.triangulate.quadedge.QuadEdge.prototype.sym=function(){return this.rot.rot},jsts.triangulate.quadedge.QuadEdge.prototype.oNext=function(){return this.next},jsts.triangulate.quadedge.QuadEdge.prototype.oPrev=function(){return this.rot.next.rot},jsts.triangulate.quadedge.QuadEdge.prototype.dNext=function(){return this.sym().oNext().sym()},jsts.triangulate.quadedge.QuadEdge.prototype.dPrev=function(){return this.invRot().oNext().invRot()},jsts.triangulate.quadedge.QuadEdge.prototype.lNext=function(){return this.invRot().oNext().rot},jsts.triangulate.quadedge.QuadEdge.prototype.lPrev=function(){return this.next.sym()},jsts.triangulate.quadedge.QuadEdge.prototype.rNext=function(){return this.rot.next.invRot()},jsts.triangulate.quadedge.QuadEdge.prototype.rPrev=function(){return this.sym().oNext()},jsts.triangulate.quadedge.QuadEdge.prototype.setOrig=function(t){this.vertex=t},jsts.triangulate.quadedge.QuadEdge.prototype.setDest=function(t){this.sym().setOrig(t)},jsts.triangulate.quadedge.QuadEdge.prototype.orig=function(){return this.vertex},jsts.triangulate.quadedge.QuadEdge.prototype.dest=function(){return this.sym().orig()},jsts.triangulate.quadedge.QuadEdge.prototype.getLength=function(){return this.orig().getCoordinate().distance(dest().getCoordinate())},jsts.triangulate.quadedge.QuadEdge.prototype.equalsNonOriented=function(t){return this.equalsOriented(t)?!0:this.equalsOriented(t.sym())?!0:!1},jsts.triangulate.quadedge.QuadEdge.prototype.equalsOriented=function(t){return this.orig().getCoordinate().equals2D(t.orig().getCoordinate())&&this.dest().getCoordinate().equals2D(t.dest().getCoordinate())?!0:!1},jsts.triangulate.quadedge.QuadEdge.prototype.toLineSegment=function(){return new jsts.geom.LineSegment(this.vertex.getCoordinate(),this.dest().getCoordinate())},jsts.triangulate.quadedge.QuadEdge.prototype.toString=function(){var t,e;return t=this.vertex.getCoordinate(),e=this.dest().getCoordinate(),jsts.io.WKTWriter.toLineString(t,e)}}(),function(){var t=jsts.util.Assert;jsts.geomgraph.EdgeEnd=function(t,e,o,n){this.edge=t,e&&o&&this.init(e,o),n&&(this.label=n||null)},jsts.geomgraph.EdgeEnd.prototype.edge=null,jsts.geomgraph.EdgeEnd.prototype.label=null,jsts.geomgraph.EdgeEnd.prototype.node=null,jsts.geomgraph.EdgeEnd.prototype.p0=null,jsts.geomgraph.EdgeEnd.prototype.p1=null,jsts.geomgraph.EdgeEnd.prototype.dx=null,jsts.geomgraph.EdgeEnd.prototype.dy=null,jsts.geomgraph.EdgeEnd.prototype.quadrant=null,jsts.geomgraph.EdgeEnd.prototype.init=function(e,o){this.p0=e,this.p1=o,this.dx=o.x-e.x,this.dy=o.y-e.y,this.quadrant=jsts.geomgraph.Quadrant.quadrant(this.dx,this.dy),t.isTrue(!(0===this.dx&&0===this.dy),\"EdgeEnd with identical endpoints found\")},jsts.geomgraph.EdgeEnd.prototype.getEdge=function(){return this.edge},jsts.geomgraph.EdgeEnd.prototype.getLabel=function(){return this.label},jsts.geomgraph.EdgeEnd.prototype.getCoordinate=function(){return this.p0},jsts.geomgraph.EdgeEnd.prototype.getDirectedCoordinate=function(){return this.p1},jsts.geomgraph.EdgeEnd.prototype.getQuadrant=function(){return this.quadrant},jsts.geomgraph.EdgeEnd.prototype.getDx=function(){return this.dx},jsts.geomgraph.EdgeEnd.prototype.getDy=function(){return this.dy},jsts.geomgraph.EdgeEnd.prototype.setNode=function(t){this.node=t},jsts.geomgraph.EdgeEnd.prototype.getNode=function(){return this.node},jsts.geomgraph.EdgeEnd.prototype.compareTo=function(t){return this.compareDirection(t)},jsts.geomgraph.EdgeEnd.prototype.compareDirection=function(t){return this.dx===t.dx&&this.dy===t.dy?0:this.quadrant>t.quadrant?1:this.quadrant<t.quadrant?-1:jsts.algorithm.CGAlgorithms.computeOrientation(t.p0,t.p1,this.p1)},jsts.geomgraph.EdgeEnd.prototype.computeLabel=function(t){}}(),jsts.operation.buffer.RightmostEdgeFinder=function(){},jsts.operation.buffer.RightmostEdgeFinder.prototype.minIndex=-1,jsts.operation.buffer.RightmostEdgeFinder.prototype.minCoord=null,jsts.operation.buffer.RightmostEdgeFinder.prototype.minDe=null,jsts.operation.buffer.RightmostEdgeFinder.prototype.orientedDe=null,jsts.operation.buffer.RightmostEdgeFinder.prototype.getEdge=function(){return this.orientedDe},jsts.operation.buffer.RightmostEdgeFinder.prototype.getCoordinate=function(){return this.minCoord},jsts.operation.buffer.RightmostEdgeFinder.prototype.findEdge=function(t){for(var e=t.iterator();e.hasNext();){var o=e.next();o.isForward()&&this.checkForRightmostCoordinate(o)}jsts.util.Assert.isTrue(0!==this.minIndex||this.minCoord.equals(this.minDe.getCoordinate()),\"inconsistency in rightmost processing\"),0===this.minIndex?this.findRightmostEdgeAtNode():this.findRightmostEdgeAtVertex(),this.orientedDe=this.minDe;var n=this.getRightmostSide(this.minDe,this.minIndex);n==jsts.geomgraph.Position.LEFT&&(this.orientedDe=this.minDe.getSym())},jsts.operation.buffer.RightmostEdgeFinder.prototype.findRightmostEdgeAtNode=function(){var t=this.minDe.getNode(),e=t.getEdges();this.minDe=e.getRightmostEdge(),this.minDe.isForward()||(this.minDe=this.minDe.getSym(),this.minIndex=this.minDe.getEdge().getCoordinates().length-1)},jsts.operation.buffer.RightmostEdgeFinder.prototype.findRightmostEdgeAtVertex=function(){var t=this.minDe.getEdge().getCoordinates();jsts.util.Assert.isTrue(this.minIndex>0&&this.minIndex<t.length,\"rightmost point expected to be interior vertex of edge\");var e=t[this.minIndex-1],o=t[this.minIndex+1],n=jsts.algorithm.CGAlgorithms.computeOrientation(this.minCoord,o,e),r=!1;e.y<this.minCoord.y&&o.y<this.minCoord.y&&n===jsts.algorithm.CGAlgorithms.COUNTERCLOCKWISE?r=!0:e.y>this.minCoord.y&&o.y>this.minCoord.y&&n===jsts.algorithm.CGAlgorithms.CLOCKWISE&&(r=!0),r&&(this.minIndex=this.minIndex-1)},jsts.operation.buffer.RightmostEdgeFinder.prototype.checkForRightmostCoordinate=function(t){for(var e=t.getEdge().getCoordinates(),o=0;o<e.length-1;o++)(null===this.minCoord||e[o].x>this.minCoord.x)&&(this.minDe=t,this.minIndex=o,this.minCoord=e[o])},jsts.operation.buffer.RightmostEdgeFinder.prototype.getRightmostSide=function(t,e){var o=this.getRightmostSideOfSegment(t,e);return 0>o&&(o=this.getRightmostSideOfSegment(t,e-1)),0>o&&(this.minCoord=null,this.checkForRightmostCoordinate(t)),o},jsts.operation.buffer.RightmostEdgeFinder.prototype.getRightmostSideOfSegment=function(t,e){var o=t.getEdge(),n=o.getCoordinates();if(0>e||e+1>=n.length)return-1;if(n[e].y==n[e+1].y)return-1;var r=jsts.geomgraph.Position.LEFT;return n[e].y<n[e+1].y&&(r=jsts.geomgraph.Position.RIGHT),r},function(){jsts.triangulate.IncrementalDelaunayTriangulator=function(t){this.subdiv=t,this.isUsingTolerance=t.getTolerance()>0},jsts.triangulate.IncrementalDelaunayTriangulator.prototype.insertSites=function(t){var e,o=0,n=t.length;for(o;n>o;o++)e=t[o],this.insertSite(e)},jsts.triangulate.IncrementalDelaunayTriangulator.prototype.insertSite=function(t){var e,o,n,r;if(e=this.subdiv.locate(t),this.subdiv.isVertexOfEdge(e,t))return e;this.subdiv.isOnEdge(e,t.getCoordinate())&&(e=e.oPrev(),this.subdiv.delete_jsts(e.oNext())),o=this.subdiv.makeEdge(e.orig(),t),jsts.triangulate.quadedge.QuadEdge.splice(o,e),n=o;do o=this.subdiv.connect(e,o.sym()),e=o.oPrev();while(e.lNext()!=n);for(;;)if(r=e.oPrev(),r.dest().rightOf(e)&&t.isInCircle(e.orig(),r.dest(),e.dest()))jsts.triangulate.quadedge.QuadEdge.swap(e),e=e.oPrev();else{if(e.oNext()==n)return o;e=e.oNext().lPrev()}}}(),jsts.algorithm.CentroidArea=function(){this.basePt=null,this.triangleCent3=new jsts.geom.Coordinate,this.centSum=new jsts.geom.Coordinate,this.cg3=new jsts.geom.Coordinate},jsts.algorithm.CentroidArea.prototype.basePt=null,jsts.algorithm.CentroidArea.prototype.triangleCent3=null,jsts.algorithm.CentroidArea.prototype.areasum2=0,jsts.algorithm.CentroidArea.prototype.cg3=null,jsts.algorithm.CentroidArea.prototype.centSum=null,jsts.algorithm.CentroidArea.prototype.totalLength=0,jsts.algorithm.CentroidArea.prototype.add=function(t){if(t instanceof jsts.geom.Polygon){var e=t;this.setBasePoint(e.getExteriorRing().getCoordinateN(0)),this.add3(e)}else if(t instanceof jsts.geom.GeometryCollection||t instanceof jsts.geom.MultiPolygon)for(var o=t,n=0;n<o.getNumGeometries();n++)this.add(o.getGeometryN(n));else t instanceof Array&&this.add2(t)},jsts.algorithm.CentroidArea.prototype.add2=function(t){this.setBasePoint(t[0]),this.addShell(t)},jsts.algorithm.CentroidArea.prototype.getCentroid=function(){var t=new jsts.geom.Coordinate;return Math.abs(this.areasum2)>0?(t.x=this.cg3.x/3/this.areasum2,t.y=this.cg3.y/3/this.areasum2):(t.x=this.centSum.x/this.totalLength,t.y=this.centSum.y/this.totalLength),t},jsts.algorithm.CentroidArea.prototype.setBasePoint=function(t){null==this.basePt&&(this.basePt=t)},jsts.algorithm.CentroidArea.prototype.add3=function(t){this.addShell(t.getExteriorRing().getCoordinates());for(var e=0;e<t.getNumInteriorRing();e++)this.addHole(t.getInteriorRingN(e).getCoordinates())},jsts.algorithm.CentroidArea.prototype.addShell=function(t){for(var e=!jsts.algorithm.CGAlgorithms.isCCW(t),o=0;o<t.length-1;o++)this.addTriangle(this.basePt,t[o],t[o+1],e);this.addLinearSegments(t)},jsts.algorithm.CentroidArea.prototype.addHole=function(t){for(var e=jsts.algorithm.CGAlgorithms.isCCW(t),o=0;o<t.length-1;o++)this.addTriangle(this.basePt,t[o],t[o+1],e);this.addLinearSegments(t)},jsts.algorithm.CentroidArea.prototype.addTriangle=function(t,e,o,n){var r=n?1:-1;jsts.algorithm.CentroidArea.centroid3(t,e,o,this.triangleCent3);var i=jsts.algorithm.CentroidArea.area2(t,e,o);this.cg3.x+=r*i*this.triangleCent3.x,this.cg3.y+=r*i*this.triangleCent3.y,this.areasum2+=r*i},jsts.algorithm.CentroidArea.centroid3=function(t,e,o,n){n.x=t.x+e.x+o.x,n.y=t.y+e.y+o.y},jsts.algorithm.CentroidArea.area2=function(t,e,o){return(e.x-t.x)*(o.y-t.y)-(o.x-t.x)*(e.y-t.y)},jsts.algorithm.CentroidArea.prototype.addLinearSegments=function(t){for(var e=0;e<t.length-1;e++){var o=t[e].distance(t[e+1]);this.totalLength+=o;var n=(t[e].x+t[e+1].x)/2;this.centSum.x+=o*n;var r=(t[e].y+t[e+1].y)/2;this.centSum.y+=o*r}},jsts.geomgraph.index.SweepLineSegment=function(t,e){this.edge=t,this.ptIndex=e,this.pts=t.getCoordinates()},jsts.geomgraph.index.SweepLineSegment.prototype.edge=null,jsts.geomgraph.index.SweepLineSegment.prototype.pts=null,jsts.geomgraph.index.SweepLineSegment.prototype.ptIndex=null,jsts.geomgraph.index.SweepLineSegment.prototype.getMinX=function(){var t=this.pts[this.ptIndex].x,e=this.pts[this.ptIndex+1].x;return e>t?t:e},jsts.geomgraph.index.SweepLineSegment.prototype.getMaxX=function(){var t=this.pts[this.ptIndex].x,e=this.pts[this.ptIndex+1].x;return t>e?t:e},jsts.geomgraph.index.SweepLineSegment.prototype.computeIntersections=function(t,e){e.addIntersections(this.edge,this.ptIndex,t.edge,t.ptIndex)},jsts.index.quadtree.Root=function(){jsts.index.quadtree.NodeBase.prototype.constructor.apply(this,arguments),this.origin=new jsts.geom.Coordinate(0,0)},jsts.index.quadtree.Root.prototype=new jsts.index.quadtree.NodeBase,jsts.index.quadtree.Root.prototype.insert=function(t,e){var o=this.getSubnodeIndex(t,this.origin);if(-1===o)return void this.add(e);var n=this.subnode[o];if(null===n||!n.getEnvelope().contains(t)){var r=jsts.index.quadtree.Node.createExpanded(n,t);this.subnode[o]=r}this.insertContained(this.subnode[o],t,e)},jsts.index.quadtree.Root.prototype.insertContained=function(t,e,o){var n,r,i;n=jsts.index.IntervalSize.isZeroWidth(e.getMinX(),e.getMaxX()),r=jsts.index.IntervalSize.isZeroWidth(e.getMinY(),e.getMaxY()),i=n||r?t.find(e):t.getNode(e),i.add(o)},jsts.index.quadtree.Root.prototype.isSearchMatch=function(t){return!0},jsts.geomgraph.index.MonotoneChainIndexer=function(){},jsts.geomgraph.index.MonotoneChainIndexer.toIntArray=function(t){for(var e=[],o=t.iterator();o.hasNext();){var n=o.next();e.push(n)}return e},jsts.geomgraph.index.MonotoneChainIndexer.prototype.getChainStartIndices=function(t){var e=0,o=new javascript.util.ArrayList;o.add(e);do{var n=this.findChainEnd(t,e);o.add(n),e=n}while(e<t.length-1);var r=jsts.geomgraph.index.MonotoneChainIndexer.toIntArray(o);return r},jsts.geomgraph.index.MonotoneChainIndexer.prototype.findChainEnd=function(t,e){for(var o=jsts.geomgraph.Quadrant.quadrant(t[e],t[e+1]),n=e+1;n<t.length;){var r=jsts.geomgraph.Quadrant.quadrant(t[n-1],t[n]);if(r!=o)break;n++}return n-1},jsts.noding.IntersectionAdder=function(t){this.li=t},jsts.noding.IntersectionAdder.prototype=new jsts.noding.SegmentIntersector,jsts.noding.IntersectionAdder.constructor=jsts.noding.IntersectionAdder,jsts.noding.IntersectionAdder.isAdjacentSegments=function(t,e){return 1===Math.abs(t-e)},jsts.noding.IntersectionAdder.prototype._hasIntersection=!1,jsts.noding.IntersectionAdder.prototype.hasProper=!1,jsts.noding.IntersectionAdder.prototype.hasProperInterior=!1,jsts.noding.IntersectionAdder.prototype.hasInterior=!1,jsts.noding.IntersectionAdder.prototype.properIntersectionPoint=null,jsts.noding.IntersectionAdder.prototype.li=null,jsts.noding.IntersectionAdder.prototype.isSelfIntersection=null,jsts.noding.IntersectionAdder.prototype.numIntersections=0,jsts.noding.IntersectionAdder.prototype.numInteriorIntersections=0,jsts.noding.IntersectionAdder.prototype.numProperIntersections=0,jsts.noding.IntersectionAdder.prototype.numTests=0,jsts.noding.IntersectionAdder.prototype.getLineIntersector=function(){return this.li},jsts.noding.IntersectionAdder.prototype.getProperIntersectionPoint=function(){return this.properIntersectionPoint},jsts.noding.IntersectionAdder.prototype.hasIntersection=function(){return this._hasIntersection},jsts.noding.IntersectionAdder.prototype.hasProperIntersection=function(){return this.hasProper},jsts.noding.IntersectionAdder.prototype.hasProperInteriorIntersection=function(){return this.hasProperInterior},jsts.noding.IntersectionAdder.prototype.hasInteriorIntersection=function(){return this.hasInterior},jsts.noding.IntersectionAdder.prototype.isTrivialIntersection=function(t,e,o,n){if(t==o&&1==this.li.getIntersectionNum()){if(jsts.noding.IntersectionAdder.isAdjacentSegments(e,n))return!0;if(t.isClosed()){var r=t.size()-1;if(0===e&&n===r||0===n&&e===r)return!0}}return!1},jsts.noding.IntersectionAdder.prototype.processIntersections=function(t,e,o,n){if(t!==o||e!==n){this.numTests++;var r=t.getCoordinates()[e],i=t.getCoordinates()[e+1],s=o.getCoordinates()[n],a=o.getCoordinates()[n+1];this.li.computeIntersection(r,i,s,a),this.li.hasIntersection()&&(this.numIntersections++,this.li.isInteriorIntersection()&&(this.numInteriorIntersections++,this.hasInterior=!0),this.isTrivialIntersection(t,e,o,n)||(this._hasIntersection=!0,t.addIntersections(this.li,e,0),o.addIntersections(this.li,n,1),this.li.isProper()&&(this.numProperIntersections++,this.hasProper=!0,this.hasProperInterior=!0)))}},jsts.noding.IntersectionAdder.prototype.isDone=function(){return!1},jsts.operation.union.CascadedPolygonUnion=function(t){this.inputPolys=t},jsts.operation.union.CascadedPolygonUnion.union=function(t){var e=new jsts.operation.union.CascadedPolygonUnion(t);return e.union()},jsts.operation.union.CascadedPolygonUnion.prototype.inputPolys,jsts.operation.union.CascadedPolygonUnion.prototype.geomFactory=null,jsts.operation.union.CascadedPolygonUnion.prototype.STRTREE_NODE_CAPACITY=4,jsts.operation.union.CascadedPolygonUnion.prototype.union=function(){if(0===this.inputPolys.length)return null;this.geomFactory=this.inputPolys[0].getFactory();for(var t=new jsts.index.strtree.STRtree(this.STRTREE_NODE_CAPACITY),e=0,o=this.inputPolys.length;o>e;e++){var n=this.inputPolys[e];t.insert(n.getEnvelopeInternal(),n)}var r=t.itemsTree(),i=this.unionTree(r);return i},jsts.operation.union.CascadedPolygonUnion.prototype.unionTree=function(t){var e=this.reduceToGeometries(t),o=this.binaryUnion(e);return o},jsts.operation.union.CascadedPolygonUnion.prototype.binaryUnion=function(t,e,o){if(e=e||0,o=o||t.length,1>=o-e){var n=this.getGeometry(t,e);return this.unionSafe(n,null)}if(o-e===2)return this.unionSafe(this.getGeometry(t,e),this.getGeometry(t,e+1));var r=parseInt((o+e)/2),n=this.binaryUnion(t,e,r),i=this.binaryUnion(t,r,o);return this.unionSafe(n,i)},jsts.operation.union.CascadedPolygonUnion.prototype.getGeometry=function(t,e){return e>=t.length?null:t[e]},jsts.operation.union.CascadedPolygonUnion.prototype.reduceToGeometries=function(t){for(var e=[],o=0,n=t.length;n>o;o++){var r=t[o],i=null;r instanceof Array?i=this.unionTree(r):r instanceof jsts.geom.Geometry&&(i=r),e.push(i)}return e},jsts.operation.union.CascadedPolygonUnion.prototype.unionSafe=function(t,e){return null===t&&null===e?null:null===t?e.clone():null===e?t.clone():this.unionOptimized(t,e)},jsts.operation.union.CascadedPolygonUnion.prototype.unionOptimized=function(t,e){var o=t.getEnvelopeInternal(),n=e.getEnvelopeInternal();if(!o.intersects(n)){var r=jsts.geom.util.GeometryCombiner.combine(t,e);return r}if(t.getNumGeometries<=1&&e.getNumGeometries<=1)return this.unionActual(t,e);var i=o.intersection(n);return this.unionUsingEnvelopeIntersection(t,e,i)},jsts.operation.union.CascadedPolygonUnion.prototype.unionUsingEnvelopeIntersection=function(t,e,o){var n=new javascript.util.ArrayList,r=this.extractByEnvelope(o,t,n),i=this.extractByEnvelope(o,e,n),s=this.unionActual(r,i);n.add(s);var a=jsts.geom.util.GeometryCombiner.combine(n);return a},jsts.operation.union.CascadedPolygonUnion.prototype.extractByEnvelope=function(t,e,o){for(var n=new javascript.util.ArrayList,r=0;r<e.getNumGeometries();r++){var i=e.getGeometryN(r);i.getEnvelopeInternal().intersects(t)?n.add(i):o.add(i)}return this.geomFactory.buildGeometry(n)},jsts.operation.union.CascadedPolygonUnion.prototype.unionActual=function(t,e){return t.union(e)},function(){jsts.geom.MultiPoint=function(t,e){this.geometries=t||[],this.factory=e},jsts.geom.MultiPoint.prototype=new jsts.geom.GeometryCollection,jsts.geom.MultiPoint.constructor=jsts.geom.MultiPoint,jsts.geom.MultiPoint.prototype.getBoundary=function(){return this.getFactory().createGeometryCollection(null)},jsts.geom.MultiPoint.prototype.getGeometryN=function(t){return this.geometries[t]},jsts.geom.MultiPoint.prototype.equalsExact=function(t,e){return this.isEquivalentClass(t)?jsts.geom.GeometryCollection.prototype.equalsExact.call(this,t,e):!1},jsts.geom.MultiPoint.prototype.CLASS_NAME=\"jsts.geom.MultiPoint\"}(),jsts.operation.buffer.OffsetCurveBuilder=function(t,e){this.precisionModel=t,this.bufParams=e},jsts.operation.buffer.OffsetCurveBuilder.prototype.distance=0,jsts.operation.buffer.OffsetCurveBuilder.prototype.precisionModel=null,jsts.operation.buffer.OffsetCurveBuilder.prototype.bufParams=null,jsts.operation.buffer.OffsetCurveBuilder.prototype.getBufferParameters=function(){return this.bufParams},jsts.operation.buffer.OffsetCurveBuilder.prototype.getLineCurve=function(t,e){if(this.distance=e,this.distance<0&&!this.bufParams.isSingleSided())return null;if(0==this.distance)return null;var o=Math.abs(this.distance),n=this.getSegGen(o);if(t.length<=1)this.computePointCurve(t[0],n);else if(this.bufParams.isSingleSided()){var r=0>e;this.computeSingleSidedBufferCurve(t,r,n)}else this.computeLineBufferCurve(t,n);var i=n.getCoordinates();return i},jsts.operation.buffer.OffsetCurveBuilder.prototype.getRingCurve=function(t,e,o){if(this.distance=o,t.length<=2)return this.getLineCurve(t,o);if(0==this.distance)return jsts.operation.buffer.OffsetCurveBuilder.copyCoordinates(t);var n=this.getSegGen(this.distance);return this.computeRingBufferCurve(t,e,n),n.getCoordinates()},jsts.operation.buffer.OffsetCurveBuilder.prototype.getOffsetCurve=function(t,e){if(this.distance=e,0===this.distance)return null;var o=this.distance<0,n=Math.abs(this.distance),r=this.getSegGen(n);t.length<=1?this.computePointCurve(t[0],r):this.computeOffsetCurve(t,o,r);var i=r.getCoordinates();return o&&i.reverse(),i},jsts.operation.buffer.OffsetCurveBuilder.copyCoordinates=function(t){for(var e=[],o=0;o<t.length;o++)e.push(t[o].clone());return e},jsts.operation.buffer.OffsetCurveBuilder.prototype.getSegGen=function(t){return new jsts.operation.buffer.OffsetSegmentGenerator(this.precisionModel,this.bufParams,t)},jsts.operation.buffer.OffsetCurveBuilder.SIMPLIFY_FACTOR=100,jsts.operation.buffer.OffsetCurveBuilder.simplifyTolerance=function(t){return t/jsts.operation.buffer.OffsetCurveBuilder.SIMPLIFY_FACTOR},jsts.operation.buffer.OffsetCurveBuilder.prototype.computePointCurve=function(t,e){switch(this.bufParams.getEndCapStyle()){case jsts.operation.buffer.BufferParameters.CAP_ROUND:e.createCircle(t);break;case jsts.operation.buffer.BufferParameters.CAP_SQUARE:e.createSquare(t)}},jsts.operation.buffer.OffsetCurveBuilder.prototype.computeLineBufferCurve=function(t,e){\nvar o=jsts.operation.buffer.OffsetCurveBuilder.simplifyTolerance(this.distance),n=jsts.operation.buffer.BufferInputLineSimplifier.simplify(t,o),r=n.length-1;e.initSideSegments(n[0],n[1],jsts.geomgraph.Position.LEFT);for(var i=2;r>=i;i++)e.addNextSegment(n[i],!0);e.addLastSegment(),e.addLineEndCap(n[r-1],n[r]);var s=jsts.operation.buffer.BufferInputLineSimplifier.simplify(t,-o),a=s.length-1;e.initSideSegments(s[a],s[a-1],jsts.geomgraph.Position.LEFT);for(var i=a-2;i>=0;i--)e.addNextSegment(s[i],!0);e.addLastSegment(),e.addLineEndCap(s[1],s[0]),e.closeRing()},jsts.operation.buffer.OffsetCurveBuilder.prototype.computeSingleSidedBufferCurve=function(t,e,o){var n=jsts.operation.buffer.OffsetCurveBuilder.simplifyTolerance(this.distance);if(e){o.addSegments(t,!0);var r=jsts.operation.buffer.BufferInputLineSimplifier.simplify(t,-n),i=r.length-1;o.initSideSegments(r[i],r[i-1],jsts.geomgraph.Position.LEFT),o.addFirstSegment();for(var s=i-2;s>=0;s--)o.addNextSegment(r[s],!0)}else{o.addSegments(t,!1);var a=jsts.operation.buffer.BufferInputLineSimplifier.simplify(t,n),p=a.length-1;o.initSideSegments(a[0],a[1],jsts.geomgraph.Position.LEFT),o.addFirstSegment();for(var s=2;p>=s;s++)o.addNextSegment(a[s],!0)}o.addLastSegment(),o.closeRing()},jsts.operation.buffer.OffsetCurveBuilder.prototype.computeOffsetCurve=function(t,e,o){var n=jsts.operation.buffer.OffsetCurveBuilder.simplifyTolerance(this.distance);if(e){var r=jsts.operation.buffer.BufferInputLineSimplifier.simplify(t,-n),i=r.length-1;o.initSideSegments(r[i],r[i-1],jsts.geomgraph.Position.LEFT),o.addFirstSegment();for(var s=i-2;s>=0;s--)o.addNextSegment(r[s],!0)}else{var a=jsts.operation.buffer.BufferInputLineSimplifier.simplify(t,n),p=a.length-1;o.initSideSegments(a[0],a[1],jsts.geomgraph.Position.LEFT),o.addFirstSegment();for(var s=2;p>=s;s++)o.addNextSegment(a[s],!0)}o.addLastSegment()},jsts.operation.buffer.OffsetCurveBuilder.prototype.computeRingBufferCurve=function(t,e,o){var n=jsts.operation.buffer.OffsetCurveBuilder.simplifyTolerance(this.distance);e===jsts.geomgraph.Position.RIGHT&&(n=-n);var r=jsts.operation.buffer.BufferInputLineSimplifier.simplify(t,n),i=r.length-1;o.initSideSegments(r[i-1],r[0],e);for(var s=1;i>=s;s++){var a=1!==s;o.addNextSegment(r[s],a)}o.closeRing()},function(){var t=function(t,e,o){this.hotPixel=t,this.parentEdge=e,this.vertexIndex=o};t.prototype=new jsts.index.chain.MonotoneChainSelectAction,t.constructor=t,t.prototype.hotPixel=null,t.prototype.parentEdge=null,t.prototype.vertexIndex=null,t.prototype._isNodeAdded=!1,t.prototype.isNodeAdded=function(){return this._isNodeAdded},t.prototype.select=function(t,e){var o=t.getContext();(null===this.parentEdge||o!==this.parentEdge||e!==this.vertexIndex)&&(this._isNodeAdded=this.hotPixel.addSnappedNode(o,e))},jsts.noding.snapround.MCIndexPointSnapper=function(t){this.index=t},jsts.noding.snapround.MCIndexPointSnapper.prototype.index=null,jsts.noding.snapround.MCIndexPointSnapper.prototype.snap=function(e,o,n){if(1===arguments.length)return void this.snap2.apply(this,arguments);var r=e.getSafeEnvelope(),i=new t(e,o,n);return this.index.query(r,{visitItem:function(t){t.select(r,i)}}),i.isNodeAdded()},jsts.noding.snapround.MCIndexPointSnapper.prototype.snap2=function(t){return this.snap(t,null,-1)}}(),function(){var t=function(){this.items=new javascript.util.ArrayList,this.subnode=[null,null]};t.getSubnodeIndex=function(t,e){var o=-1;return t.min>=e&&(o=1),t.max<=e&&(o=0),o},t.prototype.getItems=function(){return this.items},t.prototype.add=function(t){this.items.add(t)},t.prototype.addAllItems=function(t){t.addAll(this.items);var e=0,o=2;for(e;o>e;e++)null!==this.subnode[e]&&this.subnode[e].addAllItems(t);return t},t.prototype.addAllItemsFromOverlapping=function(t,e){(null===t||this.isSearchMatch(t))&&(e.addAll(this.items),null!==this.subnode[0]&&this.subnode[0].addAllItemsFromOverlapping(t,e),null!==this.subnode[1]&&this.subnode[1].addAllItemsFromOverlapping(t,e))},t.prototype.remove=function(t,e){if(!this.isSearchMatch(t))return!1;var o=!1,n=0,r=2;for(n;r>n;n++)if(null!==this.subnode[n]&&(o=this.subnode[n].remove(t,e))){this.subnode[n].isPrunable()&&(this.subnode[n]=null);break}return o?o:o=this.items.remove(e)},t.prototype.isPrunable=function(){return!(this.hasChildren()||this.hasItems())},t.prototype.hasChildren=function(){var t=0,e=2;for(t;e>t;t++)if(null!==this.subnode[t])return!0;return!1},t.prototype.hasItems=function(){return!this.items.isEmpty()},t.prototype.depth=function(){var t,e=0,o=0,n=2;for(o;n>o;o++)null!==this.subnode[o]&&(t=this.subnode[o].depth(),t>e&&(e=t));return e+1},t.prototype.size=function(){var t=0,e=0,o=2;for(e;o>e;e++)null!==this.subnode[e]&&(t+=this.subnode[e].size());return t+this.items.size()},t.prototype.nodeSize=function(){var t=0,e=0,o=2;for(e;o>e;e++)null!==this.subnode[e]&&(t+=this.subnode[e].nodeSize());return t+1},jsts.index.bintree.NodeBase=t}(),function(){var t=jsts.index.bintree.NodeBase,e=jsts.index.bintree.Key,o=jsts.index.bintree.Interval,n=function(t,e){this.items=new javascript.util.ArrayList,this.subnode=[null,null],this.interval=t,this.level=e,this.centre=(t.getMin()+t.getMax())/2};n.prototype=new t,n.constructor=n,n.createNode=function(t){var o,r;return o=new e(t),r=new n(o.getInterval(),o.getLevel())},n.createExpanded=function(t,e){var r,i;return r=new o(e),null!==t&&r.expandToInclude(t.interval),i=n.createNode(r),null!==t&&i.insert(t),i},n.prototype.getInterval=function(){return this.interval},n.prototype.isSearchMatch=function(t){return t.overlaps(this.interval)},n.prototype.getNode=function(e){var o,n=t.getSubnodeIndex(e,this.centre);return-1!=n?(o=this.getSubnode(n),o.getNode(e)):this},n.prototype.find=function(e){var o,n=t.getSubnodeIndex(e,this.centre);return-1===n?this:null!==this.subnode[n]?(o=this.subnode[n],o.find(e)):this},n.prototype.insert=function(e){var o,n=t.getSubnodeIndex(e.interval,this.centre);e.level===this.level-1?this.subnode[n]=e:(o=this.createSubnode(n),o.insert(e),this.subnode[n]=o)},n.prototype.getSubnode=function(t){return null===this.subnode[t]&&(this.subnode[t]=this.createSubnode(t)),this.subnode[t]},n.prototype.createSubnode=function(t){var e,r,i,s;switch(e=0,r=0,t){case 0:e=this.interval.getMin(),r=this.centre;break;case 1:e=this.centre,r=this.interval.getMax()}return i=new o(e,r),s=new n(i,this.level-1)},jsts.index.bintree.Node=n}(),function(){var t=jsts.index.bintree.Node,e=jsts.index.bintree.NodeBase,o=function(){this.subnode=[null,null],this.items=new javascript.util.ArrayList};o.prototype=new jsts.index.bintree.NodeBase,o.constructor=o,o.origin=0,o.prototype.insert=function(n,r){var i,s,a=e.getSubnodeIndex(n,o.origin);return-1===a?void this.add(r):(i=this.subnode[a],null!==i&&i.getInterval().contains(n)||(s=t.createExpanded(i,n),this.subnode[a]=s),void this.insertContained(this.subnode[a],n,r))},o.prototype.insertContained=function(t,e,o){var n,r;n=jsts.index.IntervalSize.isZeroWidth(e.getMin(),e.getMax()),r=n?t.find(e):t.getNode(e),r.add(o)},o.prototype.isSearchMatch=function(t){return!0},jsts.index.bintree.Root=o}(),jsts.geomgraph.Quadrant=function(){},jsts.geomgraph.Quadrant.NE=0,jsts.geomgraph.Quadrant.NW=1,jsts.geomgraph.Quadrant.SW=2,jsts.geomgraph.Quadrant.SE=3,jsts.geomgraph.Quadrant.quadrant=function(t,e){if(t instanceof jsts.geom.Coordinate)return jsts.geomgraph.Quadrant.quadrant2.apply(this,arguments);if(0===t&&0===e)throw new jsts.error.IllegalArgumentError(\"Cannot compute the quadrant for point ( \"+t+\", \"+e+\" )\");return t>=0?e>=0?jsts.geomgraph.Quadrant.NE:jsts.geomgraph.Quadrant.SE:e>=0?jsts.geomgraph.Quadrant.NW:jsts.geomgraph.Quadrant.SW},jsts.geomgraph.Quadrant.quadrant2=function(t,e){if(e.x===t.x&&e.y===t.y)throw new jsts.error.IllegalArgumentError(\"Cannot compute the quadrant for two identical points \"+t);return e.x>=t.x?e.y>=t.y?jsts.geomgraph.Quadrant.NE:jsts.geomgraph.Quadrant.SE:e.y>=t.y?jsts.geomgraph.Quadrant.NW:jsts.geomgraph.Quadrant.SW},jsts.geomgraph.Quadrant.isOpposite=function(t,e){if(t===e)return!1;var o=(t-e+4)%4;return 2===o?!0:!1},jsts.geomgraph.Quadrant.commonHalfPlane=function(t,e){if(t===e)return t;var o=(t-e+4)%4;if(2===o)return-1;var n=e>t?t:e,r=t>e?t:e;return 0===n&&3===r?3:n},jsts.geomgraph.Quadrant.isInHalfPlane=function(t,e){return e===jsts.geomgraph.Quadrant.SE?t===jsts.geomgraph.Quadrant.SE||t===jsts.geomgraph.Quadrant.SW:t===e||t===e+1},jsts.geomgraph.Quadrant.isNorthern=function(t){return t===jsts.geomgraph.Quadrant.NE||t===jsts.geomgraph.Quadrant.NW},jsts.operation.valid.ConsistentAreaTester=function(t){this.geomGraph=t,this.li=new jsts.algorithm.RobustLineIntersector,this.nodeGraph=new jsts.operation.relate.RelateNodeGraph,this.invalidPoint=null},jsts.operation.valid.ConsistentAreaTester.prototype.getInvalidPoint=function(){return this.invalidPoint},jsts.operation.valid.ConsistentAreaTester.prototype.isNodeConsistentArea=function(){var t=this.geomGraph.computeSelfNodes(this.li,!0);return t.hasProperIntersection()?(this.invalidPoint=t.getProperIntersectionPoint(),!1):(this.nodeGraph.build(this.geomGraph),this.isNodeEdgeAreaLabelsConsistent())},jsts.operation.valid.ConsistentAreaTester.prototype.isNodeEdgeAreaLabelsConsistent=function(){for(var t=this.nodeGraph.getNodeIterator();t.hasNext();){var e=t.next();if(!e.getEdges().isAreaLabelsConsistent(this.geomGraph))return this.invalidPoint=e.getCoordinate().clone(),!1}return!0},jsts.operation.valid.ConsistentAreaTester.prototype.hasDuplicateRings=function(){for(var t=this.nodeGraph.getNodeIterator();t.hasNext();)for(var e=t.next(),o=e.getEdges().iterator();o.hasNext();){var n=o.next();if(n.getEdgeEnds().length>1)return invalidPoint=n.getEdge().getCoordinate(0),!0}return!1},jsts.operation.relate.RelateNode=function(t,e){jsts.geomgraph.Node.apply(this,arguments)},jsts.operation.relate.RelateNode.prototype=new jsts.geomgraph.Node,jsts.operation.relate.RelateNode.prototype.computeIM=function(t){t.setAtLeastIfValid(this.label.getLocation(0),this.label.getLocation(1),0)},jsts.operation.relate.RelateNode.prototype.updateIMFromEdges=function(t){this.edges.updateIM(t)},function(){var t=jsts.geom.Location,e=jsts.geomgraph.Position,o=jsts.geomgraph.EdgeEnd;jsts.geomgraph.DirectedEdge=function(t,e){if(o.call(this,t),this.depth=[0,-999,-999],this._isForward=e,e)this.init(t.getCoordinate(0),t.getCoordinate(1));else{var n=t.getNumPoints()-1;this.init(t.getCoordinate(n),t.getCoordinate(n-1))}this.computeDirectedLabel()},jsts.geomgraph.DirectedEdge.prototype=new o,jsts.geomgraph.DirectedEdge.constructor=jsts.geomgraph.DirectedEdge,jsts.geomgraph.DirectedEdge.depthFactor=function(e,o){return e===t.EXTERIOR&&o===t.INTERIOR?1:e===t.INTERIOR&&o===t.EXTERIOR?-1:0},jsts.geomgraph.DirectedEdge.prototype._isForward=null,jsts.geomgraph.DirectedEdge.prototype._isInResult=!1,jsts.geomgraph.DirectedEdge.prototype._isVisited=!1,jsts.geomgraph.DirectedEdge.prototype.sym=null,jsts.geomgraph.DirectedEdge.prototype.next=null,jsts.geomgraph.DirectedEdge.prototype.nextMin=null,jsts.geomgraph.DirectedEdge.prototype.edgeRing=null,jsts.geomgraph.DirectedEdge.prototype.minEdgeRing=null,jsts.geomgraph.DirectedEdge.prototype.depth=null,jsts.geomgraph.DirectedEdge.prototype.getEdge=function(){return this.edge},jsts.geomgraph.DirectedEdge.prototype.setInResult=function(t){this._isInResult=t},jsts.geomgraph.DirectedEdge.prototype.isInResult=function(){return this._isInResult},jsts.geomgraph.DirectedEdge.prototype.isVisited=function(){return this._isVisited},jsts.geomgraph.DirectedEdge.prototype.setVisited=function(t){this._isVisited=t},jsts.geomgraph.DirectedEdge.prototype.setEdgeRing=function(t){this.edgeRing=t},jsts.geomgraph.DirectedEdge.prototype.getEdgeRing=function(){return this.edgeRing},jsts.geomgraph.DirectedEdge.prototype.setMinEdgeRing=function(t){this.minEdgeRing=t},jsts.geomgraph.DirectedEdge.prototype.getMinEdgeRing=function(){return this.minEdgeRing},jsts.geomgraph.DirectedEdge.prototype.getDepth=function(t){return this.depth[t]},jsts.geomgraph.DirectedEdge.prototype.setDepth=function(t,e){if(-999!==this.depth[t]&&this.depth[t]!==e)throw new jsts.error.TopologyError(\"assigned depths do not match\",this.getCoordinate());this.depth[t]=e},jsts.geomgraph.DirectedEdge.prototype.getDepthDelta=function(){var t=this.edge.getDepthDelta();return this._isForward||(t=-t),t},jsts.geomgraph.DirectedEdge.prototype.setVisitedEdge=function(t){this.setVisited(t),this.sym.setVisited(t)},jsts.geomgraph.DirectedEdge.prototype.getSym=function(){return this.sym},jsts.geomgraph.DirectedEdge.prototype.isForward=function(){return this._isForward},jsts.geomgraph.DirectedEdge.prototype.setSym=function(t){this.sym=t},jsts.geomgraph.DirectedEdge.prototype.getNext=function(){return this.next},jsts.geomgraph.DirectedEdge.prototype.setNext=function(t){this.next=t},jsts.geomgraph.DirectedEdge.prototype.getNextMin=function(){return this.nextMin},jsts.geomgraph.DirectedEdge.prototype.setNextMin=function(t){this.nextMin=t},jsts.geomgraph.DirectedEdge.prototype.isLineEdge=function(){var e=this.label.isLine(0)||this.label.isLine(1),o=!this.label.isArea(0)||this.label.allPositionsEqual(0,t.EXTERIOR),n=!this.label.isArea(1)||this.label.allPositionsEqual(1,t.EXTERIOR);return e&&o&&n},jsts.geomgraph.DirectedEdge.prototype.isInteriorAreaEdge=function(){for(var o=!0,n=0;2>n;n++)this.label.isArea(n)&&this.label.getLocation(n,e.LEFT)===t.INTERIOR&&this.label.getLocation(n,e.RIGHT)===t.INTERIOR||(o=!1);return o},jsts.geomgraph.DirectedEdge.prototype.computeDirectedLabel=function(){this.label=new jsts.geomgraph.Label(this.edge.getLabel()),this._isForward||this.label.flip()},jsts.geomgraph.DirectedEdge.prototype.setEdgeDepths=function(t,o){var n=this.getEdge().getDepthDelta();this._isForward||(n=-n);var r=1;t===e.LEFT&&(r=-1);var i=e.opposite(t),s=n*r,a=o+s;this.setDepth(t,o),this.setDepth(i,a)}}(),jsts.operation.distance.DistanceOp=function(t,e,o){this.ptLocator=new jsts.algorithm.PointLocator,this.geom=[],this.geom[0]=t,this.geom[1]=e,this.terminateDistance=o},jsts.operation.distance.DistanceOp.prototype.geom=null,jsts.operation.distance.DistanceOp.prototype.terminateDistance=0,jsts.operation.distance.DistanceOp.prototype.ptLocator=null,jsts.operation.distance.DistanceOp.prototype.minDistanceLocation=null,jsts.operation.distance.DistanceOp.prototype.minDistance=Number.MAX_VALUE,jsts.operation.distance.DistanceOp.distance=function(t,e){var o=new jsts.operation.distance.DistanceOp(t,e,0);return o.distance()},jsts.operation.distance.DistanceOp.isWithinDistance=function(t,e,o){var n=new jsts.operation.distance.DistanceOp(t,e,o);return n.distance()<=o},jsts.operation.distance.DistanceOp.nearestPoints=function(t,e){var o=new jsts.operation.distance.DistanceOp(t,e,0);return o.nearestPoints()},jsts.operation.distance.DistanceOp.prototype.distance=function(){if(null===this.geom[0]||null===this.geom[1])throw new jsts.error.IllegalArgumentError(\"null geometries are not supported\");return this.geom[0].isEmpty()||this.geom[1].isEmpty()?0:(this.computeMinDistance(),this.minDistance)},jsts.operation.distance.DistanceOp.prototype.nearestPoints=function(){this.computeMinDistance();var t=[this.minDistanceLocation[0].getCoordinate(),this.minDistanceLocation[1].getCoordinate()];return t},jsts.operation.distance.DistanceOp.prototype.nearestLocations=function(){return this.computeMinDistance(),this.minDistanceLocation},jsts.operation.distance.DistanceOp.prototype.updateMinDistance=function(t,e){null!==t[0]&&(e?(this.minDistanceLocation[0]=t[1],this.minDistanceLocation[1]=t[0]):(this.minDistanceLocation[0]=t[0],this.minDistanceLocation[1]=t[1]))},jsts.operation.distance.DistanceOp.prototype.computeMinDistance=function(){return arguments.length>0?void this.computeMinDistance2.apply(this,arguments):void(null===this.minDistanceLocation&&(this.minDistanceLocation=[],this.computeContainmentDistance(),this.minDistance<=this.terminateDistance||this.computeFacetDistance()))},jsts.operation.distance.DistanceOp.prototype.computeContainmentDistance=function(){if(2===arguments.length)return void this.computeContainmentDistance2.apply(this,arguments);if(3===arguments.length&&!arguments[0]instanceof jsts.operation.distance.GeometryLocation)return void this.computeContainmentDistance3.apply(this,arguments);if(3===arguments.length)return void this.computeContainmentDistance4.apply(this,arguments);var t=[];this.computeContainmentDistance2(0,t),this.minDistance<=this.terminateDistance||this.computeContainmentDistance2(1,t)},jsts.operation.distance.DistanceOp.prototype.computeContainmentDistance2=function(t,e){var o=1-t,n=jsts.geom.util.PolygonExtracter.getPolygons(this.geom[t]);if(n.length>0){var r=jsts.operation.distance.ConnectedElementLocationFilter.getLocations(this.geom[o]);if(this.computeContainmentDistance3(r,n,e),this.minDistance<=this.terminateDistance)return this.minDistanceLocation[o]=e[0],void(this.minDistanceLocation[t]=e[1])}},jsts.operation.distance.DistanceOp.prototype.computeContainmentDistance3=function(t,e,o){for(var n=0;n<t.length;n++)for(var r=t[n],i=0;i<e.length;i++)if(this.computeContainmentDistance4(r,e[i],o),this.minDistance<=this.terminateDistance)return},jsts.operation.distance.DistanceOp.prototype.computeContainmentDistance4=function(t,e,o){var n=t.getCoordinate();return jsts.geom.Location.EXTERIOR!==this.ptLocator.locate(n,e)?(this.minDistance=0,o[0]=t,void(o[1]=new jsts.operation.distance.GeometryLocation(e,n))):void 0},jsts.operation.distance.DistanceOp.prototype.computeFacetDistance=function(){var t=[],e=jsts.geom.util.LinearComponentExtracter.getLines(this.geom[0]),o=jsts.geom.util.LinearComponentExtracter.getLines(this.geom[1]),n=jsts.geom.util.PointExtracter.getPoints(this.geom[0]),r=jsts.geom.util.PointExtracter.getPoints(this.geom[1]);this.computeMinDistanceLines(e,o,t),this.updateMinDistance(t,!1),this.minDistance<=this.terminateDistance||(t[0]=null,t[1]=null,this.computeMinDistanceLinesPoints(e,r,t),this.updateMinDistance(t,!1),this.minDistance<=this.terminateDistance||(t[0]=null,t[1]=null,this.computeMinDistanceLinesPoints(o,n,t),this.updateMinDistance(t,!0),this.minDistance<=this.terminateDistance||(t[0]=null,t[1]=null,this.computeMinDistancePoints(n,r,t),this.updateMinDistance(t,!1))))},jsts.operation.distance.DistanceOp.prototype.computeMinDistanceLines=function(t,e,o){for(var n=0;n<t.length;n++)for(var r=t[n],i=0;i<e.length;i++){var s=e[i];if(this.computeMinDistance(r,s,o),this.minDistance<=this.terminateDistance)return}},jsts.operation.distance.DistanceOp.prototype.computeMinDistancePoints=function(t,e,o){for(var n=0;n<t.length;n++)for(var r=t[n],i=0;i<e.length;i++){var s=e[i],a=r.getCoordinate().distance(s.getCoordinate());if(a<this.minDistance&&(this.minDistance=a,o[0]=new jsts.operation.distance.GeometryLocation(r,0,r.getCoordinate()),o[1]=new jsts.operation.distance.GeometryLocation(s,0,s.getCoordinate())),this.minDistance<=this.terminateDistance)return}},jsts.operation.distance.DistanceOp.prototype.computeMinDistanceLinesPoints=function(t,e,o){for(var n=0;n<t.length;n++)for(var r=t[n],i=0;i<e.length;i++){var s=e[i];if(this.computeMinDistance(r,s,o),this.minDistance<=this.terminateDistance)return}},jsts.operation.distance.DistanceOp.prototype.computeMinDistance2=function(t,e,o){if(e instanceof jsts.geom.Point)return void this.computeMinDistance3(t,e,o);if(!(t.getEnvelopeInternal().distance(e.getEnvelopeInternal())>this.minDistance))for(var n=t.getCoordinates(),r=e.getCoordinates(),i=0;i<n.length-1;i++)for(var s=0;s<r.length-1;s++){var a=jsts.algorithm.CGAlgorithms.distanceLineLine(n[i],n[i+1],r[s],r[s+1]);if(a<this.minDistance){this.minDistance=a;var p=new jsts.geom.LineSegment(n[i],n[i+1]),u=new jsts.geom.LineSegment(r[s],r[s+1]),l=p.closestPoints(u);o[0]=new jsts.operation.distance.GeometryLocation(t,i,l[0]),o[1]=new jsts.operation.distance.GeometryLocation(e,s,l[1])}if(this.minDistance<=this.terminateDistance)return}},jsts.operation.distance.DistanceOp.prototype.computeMinDistance3=function(t,e,o){if(!(t.getEnvelopeInternal().distance(e.getEnvelopeInternal())>this.minDistance))for(var n=t.getCoordinates(),r=e.getCoordinate(),i=0;i<n.length-1;i++){var s=jsts.algorithm.CGAlgorithms.distancePointLine(r,n[i],n[i+1]);if(s<this.minDistance){this.minDistance=s;var a=new jsts.geom.LineSegment(n[i],n[i+1]),p=a.closestPoint(r);o[0]=new jsts.operation.distance.GeometryLocation(t,i,p),o[1]=new jsts.operation.distance.GeometryLocation(e,0,r)}if(this.minDistance<=this.terminateDistance)return}},jsts.index.strtree.SIRtree=function(t){t=t||10,jsts.index.strtree.AbstractSTRtree.call(this,t)},jsts.index.strtree.SIRtree.prototype=new jsts.index.strtree.AbstractSTRtree,jsts.index.strtree.SIRtree.constructor=jsts.index.strtree.SIRtree,jsts.index.strtree.SIRtree.prototype.comperator={compare:function(t,e){return t.getBounds().getCentre()-e.getBounds().getCentre()}},jsts.index.strtree.SIRtree.prototype.intersectionOp={intersects:function(t,e){return t.intersects(e)}},jsts.index.strtree.SIRtree.prototype.createNode=function(t){var e=function(t){jsts.index.strtree.AbstractNode.apply(this,arguments)};return e.prototype=new jsts.index.strtree.AbstractNode,e.constructor=e,e.prototype.computeBounds=function(){for(var t,e=null,o=this.getChildBoundables(),n=0,r=o.length;r>n;n++)t=o[n],null===e?e=new jsts.index.strtree.Interval(t.getBounds()):e.expandToInclude(t.getBounds());return e},e},jsts.index.strtree.SIRtree.prototype.insert=function(t,e,o){jsts.index.strtree.AbstractSTRtree.prototype.insert(new jsts.index.strtree.Interval(Math.min(t,e),Math.max(t,e)),o)},jsts.index.strtree.SIRtree.prototype.query=function(t,e){e=e||t,jsts.index.strtree.AbstractSTRtree.prototype.query(new jsts.index.strtree.Interval(Math.min(t,e),Math.max(t,e)))},jsts.index.strtree.SIRtree.prototype.getIntersectsOp=function(){return this.intersectionOp},jsts.index.strtree.SIRtree.prototype.getComparator=function(){return this.comperator},jsts.simplify.DouglasPeuckerSimplifier=function(t){this.inputGeom=t,this.isEnsureValidTopology=!0},jsts.simplify.DouglasPeuckerSimplifier.prototype.inputGeom=null,jsts.simplify.DouglasPeuckerSimplifier.prototype.distanceTolerance=null,jsts.simplify.DouglasPeuckerSimplifier.prototype.isEnsureValidTopology=null,jsts.simplify.DouglasPeuckerSimplifier.simplify=function(t,e){var o=new jsts.simplify.DouglasPeuckerSimplifier(t);return o.setDistanceTolerance(e),o.getResultGeometry()},jsts.simplify.DouglasPeuckerSimplifier.prototype.setDistanceTolerance=function(t){if(0>t)throw\"Tolerance must be non-negative\";this.distanceTolerance=t},jsts.simplify.DouglasPeuckerSimplifier.prototype.setEnsureValid=function(t){this.isEnsureValidTopology=t},jsts.simplify.DouglasPeuckerSimplifier.prototype.getResultGeometry=function(){return this.inputGeom.isEmpty()?this.inputGeom.clone():new jsts.simplify.DPTransformer(this.distanceTolerance,this.isEnsureValidTopology).transform(this.inputGeom)},function(){jsts.operation.predicate.RectangleContains=function(t){this.rectEnv=t.getEnvelopeInternal()},jsts.operation.predicate.RectangleContains.contains=function(t,e){var o=new jsts.operation.predicate.RectangleContains(t);return o.contains(e)},jsts.operation.predicate.RectangleContains.prototype.rectEnv=null,jsts.operation.predicate.RectangleContains.prototype.contains=function(t){return this.rectEnv.contains(t.getEnvelopeInternal())?this.isContainedInBoundary(t)?!1:!0:!1},jsts.operation.predicate.RectangleContains.prototype.isContainedInBoundary=function(t){if(t instanceof jsts.geom.Polygon)return!1;if(t instanceof jsts.geom.Point)return this.isPointContainedInBoundary(t.getCoordinate());if(t instanceof jsts.geom.LineString)return this.isLineStringContainedInBoundary(t);for(var e=0;e<t.getNumGeometries();e++){var o=t.getGeometryN(e);if(!this.isContainedInBoundary(o))return!1}return!0},jsts.operation.predicate.RectangleContains.prototype.isPointContainedInBoundary=function(t){return t.x==this.rectEnv.getMinX()||t.x==this.rectEnv.getMaxX()||t.y==this.rectEnv.getMinY()||t.y==this.rectEnv.getMaxY()},jsts.operation.predicate.RectangleContains.prototype.isLineStringContainedInBoundary=function(t){for(var e=t.getCoordinateSequence(),o=0;o<e.length-1;o++){var n=e[o],r=e[o+1];if(!this.isLineSegmentContainedInBoundary(n,r))return!1}return!0},jsts.operation.predicate.RectangleContains.prototype.isLineSegmentContainedInBoundary=function(t,e){if(t.equals(e))return this.isPointContainedInBoundary(t);if(t.x==e.x){if(t.x==this.rectEnv.getMinX()||t.x==this.rectEnv.getMaxX())return!0}else if(t.y==e.y&&(t.y==this.rectEnv.getMinY()||t.y==this.rectEnv.getMaxY()))return!0;return!1}}(),function(){var t=jsts.geom.Location,e=jsts.geomgraph.Position;jsts.geomgraph.Depth=function(){this.depth=[[],[]];for(var t=0;2>t;t++)for(var e=0;3>e;e++)this.depth[t][e]=jsts.geomgraph.Depth.NULL_VALUE},jsts.geomgraph.Depth.NULL_VALUE=-1,jsts.geomgraph.Depth.depthAtLocation=function(e){return e===t.EXTERIOR?0:e===t.INTERIOR?1:jsts.geomgraph.Depth.NULL_VALUE},jsts.geomgraph.Depth.prototype.depth=null,jsts.geomgraph.Depth.prototype.getDepth=function(t,e){return this.depth[t][e]},jsts.geomgraph.Depth.prototype.setDepth=function(t,e,o){this.depth[t][e]=o},jsts.geomgraph.Depth.prototype.getLocation=function(e,o){return this.depth[e][o]<=0?t.EXTERIOR:t.INTERIOR},jsts.geomgraph.Depth.prototype.add=function(e,o,n){n===t.INTERIOR&&this.depth[e][o]++},jsts.geomgraph.Depth.prototype.isNull=function(){if(arguments.length>0)return this.isNull2.apply(this,arguments);for(var t=0;2>t;t++)for(var e=0;3>e;e++)if(this.depth[t][e]!==jsts.geomgraph.Depth.NULL_VALUE)return!1;return!0},jsts.geomgraph.Depth.prototype.isNull2=function(t){return arguments.length>1?this.isNull3.apply(this,arguments):this.depth[t][1]==jsts.geomgraph.Depth.NULL_VALUE},jsts.geomgraph.Depth.prototype.isNull3=function(t,e){return this.depth[t][e]==jsts.geomgraph.Depth.NULL_VALUE},jsts.geomgraph.Depth.prototype.add=function(e){for(var o=0;2>o;o++)for(var n=1;3>n;n++){var r=e.getLocation(o,n);(r===t.EXTERIOR||r===t.INTERIOR)&&(this.isNull(o,n)?this.depth[o][n]=jsts.geomgraph.Depth.depthAtLocation(r):this.depth[o][n]+=jsts.geomgraph.Depth.depthAtLocation(r))}},jsts.geomgraph.Depth.prototype.getDelta=function(t){return this.depth[t][e.RIGHT]-this.depth[t][e.LEFT]},jsts.geomgraph.Depth.prototype.normalize=function(){for(var t=0;2>t;t++)if(!this.isNull(t)){var e=this.depth[t][1];this.depth[t][2]<e&&(e=this.depth[t][2]),0>e&&(e=0);for(var o=1;3>o;o++){var n=0;this.depth[t][o]>e&&(n=1),this.depth[t][o]=n}}},jsts.geomgraph.Depth.prototype.toString=function(){return\"A: \"+this.depth[0][1]+\",\"+this.depth[0][2]+\" B: \"+this.depth[1][1]+\",\"+this.depth[1][2]}}(),jsts.algorithm.BoundaryNodeRule=function(){},jsts.algorithm.BoundaryNodeRule.prototype.isInBoundary=function(t){throw new jsts.error.AbstractMethodInvocationError},jsts.algorithm.Mod2BoundaryNodeRule=function(){},jsts.algorithm.Mod2BoundaryNodeRule.prototype=new jsts.algorithm.BoundaryNodeRule,jsts.algorithm.Mod2BoundaryNodeRule.prototype.isInBoundary=function(t){return t%2===1},jsts.algorithm.BoundaryNodeRule.MOD2_BOUNDARY_RULE=new jsts.algorithm.Mod2BoundaryNodeRule,jsts.algorithm.BoundaryNodeRule.OGC_SFS_BOUNDARY_RULE=jsts.algorithm.BoundaryNodeRule.MOD2_BOUNDARY_RULE,jsts.operation.distance.GeometryLocation=function(t,e,o){this.component=t,this.segIndex=e,this.pt=o},jsts.operation.distance.GeometryLocation.INSIDE_AREA=-1,jsts.operation.distance.GeometryLocation.prototype.component=null,jsts.operation.distance.GeometryLocation.prototype.segIndex=null,jsts.operation.distance.GeometryLocation.prototype.pt=null,jsts.operation.distance.GeometryLocation.prototype.getGeometryComponent=function(){return this.component},jsts.operation.distance.GeometryLocation.prototype.getSegmentIndex=function(){return this.segIndex},jsts.operation.distance.GeometryLocation.prototype.getCoordinate=function(){return this.pt},jsts.operation.distance.GeometryLocation.prototype.isInsideArea=function(){return this.segIndex===jsts.operation.distance.GeometryLocation.INSIDE_AREA},jsts.geom.util.PointExtracter=function(t){this.pts=t},jsts.geom.util.PointExtracter.prototype=new jsts.geom.GeometryFilter,jsts.geom.util.PointExtracter.prototype.pts=null,jsts.geom.util.PointExtracter.getPoints=function(t,e){return void 0===e&&(e=[]),t instanceof jsts.geom.Point?e.push(t):(t instanceof jsts.geom.GeometryCollection||t instanceof jsts.geom.MultiPoint||t instanceof jsts.geom.MultiLineString||t instanceof jsts.geom.MultiPolygon)&&t.apply(new jsts.geom.util.PointExtracter(e)),e},jsts.geom.util.PointExtracter.prototype.filter=function(t){t instanceof jsts.geom.Point&&this.pts.push(t)},function(){var t=jsts.geom.Location;jsts.operation.relate.RelateNodeGraph=function(){this.nodes=new jsts.geomgraph.NodeMap(new jsts.operation.relate.RelateNodeFactory)},jsts.operation.relate.RelateNodeGraph.prototype.nodes=null,jsts.operation.relate.RelateNodeGraph.prototype.build=function(t){this.computeIntersectionNodes(t,0),this.copyNodesAndLabels(t,0);var e=new jsts.operation.relate.EdgeEndBuilder,o=e.computeEdgeEnds(t.getEdgeIterator());this.insertEdgeEnds(o)},jsts.operation.relate.RelateNodeGraph.prototype.computeIntersectionNodes=function(e,o){for(var n=e.getEdgeIterator();n.hasNext();)for(var r=n.next(),i=r.getLabel().getLocation(o),s=r.getEdgeIntersectionList().iterator();s.hasNext();){var a=s.next(),p=this.nodes.addNode(a.coord);i===t.BOUNDARY?p.setLabelBoundary(o):p.getLabel().isNull(o)&&p.setLabel(o,t.INTERIOR)}},jsts.operation.relate.RelateNodeGraph.prototype.copyNodesAndLabels=function(t,e){for(var o=t.getNodeIterator();o.hasNext();){var n=o.next(),r=this.nodes.addNode(n.getCoordinate());r.setLabel(e,n.getLabel().getLocation(e))}},jsts.operation.relate.RelateNodeGraph.prototype.insertEdgeEnds=function(t){for(var e=t.iterator();e.hasNext();){var o=e.next();this.nodes.add(o)}},jsts.operation.relate.RelateNodeGraph.prototype.getNodeIterator=function(){return this.nodes.iterator()}}(),jsts.geomgraph.index.SimpleSweepLineIntersector=function(){},jsts.geomgraph.index.SimpleSweepLineIntersector.prototype=new jsts.geomgraph.index.EdgeSetIntersector,jsts.geomgraph.index.SimpleSweepLineIntersector.prototype.events=[],jsts.geomgraph.index.SimpleSweepLineIntersector.prototype.nOverlaps=null,jsts.geomgraph.index.SimpleSweepLineIntersector.prototype.computeIntersections=function(t,e,o){return e instanceof javascript.util.List?void this.computeIntersections2.apply(this,arguments):(o?this.add(t,null):this.add(t),void this.computeIntersections3(e))},jsts.geomgraph.index.SimpleSweepLineIntersector.prototype.computeIntersections2=function(t,e,o){this.add(t,t),this.add(e,e),this.computeIntersections3(o)},jsts.geomgraph.index.SimpleSweepLineIntersector.prototype.add=function(t,e){if(t instanceof javascript.util.List)return void this.add2.apply(this,arguments);for(var o=t.getCoordinates(),n=0;n<o.length-1;n++){var r=new jsts.geomgraph.index.SweepLineSegment(t,n),i=new jsts.geomgraph.index.SweepLineEvent(r.getMinX(),r,e);this.events.push(i),this.events.push(new jsts.geomgraph.index.SweepLineEvent(r.getMaxX(),i))}},jsts.geomgraph.index.SimpleSweepLineIntersector.prototype.add2=function(t,e){for(var o=t.iterator();o.hasNext();){var n=o.next();e?this.add(n,e):this.add(n,n)}},jsts.geomgraph.index.SimpleSweepLineIntersector.prototype.prepareEvents=function(){this.events.sort(function(t,e){return t.compareTo(e)});for(var t=0;t<this.events.length;t++){var e=this.events[t];e.isDelete()&&e.getInsertEvent().setDeleteEventIndex(t)}},jsts.geomgraph.index.SimpleSweepLineIntersector.prototype.computeIntersections3=function(t){this.nOverlaps=0,this.prepareEvents();for(var e=0;e<this.events.length;e++){var o=this.events[e];o.isInsert()&&this.processOverlaps(e,o.getDeleteEventIndex(),o,t)}},jsts.geomgraph.index.SimpleSweepLineIntersector.prototype.processOverlaps=function(t,e,o,n){for(var r=o.getObject(),i=t;e>i;i++){var s=this.events[i];if(s.isInsert()){var a=s.getObject();o.isSameLabel(s)||(r.computeIntersections(a,n),this.nOverlaps++)}}},jsts.triangulate.VoronoiDiagramBuilder=function(){this.siteCoords=null,this.tolerance=0,this.subdiv=null,\nthis.clipEnv=null,this.diagramEnv=null},jsts.triangulate.VoronoiDiagramBuilder.prototype.setSites=function(){var t=arguments[0];t instanceof jsts.geom.Geometry||t instanceof jsts.geom.Coordinate||t instanceof jsts.geom.Point||t instanceof jsts.geom.MultiPoint||t instanceof jsts.geom.LineString||t instanceof jsts.geom.MultiLineString||t instanceof jsts.geom.LinearRing||t instanceof jsts.geom.Polygon||t instanceof jsts.geom.MultiPolygon?this.setSitesByGeometry(t):this.setSitesByArray(t)},jsts.triangulate.VoronoiDiagramBuilder.prototype.setSitesByGeometry=function(t){this.siteCoords=jsts.triangulate.DelaunayTriangulationBuilder.extractUniqueCoordinates(t)},jsts.triangulate.VoronoiDiagramBuilder.prototype.setSitesByArray=function(t){this.siteCoords=jsts.triangulate.DelaunayTriangulationBuilder.unique(t)},jsts.triangulate.VoronoiDiagramBuilder.prototype.setClipEnvelope=function(t){this.clipEnv=t},jsts.triangulate.VoronoiDiagramBuilder.prototype.setTolerance=function(t){this.tolerance=t},jsts.triangulate.VoronoiDiagramBuilder.prototype.create=function(){if(null===this.subdiv){var t,e,o,n;t=jsts.triangulate.DelaunayTriangulationBuilder.envelope(this.siteCoords),this.diagramEnv=t,e=Math.max(this.diagramEnv.getWidth(),this.diagramEnv.getHeight()),this.diagramEnv.expandBy(e),null!==this.clipEnv&&this.diagramEnv.expandToInclude(this.clipEnv),o=jsts.triangulate.DelaunayTriangulationBuilder.toVertices(this.siteCoords),this.subdiv=new jsts.triangulate.quadedge.QuadEdgeSubdivision(t,this.tolerance),n=new jsts.triangulate.IncrementalDelaunayTriangulator(this.subdiv),n.insertSites(o)}},jsts.triangulate.VoronoiDiagramBuilder.prototype.getSubdivision=function(){return this.create(),this.subdiv},jsts.triangulate.VoronoiDiagramBuilder.prototype.getDiagram=function(t){this.create();var e=this.subdiv.getVoronoiDiagram(t);return this.clipGeometryCollection(e,this.diagramEnv)},jsts.triangulate.VoronoiDiagramBuilder.prototype.clipGeometryCollection=function(t,e){var o,n,r,i,s,a;for(o=t.getFactory().toGeometry(e),n=[],r=0,i=t.getNumGeometries(),r;i>r;r++)s=t.getGeometryN(r),a=null,e.contains(s.getEnvelopeInternal())?a=s:e.intersects(s.getEnvelopeInternal())&&(a=o.intersection(s)),null===a||a.isEmpty()||n.push(a);return t.getFactory().createGeometryCollection(n)},jsts.operation.valid.IndexedNestedRingTester=function(t){this.graph=t,this.rings=new javascript.util.ArrayList,this.totalEnv=new jsts.geom.Envelope,this.index=null,this.nestedPt=null},jsts.operation.valid.IndexedNestedRingTester.prototype.getNestedPoint=function(){return this.nestedPt},jsts.operation.valid.IndexedNestedRingTester.prototype.add=function(t){this.rings.add(t),this.totalEnv.expandToInclude(t.getEnvelopeInternal())},jsts.operation.valid.IndexedNestedRingTester.prototype.isNonNested=function(){this.buildIndex();for(var t=0;t<this.rings.size();t++)for(var e=this.rings.get(t),o=e.getCoordinates(),n=this.index.query(e.getEnvelopeInternal()),r=0;r<n.length;r++){var i=n[r],s=i.getCoordinates();if(e!=i&&e.getEnvelopeInternal().intersects(i.getEnvelopeInternal())){var a=jsts.operation.valid.IsValidOp.findPtNotNode(o,i,this.graph);if(null!=a){var p=jsts.algorithm.CGAlgorithms.isPointInRing(a,s);if(p)return this.nestedPt=a,!1}}}return!0},jsts.operation.valid.IndexedNestedRingTester.prototype.buildIndex=function(){this.index=new jsts.index.strtree.STRtree;for(var t=0;t<this.rings.size();t++){var e=this.rings.get(t),o=e.getEnvelopeInternal();this.index.insert(o,e)}},jsts.geomgraph.index.MonotoneChain=function(t,e){this.mce=t,this.chainIndex=e},jsts.geomgraph.index.MonotoneChain.prototype.mce=null,jsts.geomgraph.index.MonotoneChain.prototype.chainIndex=null,jsts.geomgraph.index.MonotoneChain.prototype.computeIntersections=function(t,e){this.mce.computeIntersectsForChain(this.chainIndex,t.mce,t.chainIndex,e)},jsts.noding.SegmentNode=function(t,e,o,n){this.segString=t,this.coord=new jsts.geom.Coordinate(e),this.segmentIndex=o,this.segmentOctant=n,this._isInterior=!e.equals2D(t.getCoordinate(o))},jsts.noding.SegmentNode.prototype.segString=null,jsts.noding.SegmentNode.prototype.coord=null,jsts.noding.SegmentNode.prototype.segmentIndex=null,jsts.noding.SegmentNode.prototype.segmentOctant=null,jsts.noding.SegmentNode.prototype._isInterior=null,jsts.noding.SegmentNode.prototype.getCoordinate=function(){return this.coord},jsts.noding.SegmentNode.prototype.isInterior=function(){return this._isInterior},jsts.noding.SegmentNode.prototype.isEndPoint=function(t){return 0!==this.segmentIndex||this._isInterior?this.segmentIndex===this.maxSegmentIndex?!0:!1:!0},jsts.noding.SegmentNode.prototype.compareTo=function(t){var e=t;return this.segmentIndex<e.segmentIndex?-1:this.segmentIndex>e.segmentIndex?1:this.coord.equals2D(e.coord)?0:jsts.noding.SegmentPointComparator.compare(this.segmentOctant,this.coord,e.coord)},function(){jsts.io.GeoJSONWriter=function(){this.parser=new jsts.io.GeoJSONParser(this.geometryFactory)},jsts.io.GeoJSONWriter.prototype.write=function(t){var e=this.parser.write(t);return e}}(),jsts.io.OpenLayersParser=function(t){this.geometryFactory=t||new jsts.geom.GeometryFactory},jsts.io.OpenLayersParser.prototype.read=function(t){return\"OpenLayers.Geometry.Point\"===t.CLASS_NAME?this.convertFromPoint(t):\"OpenLayers.Geometry.LineString\"===t.CLASS_NAME?this.convertFromLineString(t):\"OpenLayers.Geometry.LinearRing\"===t.CLASS_NAME?this.convertFromLinearRing(t):\"OpenLayers.Geometry.Polygon\"===t.CLASS_NAME?this.convertFromPolygon(t):\"OpenLayers.Geometry.MultiPoint\"===t.CLASS_NAME?this.convertFromMultiPoint(t):\"OpenLayers.Geometry.MultiLineString\"===t.CLASS_NAME?this.convertFromMultiLineString(t):\"OpenLayers.Geometry.MultiPolygon\"===t.CLASS_NAME?this.convertFromMultiPolygon(t):\"OpenLayers.Geometry.Collection\"===t.CLASS_NAME?this.convertFromCollection(t):void 0},jsts.io.OpenLayersParser.prototype.convertFromPoint=function(t){return this.geometryFactory.createPoint(new jsts.geom.Coordinate(t.x,t.y))},jsts.io.OpenLayersParser.prototype.convertFromLineString=function(t){var e,o=[];for(e=0;e<t.components.length;e++)o.push(new jsts.geom.Coordinate(t.components[e].x,t.components[e].y));return this.geometryFactory.createLineString(o)},jsts.io.OpenLayersParser.prototype.convertFromLinearRing=function(t){var e,o=[];for(e=0;e<t.components.length;e++)o.push(new jsts.geom.Coordinate(t.components[e].x,t.components[e].y));return this.geometryFactory.createLinearRing(o)},jsts.io.OpenLayersParser.prototype.convertFromPolygon=function(t){var e,o=null,n=[];for(e=0;e<t.components.length;e++){var r=this.convertFromLinearRing(t.components[e]);0===e?o=r:n.push(r)}return this.geometryFactory.createPolygon(o,n)},jsts.io.OpenLayersParser.prototype.convertFromMultiPoint=function(t){var e,o=[];for(e=0;e<t.components.length;e++)o.push(this.convertFromPoint(t.components[e]));return this.geometryFactory.createMultiPoint(o)},jsts.io.OpenLayersParser.prototype.convertFromMultiLineString=function(t){var e,o=[];for(e=0;e<t.components.length;e++)o.push(this.convertFromLineString(t.components[e]));return this.geometryFactory.createMultiLineString(o)},jsts.io.OpenLayersParser.prototype.convertFromMultiPolygon=function(t){var e,o=[];for(e=0;e<t.components.length;e++)o.push(this.convertFromPolygon(t.components[e]));return this.geometryFactory.createMultiPolygon(o)},jsts.io.OpenLayersParser.prototype.convertFromCollection=function(t){var e,o=[];for(e=0;e<t.components.length;e++)o.push(this.read(t.components[e]));return this.geometryFactory.createGeometryCollection(o)},jsts.io.OpenLayersParser.prototype.write=function(t){return\"jsts.geom.Point\"===t.CLASS_NAME?this.convertToPoint(t.coordinate):\"jsts.geom.LineString\"===t.CLASS_NAME?this.convertToLineString(t):\"jsts.geom.LinearRing\"===t.CLASS_NAME?this.convertToLinearRing(t):\"jsts.geom.Polygon\"===t.CLASS_NAME?this.convertToPolygon(t):\"jsts.geom.MultiPoint\"===t.CLASS_NAME?this.convertToMultiPoint(t):\"jsts.geom.MultiLineString\"===t.CLASS_NAME?this.convertToMultiLineString(t):\"jsts.geom.MultiPolygon\"===t.CLASS_NAME?this.convertToMultiPolygon(t):\"jsts.geom.GeometryCollection\"===t.CLASS_NAME?this.convertToCollection(t):void 0},jsts.io.OpenLayersParser.prototype.convertToPoint=function(t){return new OpenLayers.Geometry.Point(t.x,t.y)},jsts.io.OpenLayersParser.prototype.convertToLineString=function(t){var e,o=[];for(e=0;e<t.points.length;e++){var n=t.points[e];o.push(this.convertToPoint(n))}return new OpenLayers.Geometry.LineString(o)},jsts.io.OpenLayersParser.prototype.convertToLinearRing=function(t){var e,o=[];for(e=0;e<t.points.length;e++){var n=t.points[e];o.push(this.convertToPoint(n))}return new OpenLayers.Geometry.LinearRing(o)},jsts.io.OpenLayersParser.prototype.convertToPolygon=function(t){var e,o=[];for(o.push(this.convertToLinearRing(t.shell)),e=0;e<t.holes.length;e++){var n=t.holes[e];o.push(this.convertToLinearRing(n))}return new OpenLayers.Geometry.Polygon(o)},jsts.io.OpenLayersParser.prototype.convertToMultiPoint=function(t){var e,o=[];for(e=0;e<t.geometries.length;e++){var n=t.geometries[e].coordinate;o.push(new OpenLayers.Geometry.Point(n.x,n.y))}return new OpenLayers.Geometry.MultiPoint(o)},jsts.io.OpenLayersParser.prototype.convertToMultiLineString=function(t){var e,o=[];for(e=0;e<t.geometries.length;e++)o.push(this.convertToLineString(t.geometries[e]));return new OpenLayers.Geometry.MultiLineString(o)},jsts.io.OpenLayersParser.prototype.convertToMultiPolygon=function(t){var e,o=[];for(e=0;e<t.geometries.length;e++)o.push(this.convertToPolygon(t.geometries[e]));return new OpenLayers.Geometry.MultiPolygon(o)},jsts.io.OpenLayersParser.prototype.convertToCollection=function(t){var e,o=[];for(e=0;e<t.geometries.length;e++){var n=t.geometries[e],r=this.write(n);o.push(r)}return new OpenLayers.Geometry.Collection(o)},jsts.index.quadtree.Quadtree=function(){this.root=new jsts.index.quadtree.Root,this.minExtent=1},jsts.index.quadtree.Quadtree.ensureExtent=function(t,e){var o,n,r,i;return o=t.getMinX(),n=t.getMaxX(),r=t.getMinY(),i=t.getMaxY(),o!==n&&r!==i?t:(o===n&&(o-=e/2,n=o+e/2),r===i&&(r-=e/2,i=r+e/2),new jsts.geom.Envelope(o,n,r,i))},jsts.index.quadtree.Quadtree.prototype.depth=function(){return this.root.depth()},jsts.index.quadtree.Quadtree.prototype.size=function(){return this.root.size()},jsts.index.quadtree.Quadtree.prototype.insert=function(t,e){this.collectStats(t);var o=jsts.index.quadtree.Quadtree.ensureExtent(t,this.minExtent);this.root.insert(o,e)},jsts.index.quadtree.Quadtree.prototype.remove=function(t,e){var o=jsts.index.quadtree.Quadtree.ensureExtent(t,this.minExtent);return this.root.remove(o,e)},jsts.index.quadtree.Quadtree.prototype.query=function(){return 1===arguments.length?jsts.index.quadtree.Quadtree.prototype.queryByEnvelope.apply(this,arguments):void jsts.index.quadtree.Quadtree.prototype.queryWithVisitor.apply(this,arguments)},jsts.index.quadtree.Quadtree.prototype.queryByEnvelope=function(t){var e=new jsts.index.ArrayListVisitor;return this.query(t,e),e.getItems()},jsts.index.quadtree.Quadtree.prototype.queryWithVisitor=function(t,e){this.root.visit(t,e)},jsts.index.quadtree.Quadtree.prototype.queryAll=function(){var t=[];return t=this.root.addAllItems(t)},jsts.index.quadtree.Quadtree.prototype.collectStats=function(t){var e=t.getWidth();e<this.minExtent&&e>0&&(this.minExtent=e);var o=t.getHeight();o<this.minExtent&&o>0&&(this.minExtent=o)},jsts.operation.relate.RelateNodeFactory=function(){},jsts.operation.relate.RelateNodeFactory.prototype=new jsts.geomgraph.NodeFactory,jsts.operation.relate.RelateNodeFactory.prototype.createNode=function(t){return new jsts.operation.relate.RelateNode(t,new jsts.operation.relate.EdgeEndBundleStar)},jsts.index.quadtree.Key=function(t){this.pt=new jsts.geom.Coordinate,this.level=0,this.env=null,this.computeKey(t)},jsts.index.quadtree.Key.computeQuadLevel=function(t){var e,o,n,r;return e=t.getWidth(),o=t.getHeight(),n=e>o?e:o,r=jsts.index.DoubleBits.exponent(n)+1},jsts.index.quadtree.Key.prototype.getPoint=function(){return this.pt},jsts.index.quadtree.Key.prototype.getLevel=function(){return this.level},jsts.index.quadtree.Key.prototype.getEnvelope=function(){return this.env},jsts.index.quadtree.Key.prototype.getCentre=function(){var t,e;return t=(this.env.getMinX()+this.env.getMaxX())/2,e=(this.env.getMinY()+this.env.getMaxY())/2,new jsts.geom.Coordinate(t,e)},jsts.index.quadtree.Key.prototype.computeKey=function(){arguments[0]instanceof jsts.geom.Envelope?this.computeKeyFromEnvelope(arguments[0]):this.computeKeyFromLevel(arguments[0],arguments[1])},jsts.index.quadtree.Key.prototype.computeKeyFromEnvelope=function(t){for(this.level=jsts.index.quadtree.Key.computeQuadLevel(t),this.env=new jsts.geom.Envelope,this.computeKey(this.level,t);!this.env.contains(t);)this.level+=1,this.computeKey(this.level,t)},jsts.index.quadtree.Key.prototype.computeKeyFromLevel=function(t,e){var o=jsts.index.DoubleBits.powerOf2(t);this.pt.x=Math.floor(e.getMinX()/o)*o,this.pt.y=Math.floor(e.getMinY()/o)*o,this.env.init(this.pt.x,this.pt.x+o,this.pt.y,this.pt.y+o)},jsts.geom.CoordinateArrays=function(){throw new jsts.error.AbstractMethodInvocationError},jsts.geom.CoordinateArrays.copyDeep=function(){return 1===arguments.length?jsts.geom.CoordinateArrays.copyDeep1(arguments[0]):void(5===arguments.length&&jsts.geom.CoordinateArrays.copyDeep2(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4]))},jsts.geom.CoordinateArrays.copyDeep1=function(t){for(var e=[],o=0;o<t.length;o++)e[o]=new jsts.geom.Coordinate(t[o]);return e},jsts.geom.CoordinateArrays.copyDeep2=function(t,e,o,n,r){for(var i=0;r>i;i++)o[n+i]=new jsts.geom.Coordinate(t[e+i])},jsts.geom.CoordinateArrays.removeRepeatedPoints=function(t){var e;return this.hasRepeatedPoints(t)?(e=new jsts.geom.CoordinateList(t,!1),e.toCoordinateArray()):t},jsts.geom.CoordinateArrays.hasRepeatedPoints=function(t){var e;for(e=1;e<t.length;e++)if(t[e-1].equals(t[e]))return!0;return!1},jsts.geom.CoordinateArrays.ptNotInList=function(t,e){for(var o=0;o<t.length;o++){var n=t[o];if(jsts.geom.CoordinateArrays.indexOf(n,e)<0)return n}return null},jsts.geom.CoordinateArrays.increasingDirection=function(t){for(var e=0;e<parseInt(t.length/2);e++){var o=t.length-1-e,n=t[e].compareTo(t[o]);if(0!=n)return n}return 1},jsts.geom.CoordinateArrays.minCoordinate=function(t){for(var e=null,o=0;o<t.length;o++)(null===e||e.compareTo(t[o])>0)&&(e=t[o]);return e},jsts.geom.CoordinateArrays.scroll=function(t,e){var o=jsts.geom.CoordinateArrays.indexOf(e,t);if(!(0>o)){var n=t.slice(o).concat(t.slice(0,o));for(o=0;o<n.length;o++)t[o]=n[o]}},jsts.geom.CoordinateArrays.indexOf=function(t,e){for(var o=0;o<e.length;o++)if(t.equals(e[o]))return o;return-1},jsts.operation.overlay.MinimalEdgeRing=function(t,e){jsts.geomgraph.EdgeRing.call(this,t,e)},jsts.operation.overlay.MinimalEdgeRing.prototype=new jsts.geomgraph.EdgeRing,jsts.operation.overlay.MinimalEdgeRing.constructor=jsts.operation.overlay.MinimalEdgeRing,jsts.operation.overlay.MinimalEdgeRing.prototype.getNext=function(t){return t.getNextMin()},jsts.operation.overlay.MinimalEdgeRing.prototype.setEdgeRing=function(t,e){t.setMinEdgeRing(e)},jsts.triangulate.DelaunayTriangulationBuilder=function(){this.siteCoords=null,this.tolerance=0,this.subdiv=null},jsts.triangulate.DelaunayTriangulationBuilder.extractUniqueCoordinates=function(t){if(void 0===t||null===t)return new jsts.geom.CoordinateList([],!1).toArray();var e=t.getCoordinates();return jsts.triangulate.DelaunayTriangulationBuilder.unique(e)},jsts.triangulate.DelaunayTriangulationBuilder.unique=function(t){t.sort(function(t,e){return t.compareTo(e)});var e=new jsts.geom.CoordinateList(t,!1);return e.toArray()},jsts.triangulate.DelaunayTriangulationBuilder.toVertices=function(t){var e,o=new Array(t.length),n=0,r=t.length;for(n;r>n;n++)e=t[n],o[n]=new jsts.triangulate.quadedge.Vertex(e);return o},jsts.triangulate.DelaunayTriangulationBuilder.envelope=function(t){var e=new jsts.geom.Envelope,o=0,n=t.length;for(o;n>o;o++)e.expandToInclude(t[o]);return e},jsts.triangulate.DelaunayTriangulationBuilder.prototype.setSites=function(){var t=arguments[0];t instanceof jsts.geom.Geometry||t instanceof jsts.geom.Coordinate||t instanceof jsts.geom.Point||t instanceof jsts.geom.MultiPoint||t instanceof jsts.geom.LineString||t instanceof jsts.geom.MultiLineString||t instanceof jsts.geom.LinearRing||t instanceof jsts.geom.Polygon||t instanceof jsts.geom.MultiPolygon?this.setSitesFromGeometry(t):this.setSitesFromCollection(t)},jsts.triangulate.DelaunayTriangulationBuilder.prototype.setSitesFromGeometry=function(t){this.siteCoords=jsts.triangulate.DelaunayTriangulationBuilder.extractUniqueCoordinates(t)},jsts.triangulate.DelaunayTriangulationBuilder.prototype.setSitesFromCollection=function(t){this.siteCoords=jsts.triangulate.DelaunayTriangulationBuilder.unique(t)},jsts.triangulate.DelaunayTriangulationBuilder.prototype.setTolerance=function(t){this.tolerance=t},jsts.triangulate.DelaunayTriangulationBuilder.prototype.create=function(){if(null===this.subdiv){var t,e,o;t=jsts.triangulate.DelaunayTriangulationBuilder.envelope(this.siteCoords),e=jsts.triangulate.DelaunayTriangulationBuilder.toVertices(this.siteCoords),this.subdiv=new jsts.triangulate.quadedge.QuadEdgeSubdivision(t,this.tolerance),o=new jsts.triangulate.IncrementalDelaunayTriangulator(this.subdiv),o.insertSites(e)}},jsts.triangulate.DelaunayTriangulationBuilder.prototype.getSubdivision=function(){return this.create(),this.subdiv},jsts.triangulate.DelaunayTriangulationBuilder.prototype.getEdges=function(t){return this.create(),this.subdiv.getEdges(t)},jsts.triangulate.DelaunayTriangulationBuilder.prototype.getTriangles=function(t){return this.create(),this.subdiv.getTriangles(t)},jsts.algorithm.RayCrossingCounter=function(t){this.p=t},jsts.algorithm.RayCrossingCounter.locatePointInRing=function(t,e){for(var o=new jsts.algorithm.RayCrossingCounter(t),n=1;n<e.length;n++){var r=e[n],i=e[n-1];if(o.countSegment(r,i),o.isOnSegment())return o.getLocation()}return o.getLocation()},jsts.algorithm.RayCrossingCounter.prototype.p=null,jsts.algorithm.RayCrossingCounter.prototype.crossingCount=0,jsts.algorithm.RayCrossingCounter.prototype.isPointOnSegment=!1,jsts.algorithm.RayCrossingCounter.prototype.countSegment=function(t,e){if(!(t.x<this.p.x&&e.x<this.p.x)){if(this.p.x==e.x&&this.p.y===e.y)return void(this.isPointOnSegment=!0);if(t.y===this.p.y&&e.y===this.p.y){var o=t.x,n=e.x;return o>n&&(o=e.x,n=t.x),void(this.p.x>=o&&this.p.x<=n&&(this.isPointOnSegment=!0))}if(t.y>this.p.y&&e.y<=this.p.y||e.y>this.p.y&&t.y<=this.p.y){var r=t.x-this.p.x,i=t.y-this.p.y,s=e.x-this.p.x,a=e.y-this.p.y,p=jsts.algorithm.RobustDeterminant.signOfDet2x2(r,i,s,a);if(0===p)return void(this.isPointOnSegment=!0);i>a&&(p=-p),p>0&&this.crossingCount++}}},jsts.algorithm.RayCrossingCounter.prototype.isOnSegment=function(){return jsts.geom.isPointOnSegment},jsts.algorithm.RayCrossingCounter.prototype.getLocation=function(){return this.isPointOnSegment?jsts.geom.Location.BOUNDARY:this.crossingCount%2===1?jsts.geom.Location.INTERIOR:jsts.geom.Location.EXTERIOR},jsts.algorithm.RayCrossingCounter.prototype.isPointInPolygon=function(){return this.getLocation()!==jsts.geom.Location.EXTERIOR},jsts.operation.BoundaryOp=function(t,e){this.geom=t,this.geomFact=t.getFactory(),this.bnRule=e||jsts.algorithm.BoundaryNodeRule.MOD2_BOUNDARY_RULE},jsts.operation.BoundaryOp.prototype.geom=null,jsts.operation.BoundaryOp.prototype.geomFact=null,jsts.operation.BoundaryOp.prototype.bnRule=null,jsts.operation.BoundaryOp.prototype.getBoundary=function(){return this.geom instanceof jsts.geom.LineString?this.boundaryLineString(this.geom):this.geom instanceof jsts.geom.MultiLineString?this.boundaryMultiLineString(this.geom):this.geom.getBoundary()},jsts.operation.BoundaryOp.prototype.getEmptyMultiPoint=function(){return this.geomFact.createMultiPoint(null)},jsts.operation.BoundaryOp.prototype.boundaryMultiLineString=function(t){if(this.geom.isEmpty())return this.getEmptyMultiPoint();var e=this.computeBoundaryCoordinates(t);return 1==e.length?this.geomFact.createPoint(e[0]):this.geomFact.createMultiPoint(e)},jsts.operation.BoundaryOp.prototype.endpoints=null,jsts.operation.BoundaryOp.prototype.computeBoundaryCoordinates=function(t){var e,o,n,r=[];for(this.endpoints=[],e=0;e<t.getNumGeometries();e++)o=t.getGeometryN(e),0!=o.getNumPoints()&&(this.addEndpoint(o.getCoordinateN(0)),this.addEndpoint(o.getCoordinateN(o.getNumPoints()-1)));for(e=0;e<this.endpoints.length;e++)n=this.endpoints[e],this.bnRule.isInBoundary(n.count)&&r.push(n.coordinate);return r},jsts.operation.BoundaryOp.prototype.addEndpoint=function(t){var e,o,n=!1;for(e=0;e<this.endpoints.length;e++)if(o=this.endpoints[e],o.coordinate.equals(t)){n=!0;break}n||(o={},o.coordinate=t,o.count=0,this.endpoints.push(o)),o.count++},jsts.operation.BoundaryOp.prototype.boundaryLineString=function(t){if(this.geom.isEmpty())return this.getEmptyMultiPoint();if(t.isClosed()){var e=this.bnRule.isInBoundary(2);return e?t.getStartPoint():this.geomFact.createMultiPoint(null)}return this.geomFact.createMultiPoint([t.getStartPoint(),t.getEndPoint()])},jsts.operation.buffer.OffsetCurveSetBuilder=function(t,e,o){this.inputGeom=t,this.distance=e,this.curveBuilder=o,this.curveList=new javascript.util.ArrayList},jsts.operation.buffer.OffsetCurveSetBuilder.prototype.inputGeom=null,jsts.operation.buffer.OffsetCurveSetBuilder.prototype.distance=null,jsts.operation.buffer.OffsetCurveSetBuilder.prototype.curveBuilder=null,jsts.operation.buffer.OffsetCurveSetBuilder.prototype.curveList=null,jsts.operation.buffer.OffsetCurveSetBuilder.prototype.getCurves=function(){return this.add(this.inputGeom),this.curveList},jsts.operation.buffer.OffsetCurveSetBuilder.prototype.addCurve=function(t,e,o){if(!(null==t||t.length<2)){var n=new jsts.noding.NodedSegmentString(t,new jsts.geomgraph.Label(0,jsts.geom.Location.BOUNDARY,e,o));this.curveList.add(n)}},jsts.operation.buffer.OffsetCurveSetBuilder.prototype.add=function(t){if(!t.isEmpty())if(t instanceof jsts.geom.Polygon)this.addPolygon(t);else if(t instanceof jsts.geom.LineString)this.addLineString(t);else if(t instanceof jsts.geom.Point)this.addPoint(t);else if(t instanceof jsts.geom.MultiPoint)this.addCollection(t);else if(t instanceof jsts.geom.MultiLineString)this.addCollection(t);else if(t instanceof jsts.geom.MultiPolygon)this.addCollection(t);else{if(!(t instanceof jsts.geom.GeometryCollection))throw new jsts.error.IllegalArgumentError;this.addCollection(t)}},jsts.operation.buffer.OffsetCurveSetBuilder.prototype.addCollection=function(t){for(var e=0;e<t.getNumGeometries();e++){var o=t.getGeometryN(e);this.add(o)}},jsts.operation.buffer.OffsetCurveSetBuilder.prototype.addPoint=function(t){if(!(this.distance<=0)){var e=t.getCoordinates(),o=this.curveBuilder.getLineCurve(e,this.distance);this.addCurve(o,jsts.geom.Location.EXTERIOR,jsts.geom.Location.INTERIOR)}},jsts.operation.buffer.OffsetCurveSetBuilder.prototype.addLineString=function(t){if(!(this.distance<=0)||this.curveBuilder.getBufferParameters().isSingleSided()){var e=jsts.geom.CoordinateArrays.removeRepeatedPoints(t.getCoordinates()),o=this.curveBuilder.getLineCurve(e,this.distance);this.addCurve(o,jsts.geom.Location.EXTERIOR,jsts.geom.Location.INTERIOR)}},jsts.operation.buffer.OffsetCurveSetBuilder.prototype.addPolygon=function(t){var e=this.distance,o=jsts.geomgraph.Position.LEFT;this.distance<0&&(e=-this.distance,o=jsts.geomgraph.Position.RIGHT);var n=t.getExteriorRing(),r=jsts.geom.CoordinateArrays.removeRepeatedPoints(n.getCoordinates());if(!(this.distance<0&&this.isErodedCompletely(n,this.distance)||this.distance<=0&&r.length<3)){this.addPolygonRing(r,e,o,jsts.geom.Location.EXTERIOR,jsts.geom.Location.INTERIOR);for(var i=0;i<t.getNumInteriorRing();i++){var s=t.getInteriorRingN(i),a=jsts.geom.CoordinateArrays.removeRepeatedPoints(s.getCoordinates());this.distance>0&&this.isErodedCompletely(s,-this.distance)||this.addPolygonRing(a,e,jsts.geomgraph.Position.opposite(o),jsts.geom.Location.INTERIOR,jsts.geom.Location.EXTERIOR)}}},jsts.operation.buffer.OffsetCurveSetBuilder.prototype.addPolygonRing=function(t,e,o,n,r){if(!(0==e&&t.length<jsts.geom.LinearRing.MINIMUM_VALID_SIZE)){var i=n,s=r;t.length>=jsts.geom.LinearRing.MINIMUM_VALID_SIZE&&jsts.algorithm.CGAlgorithms.isCCW(t)&&(i=r,s=n,o=jsts.geomgraph.Position.opposite(o));var a=this.curveBuilder.getRingCurve(t,o,e);this.addCurve(a,i,s)}},jsts.operation.buffer.OffsetCurveSetBuilder.prototype.isErodedCompletely=function(t,e){var o=t.getCoordinates();if(o.length<4)return 0>e;if(4==o.length)return this.isTriangleErodedCompletely(o,e);var n=t.getEnvelopeInternal(),r=Math.min(n.getHeight(),n.getWidth());return 0>e&&2*Math.abs(e)>r?!0:!1},jsts.operation.buffer.OffsetCurveSetBuilder.prototype.isTriangleErodedCompletely=function(t,e){var o=new jsts.geom.Triangle(t[0],t[1],t[2]),n=o.inCentre(),r=jsts.algorithm.CGAlgorithms.distancePointLine(n,o.p0,o.p1);return r<Math.abs(e)},jsts.operation.buffer.BufferSubgraph=function(){this.dirEdgeList=new javascript.util.ArrayList,this.nodes=new javascript.util.ArrayList,this.finder=new jsts.operation.buffer.RightmostEdgeFinder},jsts.operation.buffer.BufferSubgraph.prototype.finder=null,jsts.operation.buffer.BufferSubgraph.prototype.dirEdgeList=null,jsts.operation.buffer.BufferSubgraph.prototype.nodes=null,jsts.operation.buffer.BufferSubgraph.prototype.rightMostCoord=null,jsts.operation.buffer.BufferSubgraph.prototype.env=null,jsts.operation.buffer.BufferSubgraph.prototype.getDirectedEdges=function(){return this.dirEdgeList},jsts.operation.buffer.BufferSubgraph.prototype.getNodes=function(){return this.nodes},jsts.operation.buffer.BufferSubgraph.prototype.getEnvelope=function(){if(null===this.env){for(var t=new jsts.geom.Envelope,e=this.dirEdgeList.iterator();e.hasNext();)for(var o=e.next(),n=o.getEdge().getCoordinates(),r=0;r<n.length-1;r++)t.expandToInclude(n[r]);this.env=t}return this.env},jsts.operation.buffer.BufferSubgraph.prototype.getRightmostCoordinate=function(){return this.rightMostCoord},jsts.operation.buffer.BufferSubgraph.prototype.create=function(t){this.addReachable(t),this.finder.findEdge(this.dirEdgeList),this.rightMostCoord=this.finder.getCoordinate()},jsts.operation.buffer.BufferSubgraph.prototype.addReachable=function(t){var e=[];for(e.push(t);0!==e.length;){var o=e.pop();this.add(o,e)}},jsts.operation.buffer.BufferSubgraph.prototype.add=function(t,e){t.setVisited(!0),this.nodes.add(t);for(var o=t.getEdges().iterator();o.hasNext();){var n=o.next();this.dirEdgeList.add(n);var r=n.getSym(),i=r.getNode();i.isVisited()||e.push(i)}},jsts.operation.buffer.BufferSubgraph.prototype.clearVisitedEdges=function(){for(var t=this.dirEdgeList.iterator();t.hasNext();){var e=t.next();e.setVisited(!1)}},jsts.operation.buffer.BufferSubgraph.prototype.computeDepth=function(t){this.clearVisitedEdges();var e=this.finder.getEdge();e.getNode(),e.getLabel();e.setEdgeDepths(jsts.geomgraph.Position.RIGHT,t),this.copySymDepths(e),this.computeDepths(e)},jsts.operation.buffer.BufferSubgraph.prototype.computeDepths=function(t){var e=[],o=[],n=t.getNode();for(o.push(n),e.push(n),t.setVisited(!0);0!==o.length;){var r=o.shift();e.push(r),this.computeNodeDepth(r);for(var i=r.getEdges().iterator();i.hasNext();){var s=i.next(),a=s.getSym();if(!a.isVisited()){var p=a.getNode();-1===e.indexOf(p)&&(o.push(p),e.push(p))}}}},jsts.operation.buffer.BufferSubgraph.prototype.computeNodeDepth=function(t){for(var e=null,o=t.getEdges().iterator();o.hasNext();){var n=o.next();if(n.isVisited()||n.getSym().isVisited()){e=n;break}}if(null==e)throw new jsts.error.TopologyError(\"unable to find edge to compute depths at \"+t.getCoordinate());t.getEdges().computeDepths(e);for(var o=t.getEdges().iterator();o.hasNext();){var n=o.next();n.setVisited(!0),this.copySymDepths(n)}},jsts.operation.buffer.BufferSubgraph.prototype.copySymDepths=function(t){var e=t.getSym();e.setDepth(jsts.geomgraph.Position.LEFT,t.getDepth(jsts.geomgraph.Position.RIGHT)),e.setDepth(jsts.geomgraph.Position.RIGHT,t.getDepth(jsts.geomgraph.Position.LEFT))},jsts.operation.buffer.BufferSubgraph.prototype.findResultEdges=function(){for(var t=this.dirEdgeList.iterator();t.hasNext();){var e=t.next();e.getDepth(jsts.geomgraph.Position.RIGHT)>=1&&e.getDepth(jsts.geomgraph.Position.LEFT)<=0&&!e.isInteriorAreaEdge()&&e.setInResult(!0)}},jsts.operation.buffer.BufferSubgraph.prototype.compareTo=function(t){var e=t;return this.rightMostCoord.x<e.rightMostCoord.x?-1:this.rightMostCoord.x>e.rightMostCoord.x?1:0},jsts.simplify.DPTransformer=function(t,e){this.distanceTolerance=t,this.isEnsureValidTopology=e},jsts.simplify.DPTransformer.prototype=new jsts.geom.util.GeometryTransformer,jsts.simplify.DPTransformer.prototype.distanceTolerance=null,jsts.simplify.DPTransformer.prototype.isEnsureValidTopology=null,jsts.simplify.DPTransformer.prototype.transformCoordinates=function(t,e){var o=t,n=null;return n=0==o.length?[]:jsts.simplify.DouglasPeuckerLineSimplifier.simplify(o,this.distanceTolerance)},jsts.simplify.DPTransformer.prototype.transformPolygon=function(t,e){if(t.isEmpty())return null;var o=jsts.geom.util.GeometryTransformer.prototype.transformPolygon.apply(this,arguments);return e instanceof jsts.geom.MultiPolygon?o:this.createValidArea(o)},jsts.simplify.DPTransformer.prototype.transformLinearRing=function(t,e){var o=e instanceof jsts.geom.Polygon,n=jsts.geom.util.GeometryTransformer.prototype.transformLinearRing.apply(this,arguments);return!o||n instanceof jsts.geom.LinearRing?n:null},jsts.simplify.DPTransformer.prototype.transformMultiPolygon=function(t,e){var o=jsts.geom.util.GeometryTransformer.prototype.transformMultiPolygon.apply(this,arguments);return this.createValidArea(o)},jsts.simplify.DPTransformer.prototype.createValidArea=function(t){return this.isEnsureValidTopology?t.buffer(0):t},jsts.geom.util.GeometryExtracter=function(t,e){this.clz=t,this.comps=e},jsts.geom.util.GeometryExtracter.prototype=new jsts.geom.GeometryFilter,jsts.geom.util.GeometryExtracter.prototype.clz=null,jsts.geom.util.GeometryExtracter.prototype.comps=null,jsts.geom.util.GeometryExtracter.extract=function(t,e,o){return o=o||new javascript.util.ArrayList,t instanceof e?o.add(t):(t instanceof jsts.geom.GeometryCollection||t instanceof jsts.geom.MultiPoint||t instanceof jsts.geom.MultiLineString||t instanceof jsts.geom.MultiPolygon)&&t.apply(new jsts.geom.util.GeometryExtracter(e,o)),o},jsts.geom.util.GeometryExtracter.prototype.filter=function(t){(null===this.clz||t instanceof this.clz)&&this.comps.add(t)},function(){var t=jsts.operation.overlay.OverlayOp,e=jsts.operation.overlay.snap.SnapOverlayOp,o=function(t,e){this.geom=[],this.geom[0]=t,this.geom[1]=e};o.overlayOp=function(t,e,n){var r=new o(t,e);return r.getResultGeometry(n)},o.intersection=function(e,o){return overlayOp(e,o,t.INTERSECTION)},o.union=function(e,o){return overlayOp(e,o,t.UNION)},o.difference=function(e,o){return overlayOp(e,o,t.DIFFERENCE)},o.symDifference=function(e,o){return overlayOp(e,o,t.SYMDIFFERENCE)},o.prototype.geom=null,o.prototype.getResultGeometry=function(o){var n=null,r=!1,i=null;try{n=t.overlayOp(this.geom[0],this.geom[1],o);var s=!0;s&&(r=!0)}catch(a){i=a}if(!r)try{n=e.overlayOp(this.geom[0],this.geom[1],o)}catch(a){throw i}return n},jsts.operation.overlay.snap.SnapIfNeededOverlayOp=o}(),function(){var t=jsts.geom.util.GeometryExtracter,e=jsts.operation.union.CascadedPolygonUnion,o=jsts.operation.union.PointGeometryUnion,n=jsts.operation.overlay.OverlayOp,r=jsts.operation.overlay.snap.SnapIfNeededOverlayOp,i=javascript.util.ArrayList;jsts.operation.union.UnaryUnionOp=function(t,e){this.polygons=new i,this.lines=new i,this.points=new i,e&&(this.geomFact=e),this.extract(t)},jsts.operation.union.UnaryUnionOp.union=function(t,e){var o=new jsts.operation.union.UnaryUnionOp(t,e);return o.union()},jsts.operation.union.UnaryUnionOp.prototype.polygons=null,jsts.operation.union.UnaryUnionOp.prototype.lines=null,jsts.operation.union.UnaryUnionOp.prototype.points=null,jsts.operation.union.UnaryUnionOp.prototype.geomFact=null,\njsts.operation.union.UnaryUnionOp.prototype.extract=function(e){if(e instanceof i)for(var o=e.iterator();o.hasNext();){var n=o.next();this.extract(n)}else null===this.geomFact&&(this.geomFact=e.getFactory()),t.extract(e,jsts.geom.Polygon,this.polygons),t.extract(e,jsts.geom.LineString,this.lines),t.extract(e,jsts.geom.Point,this.points)},jsts.operation.union.UnaryUnionOp.prototype.union=function(){if(null===this.geomFact)return null;var t=null;if(this.points.size()>0){var n=this.geomFact.buildGeometry(this.points);t=this.unionNoOpt(n)}var r=null;if(this.lines.size()>0){var i=this.geomFact.buildGeometry(this.lines);r=this.unionNoOpt(i)}var s=null;this.polygons.size()>0&&(s=e.union(this.polygons));var a=this.unionWithNull(r,s),p=null;return p=null===t?a:null===a?t:o(t,a),null===p?this.geomFact.createGeometryCollection(null):p},jsts.operation.union.UnaryUnionOp.prototype.unionWithNull=function(t,e){return null===t&&null===e?null:null===e?t:null===t?e:t.union(e)},jsts.operation.union.UnaryUnionOp.prototype.unionNoOpt=function(t){var e=this.geomFact.createPoint(null);return r.overlayOp(t,e,n.UNION)}}(),jsts.index.kdtree.KdNode=function(){this.left=null,this.right=null,this.count=1,2===arguments.length?this.initializeFromCoordinate.apply(this,arguments[0],arguments[1]):3===arguments.length&&this.initializeFromXY.apply(this,arguments[0],arguments[1],arguments[2])},jsts.index.kdtree.KdNode.prototype.initializeFromXY=function(t,e,o){this.p=new jsts.geom.Coordinate(t,e),this.data=o},jsts.index.kdtree.KdNode.prototype.initializeFromCoordinate=function(t,e){this.p=t,this.data=e},jsts.index.kdtree.KdNode.prototype.getX=function(){return this.p.x},jsts.index.kdtree.KdNode.prototype.getY=function(){return this.p.y},jsts.index.kdtree.KdNode.prototype.getCoordinate=function(){return this.p},jsts.index.kdtree.KdNode.prototype.getData=function(){return this.data},jsts.index.kdtree.KdNode.prototype.getLeft=function(){return this.left},jsts.index.kdtree.KdNode.prototype.getRight=function(){return this.right},jsts.index.kdtree.KdNode.prototype.increment=function(){this.count+=1},jsts.index.kdtree.KdNode.prototype.getCount=function(){return this.count},jsts.index.kdtree.KdNode.prototype.isRepeated=function(){return count>1},jsts.index.kdtree.KdNode.prototype.setLeft=function(t){this.left=t},jsts.index.kdtree.KdNode.prototype.setRight=function(t){this.right=t},jsts.algorithm.InteriorPointPoint=function(t){this.minDistance=Number.MAX_VALUE,this.interiorPoint=null,this.centroid=t.getCentroid().getCoordinate(),this.add(t)},jsts.algorithm.InteriorPointPoint.prototype.add=function(t){if(t instanceof jsts.geom.Point)this.addPoint(t.getCoordinate());else if(t instanceof jsts.geom.GeometryCollection)for(var e=0;e<t.getNumGeometries();e++)this.add(t.getGeometryN(e))},jsts.algorithm.InteriorPointPoint.prototype.addPoint=function(t){var e=t.distance(this.centroid);e<this.minDistance&&(this.interiorPoint=new jsts.geom.Coordinate(t),this.minDistance=e)},jsts.algorithm.InteriorPointPoint.prototype.getInteriorPoint=function(){return this.interiorPoint},function(){jsts.geom.MultiLineString=function(t,e){this.geometries=t||[],this.factory=e},jsts.geom.MultiLineString.prototype=new jsts.geom.GeometryCollection,jsts.geom.MultiLineString.constructor=jsts.geom.MultiLineString,jsts.geom.MultiLineString.prototype.getBoundary=function(){return new jsts.operation.BoundaryOp(this).getBoundary()},jsts.geom.MultiLineString.prototype.equalsExact=function(t,e){return this.isEquivalentClass(t)?jsts.geom.GeometryCollection.prototype.equalsExact.call(this,t,e):!1},jsts.geom.MultiLineString.prototype.CLASS_NAME=\"jsts.geom.MultiLineString\"}(),function(){var t=jsts.index.bintree.Interval,e=jsts.index.bintree.Root,o=function(){this.root=new e,this.minExtent=1};o.ensureExtent=function(e,o){var n,r;return n=e.getMin(),r=e.getMax(),n!==r?e:(n===r&&(n-=o/2,r=n+o/2),new t(n,r))},o.prototype.depth=function(){return null!==this.root?this.root.depth():0},o.prototype.size=function(){return null!==this.root?this.root.size():0},o.prototype.nodeSize=function(){return null!==this.root?this.root.nodeSize():0},o.prototype.insert=function(t,e){this.collectStats(t);var n=o.ensureExtent(t,this.minExtent);this.root.insert(n,e)},o.prototype.remove=function(t,e){var n=o.ensureExtent(t,this.minExtent);return this.root.remove(n,e)},o.prototype.iterator=function(){var t=new javascript.util.ArrayList;return this.root.addAllItems(t),t.iterator()},o.prototype.query=function(){if(2!==arguments.length){var e=arguments[0];return!e instanceof t&&(e=new t(e,e)),this.queryInterval(e)}this.queryAndAdd(arguments[0],arguments[1])},o.prototype.queryInterval=function(t){var e=new javascript.util.ArrayList;return this.query(t,e),e},o.prototype.queryAndAdd=function(t,e){this.root.addAllItemsFromOverlapping(t,e)},o.prototype.collectStats=function(t){var e=t.getWidth();e<this.minExtent&&e>0&&(this.minExtent=e)},jsts.index.bintree.Bintree=o}(),jsts.algorithm.InteriorPointArea=function(t){this.factory,this.interiorPoint=null,this.maxWidth=0,this.factory=t.getFactory(),this.add(t)},jsts.algorithm.InteriorPointArea.avg=function(t,e){return(t+e)/2},jsts.algorithm.InteriorPointArea.prototype.getInteriorPoint=function(){return this.interiorPoint},jsts.algorithm.InteriorPointArea.prototype.add=function(t){if(t instanceof jsts.geom.Polygon)this.addPolygon(t);else if(t instanceof jsts.geom.GeometryCollection)for(var e=0;e<t.getNumGeometries();e++)this.add(t.getGeometryN(e))},jsts.algorithm.InteriorPointArea.prototype.addPolygon=function(t){if(!t.isEmpty()){var e,o=0,n=this.horizontalBisector(t);if(0==n.getLength())o=0,e=n.getCoordinate();else{var r=n.intersection(t),i=this.widestGeometry(r);o=i.getEnvelopeInternal().getWidth(),e=this.centre(i.getEnvelopeInternal())}(null==this.interiorPoint||o>this.maxWidth)&&(this.interiorPoint=e,this.maxWidth=o)}},jsts.algorithm.InteriorPointArea.prototype.widestGeometry=function(t){if(t instanceof jsts.geom.GeometryCollection){var e=t;if(e.isEmpty())return e;for(var o=e.getGeometryN(0),n=1;n<e.getNumGeometries();n++)e.getGeometryN(n).getEnvelopeInternal().getWidth()>o.getEnvelopeInternal().getWidth()&&(o=e.getGeometryN(n));return o}return t instanceof jsts.geom.Geometry?t:void 0},jsts.algorithm.InteriorPointArea.prototype.horizontalBisector=function(t){var e=t.getEnvelopeInternal(),o=jsts.algorithm.SafeBisectorFinder.getBisectorY(t);return this.factory.createLineString([new jsts.geom.Coordinate(e.getMinX(),o),new jsts.geom.Coordinate(e.getMaxX(),o)])},jsts.algorithm.InteriorPointArea.prototype.centre=function(t){return new jsts.geom.Coordinate(jsts.algorithm.InteriorPointArea.avg(t.getMinX(),t.getMaxX()),jsts.algorithm.InteriorPointArea.avg(t.getMinY(),t.getMaxY()))},jsts.algorithm.SafeBisectorFinder=function(t){this.poly,this.centreY,this.hiY=Number.MAX_VALUE,this.loY=-Number.MAX_VALUE,this.poly=t,this.hiY=t.getEnvelopeInternal().getMaxY(),this.loY=t.getEnvelopeInternal().getMinY(),this.centreY=jsts.algorithm.InteriorPointArea.avg(this.loY,this.hiY)},jsts.algorithm.SafeBisectorFinder.getBisectorY=function(t){var e=new jsts.algorithm.SafeBisectorFinder(t);return e.getBisectorY()},jsts.algorithm.SafeBisectorFinder.prototype.getBisectorY=function(){this.process(this.poly.getExteriorRing());for(var t=0;t<this.poly.getNumInteriorRing();t++)this.process(this.poly.getInteriorRingN(t));var e=jsts.algorithm.InteriorPointArea.avg(this.hiY,this.loY);return e},jsts.algorithm.SafeBisectorFinder.prototype.process=function(t){for(var e=t.getCoordinateSequence(),o=0;o<e.length;o++){var n=e[o].y;this.updateInterval(n)}},jsts.algorithm.SafeBisectorFinder.prototype.updateInterval=function(t){t<=this.centreY?t>this.loY&&(this.loY=t):t>this.centreY&&t<this.hiY&&(this.hiY=t)},jsts.operation.buffer.BufferParameters=function(t,e,o,n){t&&this.setQuadrantSegments(t),e&&this.setEndCapStyle(e),o&&this.setJoinStyle(o),n&&this.setMitreLimit(n)},jsts.operation.buffer.BufferParameters.CAP_ROUND=1,jsts.operation.buffer.BufferParameters.CAP_FLAT=2,jsts.operation.buffer.BufferParameters.CAP_SQUARE=3,jsts.operation.buffer.BufferParameters.JOIN_ROUND=1,jsts.operation.buffer.BufferParameters.JOIN_MITRE=2,jsts.operation.buffer.BufferParameters.JOIN_BEVEL=3,jsts.operation.buffer.BufferParameters.DEFAULT_QUADRANT_SEGMENTS=8,jsts.operation.buffer.BufferParameters.DEFAULT_MITRE_LIMIT=5,jsts.operation.buffer.BufferParameters.prototype.quadrantSegments=jsts.operation.buffer.BufferParameters.DEFAULT_QUADRANT_SEGMENTS,jsts.operation.buffer.BufferParameters.prototype.endCapStyle=jsts.operation.buffer.BufferParameters.CAP_ROUND,jsts.operation.buffer.BufferParameters.prototype.joinStyle=jsts.operation.buffer.BufferParameters.JOIN_ROUND,jsts.operation.buffer.BufferParameters.prototype.mitreLimit=jsts.operation.buffer.BufferParameters.DEFAULT_MITRE_LIMIT,jsts.operation.buffer.BufferParameters.prototype._isSingleSided=!1,jsts.operation.buffer.BufferParameters.prototype.getQuadrantSegments=function(){return this.quadrantSegments},jsts.operation.buffer.BufferParameters.prototype.setQuadrantSegments=function(t){this.quadrantSegments=t},jsts.operation.buffer.BufferParameters.prototype.setQuadrantSegments=function(t){this.quadrantSegments=t,0===this.quadrantSegments&&(this.joinStyle=jsts.operation.buffer.BufferParameters.JOIN_BEVEL),this.quadrantSegments<0&&(this.joinStyle=jsts.operation.buffer.BufferParameters.JOIN_MITRE,this.mitreLimit=Math.abs(this.quadrantSegments)),0>=t&&(this.quadrantSegments=1),this.joinStyle!==jsts.operation.buffer.BufferParameters.JOIN_ROUND&&(this.quadrantSegments=jsts.operation.buffer.BufferParameters.DEFAULT_QUADRANT_SEGMENTS)},jsts.operation.buffer.BufferParameters.bufferDistanceError=function(t){var e=Math.PI/2/t;return 1-Math.cos(e/2)},jsts.operation.buffer.BufferParameters.prototype.getEndCapStyle=function(){return this.endCapStyle},jsts.operation.buffer.BufferParameters.prototype.setEndCapStyle=function(t){this.endCapStyle=t},jsts.operation.buffer.BufferParameters.prototype.getJoinStyle=function(){return this.joinStyle},jsts.operation.buffer.BufferParameters.prototype.setJoinStyle=function(t){this.joinStyle=t},jsts.operation.buffer.BufferParameters.prototype.getMitreLimit=function(){return this.mitreLimit},jsts.operation.buffer.BufferParameters.prototype.setMitreLimit=function(t){this.mitreLimit=t},jsts.operation.buffer.BufferParameters.prototype.setSingleSided=function(t){this._isSingleSided=t},jsts.operation.buffer.BufferParameters.prototype.isSingleSided=function(){return this._isSingleSided},function(){jsts.geom.util.ShortCircuitedGeometryVisitor=function(){},jsts.geom.util.ShortCircuitedGeometryVisitor.prototype.isDone=!1,jsts.geom.util.ShortCircuitedGeometryVisitor.prototype.applyTo=function(t){for(var e=0;e<t.getNumGeometries()&&!this.isDone;e++){var o=t.getGeometryN(e);if(o instanceof jsts.geom.GeometryCollection)this.applyTo(o);else if(this.visit(o),this.isDone())return void(this.isDone=!0)}},jsts.geom.util.ShortCircuitedGeometryVisitor.prototype.visit=function(t){},jsts.geom.util.ShortCircuitedGeometryVisitor.prototype.isDone=function(){}}(),function(){var t=function(t){this.rectEnv=t};t.prototype=new jsts.geom.util.ShortCircuitedGeometryVisitor,t.constructor=t,t.prototype.rectEnv=null,t.prototype.intersects=!1,t.prototype.intersects=function(){return this.intersects},t.prototype.visit=function(t){var e=t.getEnvelopeInternal();if(this.rectEnv.intersects(e))return this.rectEnv.contains(e)?void(this.intersects=!0):e.getMinX()>=rectEnv.getMinX()&&e.getMaxX()<=rectEnv.getMaxX()?void(this.intersects=!0):e.getMinY()>=rectEnv.getMinY()&&e.getMaxY()<=rectEnv.getMaxY()?void(this.intersects=!0):void 0},t.prototype.isDone=function(){return 1==this.intersects};var e=function(t){this.rectSeq=t.getExteriorRing().getCoordinateSequence(),this.rectEnv=t.getEnvelopeInternal()};e.prototype=new jsts.geom.util.ShortCircuitedGeometryVisitor,e.constructor=e,e.prototype.rectSeq=null,e.prototype.rectEnv=null,e.prototype.containsPoint=!1,e.prototype.containsPoint=function(){return this.containsPoint},e.prototype.visit=function(t){if(t instanceof jsts.geom.Polygon){var e=t.getEnvelopeInternal();if(this.rectEnv.intersects(e))for(var o=new jsts.geom.Coordinate,n=0;4>n;n++)if(this.rectSeq.getCoordinate(n,o),e.contains(o)&&SimplePointInAreaLocator.containsPointInPolygon(o,t))return void(this.containsPoint=!0)}},e.prototype.isDone=function(){return 1==this.containsPoint};var o=function(t){this.rectEnv=t.getEnvelopeInternal(),this.rectIntersector=new RectangleLineIntersector(rectEnv)};o.prototype=new jsts.geom.util.ShortCircuitedGeometryVisitor,o.constructor=o,o.prototype.rectEnv=null,o.prototype.rectIntersector=null,o.prototype.hasIntersection=!1,o.prototype.p0=null,o.prototype.p1=null,o.prototype.intersects=function(){return this.hasIntersection},o.prototype.visit=function(t){var e=t.getEnvelopeInternal();if(this.rectEnv.intersects(e)){var o=LinearComponentExtracter.getLines(t);this.checkIntersectionWithLineStrings(o)}},o.prototype.checkIntersectionWithLineStrings=function(t){for(var e=t.iterator();e.hasNext();){var o=e.next();if(this.checkIntersectionWithSegments(o),this.hasIntersection)return}},o.prototype.checkIntersectionWithSegments=function(t){for(var e=t.getCoordinateSequence(),o=1;o<e.length;o++)if(this.p0=e[o-1],this.p1=e[o],rectIntersector.intersects(p0,p1))return void(this.hasIntersection=!0)},o.prototype.isDone=function(){return 1==this.hasIntersection},jsts.operation.predicate.RectangleIntersects=function(t){this.rectangle=t,this.rectEnv=t.getEnvelopeInternal()},jsts.operation.predicate.RectangleIntersects.intersects=function(t,e){var o=new jsts.operation.predicate.RectangleIntersects(t);return o.intersects(e)},jsts.operation.predicate.RectangleIntersects.prototype.rectangle=null,jsts.operation.predicate.RectangleIntersects.prototype.rectEnv=null,jsts.operation.predicate.RectangleIntersects.prototype.intersects=function(n){if(!this.rectEnv.intersects(n.getEnvelopeInternal()))return!1;var r=new t(this.rectEnv);if(r.applyTo(n),r.intersects())return!0;var i=new e(rectangle);if(i.applyTo(n),i.containsPoint())return!0;var s=new o(rectangle);return s.applyTo(n),s.intersects()?!0:!1}}(),jsts.operation.buffer.BufferBuilder=function(t){this.bufParams=t,this.edgeList=new jsts.geomgraph.EdgeList},jsts.operation.buffer.BufferBuilder.depthDelta=function(t){var e=t.getLocation(0,jsts.geomgraph.Position.LEFT),o=t.getLocation(0,jsts.geomgraph.Position.RIGHT);return e===jsts.geom.Location.INTERIOR&&o===jsts.geom.Location.EXTERIOR?1:e===jsts.geom.Location.EXTERIOR&&o===jsts.geom.Location.INTERIOR?-1:0},jsts.operation.buffer.BufferBuilder.prototype.bufParams=null,jsts.operation.buffer.BufferBuilder.prototype.workingPrecisionModel=null,jsts.operation.buffer.BufferBuilder.prototype.workingNoder=null,jsts.operation.buffer.BufferBuilder.prototype.geomFact=null,jsts.operation.buffer.BufferBuilder.prototype.graph=null,jsts.operation.buffer.BufferBuilder.prototype.edgeList=null,jsts.operation.buffer.BufferBuilder.prototype.setWorkingPrecisionModel=function(t){this.workingPrecisionModel=t},jsts.operation.buffer.BufferBuilder.prototype.setNoder=function(t){this.workingNoder=t},jsts.operation.buffer.BufferBuilder.prototype.buffer=function(t,e){var o=this.workingPrecisionModel;null===o&&(o=t.getPrecisionModel()),this.geomFact=t.getFactory();var n=new jsts.operation.buffer.OffsetCurveBuilder(o,this.bufParams),r=new jsts.operation.buffer.OffsetCurveSetBuilder(t,e,n),i=r.getCurves();if(i.size()<=0)return this.createEmptyResultGeometry();this.computeNodedEdges(i,o),this.graph=new jsts.geomgraph.PlanarGraph(new jsts.operation.overlay.OverlayNodeFactory),this.graph.addEdges(this.edgeList.getEdges());var s=this.createSubgraphs(this.graph),a=new jsts.operation.overlay.PolygonBuilder(this.geomFact);this.buildSubgraphs(s,a);var p=a.getPolygons();if(p.size()<=0)return this.createEmptyResultGeometry();var u=this.geomFact.buildGeometry(p);return u},jsts.operation.buffer.BufferBuilder.prototype.getNoder=function(t){if(null!==this.workingNoder)return this.workingNoder;var e=new jsts.noding.MCIndexNoder,o=new jsts.algorithm.RobustLineIntersector;return o.setPrecisionModel(t),e.setSegmentIntersector(new jsts.noding.IntersectionAdder(o)),e},jsts.operation.buffer.BufferBuilder.prototype.computeNodedEdges=function(t,e){var o=this.getNoder(e);o.computeNodes(t);for(var n=o.getNodedSubstrings(),r=n.iterator();r.hasNext();){var i=r.next(),s=i.getData(),a=new jsts.geomgraph.Edge(i.getCoordinates(),new jsts.geomgraph.Label(s));this.insertUniqueEdge(a)}},jsts.operation.buffer.BufferBuilder.prototype.insertUniqueEdge=function(t){var e=this.edgeList.findEqualEdge(t);if(null!=e){var o=e.getLabel(),n=t.getLabel();e.isPointwiseEqual(t)||(n=new jsts.geomgraph.Label(t.getLabel()),n.flip()),o.merge(n);var r=jsts.operation.buffer.BufferBuilder.depthDelta(n),i=e.getDepthDelta(),s=i+r;e.setDepthDelta(s)}else this.edgeList.add(t),t.setDepthDelta(jsts.operation.buffer.BufferBuilder.depthDelta(t.getLabel()))},jsts.operation.buffer.BufferBuilder.prototype.createSubgraphs=function(t){for(var e=[],o=t.getNodes().iterator();o.hasNext();){var n=o.next();if(!n.isVisited()){var r=new jsts.operation.buffer.BufferSubgraph;r.create(n),e.push(r)}}var i=function(t,e){return t.compareTo(e)};return e.sort(i),e.reverse(),e},jsts.operation.buffer.BufferBuilder.prototype.buildSubgraphs=function(t,e){for(var o=[],n=0;n<t.length;n++){var r=t[n],i=r.getRightmostCoordinate(),s=new jsts.operation.buffer.SubgraphDepthLocater(o),a=s.getDepth(i);r.computeDepth(a),r.findResultEdges(),o.push(r),e.add(r.getDirectedEdges(),r.getNodes())}},jsts.operation.buffer.BufferBuilder.convertSegStrings=function(t){for(var e=new jsts.geom.GeometryFactory,o=new javascript.util.ArrayList;t.hasNext();){var n=t.next(),r=e.createLineString(n.getCoordinates());o.add(r)}return e.buildGeometry(o)},jsts.operation.buffer.BufferBuilder.prototype.createEmptyResultGeometry=function(){var t=this.geomFact.createPolygon(null,null);return t},jsts.noding.SegmentPointComparator=function(){},jsts.noding.SegmentPointComparator.compare=function(t,e,o){if(e.equals2D(o))return 0;var n=jsts.noding.SegmentPointComparator.relativeSign(e.x,o.x),r=jsts.noding.SegmentPointComparator.relativeSign(e.y,o.y);switch(t){case 0:return jsts.noding.SegmentPointComparator.compareValue(n,r);case 1:return jsts.noding.SegmentPointComparator.compareValue(r,n);case 2:return jsts.noding.SegmentPointComparator.compareValue(r,-n);case 3:return jsts.noding.SegmentPointComparator.compareValue(-n,r);case 4:return jsts.noding.SegmentPointComparator.compareValue(-n,-r);case 5:return jsts.noding.SegmentPointComparator.compareValue(-r,-n);case 6:return jsts.noding.SegmentPointComparator.compareValue(-r,n);case 7:return jsts.noding.SegmentPointComparator.compareValue(n,-r)}return 0},jsts.noding.SegmentPointComparator.relativeSign=function(t,e){return e>t?-1:t>e?1:0},jsts.noding.SegmentPointComparator.compareValue=function(t,e){return 0>t?-1:t>0?1:0>e?-1:e>0?1:0},jsts.operation.relate.RelateOp=function(){jsts.operation.GeometryGraphOperation.apply(this,arguments),this._relate=new jsts.operation.relate.RelateComputer(this.arg)},jsts.operation.relate.RelateOp.prototype=new jsts.operation.GeometryGraphOperation,jsts.operation.relate.RelateOp.relate=function(t,e,o){var n=new jsts.operation.relate.RelateOp(t,e,o),r=n.getIntersectionMatrix();return r},jsts.operation.relate.RelateOp.prototype._relate=null,jsts.operation.relate.RelateOp.prototype.getIntersectionMatrix=function(){return this._relate.computeIM()},jsts.index.chain.MonotoneChain=function(t,e,o,n){this.pts=t,this.start=e,this.end=o,this.context=n},jsts.index.chain.MonotoneChain.prototype.pts=null,jsts.index.chain.MonotoneChain.prototype.start=null,jsts.index.chain.MonotoneChain.prototype.end=null,jsts.index.chain.MonotoneChain.prototype.env=null,jsts.index.chain.MonotoneChain.prototype.context=null,jsts.index.chain.MonotoneChain.prototype.id=null,jsts.index.chain.MonotoneChain.prototype.setId=function(t){this.id=t},jsts.index.chain.MonotoneChain.prototype.getId=function(){return this.id},jsts.index.chain.MonotoneChain.prototype.getContext=function(){return this.context},jsts.index.chain.MonotoneChain.prototype.getEnvelope=function(){if(null==this.env){var t=this.pts[this.start],e=this.pts[this.end];this.env=new jsts.geom.Envelope(t,e)}return this.env},jsts.index.chain.MonotoneChain.prototype.getStartIndex=function(){return this.start},jsts.index.chain.MonotoneChain.prototype.getEndIndex=function(){return this.end},jsts.index.chain.MonotoneChain.prototype.getLineSegment=function(t,e){e.p0=this.pts[t],e.p1=this.pts[t+1]},jsts.index.chain.MonotoneChain.prototype.getCoordinates=function(){for(var t=[],e=0,o=this.start;o<=this.end;o++)t[e++]=this.pts[o];return t},jsts.index.chain.MonotoneChain.prototype.select=function(t,e){this.computeSelect2(t,this.start,this.end,e)},jsts.index.chain.MonotoneChain.prototype.computeSelect2=function(t,e,o,n){var r=this.pts[e],i=this.pts[o];if(n.tempEnv1.init(r,i),o-e===1)return void n.select(this,e);if(t.intersects(n.tempEnv1)){var s=parseInt((e+o)/2);s>e&&this.computeSelect2(t,e,s,n),o>s&&this.computeSelect2(t,s,o,n)}},jsts.index.chain.MonotoneChain.prototype.computeOverlaps=function(t,e){return 6===arguments.length?this.computeOverlaps2.apply(this,arguments):void this.computeOverlaps2(this.start,this.end,t,t.start,t.end,e)},jsts.index.chain.MonotoneChain.prototype.computeOverlaps2=function(t,e,o,n,r,i){var s=this.pts[t],a=this.pts[e],p=o.pts[n],u=o.pts[r];if(e-t===1&&r-n===1)return void i.overlap(this,t,o,n);if(i.tempEnv1.init(s,a),i.tempEnv2.init(p,u),i.tempEnv1.intersects(i.tempEnv2)){var l=parseInt((t+e)/2),g=parseInt((n+r)/2);l>t&&(g>n&&this.computeOverlaps2(t,l,o,n,g,i),r>g&&this.computeOverlaps2(t,l,o,g,r,i)),e>l&&(g>n&&this.computeOverlaps2(l,e,o,n,g,i),r>g&&this.computeOverlaps2(l,e,o,g,r,i))}},function(){var t=jsts.geom.Location,e=jsts.geom.Dimension;jsts.geom.IntersectionMatrix=function(o){var n=o;void 0===o||null===o?(this.matrix=[[],[],[]],this.setAll(e.FALSE)):\"string\"==typeof o?this.set(o):n instanceof jsts.geom.IntersectionMatrix&&(this.matrix[t.INTERIOR][t.INTERIOR]=n.matrix[t.INTERIOR][t.INTERIOR],this.matrix[t.INTERIOR][t.BOUNDARY]=n.matrix[t.INTERIOR][t.BOUNDARY],this.matrix[t.INTERIOR][t.EXTERIOR]=n.matrix[t.INTERIOR][t.EXTERIOR],this.matrix[t.BOUNDARY][t.INTERIOR]=n.matrix[t.BOUNDARY][t.INTERIOR],this.matrix[t.BOUNDARY][t.BOUNDARY]=n.matrix[t.BOUNDARY][t.BOUNDARY],this.matrix[t.BOUNDARY][t.EXTERIOR]=n.matrix[t.BOUNDARY][t.EXTERIOR],this.matrix[t.EXTERIOR][t.INTERIOR]=n.matrix[t.EXTERIOR][t.INTERIOR],this.matrix[t.EXTERIOR][t.BOUNDARY]=n.matrix[t.EXTERIOR][t.BOUNDARY],this.matrix[t.EXTERIOR][t.EXTERIOR]=n.matrix[t.EXTERIOR][t.EXTERIOR])},jsts.geom.IntersectionMatrix.prototype.matrix=null,jsts.geom.IntersectionMatrix.prototype.add=function(t){var e,o;for(e=0;3>e;e++)for(o=0;3>o;o++)this.setAtLeast(e,o,t.get(e,o))},jsts.geom.IntersectionMatrix.matches=function(t,o){return\"string\"==typeof t?jsts.geom.IntersectionMatrix.matches2.call(this,arguments):\"*\"===o?!0:\"T\"===o&&(t>=0||t===e.TRUE)?!0:\"F\"===o&&t===e.FALSE?!0:\"0\"===o&&t===e.P?!0:\"1\"===o&&t===e.L?!0:\"2\"===o&&t===e.A?!0:!1},jsts.geom.IntersectionMatrix.matches2=function(t,e){var o=new jsts.geom.IntersectionMatrix(t);return o.matches(e)},jsts.geom.IntersectionMatrix.prototype.set=function(t,e,o){return\"string\"==typeof t?void this.set2(t):void(this.matrix[t][e]=o)},jsts.geom.IntersectionMatrix.prototype.set2=function(t){for(var o=0;o<t.length();o++){var n=o/3,r=o%3;this.matrix[n][r]=e.toDimensionValue(t.charAt(o))}},jsts.geom.IntersectionMatrix.prototype.setAtLeast=function(t,e,o){return 1===arguments.length?void this.setAtLeast2(arguments[0]):void(this.matrix[t][e]<o&&(this.matrix[t][e]=o))},jsts.geom.IntersectionMatrix.prototype.setAtLeastIfValid=function(t,e,o){t>=0&&e>=0&&this.setAtLeast(t,e,o)},jsts.geom.IntersectionMatrix.prototype.setAtLeast2=function(t){var e;for(e=0;e<t.length;e++){var o=parseInt(e/3),n=parseInt(e%3);this.setAtLeast(o,n,jsts.geom.Dimension.toDimensionValue(t.charAt(e)))}},jsts.geom.IntersectionMatrix.prototype.setAll=function(t){var e,o;for(e=0;3>e;e++)for(o=0;3>o;o++)this.matrix[e][o]=t},jsts.geom.IntersectionMatrix.prototype.get=function(t,e){return this.matrix[t][e]},jsts.geom.IntersectionMatrix.prototype.isDisjoint=function(){return this.matrix[t.INTERIOR][t.INTERIOR]===e.FALSE&&this.matrix[t.INTERIOR][t.BOUNDARY]===e.FALSE&&this.matrix[t.BOUNDARY][t.INTERIOR]===e.FALSE&&this.matrix[t.BOUNDARY][t.BOUNDARY]===e.FALSE},jsts.geom.IntersectionMatrix.prototype.isIntersects=function(){return!this.isDisjoint()},jsts.geom.IntersectionMatrix.prototype.isTouches=function(o,n){return o>n?this.isTouches(n,o):o==e.A&&n==e.A||o==e.L&&n==e.L||o==e.L&&n==e.A||o==e.P&&n==e.A||o==e.P&&n==e.L?this.matrix[t.INTERIOR][t.INTERIOR]===e.FALSE&&(jsts.geom.IntersectionMatrix.matches(this.matrix[t.INTERIOR][t.BOUNDARY],\"T\")||jsts.geom.IntersectionMatrix.matches(this.matrix[t.BOUNDARY][t.INTERIOR],\"T\")||jsts.geom.IntersectionMatrix.matches(this.matrix[t.BOUNDARY][t.BOUNDARY],\"T\")):!1},jsts.geom.IntersectionMatrix.prototype.isCrosses=function(o,n){return o==e.P&&n==e.L||o==e.P&&n==e.A||o==e.L&&n==e.A?jsts.geom.IntersectionMatrix.matches(this.matrix[t.INTERIOR][t.INTERIOR],\"T\")&&jsts.geom.IntersectionMatrix.matches(this.matrix[t.INTERIOR][t.EXTERIOR],\"T\"):o==e.L&&n==e.P||o==e.A&&n==e.P||o==e.A&&n==e.L?jsts.geom.IntersectionMatrix.matches(matrix[t.INTERIOR][t.INTERIOR],\"T\")&&jsts.geom.IntersectionMatrix.matches(this.matrix[t.EXTERIOR][t.INTERIOR],\"T\"):o===e.L&&n===e.L?0===this.matrix[t.INTERIOR][t.INTERIOR]:!1},jsts.geom.IntersectionMatrix.prototype.isWithin=function(){return jsts.geom.IntersectionMatrix.matches(this.matrix[t.INTERIOR][t.INTERIOR],\"T\")&&this.matrix[t.INTERIOR][t.EXTERIOR]==e.FALSE&&this.matrix[t.BOUNDARY][t.EXTERIOR]==e.FALSE},jsts.geom.IntersectionMatrix.prototype.isContains=function(){return jsts.geom.IntersectionMatrix.matches(this.matrix[t.INTERIOR][t.INTERIOR],\"T\")&&this.matrix[t.EXTERIOR][t.INTERIOR]==e.FALSE&&this.matrix[t.EXTERIOR][t.BOUNDARY]==e.FALSE},jsts.geom.IntersectionMatrix.prototype.isCovers=function(){var o=jsts.geom.IntersectionMatrix.matches(this.matrix[t.INTERIOR][t.INTERIOR],\"T\")||jsts.geom.IntersectionMatrix.matches(this.matrix[t.INTERIOR][t.BOUNDARY],\"T\")||jsts.geom.IntersectionMatrix.matches(this.matrix[t.BOUNDARY][t.INTERIOR],\"T\")||jsts.geom.IntersectionMatrix.matches(this.matrix[t.BOUNDARY][t.BOUNDARY],\"T\");return o&&this.matrix[t.EXTERIOR][t.INTERIOR]==e.FALSE&&this.matrix[t.EXTERIOR][t.BOUNDARY]==e.FALSE},jsts.geom.IntersectionMatrix.prototype.isCoveredBy=function(){var o=jsts.geom.IntersectionMatrix.matches(this.matrix[t.INTERIOR][t.INTERIOR],\"T\")||jsts.geom.IntersectionMatrix.matches(this.matrix[t.INTERIOR][t.BOUNDARY],\"T\")||jsts.geom.IntersectionMatrix.matches(this.matrix[t.BOUNDARY][t.INTERIOR],\"T\")||jsts.geom.IntersectionMatrix.matches(this.matrix[t.BOUNDARY][t.BOUNDARY],\"T\");return o&&this.matrix[t.INTERIOR][t.EXTERIOR]===e.FALSE&&this.matrix[t.BOUNDARY][t.EXTERIOR]===e.FALSE},jsts.geom.IntersectionMatrix.prototype.isEquals=function(o,n){return o!==n?!1:jsts.geom.IntersectionMatrix.matches(this.matrix[t.INTERIOR][t.INTERIOR],\"T\")&&this.matrix[t.EXTERIOR][t.INTERIOR]===e.FALSE&&this.matrix[t.INTERIOR][t.EXTERIOR]===e.FALSE&&this.matrix[t.EXTERIOR][t.BOUNDARY]===e.FALSE&&this.matrix[t.BOUNDARY][t.EXTERIOR]===e.FALSE},jsts.geom.IntersectionMatrix.prototype.isOverlaps=function(o,n){return o==e.P&&n===e.P||o==e.A&&n===e.A?jsts.geom.IntersectionMatrix.matches(this.matrix[t.INTERIOR][t.INTERIOR],\"T\")&&jsts.geom.IntersectionMatrix.matches(this.matrix[t.INTERIOR][t.EXTERIOR],\"T\")&&jsts.geom.IntersectionMatrix.matches(this.matrix[t.EXTERIOR][t.INTERIOR],\"T\"):o===e.L&&n===e.L?1==this.matrix[t.INTERIOR][t.INTERIOR]&&jsts.geom.IntersectionMatrix.matches(this.matrix[t.INTERIOR][t.EXTERIOR],\"T\")&&jsts.geom.IntersectionMatrix.matches(this.matrix[t.EXTERIOR][t.INTERIOR],\"T\"):!1},jsts.geom.IntersectionMatrix.prototype.matches=function(t){if(9!=t.length)throw new jsts.error.IllegalArgumentException(\"Should be length 9: \"+t);for(var e=0;3>e;e++)for(var o=0;3>o;o++)if(!jsts.geom.IntersectionMatrix.matches(this.matrix[e][o],t.charAt(3*e+o)))return!1;return!0},jsts.geom.IntersectionMatrix.prototype.transpose=function(){var t=matrix[1][0];return this.matrix[1][0]=this.matrix[0][1],this.matrix[0][1]=t,t=this.matrix[2][0],this.matrix[2][0]=this.matrix[0][2],this.matrix[0][2]=t,t=this.matrix[2][1],this.matrix[2][1]=this.matrix[1][2],this.matrix[1][2]=t,this},jsts.geom.IntersectionMatrix.prototype.toString=function(){var t,o,n=\"\";for(t=0;3>t;t++)for(o=0;3>o;o++)n+=e.toDimensionSymbol(this.matrix[t][o]);return n}}(),jsts.triangulate.quadedge.LastFoundQuadEdgeLocator=function(t){this.subdiv=t,this.lastEdge=null,this.init()},jsts.triangulate.quadedge.LastFoundQuadEdgeLocator.prototype.init=function(){this.lastEdge=this.findEdge()},jsts.triangulate.quadedge.LastFoundQuadEdgeLocator.prototype.findEdge=function(){var t=this.subdiv.getEdges();return t[0]},jsts.triangulate.quadedge.LastFoundQuadEdgeLocator.prototype.locate=function(t){this.lastEdge.isLive()||this.init();var e=this.subdiv.locateFromEdge(t,this.lastEdge);return this.lastEdge=e,e},jsts.noding.SegmentNodeList=function(t){this.nodeMap=new javascript.util.TreeMap,this.edge=t},jsts.noding.SegmentNodeList.prototype.nodeMap=null,jsts.noding.SegmentNodeList.prototype.iterator=function(){return this.nodeMap.values().iterator()},jsts.noding.SegmentNodeList.prototype.edge=null,jsts.noding.SegmentNodeList.prototype.getEdge=function(){return this.edge},jsts.noding.SegmentNodeList.prototype.add=function(t,e){var o=new jsts.noding.SegmentNode(this.edge,t,e,this.edge.getSegmentOctant(e)),n=this.nodeMap.get(o);return null!==n?(jsts.util.Assert.isTrue(n.coord.equals2D(t),\"Found equal nodes with different coordinates\"),n):(this.nodeMap.put(o,o),o)},jsts.noding.SegmentNodeList.prototype.addEndpoints=function(){var t=this.edge.size()-1;this.add(this.edge.getCoordinate(0),0),this.add(this.edge.getCoordinate(t),t)},jsts.noding.SegmentNodeList.prototype.addCollapsedNodes=function(){var t=[];this.findCollapsesFromInsertedNodes(t),this.findCollapsesFromExistingVertices(t);for(var e=0;e<t.length;e++){var o=t[e];this.add(this.edge.getCoordinate(o),o)}},jsts.noding.SegmentNodeList.prototype.findCollapsesFromExistingVertices=function(t){for(var e=0;e<this.edge.size()-2;e++){var o=this.edge.getCoordinate(e),n=(this.edge.getCoordinate(e+1),this.edge.getCoordinate(e+2));o.equals2D(n)&&t.push(e+1)}},jsts.noding.SegmentNodeList.prototype.findCollapsesFromInsertedNodes=function(t){for(var e=[null],o=this.iterator(),n=o.next();o.hasNext();){var r=o.next(),i=this.findCollapseIndex(n,r,e);i&&t.push(e[0]),n=r}},jsts.noding.SegmentNodeList.prototype.findCollapseIndex=function(t,e,o){if(!t.coord.equals2D(e.coord))return!1;var n=e.segmentIndex-t.segmentIndex;return e.isInterior()||n--,1===n?(o[0]=t.segmentIndex+1,!0):!1},jsts.noding.SegmentNodeList.prototype.addSplitEdges=function(t){this.addEndpoints(),this.addCollapsedNodes();for(var e=this.iterator(),o=e.next();e.hasNext();){var n=e.next(),r=this.createSplitEdge(o,n);t.add(r),o=n}},jsts.noding.SegmentNodeList.prototype.checkSplitEdgesCorrectness=function(t){var e=edge.getCoordinates(),o=t[0],n=o.getCoordinate(0);if(!n.equals2D(e[0]))throw new Error(\"bad split edge start point at \"+n);var r=t[t.length-1],i=r.getCoordinates(),s=i[i.length-1];if(!s.equals2D(e[e.length-1]))throw new Error(\"bad split edge end point at \"+s)},jsts.noding.SegmentNodeList.prototype.createSplitEdge=function(t,e){var o=e.segmentIndex-t.segmentIndex+2,n=this.edge.getCoordinate(e.segmentIndex),r=e.isInterior()||!e.coord.equals2D(n);r||o--;var i=[],s=0;i[s++]=new jsts.geom.Coordinate(t.coord);for(var a=t.segmentIndex+1;a<=e.segmentIndex;a++)i[s++]=this.edge.getCoordinate(a);return r&&(i[s]=e.coord),new jsts.noding.NodedSegmentString(i,this.edge.getData())},jsts.io.WKTWriter=function(){this.parser=new jsts.io.WKTParser(this.geometryFactory);\n},jsts.io.WKTWriter.prototype.write=function(t){var e=this.parser.write(t);return e},jsts.io.WKTWriter.toLineString=function(t,e){if(2!==arguments.length)throw new jsts.error.NotImplementedError;return\"LINESTRING ( \"+t.x+\" \"+t.y+\", \"+e.x+\" \"+e.y+\" )\"},jsts.io.WKTReader=function(t){this.geometryFactory=t||new jsts.geom.GeometryFactory,this.precisionModel=this.geometryFactory.getPrecisionModel(),this.parser=new jsts.io.WKTParser(this.geometryFactory)},jsts.io.WKTReader.prototype.read=function(t){var e=this.parser.read(t);return this.precisionModel.getType()===jsts.geom.PrecisionModel.FIXED&&this.reducePrecision(e),e},jsts.io.WKTReader.prototype.reducePrecision=function(t){var e,o;if(t.coordinate)this.precisionModel.makePrecise(t.coordinate);else if(t.points)for(e=0,o=t.points.length;o>e;e++)this.precisionModel.makePrecise(t.points[e]);else if(t.geometries)for(e=0,o=t.geometries.length;o>e;e++)this.reducePrecision(t.geometries[e])},jsts.triangulate.quadedge.QuadEdgeSubdivision=function(t,e){this.tolerance=e,this.edgeCoincidenceTolerance=e/jsts.triangulate.quadedge.QuadEdgeSubdivision.EDGE_COINCIDENCE_TOL_FACTOR,this.visitedKey=0,this.quadEdges=[],this.startingEdge,this.tolerance,this.edgeCoincidenceTolerance,this.frameEnv,this.locator=null,this.seg=new jsts.geom.LineSegment,this.triEdges=new Array(3),this.frameVertex=new Array(3),this.createFrame(t),this.startingEdge=this.initSubdiv(),this.locator=new jsts.triangulate.quadedge.LastFoundQuadEdgeLocator(this)},jsts.triangulate.quadedge.QuadEdgeSubdivision.EDGE_COINCIDENCE_TOL_FACTOR=1e3,jsts.triangulate.quadedge.QuadEdgeSubdivision.getTriangleEdges=function(t,e){if(e[0]=t,e[1]=e[0].lNext(),e[2]=e[1].lNext(),e[2].lNext()!=e[0])throw new jsts.IllegalArgumentError(\"Edges do not form a triangle\")},jsts.triangulate.quadedge.QuadEdgeSubdivision.prototype.createFrame=function(t){var e,o,n;e=t.getWidth(),o=t.getHeight(),n=0,n=e>o?10*e:10*o,this.frameVertex[0]=new jsts.triangulate.quadedge.Vertex((t.getMaxX()+t.getMinX())/2,t.getMaxY()+n),this.frameVertex[1]=new jsts.triangulate.quadedge.Vertex(t.getMinX()-n,t.getMinY()-n),this.frameVertex[2]=new jsts.triangulate.quadedge.Vertex(t.getMaxX()+n,t.getMinY()-n),this.frameEnv=new jsts.geom.Envelope(this.frameVertex[0].getCoordinate(),this.frameVertex[1].getCoordinate()),this.frameEnv.expandToInclude(this.frameVertex[2].getCoordinate())},jsts.triangulate.quadedge.QuadEdgeSubdivision.prototype.initSubdiv=function(){var t,e,o;return t=this.makeEdge(this.frameVertex[0],this.frameVertex[1]),e=this.makeEdge(this.frameVertex[1],this.frameVertex[2]),jsts.triangulate.quadedge.QuadEdge.splice(t.sym(),e),o=this.makeEdge(this.frameVertex[2],this.frameVertex[0]),jsts.triangulate.quadedge.QuadEdge.splice(e.sym(),o),jsts.triangulate.quadedge.QuadEdge.splice(o.sym(),t),t},jsts.triangulate.quadedge.QuadEdgeSubdivision.prototype.getTolerance=function(){return this.tolerance},jsts.triangulate.quadedge.QuadEdgeSubdivision.prototype.getEnvelope=function(){return new jsts.geom.Envelope(this.frameEnv)},jsts.triangulate.quadedge.QuadEdgeSubdivision.prototype.getEdges=function(){return arguments.length>0?this.getEdgesByFactory(arguments[0]):this.quadEdges},jsts.triangulate.quadedge.QuadEdgeSubdivision.prototype.setLocator=function(t){this.locator=t},jsts.triangulate.quadedge.QuadEdgeSubdivision.prototype.makeEdge=function(t,e){var o=jsts.triangulate.quadedge.QuadEdge.makeEdge(t,e);return this.quadEdges.push(o),o},jsts.triangulate.quadedge.QuadEdgeSubdivision.prototype.connect=function(t,e){var o=jsts.triangulate.quadedge.QuadEdge.connect(t,e);return this.quadEdges.push(o),o},jsts.triangulate.quadedge.QuadEdgeSubdivision.prototype.delete_jsts=function(t){jsts.triangulate.quadedge.QuadEdge.splice(t,t.oPrev()),jsts.triangulate.quadedge.QuadEdge.splice(t.sym(),t.sym().oPrev());var e,o,n;t.eSym=t.sym(),o=t.rot,n=t.rot.sym();var r=this.quadEdges.indexOf(t);-1!==r&&this.quadEdges.splice(r,1),r=this.quadEdges.indexOf(e),-1!==r&&this.quadEdges.splice(r,1),r=this.quadEdges.indexOf(o),-1!==r&&this.quadEdges.splice(r,1),r=this.quadEdges.indexOf(n),-1!==r&&this.quadEdges.splice(r,1),t.delete_jsts(),e.delete_jsts(),o.delete_jsts(),n.delete_jsts()},jsts.triangulate.quadedge.QuadEdgeSubdivision.prototype.locateFromEdge=function(t,e){var o,n=0,r=this.quadEdges.length;for(o=e;;){if(n++,n>r)throw new jsts.error.LocateFailureError(o.toLineSegment());if(t.equals(o.orig())||t.equals(o.dest()))break;if(t.rightOf(o))o=o.sym();else if(t.rightOf(o.oNext())){if(t.rightOf(o.dPrev()))break;o=o.dPrev()}else o=o.oNext()}return o},jsts.triangulate.quadedge.QuadEdgeSubdivision.prototype.locate=function(){return 1===arguments.length?arguments[0]instanceof jsts.triangulate.quadedge.Vertex?this.locateByVertex(arguments[0]):this.locateByCoordinate(arguments[0]):this.locateByCoordinates(arguments[0],arguments[1])},jsts.triangulate.quadedge.QuadEdgeSubdivision.prototype.locateByVertex=function(t){return this.locator.locate(t)},jsts.triangulate.quadedge.QuadEdgeSubdivision.prototype.locateByCoordinate=function(t){return this.locator.locate(new jsts.triangulate.quadedge.Vertex(t))},jsts.triangulate.quadedge.QuadEdgeSubdivision.prototype.locateByCoordinates=function(t,e){var o,n,r,o=this.locator.locate(new jsts.triangulate.quadedge.Vertex(t));if(null===o)return null;n=o,o.dest().getCoordinate().equals2D(t)&&(n=o.sym()),r=n;do{if(r.dest().getCoordinate().equals2D(e))return r;r=r.oNext()}while(r!=n);return null},jsts.triangulate.quadedge.QuadEdgeSubdivision.prototype.insertSite=function(t){var e,o,n;if(e=this.locate(t),t.equals(e.orig(),this.tolerance)||t.equals(e.dest(),this.tolerance))return e;o=this.makeEdge(e.orig(),t),jsts.triangulate.quadedge.QuadEdge.splice(o,e),n=o;do o=this.connect(e,o.sym()),e=o.oPrev();while(e.lNext()!=n);return n},jsts.triangulate.quadedge.QuadEdgeSubdivision.prototype.isFrameEdge=function(t){return this.isFrameVertex(t.orig())||this.isFrameVertex(t.dest())?!0:!1},jsts.triangulate.quadedge.QuadEdgeSubdivision.prototype.isFrameBorderEdge=function(t){var e,o,n,r;return e=new Array(3),this.getTriangleEdges(t,e),o=new Array(3),this.getTriangleEdges(t.sym(),o),n=t.lNext().dest(),this.isFrameVertex(n)?!0:(r=t.sym().lNext().dest(),this.isFrameVertex(r)?!0:!1)},jsts.triangulate.quadedge.QuadEdgeSubdivision.prototype.isFrameVertex=function(t){return t.equals(this.frameVertex[0])?!0:t.equals(this.frameVertex[1])?!0:t.equals(this.frameVertex[2])?!0:!1},jsts.triangulate.quadedge.QuadEdgeSubdivision.prototype.isOnEdge=function(t,e){this.seg.setCoordinates(t.orig().getCoordinate(),t.dest().getCoordinate());var o=this.seg.distance(e);return o<this.edgeCoincidenceTolerance},jsts.triangulate.quadedge.QuadEdgeSubdivision.prototype.isVertexOfEdge=function(t,e){return e.equals(t.orig(),this.tolerance)||e.equals(t.dest(),this.tolerance)?!0:!1},jsts.triangulate.quadedge.QuadEdgeSubdivision.prototype.getVertices=function(t){var e,o,n,r,i,s=[];for(e=0,o=this.quadEdges.length,e;o>e;e++)n=this.quadEdges[e],r=n.orig(),(t||!this.isFrameVertex(r))&&s.push(r),i=n.dest(),(t||!this.isFrameVertex(i))&&s.push(i);return s},jsts.triangulate.quadedge.QuadEdgeSubdivision.prototype.getVertexUniqueEdges=function(t){var e,o,n,r,i,s,a,p;for(e=[],o=[],n=0,r=this.quadEdges.length,n;r>n;n++)i=this.quadEdges[n],s=i.orig(),-1===o.indexOf(s)&&(o.push(s),(t||!this.isFrameVertex(s))&&e.push(i)),a=i.sym(),p=a.orig(),-1===o.indexOf(p)&&(o.push(p),(t||!this.isFrameVertex(p))&&e.push(a));return e},jsts.triangulate.quadedge.QuadEdgeSubdivision.prototype.getPrimaryEdges=function(t){this.visitedKey++;var e,o,n,r,i;for(e=[],o=[],o.push(this.startingEdge),n=[];o.length>0;)r=o.pop(),-1===n.indexOf(r)&&(i=r.getPrimary(),(t||!this.isFrameEdge(i))&&e.push(i),o.push(r.oNext()),o.push(r.sym().oNext()),n.push(r),n.push(r.sym()));return e},jsts.triangulate.quadedge.QuadEdgeSubdivision.prototype.visitTriangles=function(t,e){this.visitedKey++;var o,n,r,i;for(o=[],o.push(this.startingEdge),n=[];o.length>0;)r=o.pop(),-1===n.indexOf(r)&&(i=this.fetchTriangleToVisit(r,o,e,n),null!==i&&t.visit(i))},jsts.triangulate.quadedge.QuadEdgeSubdivision.prototype.fetchTriangleToVisit=function(t,e,o,n){var r,i,s,a;r=t,i=0,s=!1;do this.triEdges[i]=r,this.isFrameEdge(r)&&(s=!0),a=r.sym(),-1===n.indexOf(a)&&e.push(a),n.push(r),i++,r=r.lNext();while(r!==t);return s&&!o?null:this.triEdges},jsts.triangulate.quadedge.QuadEdgeSubdivision.prototype.getTriangleEdges=function(t){var e=new jsts.triangulate.quadedge.TriangleEdgesListVisitor;return this.visitTriangles(e,t),e.getTriangleEdges()},jsts.triangulate.quadedge.QuadEdgeSubdivision.prototype.getTriangleVertices=function(t){var e=new TriangleVertexListVisitor;return this.visitTriangles(e,t),e.getTriangleVertices()},jsts.triangulate.quadedge.QuadEdgeSubdivision.prototype.getTriangleCoordinates=function(t){var e=new jsts.triangulate.quadedge.TriangleCoordinatesVisitor;return this.visitTriangles(e,t),e.getTriangles()},jsts.triangulate.quadedge.QuadEdgeSubdivision.prototype.getEdgesByFactory=function(t){var e,o,n,r,i,s;for(e=this.getPrimaryEdges(!1),o=[],n=0,r=e.length,n;r>n;n++)i=e[n],s=[],s[0]=i.orig().getCoordinate(),s[1]=i.dest().getCoordinate(),o[n]=t.createLineString(s);return t.createMultiLineString(o)},jsts.triangulate.quadedge.QuadEdgeSubdivision.prototype.getTriangles=function(t){var e,o,n,r,i;for(e=this.getTriangleCoordinates(!1),o=new Array(e.length),r=0,i=e.length,r;i>r;r++)n=e[r],o[r]=t.createPolygon(t.createLinearRing(n,null));return t.createGeometryCollection(o)},jsts.triangulate.quadedge.QuadEdgeSubdivision.prototype.getVoronoiDiagram=function(t){var e=this.getVoronoiCellPolygons(t);return t.createGeometryCollection(e)},jsts.triangulate.quadedge.QuadEdgeSubdivision.prototype.getVoronoiCellPolygons=function(t){this.visitTriangles(new jsts.triangulate.quadedge.TriangleCircumcentreVisitor,!0);var e,o,n,r,i;for(e=[],o=this.getVertexUniqueEdges(!1),n=0,r=o.length,n;r>n;n++)i=o[n],e.push(this.getVoronoiCellPolygon(i,t));return e},jsts.triangulate.quadedge.QuadEdgeSubdivision.prototype.getVoronoiCellPolygon=function(t,e){var o,n,r,i,s;o=[],startQE=t;do n=t.rot.orig().getCoordinate(),o.push(n),t=t.oPrev();while(t!==startQE);return r=new jsts.geom.CoordinateList([],!1),r.add(o,!1),r.closeRing(),r.size()<4&&r.add(r.get(r.size()-1),!0),i=e.createPolygon(e.createLinearRing(r.toArray()),null),s=startQE.orig(),i},jsts.triangulate.quadedge.TriangleCircumcentreVisitor=function(){},jsts.triangulate.quadedge.TriangleCircumcentreVisitor.prototype.visit=function(t){var e,o,n,r,i,s;for(e=t[0].orig().getCoordinate(),o=t[1].orig().getCoordinate(),n=t[2].orig().getCoordinate(),r=jsts.geom.Triangle.circumcentre(e,o,n),i=new jsts.triangulate.quadedge.Vertex(r),s=0;3>s;s++)t[s].rot.setOrig(i)},jsts.triangulate.quadedge.TriangleEdgesListVisitor=function(){this.triList=[]},jsts.triangulate.quadedge.TriangleEdgesListVisitor.prototype.visit=function(t){var e=t.concat();this.triList.push(e)},jsts.triangulate.quadedge.TriangleEdgesListVisitor.prototype.getTriangleEdges=function(){return this.triList},jsts.triangulate.quadedge.TriangleVertexListVisitor=function(){this.triList=[]},jsts.triangulate.quadedge.TriangleVertexListVisitor.prototype.visit=function(t){var e=[];e.push(trieEdges[0].orig()),e.push(trieEdges[1].orig()),e.push(trieEdges[2].orig()),this.triList.push(e)},jsts.triangulate.quadedge.TriangleVertexListVisitor.prototype.getTriangleVertices=function(){return this.triList},jsts.triangulate.quadedge.TriangleCoordinatesVisitor=function(){this.coordList=new jsts.geom.CoordinateList([],!1),this.triCoords=[]},jsts.triangulate.quadedge.TriangleCoordinatesVisitor.prototype.visit=function(t){this.coordList=new jsts.geom.CoordinateList([],!1);var e,o,n=0;for(n;3>n;n++)e=t[n].orig(),this.coordList.add(e.getCoordinate());if(this.coordList.size()>0){if(this.coordList.closeRing(),o=this.coordList.toArray(),4!==o.length)return;this.triCoords.push(o)}},jsts.triangulate.quadedge.TriangleCoordinatesVisitor.prototype.getTriangles=function(){return this.triCoords},jsts.operation.relate.EdgeEndBundle=function(){this.edgeEnds=[];var t=arguments[0]instanceof jsts.geomgraph.EdgeEnd?arguments[0]:arguments[1],e=t.getEdge(),o=t.getCoordinate(),n=t.getDirectedCoordinate(),r=new jsts.geomgraph.Label(t.getLabel());jsts.geomgraph.EdgeEnd.call(this,e,o,n,r),this.insert(t)},jsts.operation.relate.EdgeEndBundle.prototype=new jsts.geomgraph.EdgeEnd,jsts.operation.relate.EdgeEndBundle.prototype.edgeEnds=null,jsts.operation.relate.EdgeEndBundle.prototype.getLabel=function(){return this.label},jsts.operation.relate.EdgeEndBundle.prototype.getEdgeEnds=function(){return this.edgeEnds},jsts.operation.relate.EdgeEndBundle.prototype.insert=function(t){this.edgeEnds.push(t)},jsts.operation.relate.EdgeEndBundle.prototype.computeLabel=function(t){for(var e=!1,o=0;o<this.edgeEnds.length;o++){var n=this.edgeEnds[o];n.getLabel().isArea()&&(e=!0)}e?this.label=new jsts.geomgraph.Label(jsts.geom.Location.NONE,jsts.geom.Location.NONE,jsts.geom.Location.NONE):this.label=new jsts.geomgraph.Label(jsts.geom.Location.NONE);for(var o=0;2>o;o++)this.computeLabelOn(o,t),e&&this.computeLabelSides(o)},jsts.operation.relate.EdgeEndBundle.prototype.computeLabelOn=function(t,e){for(var o=0,n=!1,r=0;r<this.edgeEnds.length;r++){var i=this.edgeEnds[r],s=i.getLabel().getLocation(t);s==jsts.geom.Location.BOUNDARY&&o++,s==jsts.geom.Location.INTERIOR&&(n=!0)}var s=jsts.geom.Location.NONE;n&&(s=jsts.geom.Location.INTERIOR),o>0&&(s=jsts.geomgraph.GeometryGraph.determineBoundary(e,o)),this.label.setLocation(t,s)},jsts.operation.relate.EdgeEndBundle.prototype.computeLabelSides=function(t){this.computeLabelSide(t,jsts.geomgraph.Position.LEFT),this.computeLabelSide(t,jsts.geomgraph.Position.RIGHT)},jsts.operation.relate.EdgeEndBundle.prototype.computeLabelSide=function(t,e){for(var o=0;o<this.edgeEnds.length;o++){var n=this.edgeEnds[o];if(n.getLabel().isArea()){var r=n.getLabel().getLocation(t,e);if(r===jsts.geom.Location.INTERIOR)return void this.label.setLocation(t,e,jsts.geom.Location.INTERIOR);r===jsts.geom.Location.EXTERIOR&&this.label.setLocation(t,e,jsts.geom.Location.EXTERIOR)}}},jsts.operation.relate.EdgeEndBundle.prototype.updateIM=function(t){jsts.geomgraph.Edge.updateIM(this.label,t)},jsts.index.kdtree.KdTree=function(t){var e=0;void 0!==t&&(e=t),this.root=null,this.last=null,this.numberOfNodes=0,this.tolerance=e},jsts.index.kdtree.KdTree.prototype.insert=function(){return 1===arguments.length?this.insertCoordinate.apply(this,arguments[0]):this.insertWithData.apply(this,arguments[0],arguments[1])},jsts.index.kdtree.KdTree.prototype.insertCoordinate=function(t){return this.insertWithData(t,null)},jsts.index.kdtree.KdTree.prototype.insertWithData=function(t,e){if(null===this.root)return this.root=new jsts.index.kdtree.KdNode(t,e),this.root;for(var o=this.root,n=this.root,r=!0,i=!0;o!==last;){if(i=r?t.x<o.getX():t.y<o.getY(),n=o,o=i?o.getLeft():o.getRight(),null!==o){var s=t.distance(o.getCoordinate())<=this.tolerance;if(s)return o.increment(),o}r=!r}this.numberOfNodes=numberOfNodes+1;var a=new jsts.index.kdtree.KdNode(t,e);return a.setLeft(this.last),a.setRight(this.last),i?n.setLeft(a):n.setRight(a),a},jsts.index.kdtree.KdTree.prototype.queryNode=function(t,e,o,n,r){if(t!==e){var i,s,a;n?(i=o.getMinX(),s=o.getMaxX(),a=t.getX()):(i=o.getMinY(),s=o.getMaxY(),a=t.getY());var p=a>i,u=s>=a;p&&this.queryNode(t.getLeft(),e,o,!n,r),o.contains(t.getCoordinate())&&r.add(t),u&&this.queryNode(t.getRight(),e,o,!n,r)}},jsts.index.kdtree.KdTree.prototype.query=function(){return 1===arguments.length?this.queryByEnvelope.apply(this,arguments[0]):this.queryWithArray.apply(this,arguments[0],arguments[1])},jsts.index.kdtree.KdTree.prototype.queryByEnvelope=function(t){var e=[];return this.queryNode(this.root,this.last,t,!0,e),e},jsts.index.kdtree.KdTree.prototype.queryWithArray=function(t,e){this.queryNode(this.root,this.last,t,!0,e)},jsts.geom.Triangle=function(t,e,o){this.p0=t,this.p1=e,this.p2=o},jsts.geom.Triangle.isAcute=function(t,e,o){return jsts.algorithm.Angle.isAcute(t,e,o)&&jsts.algorithm.Angle.isAcute(e,o,t)&&jsts.algorithm.Angle.isAcute(o,t,e)?!0:!1},jsts.geom.Triangle.perpendicularBisector=function(t,e){var o,n,r,i;return o=e.x-t.x,n=e.y-t.y,r=new jsts.algorithm.HCoordinate(t.x+o/2,t.y+n/2,1),i=new jsts.algorithm.HCoordinate(t.x-n+o/2,t.y+o+n/2,1),new jsts.algorithm.HCoordinate(r,i)},jsts.geom.Triangle.circumcentre=function(t,e,o){var n,r,i,s,a,p,u,l,g,h,c;return n=o.x,r=o.y,i=t.x-n,s=t.y-r,a=e.x-n,p=e.y-r,u=2*jsts.geom.Triangle.det(i,s,a,p),l=jsts.geom.Triangle.det(s,i*i+s*s,p,a*a+p*p),g=jsts.geom.Triangle.det(i,i*i+s*s,a,a*a+p*p),h=n-l/u,c=r+g/u,new jsts.geom.Coordinate(h,c)},jsts.geom.Triangle.det=function(t,e,o,n){return t*n-e*o},jsts.geom.Triangle.inCentre=function(t,e,o){var n,r,i,s,a,p;return n=e.distance(o),r=t.distance(o),i=t.distance(e),s=n+r+i,a=(n*t.x+r*e.x+i*o.x)/s,p=(n*t.y+r*e.y+i*o.y)/s,new jsts.geom.Coordinate(a,p)},jsts.geom.Triangle.centroid=function(t,e,o){var n,r;return n=(t.x+e.x+o.x)/3,r=(t.y+e.y+o.y)/3,new jsts.geom.Coordinate(n,r)},jsts.geom.Triangle.longestSideLength=function(t,e,o){var n,r,i,s;return n=t.distance(e),r=e.distance(o),i=o.distance(t),s=n,r>s&&(s=r),i>s&&(s=i),s},jsts.geom.Triangle.angleBisector=function(t,e,o){var n,r,i,s,a,p;return n=e.distance(t),r=e.distance(o),i=n/(n+r),s=o.x-t.x,a=o.y-t.y,p=new jsts.geom.Coordinate(t.x+i*s,t.y+i*a)},jsts.geom.Triangle.area=function(t,e,o){return Math.abs(((o.x-t.x)*(e.y-t.y)-(e.x-t.x)*(o.y-t.y))/2)},jsts.geom.Triangle.signedArea=function(t,e,o){return((o.x-t.x)*(e.y-t.y)-(e.x-t.x)*(o.y-t.y))/2},jsts.geom.Triangle.prototype.inCentre=function(){return jsts.geom.Triangle.inCentre(this.p0,this.p1,this.p2)},jsts.noding.OrientedCoordinateArray=function(t){this.pts=t,this._orientation=jsts.noding.OrientedCoordinateArray.orientation(t)},jsts.noding.OrientedCoordinateArray.prototype.pts=null,jsts.noding.OrientedCoordinateArray.prototype._orientation=void 0,jsts.noding.OrientedCoordinateArray.orientation=function(t){return 1===jsts.geom.CoordinateArrays.increasingDirection(t)},jsts.noding.OrientedCoordinateArray.prototype.compareTo=function(t){var e=t,o=jsts.noding.OrientedCoordinateArray.compareOriented(this.pts,this._orientation,e.pts,e._orientation);return o},jsts.noding.OrientedCoordinateArray.compareOriented=function(t,e,o,n){for(var r=e?1:-1,i=n?1:-1,s=e?t.length:-1,a=n?o.length:-1,p=e?0:t.length-1,u=n?0:o.length-1;;){var l=t[p].compareTo(o[u]);if(0!==l)return l;p+=r,u+=i;var g=p===s,h=u===a;if(g&&!h)return-1;if(!g&&h)return 1;if(g&&h)return 0}},jsts.algorithm.CentralEndpointIntersector=function(t,e,o,n){this.pts=[t,e,o,n],this.compute()},jsts.algorithm.CentralEndpointIntersector.getIntersection=function(t,e,o,n){var r=new jsts.algorithm.CentralEndpointIntersector(t,e,o,n);return r.getIntersection()},jsts.algorithm.CentralEndpointIntersector.prototype.pts=null,jsts.algorithm.CentralEndpointIntersector.prototype.intPt=null,jsts.algorithm.CentralEndpointIntersector.prototype.compute=function(){var t=jsts.algorithm.CentralEndpointIntersector.average(this.pts);this.intPt=this.findNearestPoint(t,this.pts)},jsts.algorithm.CentralEndpointIntersector.prototype.getIntersection=function(){return this.intPt},jsts.algorithm.CentralEndpointIntersector.average=function(t){var e,o=new jsts.geom.Coordinate,n=t.length;for(e=0;n>e;e++)o.x+=t[e].x,o.y+=t[e].y;return n>0&&(o.x/=n,o.y/=n),o},jsts.algorithm.CentralEndpointIntersector.prototype.findNearestPoint=function(t,e){var o,n,r=Number.MAX_VALUE,i=null;for(o=0;o<e.length;o++)n=t.distance(e[o]),r>n&&(r=n,i=e[o]);return i},jsts.operation.buffer.BufferOp=function(t,e){this.argGeom=t,this.bufParams=e?e:new jsts.operation.buffer.BufferParameters},jsts.operation.buffer.BufferOp.MAX_PRECISION_DIGITS=12,jsts.operation.buffer.BufferOp.precisionScaleFactor=function(t,e,o){var n=t.getEnvelopeInternal(),r=Math.max(n.getHeight(),n.getWidth()),i=e>0?e:0,s=r+2*i,a=Math.log(s)/Math.log(10)+1,p=a-o,u=Math.pow(10,-p);return u},jsts.operation.buffer.BufferOp.bufferOp=function(t,e){if(arguments.length>2)return jsts.operation.buffer.BufferOp.bufferOp2.apply(this,arguments);var o=new jsts.operation.buffer.BufferOp(t),n=o.getResultGeometry(e);return n},jsts.operation.buffer.BufferOp.bufferOp2=function(t,e,o){if(arguments.length>3)return jsts.operation.buffer.BufferOp.bufferOp3.apply(this,arguments);var n=new jsts.operation.buffer.BufferOp(t,o),r=n.getResultGeometry(e);return r},jsts.operation.buffer.BufferOp.bufferOp3=function(t,e,o){if(arguments.length>4)return jsts.operation.buffer.BufferOp.bufferOp4.apply(this,arguments);var n=new jsts.operation.buffer.BufferOp(t);n.setQuadrantSegments(o);var r=n.getResultGeometry(e);return r},jsts.operation.buffer.BufferOp.bufferOp4=function(t,e,o,n){var r=new jsts.operation.buffer.BufferOp(t);r.setQuadrantSegments(o),r.setEndCapStyle(n);var i=r.getResultGeometry(e);return i},jsts.operation.buffer.BufferOp.prototype.argGeom=null,jsts.operation.buffer.BufferOp.prototype.distance=null,jsts.operation.buffer.BufferOp.prototype.bufParams=null,jsts.operation.buffer.BufferOp.prototype.resultGeometry=null,jsts.operation.buffer.BufferOp.prototype.setEndCapStyle=function(t){this.bufParams.setEndCapStyle(t)},jsts.operation.buffer.BufferOp.prototype.setQuadrantSegments=function(t){this.bufParams.setQuadrantSegments(t)},jsts.operation.buffer.BufferOp.prototype.getResultGeometry=function(t){return this.distance=t,this.computeGeometry(),this.resultGeometry},jsts.operation.buffer.BufferOp.prototype.computeGeometry=function(){if(this.bufferOriginalPrecision(),null===this.resultGeometry){var t=this.argGeom.getPrecisionModel();t.getType()===jsts.geom.PrecisionModel.FIXED?this.bufferFixedPrecision(t):this.bufferReducedPrecision()}},jsts.operation.buffer.BufferOp.prototype.bufferReducedPrecision=function(){var t,e=null;for(t=jsts.operation.buffer.BufferOp.MAX_PRECISION_DIGITS;t>=0;t--){try{this.bufferReducedPrecision2(t)}catch(o){e=o}if(null!==this.resultGeometry)return}throw e},jsts.operation.buffer.BufferOp.prototype.bufferOriginalPrecision=function(){try{var t=new jsts.operation.buffer.BufferBuilder(this.bufParams);this.resultGeometry=t.buffer(this.argGeom,this.distance)}catch(e){}},jsts.operation.buffer.BufferOp.prototype.bufferReducedPrecision2=function(t){var e=jsts.operation.buffer.BufferOp.precisionScaleFactor(this.argGeom,this.distance,t),o=new jsts.geom.PrecisionModel(e);this.bufferFixedPrecision(o)},jsts.operation.buffer.BufferOp.prototype.bufferFixedPrecision=function(t){var e=new jsts.noding.ScaledNoder(new jsts.noding.snapround.MCIndexSnapRounder(new jsts.geom.PrecisionModel(1)),t.getScale()),o=new jsts.operation.buffer.BufferBuilder(this.bufParams);o.setWorkingPrecisionModel(t),o.setNoder(e),this.resultGeometry=o.buffer(this.argGeom,this.distance)},function(){var t=jsts.geom.Location,e=jsts.geomgraph.Position,o=jsts.util.Assert;jsts.geomgraph.GeometryGraph=function(t,e,o){jsts.geomgraph.PlanarGraph.call(this),this.lineEdgeMap=new javascript.util.HashMap,this.ptLocator=new jsts.algorithm.PointLocator,this.argIndex=t,this.parentGeom=e,this.boundaryNodeRule=o||jsts.algorithm.BoundaryNodeRule.OGC_SFS_BOUNDARY_RULE,null!==e&&this.add(e)},jsts.geomgraph.GeometryGraph.prototype=new jsts.geomgraph.PlanarGraph,jsts.geomgraph.GeometryGraph.constructor=jsts.geomgraph.GeometryGraph,jsts.geomgraph.GeometryGraph.prototype.createEdgeSetIntersector=function(){return new jsts.geomgraph.index.SimpleMCSweepLineIntersector},jsts.geomgraph.GeometryGraph.determineBoundary=function(e,o){return e.isInBoundary(o)?t.BOUNDARY:t.INTERIOR},jsts.geomgraph.GeometryGraph.prototype.parentGeom=null,jsts.geomgraph.GeometryGraph.prototype.lineEdgeMap=null,jsts.geomgraph.GeometryGraph.prototype.boundaryNodeRule=null,jsts.geomgraph.GeometryGraph.prototype.useBoundaryDeterminationRule=!0,jsts.geomgraph.GeometryGraph.prototype.argIndex=null,jsts.geomgraph.GeometryGraph.prototype.boundaryNodes=null,jsts.geomgraph.GeometryGraph.prototype.hasTooFewPoints=!1,jsts.geomgraph.GeometryGraph.prototype.invalidPoint=null,jsts.geomgraph.GeometryGraph.prototype.areaPtLocator=null,jsts.geomgraph.GeometryGraph.prototype.ptLocator=null,jsts.geomgraph.GeometryGraph.prototype.getGeometry=function(){return this.parentGeom},jsts.geomgraph.GeometryGraph.prototype.getBoundaryNodes=function(){return null===this.boundaryNodes&&(this.boundaryNodes=this.nodes.getBoundaryNodes(this.argIndex)),this.boundaryNodes},jsts.geomgraph.GeometryGraph.prototype.getBoundaryNodeRule=function(){return this.boundaryNodeRule},jsts.geomgraph.GeometryGraph.prototype.findEdge=function(t){return this.lineEdgeMap.get(t)},jsts.geomgraph.GeometryGraph.prototype.computeSplitEdges=function(t){for(var e=this.edges.iterator();e.hasNext();){var o=e.next();o.eiList.addSplitEdges(t)}},jsts.geomgraph.GeometryGraph.prototype.add=function(t){if(!t.isEmpty())if(t instanceof jsts.geom.MultiPolygon&&(this.useBoundaryDeterminationRule=!1),t instanceof jsts.geom.Polygon)this.addPolygon(t);else if(t instanceof jsts.geom.LineString)this.addLineString(t);else if(t instanceof jsts.geom.Point)this.addPoint(t);else if(t instanceof jsts.geom.MultiPoint)this.addCollection(t);else if(t instanceof jsts.geom.MultiLineString)this.addCollection(t);else if(t instanceof jsts.geom.MultiPolygon)this.addCollection(t);else{if(!(t instanceof jsts.geom.GeometryCollection))throw new jsts.error.IllegalArgumentError(\"Geometry type not supported.\");this.addCollection(t)}},jsts.geomgraph.GeometryGraph.prototype.addCollection=function(t){for(var e=0;e<t.getNumGeometries();e++){var o=t.getGeometryN(e);this.add(o)}},jsts.geomgraph.GeometryGraph.prototype.addEdge=function(e){this.insertEdge(e);var o=e.getCoordinates();this.insertPoint(this.argIndex,o[0],t.BOUNDARY),this.insertPoint(this.argIndex,o[o.length-1],t.BOUNDARY)},jsts.geomgraph.GeometryGraph.prototype.addPoint=function(e){var o=e.getCoordinate();this.insertPoint(this.argIndex,o,t.INTERIOR)},jsts.geomgraph.GeometryGraph.prototype.addLineString=function(e){var n=jsts.geom.CoordinateArrays.removeRepeatedPoints(e.getCoordinates());if(n.length<2)return this.hasTooFewPoints=!0,void(this.invalidPoint=coords[0]);var r=new jsts.geomgraph.Edge(n,new jsts.geomgraph.Label(this.argIndex,t.INTERIOR));this.lineEdgeMap.put(e,r),this.insertEdge(r),o.isTrue(n.length>=2,\"found LineString with single point\"),this.insertBoundaryPoint(this.argIndex,n[0]),this.insertBoundaryPoint(this.argIndex,n[n.length-1])},jsts.geomgraph.GeometryGraph.prototype.addPolygonRing=function(e,o,n){if(!e.isEmpty()){var r=jsts.geom.CoordinateArrays.removeRepeatedPoints(e.getCoordinates());if(r.length<4)return this.hasTooFewPoints=!0,void(this.invalidPoint=r[0]);var i=o,s=n;jsts.algorithm.CGAlgorithms.isCCW(r)&&(i=n,s=o);var a=new jsts.geomgraph.Edge(r,new jsts.geomgraph.Label(this.argIndex,t.BOUNDARY,i,s));this.lineEdgeMap.put(e,a),this.insertEdge(a),this.insertPoint(this.argIndex,r[0],t.BOUNDARY)}},jsts.geomgraph.GeometryGraph.prototype.addPolygon=function(e){this.addPolygonRing(e.getExteriorRing(),t.EXTERIOR,t.INTERIOR);for(var o=0;o<e.getNumInteriorRing();o++){var n=e.getInteriorRingN(o);this.addPolygonRing(n,t.INTERIOR,t.EXTERIOR)}},jsts.geomgraph.GeometryGraph.prototype.computeEdgeIntersections=function(t,e,o){var n=new jsts.geomgraph.index.SegmentIntersector(e,o,!0);n.setBoundaryNodes(this.getBoundaryNodes(),t.getBoundaryNodes());var r=this.createEdgeSetIntersector();return r.computeIntersections(this.edges,t.edges,n),n},jsts.geomgraph.GeometryGraph.prototype.computeSelfNodes=function(t,e){var o=new jsts.geomgraph.index.SegmentIntersector(t,!0,!1),n=this.createEdgeSetIntersector();return!e&&(this.parentGeom instanceof jsts.geom.LinearRing||this.parentGeom instanceof jsts.geom.Polygon||this.parentGeom instanceof jsts.geom.MultiPolygon)?n.computeIntersections(this.edges,o,!1):n.computeIntersections(this.edges,o,!0),this.addSelfIntersectionNodes(this.argIndex),o},jsts.geomgraph.GeometryGraph.prototype.insertPoint=function(t,e,o){var n=this.nodes.addNode(e),r=n.getLabel();null==r?n.label=new jsts.geomgraph.Label(t,o):r.setLocation(t,o)},jsts.geomgraph.GeometryGraph.prototype.insertBoundaryPoint=function(o,n){var r=this.nodes.addNode(n),i=r.getLabel(),s=1,a=t.NONE;null!==i&&(a=i.getLocation(o,e.ON)),a===t.BOUNDARY&&s++;var p=jsts.geomgraph.GeometryGraph.determineBoundary(this.boundaryNodeRule,s);i.setLocation(o,p)},jsts.geomgraph.GeometryGraph.prototype.addSelfIntersectionNodes=function(t){for(var e=this.edges.iterator();e.hasNext();)for(var o=e.next(),n=o.getLabel().getLocation(t),r=o.eiList.iterator();r.hasNext();){var i=r.next();this.addSelfIntersectionNode(t,i.coord,n)}},jsts.geomgraph.GeometryGraph.prototype.addSelfIntersectionNode=function(e,o,n){this.isBoundaryNode(e,o)||(n===t.BOUNDARY&&this.useBoundaryDeterminationRule?this.insertBoundaryPoint(e,o):this.insertPoint(e,o,n))},jsts.geomgraph.GeometryGraph.prototype.getInvalidPoint=function(){return this.invalidPoint}}(),jsts.operation.buffer.OffsetSegmentString=function(){this.ptList=[]},jsts.operation.buffer.OffsetSegmentString.prototype.ptList=null,jsts.operation.buffer.OffsetSegmentString.prototype.precisionModel=null,jsts.operation.buffer.OffsetSegmentString.prototype.minimimVertexDistance=0,jsts.operation.buffer.OffsetSegmentString.prototype.setPrecisionModel=function(t){this.precisionModel=t},jsts.operation.buffer.OffsetSegmentString.prototype.setMinimumVertexDistance=function(t){this.minimimVertexDistance=t},jsts.operation.buffer.OffsetSegmentString.prototype.addPt=function(t){var e=new jsts.geom.Coordinate(t);this.precisionModel.makePrecise(e),this.isRedundant(e)||this.ptList.push(e)},jsts.operation.buffer.OffsetSegmentString.prototype.addPts=function(t,e){if(e)for(var o=0;o<t.length;o++)this.addPt(t[o]);else for(var o=t.length-1;o>=0;o--)this.addPt(t[o])},jsts.operation.buffer.OffsetSegmentString.prototype.isRedundant=function(t){if(this.ptList.length<1)return!1;var e=this.ptList[this.ptList.length-1],o=t.distance(e);return o<this.minimimVertexDistance?!0:!1},jsts.operation.buffer.OffsetSegmentString.prototype.closeRing=function(){if(!(this.ptList.length<1)){var t=new jsts.geom.Coordinate(this.ptList[0]),e=this.ptList[this.ptList.length-1],o=null;this.ptList.length>=2&&(o=this.ptList[this.ptList.length-2]),t.equals(e)||this.ptList.push(t)}},jsts.operation.buffer.OffsetSegmentString.prototype.reverse=function(){},jsts.operation.buffer.OffsetSegmentString.prototype.getCoordinates=function(){return this.ptList},jsts.algorithm.distance.PointPairDistance=function(){this.pt=[new jsts.geom.Coordinate,new jsts.geom.Coordinate]},jsts.algorithm.distance.PointPairDistance.prototype.pt=null,jsts.algorithm.distance.PointPairDistance.prototype.distance=NaN,jsts.algorithm.distance.PointPairDistance.prototype.isNull=!0,jsts.algorithm.distance.PointPairDistance.prototype.initialize=function(t,e,o){return void 0===t?void(this.isNull=!0):(this.pt[0].setCoordinate(t),this.pt[1].setCoordinate(e),this.distance=void 0!==o?o:t.distance(e),void(this.isNull=!1))},jsts.algorithm.distance.PointPairDistance.prototype.getDistance=function(){return this.distance},jsts.algorithm.distance.PointPairDistance.prototype.getCoordinates=function(){return this.pt},jsts.algorithm.distance.PointPairDistance.prototype.getCoordinate=function(t){return this.pt[t]},jsts.algorithm.distance.PointPairDistance.prototype.setMaximum=function(t){return 2===arguments.length?void this.setMaximum2.apply(this,arguments):void this.setMaximum(t.pt[0],t.pt[1])},jsts.algorithm.distance.PointPairDistance.prototype.setMaximum2=function(t,e){if(this.isNull)return void this.initialize(t,e);var o=t.distance(e);o>this.distance&&this.initialize(t,e,o)},jsts.algorithm.distance.PointPairDistance.prototype.setMinimum=function(t){return 2===arguments.length?void this.setMinimum2.apply(this,arguments):void this.setMinimum(t.pt[0],t.pt[1])},jsts.algorithm.distance.PointPairDistance.prototype.setMinimum2=function(t,e){if(this.isNull)return void this.initialize(t,e);var o=t.distance(e);o<this.distance&&this.initialize(t,e,o)},function(){var t=jsts.algorithm.distance.PointPairDistance,e=jsts.algorithm.distance.DistanceToPoint,o=function(o){\nthis.maxPtDist=new t,this.minPtDist=new t,this.euclideanDist=new e,this.geom=o};o.prototype=new jsts.geom.CoordinateFilter,o.prototype.maxPtDist=new t,o.prototype.minPtDist=new t,o.prototype.euclideanDist=new e,o.prototype.geom,o.prototype.filter=function(t){this.minPtDist.initialize(),e.computeDistance(this.geom,t,this.minPtDist),this.maxPtDist.setMaximum(this.minPtDist)},o.prototype.getMaxPointDistance=function(){return this.maxPtDist};var n=function(e,o){this.maxPtDist=new t,this.minPtDist=new t,this.geom=e,this.numSubSegs=Math.round(1/o)};n.prototype=new jsts.geom.CoordinateSequenceFilter,n.prototype.maxPtDist=new t,n.prototype.minPtDist=new t,n.prototype.geom,n.prototype.numSubSegs=0,n.prototype.filter=function(t,o){if(0!=o)for(var n=t[o-1],r=t[o],i=(r.x-n.x)/this.numSubSegs,s=(r.y-n.y)/this.numSubSegs,a=0;a<this.numSubSegs;a++){var p=n.x+a*i,u=n.y+a*s,l=new jsts.geom.Coordinate(p,u);this.minPtDist.initialize(),e.computeDistance(this.geom,l,this.minPtDist),this.maxPtDist.setMaximum(this.minPtDist)}},n.prototype.isGeometryChanged=function(){return!1},n.prototype.isDone=function(){return!1},n.prototype.getMaxPointDistance=function(){return this.maxPtDist},jsts.algorithm.distance.DiscreteHausdorffDistance=function(t,e){this.g0=t,this.g1=e,this.ptDist=new jsts.algorithm.distance.PointPairDistance},jsts.algorithm.distance.DiscreteHausdorffDistance.prototype.g0=null,jsts.algorithm.distance.DiscreteHausdorffDistance.prototype.g1=null,jsts.algorithm.distance.DiscreteHausdorffDistance.prototype.ptDist=null,jsts.algorithm.distance.DiscreteHausdorffDistance.prototype.densifyFrac=0,jsts.algorithm.distance.DiscreteHausdorffDistance.distance=function(t,e,o){var n=new jsts.algorithm.distance.DiscreteHausdorffDistance(t,e);return void 0!==o&&n.setDensifyFraction(o),n.distance()},jsts.algorithm.distance.DiscreteHausdorffDistance.prototype.setDensifyFraction=function(t){if(t>1||0>=t)throw new jsts.error.IllegalArgumentError(\"Fraction is not in range (0.0 - 1.0]\");this.densifyFrac=t},jsts.algorithm.distance.DiscreteHausdorffDistance.prototype.distance=function(){return this.compute(this.g0,this.g1),ptDist.getDistance()},jsts.algorithm.distance.DiscreteHausdorffDistance.prototype.orientedDistance=function(){return this.computeOrientedDistance(this.g0,this.g1,this.ptDist),this.ptDist.getDistance()},jsts.algorithm.distance.DiscreteHausdorffDistance.prototype.getCoordinates=function(){return ptDist.getCoordinates()},jsts.algorithm.distance.DiscreteHausdorffDistance.prototype.compute=function(t,e){this.computeOrientedDistance(t,e,this.ptDist),this.computeOrientedDistance(e,t,this.ptDist)},jsts.algorithm.distance.DiscreteHausdorffDistance.prototype.computeOrientedDistance=function(t,e,r){var i=new o(e);if(t.apply(i),r.setMaximum(i.getMaxPointDistance()),this.densifyFrac>0){var s=new n(e,this.densifyFrac);t.apply(s),r.setMaximum(s.getMaxPointDistance())}}}(),jsts.algorithm.MinimumBoundingCircle=function(t){this.input=null,this.extremalPts=null,this.centre=null,this.radius=0,this.input=t},jsts.algorithm.MinimumBoundingCircle.prototype.getCircle=function(){if(this.compute(),null===this.centre)return this.input.getFactory().createPolygon(null,null);var t=this.input.getFactory().createPoint(this.centre);return 0===this.radius?t:t.buffer(this.radius)},jsts.algorithm.MinimumBoundingCircle.prototype.getExtremalPoints=function(){return this.compute(),this.extremalPts},jsts.algorithm.MinimumBoundingCircle.prototype.getCentre=function(){return this.compute(),this.centre},jsts.algorithm.MinimumBoundingCircle.prototype.getRadius=function(){return this.compute(),this.radius},jsts.algorithm.MinimumBoundingCircle.prototype.computeCentre=function(){switch(this.extremalPts.length){case 0:this.centre=null;break;case 1:this.centre=this.extremalPts[0];break;case 2:this.centre=new jsts.geom.Coordinate((this.extremalPts[0].x+this.extremalPts[1].x)/2,(this.extremalPts[0].y+this.extremalPts[1].y)/2);break;case 3:this.centre=jsts.geom.Triangle.circumcentre(this.extremalPts[0],this.extremalPts[1],this.extremalPts[2])}},jsts.algorithm.MinimumBoundingCircle.prototype.compute=function(){null===this.extremalPts&&(this.computeCirclePoints(),this.computeCentre(),null!==this.centre&&(this.radius=this.centre.distance(this.extremalPts[0])))},jsts.algorithm.MinimumBoundingCircle.prototype.computeCirclePoints=function(){if(this.input.isEmpty())return void(this.extremalPts=[]);var t;if(1===this.input.getNumPoints())return t=this.input.getCoordinates(),void(this.extremalPts=[new jsts.geom.Coordinate(t[0])]);var e=this.input.convexHull(),o=e.getCoordinates();if(t=o,o[0].equals2D(o[o.length-1])&&(t=[],jsts.geom.CoordinateArrays.copyDeep(o,0,t,0,o.length-1)),t.length<=2)return void(this.extremalPts=jsts.geom.CoordinateArrays.copyDeep(t));for(var n=jsts.algorithm.MinimumBoundingCircle.lowestPoint(t),r=jsts.algorithm.MinimumBoundingCircle.pointWitMinAngleWithX(t,n),i=0;i<t.length;i++){var s=jsts.algorithm.MinimumBoundingCircle.pointWithMinAngleWithSegment(t,n,r);if(jsts.algorithm.Angle.isObtuse(n,s,r))return void(this.extremalPts=[new jsts.geom.Coordinate(n),new jsts.geom.Coordinate(r)]);if(jsts.algorithm.Angle.isObtuse(s,n,r))n=s;else{if(!jsts.algorithm.Angle.isObtuse(s,r,n))return void(this.extremalPts=[new jsts.geom.Coordinate(n),new jsts.geom.Coordinate(r),new jsts.geom.Coordinate(s)]);r=s}}throw new Error(\"Logic failure in Minimum Bounding Circle algorithm!\")},jsts.algorithm.MinimumBoundingCircle.lowestPoint=function(t){for(var e=t[0],o=1;o<t.length;o++)t[o].y<e.y&&(e=t[o]);return e},jsts.algorithm.MinimumBoundingCircle.pointWitMinAngleWithX=function(t,e){for(var o=Number.MAX_VALUE,n=null,r=0;r<t.length;r++){var i=t[r];if(i!==e){var s=i.x-e.x,a=i.y-e.y;0>a&&(a=-a);var p=Math.sqrt(s*s+a*a),u=a/p;o>u&&(o=u,n=i)}}return n},jsts.algorithm.MinimumBoundingCircle.pointWithMinAngleWithSegment=function(t,e,o){for(var n=Number.MAX_VALUE,r=null,i=0;i<t.length;i++){var s=t[i];if(s!==e&&s!==o){var a=jsts.algorithm.Angle.angleBetween(e,s,o);n>a&&(n=a,r=s)}}return r},jsts.noding.ScaledNoder=function(t,e,o,n){this.offsetX=o?o:0,this.offsetY=n?n:0,this.noder=t,this.scaleFactor=e,this.isScaled=!this.isIntegerPrecision()},jsts.noding.ScaledNoder.prototype=new jsts.noding.Noder,jsts.noding.ScaledNoder.constructor=jsts.noding.ScaledNoder,jsts.noding.ScaledNoder.prototype.noder=null,jsts.noding.ScaledNoder.prototype.scaleFactor=void 0,jsts.noding.ScaledNoder.prototype.offsetX=void 0,jsts.noding.ScaledNoder.prototype.offsetY=void 0,jsts.noding.ScaledNoder.prototype.isScaled=!1,jsts.noding.ScaledNoder.prototype.isIntegerPrecision=function(){return 1===this.scaleFactor},jsts.noding.ScaledNoder.prototype.getNodedSubstrings=function(){var t=this.noder.getNodedSubstrings();return this.isScaled&&this.rescale(t),t},jsts.noding.ScaledNoder.prototype.computeNodes=function(t){var e=t;this.isScaled&&(e=this.scale(t)),this.noder.computeNodes(e)},jsts.noding.ScaledNoder.prototype.scale=function(t){if(t instanceof Array)return this.scale2(t);for(var e=new javascript.util.ArrayList,o=t.iterator();o.hasNext();){var n=o.next();e.add(new jsts.noding.NodedSegmentString(this.scale(n.getCoordinates()),n.getData()))}return e},jsts.noding.ScaledNoder.prototype.scale2=function(t){for(var e=[],o=0;o<t.length;o++)e[o]=new jsts.geom.Coordinate(Math.round((t[o].x-this.offsetX)*this.scaleFactor),Math.round((t[o].y-this.offsetY)*this.scaleFactor));var n=jsts.geom.CoordinateArrays.removeRepeatedPoints(e);return n},jsts.noding.ScaledNoder.prototype.rescale=function(t){if(t instanceof Array)return void this.rescale2(t);for(var e=t.iterator();e.hasNext();){var o=e.next();this.rescale(o.getCoordinates())}},jsts.noding.ScaledNoder.prototype.rescale2=function(t){for(var e=0;e<t.length;e++)t[e].x=t[e].x/this.scaleFactor+this.offsetX,t[e].y=t[e].y/this.scaleFactor+this.offsetY},function(){javascript.util.ArrayList;jsts.geomgraph.index.SegmentIntersector=function(t,e,o){this.li=t,this.includeProper=e,this.recordIsolated=o},jsts.geomgraph.index.SegmentIntersector.isAdjacentSegments=function(t,e){return 1===Math.abs(t-e)},jsts.geomgraph.index.SegmentIntersector.prototype._hasIntersection=!1,jsts.geomgraph.index.SegmentIntersector.prototype.hasProper=!1,jsts.geomgraph.index.SegmentIntersector.prototype.hasProperInterior=!1,jsts.geomgraph.index.SegmentIntersector.prototype.properIntersectionPoint=null,jsts.geomgraph.index.SegmentIntersector.prototype.li=null,jsts.geomgraph.index.SegmentIntersector.prototype.includeProper=null,jsts.geomgraph.index.SegmentIntersector.prototype.recordIsolated=null,jsts.geomgraph.index.SegmentIntersector.prototype.isSelfIntersection=null,jsts.geomgraph.index.SegmentIntersector.prototype.numIntersections=0,jsts.geomgraph.index.SegmentIntersector.prototype.numTests=0,jsts.geomgraph.index.SegmentIntersector.prototype.bdyNodes=null,jsts.geomgraph.index.SegmentIntersector.prototype.setBoundaryNodes=function(t,e){this.bdyNodes=[],this.bdyNodes[0]=t,this.bdyNodes[1]=e},jsts.geomgraph.index.SegmentIntersector.prototype.getProperIntersectionPoint=function(){return this.properIntersectionPoint},jsts.geomgraph.index.SegmentIntersector.prototype.hasIntersection=function(){return this._hasIntersection},jsts.geomgraph.index.SegmentIntersector.prototype.hasProperIntersection=function(){return this.hasProper},jsts.geomgraph.index.SegmentIntersector.prototype.hasProperInteriorIntersection=function(){return this.hasProperInterior},jsts.geomgraph.index.SegmentIntersector.prototype.isTrivialIntersection=function(t,e,o,n){if(t===o&&1===this.li.getIntersectionNum()){if(jsts.geomgraph.index.SegmentIntersector.isAdjacentSegments(e,n))return!0;if(t.isClosed()){var r=t.getNumPoints()-1;if(0===e&&n===r||0===n&&e===r)return!0}}return!1},jsts.geomgraph.index.SegmentIntersector.prototype.addIntersections=function(t,e,o,n){if(t!==o||e!==n){this.numTests++;var r=t.getCoordinates()[e],i=t.getCoordinates()[e+1],s=o.getCoordinates()[n],a=o.getCoordinates()[n+1];this.li.computeIntersection(r,i,s,a),this.li.hasIntersection()&&(this.recordIsolated&&(t.setIsolated(!1),o.setIsolated(!1)),this.numIntersections++,this.isTrivialIntersection(t,e,o,n)||(this._hasIntersection=!0,(this.includeProper||!this.li.isProper())&&(t.addIntersections(this.li,e,0),o.addIntersections(this.li,n,1)),this.li.isProper()&&(this.properIntersectionPoint=this.li.getIntersection(0).clone(),this.hasProper=!0,this.isBoundaryPoint(this.li,this.bdyNodes)||(this.hasProperInterior=!0))))}},jsts.geomgraph.index.SegmentIntersector.prototype.isBoundaryPoint=function(t,e){if(null===e)return!1;if(e instanceof Array)return this.isBoundaryPoint(t,e[0])?!0:this.isBoundaryPoint(t,e[1])?!0:!1;for(var o=e.iterator();o.hasNext();){var n=o.next(),r=n.getCoordinate();if(t.isIntersection(r))return!0}return!1}}()},{}],29:[function(t,e,o){(function(t){(function(){function e(t,e){var o=t.split(\".\"),n=O;o[0]in n||!n.execScript||n.execScript(\"var \"+o[0]);for(var r;o.length&&(r=o.shift());)o.length||void 0===e?n=n[r]?n[r]:n[r]={}:n[r]=e}function o(t,e){function o(){}o.prototype=e.prototype,t.q=e.prototype,t.prototype=new o,t.prototype.constructor=t,t.p=function(t,o,n){var r=Array.prototype.slice.call(arguments,2);return e.prototype[o].apply(t,r)}}function n(t){this.message=t||\"\"}function r(t){this.message=t||\"\"}function i(){}function s(){}function a(){}function p(){}function u(t){this.message=t||\"\"}function l(t){this.message=t||\"\"}function g(t){this.a=[],t instanceof s&&this.e(t)}function h(t){this.j=t}function c(){}function d(){this.i={}}function f(){}function m(t){this.a=[],t instanceof s&&this.e(t)}function y(t){this.k=t}function j(){}function v(){}function x(){this.a=[]}function E(t){return null==t?null:t.parent}function I(t,e){null!==t&&(t.color=e)}function S(t){return null==t?null:t.left}function L(t){return null==t?null:t.right}function C(){this.d=null,this.n=0}function N(t,e){if(null!=e){var o=e.right;e.right=o.left,null!=o.left&&(o.left.parent=e),o.parent=e.parent,null==e.parent?t.d=o:e.parent.left==e?e.parent.left=o:e.parent.right=o,o.left=e,e.parent=o}}function b(t,e){if(null!=e){var o=e.left;e.left=o.right,null!=o.right&&(o.right.parent=e),o.parent=e.parent,null==e.parent?t.d=o:e.parent.right==e?e.parent.right=o:e.parent.left=o,o.right=e,e.parent=o}}function P(t){if(null===t)return null;if(null!==t.right)for(var e=t.right;null!==e.left;)e=e.left;else for(e=t.parent;null!==e&&t===e.right;)t=e,e=e.parent;return e}function w(t){this.a=[],t instanceof s&&this.e(t)}function R(t){this.l=t}var O=this;o(n,Error),e(\"javascript.util.EmptyStackException\",n),n.prototype.name=\"EmptyStackException\",o(r,Error),e(\"javascript.util.IndexOutOfBoundsException\",r),r.prototype.name=\"IndexOutOfBoundsException\",e(\"javascript.util.Iterator\",i),i.prototype.hasNext=i.prototype.c,i.prototype.next=i.prototype.next,i.prototype.remove=i.prototype.remove,e(\"javascript.util.Collection\",s),o(a,s),e(\"javascript.util.List\",a),e(\"javascript.util.Map\",p),o(u,Error),e(\"javascript.util.NoSuchElementException\",u),u.prototype.name=\"NoSuchElementException\",o(l,Error),l.prototype.name=\"OperationNotSupported\",o(g,a),e(\"javascript.util.ArrayList\",g),g.prototype.a=null,g.prototype.add=function(t){return this.a.push(t),!0},g.prototype.add=g.prototype.add,g.prototype.e=function(t){for(t=t.f();t.c();)this.add(t.next());return!0},g.prototype.addAll=g.prototype.e,g.prototype.set=function(t,e){var o=this.a[t];return this.a[t]=e,o},g.prototype.set=g.prototype.set,g.prototype.f=function(){return new h(this)},g.prototype.iterator=g.prototype.f,g.prototype.get=function(t){if(0>t||t>=this.size())throw new r;return this.a[t]},g.prototype.get=g.prototype.get,g.prototype.g=function(){return 0===this.a.length},g.prototype.isEmpty=g.prototype.g,g.prototype.size=function(){return this.a.length},g.prototype.size=g.prototype.size,g.prototype.h=function(){for(var t=[],e=0,o=this.a.length;o>e;e++)t.push(this.a[e]);return t},g.prototype.toArray=g.prototype.h,g.prototype.remove=function(t){for(var e=!1,o=0,n=this.a.length;n>o;o++)if(this.a[o]===t){this.a.splice(o,1),e=!0;break}return e},g.prototype.remove=g.prototype.remove,e(\"$jscomp.scope.Iterator_\",h),h.prototype.j=null,h.prototype.b=0,h.prototype.next=function(){if(this.b===this.j.size())throw new u;return this.j.get(this.b++)},h.prototype.next=h.prototype.next,h.prototype.c=function(){return this.b<this.j.size()?!0:!1},h.prototype.hasNext=h.prototype.c,h.prototype.remove=function(){throw new l},h.prototype.remove=h.prototype.remove,e(\"javascript.util.Arrays\",c),c.sort=function(){var t,e,o,n=arguments[0];if(1===arguments.length)n.sort();else if(2===arguments.length)e=arguments[1],o=function(t,o){return e.compare(t,o)},n.sort(o);else if(3===arguments.length)for(t=n.slice(arguments[1],arguments[2]),t.sort(),o=n.slice(0,arguments[1]).concat(t,n.slice(arguments[2],n.length)),n.splice(0,n.length),t=0;t<o.length;t++)n.push(o[t]);else if(4===arguments.length)for(t=n.slice(arguments[1],arguments[2]),e=arguments[3],o=function(t,o){return e.compare(t,o)},t.sort(o),o=n.slice(0,arguments[1]).concat(t,n.slice(arguments[2],n.length)),n.splice(0,n.length),t=0;t<o.length;t++)n.push(o[t])},c.asList=function(t){for(var e=new g,o=0,n=t.length;n>o;o++)e.add(t[o]);return e},o(d,p),e(\"javascript.util.HashMap\",d),d.prototype.i=null,d.prototype.get=function(t){return this.i[t]||null},d.prototype.get=d.prototype.get,d.prototype.put=function(t,e){return this.i[t]=e},d.prototype.put=d.prototype.put,d.prototype.m=function(){var t,e=new g;for(t in this.i)this.i.hasOwnProperty(t)&&e.add(this.i[t]);return e},d.prototype.values=d.prototype.m,d.prototype.size=function(){return this.m().size()},d.prototype.size=d.prototype.size,o(f,s),e(\"javascript.util.Set\",f),o(m,f),e(\"javascript.util.HashSet\",m),m.prototype.a=null,m.prototype.contains=function(t){for(var e=0,o=this.a.length;o>e;e++)if(this.a[e]===t)return!0;return!1},m.prototype.contains=m.prototype.contains,m.prototype.add=function(t){return this.contains(t)?!1:(this.a.push(t),!0)},m.prototype.add=m.prototype.add,m.prototype.e=function(t){for(t=t.f();t.c();)this.add(t.next());return!0},m.prototype.addAll=m.prototype.e,m.prototype.remove=function(){throw new l},m.prototype.remove=m.prototype.remove,m.prototype.size=function(){return this.a.length},m.prototype.g=function(){return 0===this.a.length},m.prototype.isEmpty=m.prototype.g,m.prototype.h=function(){for(var t=[],e=0,o=this.a.length;o>e;e++)t.push(this.a[e]);return t},m.prototype.toArray=m.prototype.h,m.prototype.f=function(){return new y(this)},m.prototype.iterator=m.prototype.f,e(\"$jscomp.scope.Iterator_$1\",y),y.prototype.k=null,y.prototype.b=0,y.prototype.next=function(){if(this.b===this.k.size())throw new u;return this.k.a[this.b++]},y.prototype.next=y.prototype.next,y.prototype.c=function(){return this.b<this.k.size()?!0:!1},y.prototype.hasNext=y.prototype.c,y.prototype.remove=function(){throw new l},y.prototype.remove=y.prototype.remove,o(j,p),e(\"javascript.util.SortedMap\",j),o(v,f),e(\"javascript.util.SortedSet\",v),o(x,a),e(\"javascript.util.Stack\",x),x.prototype.a=null,x.prototype.push=function(t){return this.a.push(t),t},x.prototype.push=x.prototype.push,x.prototype.pop=function(){if(0===this.a.length)throw new n;return this.a.pop()},x.prototype.pop=x.prototype.pop,x.prototype.o=function(){if(0===this.a.length)throw new n;return this.a[this.a.length-1]},x.prototype.peek=x.prototype.o,x.prototype.empty=function(){return 0===this.a.length?!0:!1},x.prototype.empty=x.prototype.empty,x.prototype.g=function(){return this.empty()},x.prototype.isEmpty=x.prototype.g,x.prototype.search=function(t){return this.a.indexOf(t)},x.prototype.search=x.prototype.search,x.prototype.size=function(){return this.a.length},x.prototype.size=x.prototype.size,x.prototype.h=function(){for(var t=[],e=0,o=this.a.length;o>e;e++)t.push(this.a[e]);return t},x.prototype.toArray=x.prototype.h,o(C,j),e(\"javascript.util.TreeMap\",C),C.prototype.get=function(t){for(var e=this.d;null!==e;){var o=t.compareTo(e.key);if(0>o)e=e.left;else{if(!(o>0))return e.value;e=e.right}}return null},C.prototype.get=C.prototype.get,C.prototype.put=function(t,e){if(null===this.d)return this.d={key:t,value:e,left:null,right:null,parent:null,color:0},this.n=1,null;var o,n,r=this.d;do if(o=r,n=t.compareTo(r.key),0>n)r=r.left;else{if(!(n>0))return o=r.value,r.value=e,o;r=r.right}while(null!==r);for(r={key:t,left:null,right:null,value:e,parent:o,color:0},0>n?o.left=r:o.right=r,r.color=1;null!=r&&r!=this.d&&1==r.parent.color;)E(r)==S(E(E(r)))?(o=L(E(E(r))),1==(null==o?0:o.color)?(I(E(r),0),I(o,0),I(E(E(r)),1),r=E(E(r))):(r==L(E(r))&&(r=E(r),N(this,r)),I(E(r),0),I(E(E(r)),1),b(this,E(E(r))))):(o=S(E(E(r))),1==(null==o?0:o.color)?(I(E(r),0),I(o,0),I(E(E(r)),1),r=E(E(r))):(r==S(E(r))&&(r=E(r),b(this,r)),I(E(r),0),I(E(E(r)),1),N(this,E(E(r)))));return this.d.color=0,this.n++,null},C.prototype.put=C.prototype.put,C.prototype.m=function(){var t,e=new g;if(t=this.d,null!=t)for(;null!=t.left;)t=t.left;if(null!==t)for(e.add(t.value);null!==(t=P(t));)e.add(t.value);return e},C.prototype.values=C.prototype.m,C.prototype.size=function(){return this.n},C.prototype.size=C.prototype.size,o(w,v),e(\"javascript.util.TreeSet\",w),w.prototype.a=null,w.prototype.contains=function(t){for(var e=0,o=this.a.length;o>e;e++)if(0===this.a[e].compareTo(t))return!0;return!1},w.prototype.contains=w.prototype.contains,w.prototype.add=function(t){if(this.contains(t))return!1;for(var e=0,o=this.a.length;o>e;e++)if(1===this.a[e].compareTo(t))return this.a.splice(e,0,t),!0;return this.a.push(t),!0},w.prototype.add=w.prototype.add,w.prototype.e=function(t){for(t=t.f();t.c();)this.add(t.next());return!0},w.prototype.addAll=w.prototype.e,w.prototype.remove=function(){throw new l},w.prototype.remove=w.prototype.remove,w.prototype.size=function(){return this.a.length},w.prototype.size=w.prototype.size,w.prototype.g=function(){return 0===this.a.length},w.prototype.isEmpty=w.prototype.g,w.prototype.h=function(){for(var t=[],e=0,o=this.a.length;o>e;e++)t.push(this.a[e]);return t},w.prototype.toArray=w.prototype.h,w.prototype.f=function(){return new R(this)},w.prototype.iterator=w.prototype.f,e(\"$jscomp.scope.Iterator_$2\",R),R.prototype.l=null,R.prototype.b=0,R.prototype.next=function(){if(this.b===this.l.size())throw new u;return this.l.a[this.b++]},R.prototype.next=R.prototype.next,R.prototype.c=function(){return this.b<this.l.size()?!0:!1},R.prototype.hasNext=R.prototype.c,R.prototype.remove=function(){throw new l},R.prototype.remove=R.prototype.remove,\"undefined\"!=typeof t&&(t.javascript={},t.javascript.util={},t.javascript.util.ArrayList=g,t.javascript.util.Arrays=c,t.javascript.util.Collection=s,t.javascript.util.EmptyStackException=n,t.javascript.util.HashMap=d,t.javascript.util.HashSet=m,t.javascript.util.IndexOutOfBoundsException=r,t.javascript.util.Iterator=i,t.javascript.util.List=a,t.javascript.util.Map=p,t.javascript.util.NoSuchElementException=u,t.javascript.util.OperationNotSupported=l,t.javascript.util.Set=f,t.javascript.util.SortedMap=j,t.javascript.util.SortedSet=v,t.javascript.util.Stack=x,t.javascript.util.TreeMap=C,t.javascript.util.TreeSet=w)}).call(this)}).call(this,\"undefined\"!=typeof global?global:\"undefined\"!=typeof self?self:\"undefined\"!=typeof window?window:{})},{}],30:[function(t,e,o){t(\"./dist/javascript.util-node.min.js\")},{\"./dist/javascript.util-node.min.js\":29}],31:[function(t,e,o){var n=t(\"turf-extent\"),r=t(\"turf-point\");e.exports=function(t,e){var o=n(t),i=(o[0]+o[2])/2,s=(o[1]+o[3])/2;return r([i,s])}},{\"turf-extent\":80,\"turf-point\":112}],32:[function(t,e,o){var n=t(\"turf-meta\").coordEach,r=t(\"turf-point\");e.exports=function(t){var e=0,o=0,i=0;return n(t,function(t){e+=t[0],o+=t[1],i++},!0),r([e/i,o/i])}},{\"turf-meta\":33,\"turf-point\":112}],33:[function(t,e,o){function n(t,e,o){var n,r,i,s,a,p,u,g,h,c=0,d=\"FeatureCollection\"===t.type,f=\"Feature\"===t.type,m=d?t.features.length:1;for(n=0;m>n;n++)for(g=d?t.features[n].geometry:f?t.geometry:t,h=\"GeometryCollection\"===g.type,p=h?g.geometries.length:1,s=0;p>s;s++)if(a=h?g.geometries[s]:g,u=a.coordinates,c=!o||\"Polygon\"!==a.type&&\"MultiPolygon\"!==a.type?0:1,\"Point\"===a.type)e(u);else if(\"LineString\"===a.type||\"MultiPoint\"===a.type)for(r=0;r<u.length;r++)e(u[r]);else if(\"Polygon\"===a.type||\"MultiLineString\"===a.type)for(r=0;r<u.length;r++)for(i=0;i<u[r].length-c;i++)e(u[r][i]);else{if(\"MultiPolygon\"!==a.type)throw new Error(\"Unknown Geometry Type\");for(r=0;r<u.length;r++)for(i=0;i<u[r].length;i++)for(l=0;l<u[r][i].length-c;l++)e(u[r][i][l])}}function r(t,e,o,r){return n(t,function(t){o=e(o,t)},r),o}function i(t,e){var o;switch(t.type){case\"FeatureCollection\":for(features=t.features,o=0;o<t.features.length;o++)e(t.features[o].properties);break;case\"Feature\":e(t.properties)}}function s(t,e,o){return i(t,function(t){o=e(o,t)}),o}e.exports.coordEach=n,e.exports.coordReduce=r,e.exports.propEach=i,e.exports.propReduce=s},{}],34:[function(t,e,o){function n(t){return t.map(function(t){return t.coordinates})}e.exports=function(t){var e=t.features[0].geometry.type,o=t.features.map(function(t){return t.geometry});switch(e){case\"Point\":return{type:\"Feature\",properties:{},geometry:{type:\"MultiPoint\",coordinates:n(o)}};case\"LineString\":return{type:\"Feature\",properties:{},geometry:{type:\"MultiLineString\",coordinates:n(o)}};case\"Polygon\":return{type:\"Feature\",properties:{},geometry:{type:\"MultiPolygon\",coordinates:n(o)}};default:return t}}},{}],35:[function(t,e,o){var n={};n.tin=t(\"turf-tin\"),n.merge=t(\"turf-merge\"),n.distance=t(\"turf-distance\"),n.point=t(\"turf-point\"),e.exports=function(t,e,o){function r(t){var r=n.point(t.geometry.coordinates[0][0]),i=n.point(t.geometry.coordinates[0][1]),s=n.point(t.geometry.coordinates[0][2]),a=n.distance(r,i,o),p=n.distance(i,s,o),u=n.distance(r,s,o);return e>=a&&e>=p&&e>=u}if(\"number\"!=typeof e)throw new Error(\"maxEdge parameter is required\");if(\"string\"!=typeof o)throw new Error(\"units parameter is required\");var i=n.tin(t),s=i.features.filter(r);return i.features=s,n.merge(i)}},{\"turf-distance\":70,\"turf-merge\":103,\"turf-point\":112,\"turf-tin\":128}],36:[function(t,e,o){var n=t(\"turf-meta\").coordEach,r=t(\"convex-hull\"),i=t(\"turf-polygon\");e.exports=function(t){var e=[];n(t,function(t){e.push(t)});for(var o=r(e),s=[],a=0;a<o.length;a++)s.push(e[o[a][0]]);return s.push(e[o[o.length-1][1]]),i([s])}},{\"convex-hull\":37,\"turf-meta\":65,\"turf-polygon\":113}],37:[function(t,e,o){\"use strict\";function n(t){var e=t.length;if(0===e)return[];if(1===e)return[[0]];var o=t[0].length;return 0===o?[]:1===o?r(t):2===o?i(t):s(t,o)}var r=t(\"./lib/ch1d\"),i=t(\"./lib/ch2d\"),s=t(\"./lib/chnd\");e.exports=n},{\"./lib/ch1d\":38,\"./lib/ch2d\":39,\"./lib/chnd\":40}],38:[function(t,e,o){\"use strict\";function n(t){for(var e=0,o=0,n=1;n<t.length;++n)t[n][0]<t[e][0]&&(e=n),t[n][0]>t[o][0]&&(o=n);return o>e?[[e],[o]]:e>o?[[o],[e]]:[[e]]}e.exports=n},{}],39:[function(t,e,o){\"use strict\";function n(t){var e=r(t),o=e.length;if(2>=o)return[];for(var n=new Array(o),i=e[o-1],s=0;o>s;++s){var a=e[s];n[s]=[i,a],i=a}return n}e.exports=n;var r=t(\"monotone-convex-hull-2d\")},{\"monotone-convex-hull-2d\":58}],40:[function(t,e,o){\"use strict\";function n(t,e){for(var o=t.length,n=new Array(o),r=0;r<e.length;++r)n[r]=t[e[r]];for(var i=e.length,r=0;o>r;++r)e.indexOf(r)<0&&(n[i++]=t[r]);return n}function r(t,e){for(var o=t.length,n=e.length,r=0;o>r;++r)for(var i=t[r],s=0;s<i.length;++s){var a=i[s];if(n>a)i[s]=e[a];else{a-=n;for(var p=0;n>p;++p)a>=e[p]&&(a+=1);i[s]=a}}return t}function i(t,e){try{return s(t,!0)}catch(o){var i=a(t);if(i.length<=e)return[];var p=n(t,i),u=s(p,!0);return r(u,i)}}e.exports=i;var s=t(\"incremental-convex-hull\"),a=t(\"affine-hull\")},{\"affine-hull\":41,\"incremental-convex-hull\":48}],41:[function(t,e,o){\"use strict\";function n(t,e){for(var o=new Array(e+1),n=0;n<t.length;++n)o[n]=t[n];for(var n=0;n<=t.length;++n){for(var r=t.length;e>=r;++r){for(var s=new Array(e),a=0;e>a;++a)s[a]=Math.pow(r+1-n,a);o[r]=s}var p=i.apply(void 0,o);if(p)return!0}return!1}function r(t){var e=t.length;if(0===e)return[];if(1===e)return[0];for(var o=t[0].length,r=[t[0]],i=[0],s=1;e>s;++s)if(r.push(t[s]),n(r,o)){if(i.push(s),i.length===o+1)return i}else r.pop();return i}e.exports=r;var i=t(\"robust-orientation\")},{\"robust-orientation\":47}],42:[function(t,e,o){\"use strict\";function n(t,e,o){var n=t+e,r=n-t,i=n-r,s=e-r,a=t-i;return o?(o[0]=a+s,o[1]=n,o):[a+s,n]}e.exports=n},{}],43:[function(t,e,o){\"use strict\";function n(t,e){var o=t.length;if(1===o){var n=r(t[0],e);return n[0]?n:[n[1]]}var s=new Array(2*o),a=[.1,.1],p=[.1,.1],u=0;r(t[0],e,a),a[0]&&(s[u++]=a[0]);for(var l=1;o>l;++l){r(t[l],e,p);var g=a[1];i(g,p[0],a),a[0]&&(s[u++]=a[0]);var h=p[1],c=a[1],d=h+c,f=d-h,m=c-f;a[1]=d,m&&(s[u++]=m)}return a[1]&&(s[u++]=a[1]),0===u&&(s[u++]=0),s.length=u,s}var r=t(\"two-product\"),i=t(\"two-sum\");e.exports=n},{\"two-product\":46,\"two-sum\":42}],44:[function(t,e,o){\"use strict\";function n(t,e){var o=t+e,n=o-t,r=o-n,i=e-n,s=t-r,a=s+i;return a?[a,o]:[o]}function r(t,e){var o=0|t.length,r=0|e.length;if(1===o&&1===r)return n(t[0],-e[0]);var i,s,a=o+r,p=new Array(a),u=0,l=0,g=0,h=Math.abs,c=t[l],d=h(c),f=-e[g],m=h(f);m>d?(s=c,l+=1,o>l&&(c=t[l],d=h(c))):(s=f,g+=1,r>g&&(f=-e[g],m=h(f))),o>l&&m>d||g>=r?(i=c,l+=1,o>l&&(c=t[l],d=h(c))):(i=f,g+=1,r>g&&(f=-e[g],m=h(f)));for(var y,j,v,x,E,I=i+s,S=I-i,L=s-S,C=L,N=I;o>l&&r>g;)m>d?(i=c,l+=1,o>l&&(c=t[l],d=h(c))):(i=f,g+=1,r>g&&(f=-e[g],m=h(f))),s=C,I=i+s,S=I-i,L=s-S,L&&(p[u++]=L),y=N+I,j=y-N,v=y-j,x=I-j,E=N-v,C=E+x,N=y;for(;o>l;)i=c,s=C,I=i+s,S=I-i,L=s-S,L&&(p[u++]=L),y=N+I,j=y-N,v=y-j,x=I-j,E=N-v,C=E+x,N=y,l+=1,o>l&&(c=t[l]);for(;r>g;)i=f,s=C,I=i+s,S=I-i,L=s-S,L&&(p[u++]=L),y=N+I,j=y-N,v=y-j,x=I-j,E=N-v,C=E+x,N=y,g+=1,r>g&&(f=-e[g]);return C&&(p[u++]=C),N&&(p[u++]=N),u||(p[u++]=0),p.length=u,p}e.exports=r},{}],45:[function(t,e,o){\"use strict\";function n(t,e){var o=t+e,n=o-t,r=o-n,i=e-n,s=t-r,a=s+i;return a?[a,o]:[o]}function r(t,e){var o=0|t.length,r=0|e.length;if(1===o&&1===r)return n(t[0],e[0]);var i,s,a=o+r,p=new Array(a),u=0,l=0,g=0,h=Math.abs,c=t[l],d=h(c),f=e[g],m=h(f);m>d?(s=c,l+=1,o>l&&(c=t[l],d=h(c))):(s=f,g+=1,r>g&&(f=e[g],m=h(f))),o>l&&m>d||g>=r?(i=c,l+=1,o>l&&(c=t[l],d=h(c))):(i=f,g+=1,r>g&&(f=e[g],m=h(f)));for(var y,j,v,x,E,I=i+s,S=I-i,L=s-S,C=L,N=I;o>l&&r>g;)m>d?(i=c,l+=1,o>l&&(c=t[l],d=h(c))):(i=f,g+=1,r>g&&(f=e[g],m=h(f))),s=C,I=i+s,S=I-i,L=s-S,L&&(p[u++]=L),y=N+I,j=y-N,v=y-j,x=I-j,E=N-v,C=E+x,N=y;for(;o>l;)i=c,s=C,I=i+s,S=I-i,L=s-S,L&&(p[u++]=L),y=N+I,j=y-N,v=y-j,x=I-j,E=N-v,C=E+x,N=y,l+=1,o>l&&(c=t[l]);for(;r>g;)i=f,s=C,I=i+s,S=I-i,L=s-S,L&&(p[u++]=L),y=N+I,j=y-N,v=y-j,x=I-j,E=N-v,C=E+x,N=y,g+=1,r>g&&(f=e[g]);return C&&(p[u++]=C),N&&(p[u++]=N),u||(p[u++]=0),p.length=u,p}e.exports=r},{}],46:[function(t,e,o){\"use strict\";function n(t,e,o){var n=t*e,i=r*t,s=i-t,a=i-s,p=t-a,u=r*e,l=u-e,g=u-l,h=e-g,c=n-a*g,d=c-p*g,f=d-a*h,m=p*h-f;return o?(o[0]=m,o[1]=n,o):[m,n]}e.exports=n;var r=+(Math.pow(2,27)+1)},{}],47:[function(t,e,o){\"use strict\";function n(t,e){for(var o=new Array(t.length-1),n=1;n<t.length;++n)for(var r=o[n-1]=new Array(t.length-1),i=0,s=0;i<t.length;++i)i!==e&&(r[s++]=t[n][i]);return o}function r(t){for(var e=new Array(t),o=0;t>o;++o){e[o]=new Array(t);for(var n=0;t>n;++n)e[o][n]=[\"m\",n,\"[\",t-o-1,\"]\"].join(\"\")}return e}function i(t){return 1&t?\"-\":\"\"}function s(t){if(1===t.length)return t[0];if(2===t.length)return[\"sum(\",t[0],\",\",t[1],\")\"].join(\"\");var e=t.length>>1;return[\"sum(\",s(t.slice(0,e)),\",\",s(t.slice(e)),\")\"].join(\"\")}function a(t){if(2===t.length)return[[\"sum(prod(\",t[0][0],\",\",t[1][1],\"),prod(-\",t[0][1],\",\",t[1][0],\"))\"].join(\"\")];for(var e=[],o=0;o<t.length;++o)e.push([\"scale(\",s(a(n(t,o))),\",\",i(o),t[0][o],\")\"].join(\"\"));return e}function p(t){for(var e=[],o=[],i=r(t),p=[],u=0;t>u;++u)0===(1&u)?e.push.apply(e,a(n(i,u))):o.push.apply(o,a(n(i,u))),p.push(\"m\"+u);var l=s(e),f=s(o),m=\"orientation\"+t+\"Exact\",y=[\"function \",m,\"(\",p.join(),\"){var p=\",l,\",n=\",f,\",d=sub(p,n);return d[d.length-1];};return \",m].join(\"\"),j=new Function(\"sum\",\"prod\",\"scale\",\"sub\",y);return j(h,g,c,d)}function u(t){var e=E[t.length];return e||(e=E[t.length]=p(t.length)),e.apply(void 0,t)}function l(){for(;E.length<=f;)E.push(p(E.length));for(var t=[],o=[\"slow\"],n=0;f>=n;++n)t.push(\"a\"+n),o.push(\"o\"+n);for(var r=[\"function getOrientation(\",t.join(),\"){switch(arguments.length){case 0:case 1:return 0;\"],n=2;f>=n;++n)r.push(\"case \",n,\":return o\",n,\"(\",t.slice(0,n).join(),\");\");r.push(\"}var s=new Array(arguments.length);for(var i=0;i<arguments.length;++i){s[i]=arguments[i]};return slow(s);}return getOrientation\"),o.push(r.join(\"\"));var i=Function.apply(void 0,o);e.exports=i.apply(void 0,[u].concat(E));for(var n=0;f>=n;++n)e.exports[n]=E[n]}var g=t(\"two-product\"),h=t(\"robust-sum\"),c=t(\"robust-scale\"),d=t(\"robust-subtract\"),f=5,m=1.1102230246251565e-16,y=(3+16*m)*m,j=(7+56*m)*m,v=p(3),x=p(4),E=[function(){return 0},function(){return 0},function(t,e){return e[0]-t[0]},function(t,e,o){var n,r=(t[1]-o[1])*(e[0]-o[0]),i=(t[0]-o[0])*(e[1]-o[1]),s=r-i;if(r>0){if(0>=i)return s;n=r+i}else{if(!(0>r))return s;if(i>=0)return s;n=-(r+i)}var a=y*n;return s>=a||-a>=s?s:v(t,e,o)},function(t,e,o,n){var r=t[0]-n[0],i=e[0]-n[0],s=o[0]-n[0],a=t[1]-n[1],p=e[1]-n[1],u=o[1]-n[1],l=t[2]-n[2],g=e[2]-n[2],h=o[2]-n[2],c=i*u,d=s*p,f=s*a,m=r*u,y=r*p,v=i*a,E=l*(c-d)+g*(f-m)+h*(y-v),I=(Math.abs(c)+Math.abs(d))*Math.abs(l)+(Math.abs(f)+Math.abs(m))*Math.abs(g)+(Math.abs(y)+Math.abs(v))*Math.abs(h),S=j*I;return E>S||-E>S?E:x(t,e,o,n)}];l()},{\"robust-scale\":43,\"robust-subtract\":44,\"robust-sum\":45,\"two-product\":46}],48:[function(t,e,o){\"use strict\";function n(t,e,o){this.vertices=t,this.adjacent=e,this.boundary=o,this.lastVisited=-1}function r(t,e,o){this.vertices=t,this.cell=e,this.index=o}function i(t,e){return l(t.vertices,e.vertices)}function s(t){for(var e=[\"function orient(){var tuple=this.tuple;return test(\"],o=0;t>=o;++o)o>0&&e.push(\",\"),e.push(\"tuple[\",o,\"]\");e.push(\")}return orient\");var n=new Function(\"test\",e.join(\"\")),r=u[t+1];return r||(r=u),n(r)}function a(t,e,o){this.dimension=t,this.vertices=e,this.simplices=o,this.interior=o.filter(function(t){return!t.boundary;\n}),this.tuple=new Array(t+1);for(var n=0;t>=n;++n)this.tuple[n]=this.vertices[n];var r=g[t];r||(r=g[t]=s(t)),this.orient=r}function p(t,e){var o=t.length;if(0===o)throw new Error(\"Must have at least d+1 points\");var r=t[0].length;if(r>=o)throw new Error(\"Must input at least d+1 points\");var i=t.slice(0,r+1),s=u.apply(void 0,i);if(0===s)throw new Error(\"Input not in general position\");for(var p=new Array(r+1),l=0;r>=l;++l)p[l]=l;0>s&&(p[0]=1,p[1]=0);for(var g=new n(p,new Array(r+1),!1),h=g.adjacent,c=new Array(r+2),l=0;r>=l;++l){for(var d=p.slice(),f=0;r>=f;++f)f===l&&(d[f]=-1);var m=d[0];d[0]=d[1],d[1]=m;var y=new n(d,new Array(r+1),!0);h[l]=y,c[l]=y}c[r+1]=g;for(var l=0;r>=l;++l)for(var d=h[l].vertices,j=h[l].adjacent,f=0;r>=f;++f){var v=d[f];if(0>v)j[f]=g;else for(var x=0;r>=x;++x)h[x].vertices.indexOf(v)<0&&(j[f]=h[x])}for(var E=new a(r,i,c),I=!!e,l=r+1;o>l;++l)E.insert(t[l],I);return E.boundary()}e.exports=p;var u=t(\"robust-orientation\"),l=t(\"simplicial-complex\").compareCells;n.prototype.flip=function(){var t=this.vertices[0];this.vertices[0]=this.vertices[1],this.vertices[1]=t;var e=this.adjacent[0];this.adjacent[0]=this.adjacent[1],this.adjacent[1]=e};var g=[],h=a.prototype;h.handleBoundaryDegeneracy=function(t,e){var o=this.dimension,n=this.vertices.length-1,r=this.tuple,i=this.vertices,s=[t];for(t.lastVisited=-n;s.length>0;){t=s.pop();for(var a=(t.vertices,t.adjacent),p=0;o>=p;++p){var u=a[p];if(u.boundary&&!(u.lastVisited<=-n)){for(var l=u.vertices,g=0;o>=g;++g){var h=l[g];0>h?r[g]=e:r[g]=i[h]}var c=this.orient();if(c>0)return u;u.lastVisited=-n,0===c&&s.push(u)}}}return null},h.walk=function(t,e){var o=this.vertices.length-1,n=this.dimension,r=this.vertices,i=this.tuple,s=e?this.interior.length*Math.random()|0:this.interior.length-1,a=this.interior[s];t:for(;!a.boundary;){for(var p=a.vertices,u=a.adjacent,l=0;n>=l;++l)i[l]=r[p[l]];a.lastVisited=o;for(var l=0;n>=l;++l){var g=u[l];if(!(g.lastVisited>=o)){var h=i[l];i[l]=t;var c=this.orient();if(i[l]=h,0>c){a=g;continue t}g.boundary?g.lastVisited=-o:g.lastVisited=o}}return}return a},h.addPeaks=function(t,e){var o=this.vertices.length-1,s=this.dimension,a=this.vertices,p=this.tuple,u=this.interior,l=this.simplices,g=[e];e.lastVisited=o,e.vertices[e.vertices.indexOf(-1)]=o,e.boundary=!1,u.push(e);for(var h=[];g.length>0;){var e=g.pop(),c=e.vertices,d=e.adjacent,f=c.indexOf(o);if(!(0>f))for(var m=0;s>=m;++m)if(m!==f){var y=d[m];if(y.boundary&&!(y.lastVisited>=o)){var j=y.vertices;if(y.lastVisited!==-o){for(var v=0,x=0;s>=x;++x)j[x]<0?(v=x,p[x]=t):p[x]=a[j[x]];var E=this.orient();if(E>0){j[v]=o,y.boundary=!1,u.push(y),g.push(y),y.lastVisited=o;continue}y.lastVisited=-o}var I=y.adjacent,S=c.slice(),L=d.slice(),C=new n(S,L,!0);l.push(C);var N=I.indexOf(e);if(!(0>N)){I[N]=C,L[f]=y,S[m]=-1,L[m]=e,d[m]=C,C.flip();for(var x=0;s>=x;++x){var b=S[x];if(!(0>b||b===o)){for(var P=new Array(s-1),w=0,R=0;s>=R;++R){var O=S[R];0>O||R===x||(P[w++]=O)}h.push(new r(P,C,x))}}}}}}h.sort(i);for(var m=0;m+1<h.length;m+=2){var M=h[m],A=h[m+1],T=M.index,D=A.index;0>T||0>D||(M.cell.adjacent[M.index]=A.cell,A.cell.adjacent[A.index]=M.cell)}},h.insert=function(t,e){var o=this.vertices;o.push(t);var n=this.walk(t,e);if(n){for(var r=this.dimension,i=this.tuple,s=0;r>=s;++s){var a=n.vertices[s];0>a?i[s]=t:i[s]=o[a]}var p=this.orient(i);0>p||(0!==p||(n=this.handleBoundaryDegeneracy(n,t)))&&this.addPeaks(t,n)}},h.boundary=function(){for(var t=this.dimension,e=[],o=this.simplices,n=o.length,r=0;n>r;++r){var i=o[r];if(i.boundary){for(var s=new Array(t),a=i.vertices,p=0,u=0,l=0;t>=l;++l)a[l]>=0?s[p++]=a[l]:u=1&l;if(u===(1&t)){var g=s[0];s[0]=s[1],s[1]=g}e.push(s)}}return e}},{\"robust-orientation\":54,\"simplicial-complex\":57}],49:[function(t,e,o){arguments[4][42][0].apply(o,arguments)},{dup:42}],50:[function(t,e,o){arguments[4][43][0].apply(o,arguments)},{dup:43,\"two-product\":53,\"two-sum\":49}],51:[function(t,e,o){arguments[4][44][0].apply(o,arguments)},{dup:44}],52:[function(t,e,o){arguments[4][45][0].apply(o,arguments)},{dup:45}],53:[function(t,e,o){arguments[4][46][0].apply(o,arguments)},{dup:46}],54:[function(t,e,o){arguments[4][47][0].apply(o,arguments)},{dup:47,\"robust-scale\":50,\"robust-subtract\":51,\"robust-sum\":52,\"two-product\":53}],55:[function(t,e,o){\"use strict\";\"use restrict\";function n(t){var e=32;return t&=-t,t&&e--,65535&t&&(e-=16),16711935&t&&(e-=8),252645135&t&&(e-=4),858993459&t&&(e-=2),1431655765&t&&(e-=1),e}var r=32;o.INT_BITS=r,o.INT_MAX=2147483647,o.INT_MIN=-1<<r-1,o.sign=function(t){return(t>0)-(0>t)},o.abs=function(t){var e=t>>r-1;return(t^e)-e},o.min=function(t,e){return e^(t^e)&-(e>t)},o.max=function(t,e){return t^(t^e)&-(e>t)},o.isPow2=function(t){return!(t&t-1||!t)},o.log2=function(t){var e,o;return e=(t>65535)<<4,t>>>=e,o=(t>255)<<3,t>>>=o,e|=o,o=(t>15)<<2,t>>>=o,e|=o,o=(t>3)<<1,t>>>=o,e|=o,e|t>>1},o.log10=function(t){return t>=1e9?9:t>=1e8?8:t>=1e7?7:t>=1e6?6:t>=1e5?5:t>=1e4?4:t>=1e3?3:t>=100?2:t>=10?1:0},o.popCount=function(t){return t-=t>>>1&1431655765,t=(858993459&t)+(t>>>2&858993459),16843009*(t+(t>>>4)&252645135)>>>24},o.countTrailingZeros=n,o.nextPow2=function(t){return t+=0===t,--t,t|=t>>>1,t|=t>>>2,t|=t>>>4,t|=t>>>8,t|=t>>>16,t+1},o.prevPow2=function(t){return t|=t>>>1,t|=t>>>2,t|=t>>>4,t|=t>>>8,t|=t>>>16,t-(t>>>1)},o.parity=function(t){return t^=t>>>16,t^=t>>>8,t^=t>>>4,t&=15,27030>>>t&1};var i=new Array(256);!function(t){for(var e=0;256>e;++e){var o=e,n=e,r=7;for(o>>>=1;o;o>>>=1)n<<=1,n|=1&o,--r;t[e]=n<<r&255}}(i),o.reverse=function(t){return i[255&t]<<24|i[t>>>8&255]<<16|i[t>>>16&255]<<8|i[t>>>24&255]},o.interleave2=function(t,e){return t&=65535,t=16711935&(t|t<<8),t=252645135&(t|t<<4),t=858993459&(t|t<<2),t=1431655765&(t|t<<1),e&=65535,e=16711935&(e|e<<8),e=252645135&(e|e<<4),e=858993459&(e|e<<2),e=1431655765&(e|e<<1),t|e<<1},o.deinterleave2=function(t,e){return t=t>>>e&1431655765,t=858993459&(t|t>>>1),t=252645135&(t|t>>>2),t=16711935&(t|t>>>4),t=65535&(t|t>>>16),t<<16>>16},o.interleave3=function(t,e,o){return t&=1023,t=4278190335&(t|t<<16),t=251719695&(t|t<<8),t=3272356035&(t|t<<4),t=1227133513&(t|t<<2),e&=1023,e=4278190335&(e|e<<16),e=251719695&(e|e<<8),e=3272356035&(e|e<<4),e=1227133513&(e|e<<2),t|=e<<1,o&=1023,o=4278190335&(o|o<<16),o=251719695&(o|o<<8),o=3272356035&(o|o<<4),o=1227133513&(o|o<<2),t|o<<2},o.deinterleave3=function(t,e){return t=t>>>e&1227133513,t=3272356035&(t|t>>>2),t=251719695&(t|t>>>4),t=4278190335&(t|t>>>8),t=1023&(t|t>>>16),t<<22>>22},o.nextCombination=function(t){var e=t|t-1;return e+1|(~e&-~e)-1>>>n(t)+1}},{}],56:[function(t,e,o){\"use strict\";\"use restrict\";function n(t){this.roots=new Array(t),this.ranks=new Array(t);for(var e=0;t>e;++e)this.roots[e]=e,this.ranks[e]=0}e.exports=n;var r=n.prototype;Object.defineProperty(r,\"length\",{get:function(){return this.roots.length}}),r.makeSet=function(){var t=this.roots.length;return this.roots.push(t),this.ranks.push(0),t},r.find=function(t){for(var e=t,o=this.roots;o[t]!==t;)t=o[t];for(;o[e]!==t;){var n=o[e];o[e]=t,e=n}return t},r.link=function(t,e){var o=this.find(t),n=this.find(e);if(o!==n){var r=this.ranks,i=this.roots,s=r[o],a=r[n];a>s?i[o]=n:s>a?i[n]=o:(i[n]=o,++r[o])}}},{}],57:[function(t,e,o){\"use strict\";\"use restrict\";function n(t){for(var e=0,o=Math.max,n=0,r=t.length;r>n;++n)e=o(e,t[n].length);return e-1}function r(t){for(var e=-1,o=Math.max,n=0,r=t.length;r>n;++n)for(var i=t[n],s=0,a=i.length;a>s;++s)e=o(e,i[s]);return e+1}function i(t){for(var e=new Array(t.length),o=0,n=t.length;n>o;++o)e[o]=t[o].slice(0);return e}function s(t,e){var o=t.length,n=t.length-e.length,r=Math.min;if(n)return n;switch(o){case 0:return 0;case 1:return t[0]-e[0];case 2:var i=t[0]+t[1]-e[0]-e[1];return i?i:r(t[0],t[1])-r(e[0],e[1]);case 3:var s=t[0]+t[1],a=e[0]+e[1];if(i=s+t[2]-(a+e[2]))return i;var p=r(t[0],t[1]),u=r(e[0],e[1]),i=r(p,t[2])-r(u,e[2]);return i?i:r(p+t[2],s)-r(u+e[2],a);default:var l=t.slice(0);l.sort();var g=e.slice(0);g.sort();for(var h=0;o>h;++h)if(n=l[h]-g[h])return n;return 0}}function a(t,e){return s(t[0],e[0])}function p(t,e){if(e){for(var o=t.length,n=new Array(o),r=0;o>r;++r)n[r]=[t[r],e[r]];n.sort(a);for(var r=0;o>r;++r)t[r]=n[r][0],e[r]=n[r][1];return t}return t.sort(s),t}function u(t){if(0===t.length)return[];for(var e=1,o=t.length,n=1;o>n;++n){var r=t[n];if(s(r,t[n-1])){if(n===e){e++;continue}t[e++]=r}}return t.length=e,t}function l(t,e){for(var o=0,n=t.length-1,r=-1;n>=o;){var i=o+n>>1,a=s(t[i],e);0>=a?(0===a&&(r=i),o=i+1):a>0&&(n=i-1)}return r}function g(t,e){for(var o=new Array(t.length),n=0,r=o.length;r>n;++n)o[n]=[];for(var i=[],n=0,a=e.length;a>n;++n)for(var p=e[n],u=p.length,g=1,h=1<<u;h>g;++g){i.length=v.popCount(g);for(var c=0,d=0;u>d;++d)g&1<<d&&(i[c++]=p[d]);var f=l(t,i);if(!(0>f))for(;;)if(o[f++].push(n),f>=t.length||0!==s(t[f],i))break}return o}function h(t,e){if(!e)return g(u(d(t,0)),t,0);for(var o=new Array(e),n=0;e>n;++n)o[n]=[];for(var n=0,r=t.length;r>n;++n)for(var i=t[n],s=0,a=i.length;a>s;++s)o[i[s]].push(n);return o}function c(t){for(var e=[],o=0,n=t.length;n>o;++o)for(var r=t[o],i=0|r.length,s=1,a=1<<i;a>s;++s){for(var u=[],l=0;i>l;++l)s>>>l&1&&u.push(r[l]);e.push(u)}return p(e)}function d(t,e){if(0>e)return[];for(var o=[],n=(1<<e+1)-1,r=0;r<t.length;++r)for(var i=t[r],s=n;s<1<<i.length;s=v.nextCombination(s)){for(var a=new Array(e+1),u=0,l=0;l<i.length;++l)s&1<<l&&(a[u++]=i[l]);o.push(a)}return p(o)}function f(t){for(var e=[],o=0,n=t.length;n>o;++o)for(var r=t[o],i=0,s=r.length;s>i;++i){for(var a=new Array(r.length-1),u=0,l=0;s>u;++u)u!==i&&(a[l++]=r[u]);e.push(a)}return p(e)}function m(t,e){for(var o=new x(e),n=0;n<t.length;++n)for(var r=t[n],i=0;i<r.length;++i)for(var s=i+1;s<r.length;++s)o.link(r[i],r[s]);for(var a=[],p=o.ranks,n=0;n<p.length;++n)p[n]=-1;for(var n=0;n<t.length;++n){var u=o.find(t[n][0]);p[u]<0?(p[u]=a.length,a.push([t[n].slice(0)])):a[p[u]].push(t[n].slice(0))}return a}function y(t){for(var e=u(p(d(t,0))),o=new x(e.length),n=0;n<t.length;++n)for(var r=t[n],i=0;i<r.length;++i)for(var s=l(e,[r[i]]),a=i+1;a<r.length;++a)o.link(s,l(e,[r[a]]));for(var g=[],h=o.ranks,n=0;n<h.length;++n)h[n]=-1;for(var n=0;n<t.length;++n){var c=o.find(l(e,[t[n][0]]));h[c]<0?(h[c]=g.length,g.push([t[n].slice(0)])):g[h[c]].push(t[n].slice(0))}return g}function j(t,e){return e?m(t,e):y(t)}var v=t(\"bit-twiddle\"),x=t(\"union-find\");o.dimension=n,o.countVertices=r,o.cloneCells=i,o.compareCells=s,o.normalize=p,o.unique=u,o.findCell=l,o.incidence=g,o.dual=h,o.explode=c,o.skeleton=d,o.boundary=f,o.connectedComponents=j},{\"bit-twiddle\":55,\"union-find\":56}],58:[function(t,e,o){\"use strict\";function n(t){var e=t.length;if(3>e){for(var o=new Array(e),n=0;e>n;++n)o[n]=n;return 2===e&&t[0][0]===t[1][0]&&t[0][1]===t[1][1]?[0]:o}for(var i=new Array(e),n=0;e>n;++n)i[n]=n;i.sort(function(e,o){var n=t[e][0]-t[o][0];return n?n:t[e][1]-t[o][1]});for(var s=[i[0],i[1]],a=[i[0],i[1]],n=2;e>n;++n){for(var p=i[n],u=t[p],l=s.length;l>1&&r(t[s[l-2]],t[s[l-1]],u)<=0;)l-=1,s.pop();for(s.push(p),l=a.length;l>1&&r(t[a[l-2]],t[a[l-1]],u)>=0;)l-=1,a.pop();a.push(p)}for(var o=new Array(a.length+s.length-2),g=0,n=0,h=s.length;h>n;++n)o[g++]=s[n];for(var c=a.length-2;c>0;--c)o[g++]=a[c];return o}e.exports=n;var r=t(\"robust-orientation\")[3]},{\"robust-orientation\":64}],59:[function(t,e,o){arguments[4][42][0].apply(o,arguments)},{dup:42}],60:[function(t,e,o){arguments[4][43][0].apply(o,arguments)},{dup:43,\"two-product\":63,\"two-sum\":59}],61:[function(t,e,o){arguments[4][44][0].apply(o,arguments)},{dup:44}],62:[function(t,e,o){arguments[4][45][0].apply(o,arguments)},{dup:45}],63:[function(t,e,o){arguments[4][46][0].apply(o,arguments)},{dup:46}],64:[function(t,e,o){arguments[4][47][0].apply(o,arguments)},{dup:47,\"robust-scale\":60,\"robust-subtract\":61,\"robust-sum\":62,\"two-product\":63}],65:[function(t,e,o){arguments[4][33][0].apply(o,arguments)},{dup:33}],66:[function(t,e,o){var n=t(\"turf-inside\");e.exports=function(t,e,o,r){for(var i=0;i<t.features.length;i++){var s=t.features[i];s.properties||(s.properties={});for(var a=0,p=0;p<e.features.length;p++){var u=e.features[p];n(u,s)&&a++}s.properties[o]=a}return t}},{\"turf-inside\":86}],67:[function(t,e,o){function n(t){return t*Math.PI/180}function r(t){return 180*t/Math.PI}var i=t(\"turf-point\");e.exports=function(t,e,o,s){var a=t.geometry.coordinates,p=n(a[0]),u=n(a[1]),l=n(o),g=0;switch(s){case\"miles\":g=3960;break;case\"kilometers\":g=6373;break;case\"degrees\":g=57.2957795;break;case\"radians\":g=1}var h=Math.asin(Math.sin(u)*Math.cos(e/g)+Math.cos(u)*Math.sin(e/g)*Math.cos(l)),c=p+Math.atan2(Math.sin(l)*Math.sin(e/g)*Math.cos(u),Math.cos(e/g)-Math.sin(u)*Math.sin(h));return i([r(c),r(h)])}},{\"turf-point\":112}],68:[function(t,e,o){var n=t(\"simple-statistics\"),r=t(\"turf-inside\");e.exports=function(t,e,o,i,s){return t.features.forEach(function(t){t.properties||(t.properties={});var s=[];e.features.forEach(function(e){r(e,t)&&s.push(e.properties[o])}),t.properties[i]=n.standard_deviation(s)}),t}},{\"simple-statistics\":69,\"turf-inside\":86}],69:[function(t,e,o){!function(){function t(){var t={},e=[];return t.data=function(o){return arguments.length?(e=o.slice(),t):e},t.mb=function(){var t,o,n=e.length;if(1===n)t=0,o=e[0][1];else{for(var r,i,s,a=0,p=0,u=0,l=0,g=0;n>g;g++)r=e[g],i=r[0],s=r[1],a+=i,p+=s,u+=i*i,l+=i*s;t=(n*l-a*p)/(n*u-a*a),o=p/n-t*a/n}return{m:t,b:o}},t.m=function(){return t.mb().m},t.b=function(){return t.mb().b},t.line=function(){var e=t.mb(),o=e.m,n=e.b;return function(t){return n+o*t}},t}function o(t,e){if(t.length<2)return 1;for(var o,n=0,r=0;r<t.length;r++)n+=t[r][1];o=n/t.length;for(var i=0,s=0;s<t.length;s++)i+=Math.pow(o-t[s][1],2);for(var a=0,p=0;p<t.length;p++)a+=Math.pow(t[p][1]-e(t[p][0]),2);return 1-a/i}function n(){var t={},e=0,o={};return t.train=function(t,n){o[n]||(o[n]={});for(var r in t){var i=t[r];void 0===o[n][r]&&(o[n][r]={}),void 0===o[n][r][i]&&(o[n][r][i]=0),o[n][r][t[r]]++}e++},t.score=function(t){var n,r={};for(var i in t){var s=t[i];for(n in o)void 0===r[n]&&(r[n]={}),o[n][i]?r[n][i+\"_\"+s]=(o[n][i][s]||0)/e:r[n][i+\"_\"+s]=0}var a={};for(n in r)for(var p in r[n])void 0===a[n]&&(a[n]=0),a[n]+=r[n][p];return a},t}function r(t){for(var e=0,o=0;o<t.length;o++)e+=t[o];return e}function i(t){return 0===t.length?null:r(t)/t.length}function s(t){if(0===t.length)return null;for(var e=1,o=0;o<t.length;o++){if(t[o]<=0)return null;e*=t[o]}return Math.pow(e,1/t.length)}function a(t){if(0===t.length)return null;for(var e=0,o=0;o<t.length;o++){if(t[o]<=0)return null;e+=1/t[o]}return t.length/e}function p(t){if(0===t.length)return null;for(var e=0,o=0;o<t.length;o++)e+=Math.pow(t[o],2);return Math.sqrt(e/t.length)}function u(t){for(var e,o=0;o<t.length;o++)(t[o]<e||void 0===e)&&(e=t[o]);return e}function l(t){for(var e,o=0;o<t.length;o++)(t[o]>e||void 0===e)&&(e=t[o]);return e}function g(t){if(0===t.length)return null;for(var e=i(t),o=[],n=0;n<t.length;n++)o.push(Math.pow(t[n]-e,2));return i(o)}function h(t){return 0===t.length?null:Math.sqrt(g(t))}function c(t,e){for(var o=i(t),n=0,r=0;r<t.length;r++)n+=Math.pow(t[r]-o,e);return n}function d(t){if(t.length<=1)return null;var e=c(t,2);return e/(t.length-1)}function f(t){return t.length<=1?null:Math.sqrt(d(t))}function m(t,e){if(t.length<=1||t.length!=e.length)return null;for(var o=i(t),n=i(e),r=0,s=0;s<t.length;s++)r+=(t[s]-o)*(e[s]-n);return r/(t.length-1)}function y(t,e){var o=m(t,e),n=f(t),r=f(e);return null===o||null===n||null===r?null:o/n/r}function j(t){if(0===t.length)return null;var e=t.slice().sort(function(t,e){return t-e});if(e.length%2===1)return e[(e.length-1)/2];var o=e[e.length/2-1],n=e[e.length/2];return(o+n)/2}function v(t){if(0===t.length)return null;if(1===t.length)return t[0];for(var e,o=t.slice().sort(function(t,e){return t-e}),n=o[0],r=0,i=1,s=1;s<o.length+1;s++)o[s]!==n?(i>r&&(r=i,e=n),i=1,n=o[s]):i++;return e}function x(t,e){var o=i(t),n=h(t),r=Math.sqrt(t.length);return(o-e)/(n/r)}function E(t,e,o){var n=t.length,r=e.length;if(!n||!r)return null;o||(o=0);var s=i(t),a=i(e),p=((n-1)*d(t)+(r-1)*d(e))/(n+r-2);return(s-a-o)/Math.sqrt(p*(1/n+1/r))}function I(t,e){var o=[];if(0>=e)return null;for(var n=0;n<t.length;n+=e)o.push(t.slice(n,n+e));return o}function S(t,e){e=e||Math.random;for(var o,n,r=t.length;r>0;)n=Math.floor(e()*r--),o=t[r],t[r]=t[n],t[n]=o;return t}function L(t,e){return t=t.slice(),S(t.slice(),e)}function C(t,e,o){var n=L(t,o);return n.slice(0,e)}function N(t,e){if(0===t.length)return null;var o=t.slice().sort(function(t,e){return t-e});if(e.length){for(var n=[],r=0;r<e.length;r++)n[r]=b(o,e[r]);return n}return b(o,e)}function b(t,e){var o=t.length*e;return 0>e||e>1?null:1===e?t[t.length-1]:0===e?t[0]:o%1!==0?t[Math.ceil(o)-1]:t.length%2===0?(t[o-1]+t[o])/2:t[o]}function P(t){return 0===t.length?null:N(t,.75)-N(t,.25)}function w(t){if(!t||0===t.length)return null;for(var e=j(t),o=[],n=0;n<t.length;n++)o.push(Math.abs(t[n]-e));return j(o)}function R(t,e){var o,n,r=[],i=[],s=0;for(o=0;o<t.length+1;o++){var a=[],p=[];for(n=0;e+1>n;n++)a.push(0),p.push(0);r.push(a),i.push(p)}for(o=1;e+1>o;o++)for(r[1][o]=1,i[1][o]=0,n=2;n<t.length+1;n++)i[n][o]=1/0;for(var u=2;u<t.length+1;u++){for(var l=0,g=0,h=0,c=0,d=1;u+1>d;d++){var f=u-d+1,m=t[f-1];if(h++,l+=m,g+=m*m,s=g-l*l/h,c=f-1,0!==c)for(n=2;e+1>n;n++)i[u][n]>=s+i[c][n-1]&&(r[u][n]=f,i[u][n]=s+i[c][n-1])}r[u][1]=1,i[u][1]=s}return{lower_class_limits:r,variance_combinations:i}}function O(t,e,o){var n=t.length,r=[],i=o;for(r[o]=t[t.length-1];i>0;)r[i-1]=t[e[n][i]-1],n=e[n][i]-1,i--;return r}function M(t,e){if(e>t.length)return null;t=t.slice().sort(function(t,e){return t-e});var o=R(t,e),n=o.lower_class_limits;return O(t,n,e)}function A(t){if(t.length<3)return null;var e=t.length,o=Math.pow(f(t),3),n=c(t,3);return e*n/((e-1)*(e-2)*o)}function T(t){var e=1/(1+.5*Math.abs(t)),o=e*Math.exp(-Math.pow(t,2)-1.26551223+1.00002368*e+.37409196*Math.pow(e,2)+.09678418*Math.pow(e,3)-.18628806*Math.pow(e,4)+.27886807*Math.pow(e,5)-1.13520398*Math.pow(e,6)+1.48851587*Math.pow(e,7)-.82215223*Math.pow(e,8)+.17087277*Math.pow(e,9));return t>=0?1-o:o-1}function D(t){var e=Math.abs(t),o=Math.min(Math.round(100*e),z.length-1);return t>=0?z[o]:+(1-z[o]).toFixed(4)}function G(t,e,o){return(t-e)/o}function F(t){if(0>t)return null;for(var e=1,o=2;t>=o;o++)e*=o;return e}function B(t){return 0>t||t>1?null:q(1,t)}function q(t,e){function o(t,e,o){return F(e)/(F(t)*F(e-t))*(Math.pow(o,t)*Math.pow(1-o,e-t))}if(0>e||e>1||0>=t||t%1!==0)return null;var n=0,r=0,i={};do i[n]=o(n,t,e),r+=i[n],n++;while(1-H>r);return i}function _(t){function e(t,e){return Math.pow(Math.E,-e)*Math.pow(e,t)/F(t)}if(0>=t)return null;var o=0,n=0,r={};do r[o]=e(o,t),n+=r[o],o++;while(1-H>n);return r}function V(t,e,o){for(var n,r,s=i(t),a=0,p=1,u=e(s),l=[],g=[],h=0;h<t.length;h++)void 0===l[t[h]]&&(l[t[h]]=0),l[t[h]]++;for(h=0;h<l.length;h++)void 0===l[h]&&(l[h]=0);for(r in u)r in l&&(g[r]=u[r]*t.length);for(r=g.length-1;r>=0;r--)g[r]<3&&(g[r-1]+=g[r],g.pop(),l[r-1]+=l[r],l.pop());for(r=0;r<l.length;r++)a+=Math.pow(l[r]-g[r],2)/g[r];return n=l.length-p-1,Y[n][o]<a}function k(t){function e(t){return function(){var e=Array.prototype.slice.apply(arguments);return e.unshift(this),U[t].apply(U,e)}}var o=!(!Object.defineProperty||!Object.defineProperties);if(!o)throw new Error(\"without defineProperty, simple-statistics cannot be mixed in\");var n,r=[\"median\",\"standard_deviation\",\"sum\",\"sample_skewness\",\"mean\",\"min\",\"max\",\"quantile\",\"geometric_mean\",\"harmonic_mean\",\"root_mean_square\"];n=t?t.slice():Array.prototype;for(var i=0;i<r.length;i++)Object.defineProperty(n,r[i],{value:e(r[i]),configurable:!0,enumerable:!1,writable:!0});return n}var U={};\"undefined\"!=typeof e?e.exports=U:this.ss=U;var z=[.5,.504,.508,.512,.516,.5199,.5239,.5279,.5319,.5359,.5398,.5438,.5478,.5517,.5557,.5596,.5636,.5675,.5714,.5753,.5793,.5832,.5871,.591,.5948,.5987,.6026,.6064,.6103,.6141,.6179,.6217,.6255,.6293,.6331,.6368,.6406,.6443,.648,.6517,.6554,.6591,.6628,.6664,.67,.6736,.6772,.6808,.6844,.6879,.6915,.695,.6985,.7019,.7054,.7088,.7123,.7157,.719,.7224,.7257,.7291,.7324,.7357,.7389,.7422,.7454,.7486,.7517,.7549,.758,.7611,.7642,.7673,.7704,.7734,.7764,.7794,.7823,.7852,.7881,.791,.7939,.7967,.7995,.8023,.8051,.8078,.8106,.8133,.8159,.8186,.8212,.8238,.8264,.8289,.8315,.834,.8365,.8389,.8413,.8438,.8461,.8485,.8508,.8531,.8554,.8577,.8599,.8621,.8643,.8665,.8686,.8708,.8729,.8749,.877,.879,.881,.883,.8849,.8869,.8888,.8907,.8925,.8944,.8962,.898,.8997,.9015,.9032,.9049,.9066,.9082,.9099,.9115,.9131,.9147,.9162,.9177,.9192,.9207,.9222,.9236,.9251,.9265,.9279,.9292,.9306,.9319,.9332,.9345,.9357,.937,.9382,.9394,.9406,.9418,.9429,.9441,.9452,.9463,.9474,.9484,.9495,.9505,.9515,.9525,.9535,.9545,.9554,.9564,.9573,.9582,.9591,.9599,.9608,.9616,.9625,.9633,.9641,.9649,.9656,.9664,.9671,.9678,.9686,.9693,.9699,.9706,.9713,.9719,.9726,.9732,.9738,.9744,.975,.9756,.9761,.9767,.9772,.9778,.9783,.9788,.9793,.9798,.9803,.9808,.9812,.9817,.9821,.9826,.983,.9834,.9838,.9842,.9846,.985,.9854,.9857,.9861,.9864,.9868,.9871,.9875,.9878,.9881,.9884,.9887,.989,.9893,.9896,.9898,.9901,.9904,.9906,.9909,.9911,.9913,.9916,.9918,.992,.9922,.9925,.9927,.9929,.9931,.9932,.9934,.9936,.9938,.994,.9941,.9943,.9945,.9946,.9948,.9949,.9951,.9952,.9953,.9955,.9956,.9957,.9959,.996,.9961,.9962,.9963,.9964,.9965,.9966,.9967,.9968,.9969,.997,.9971,.9972,.9973,.9974,.9974,.9975,.9976,.9977,.9977,.9978,.9979,.9979,.998,.9981,.9981,.9982,.9982,.9983,.9984,.9984,.9985,.9985,.9986,.9986,.9987,.9987,.9987,.9988,.9988,.9989,.9989,.9989,.999,.999],H=1e-4,Y={1:{.995:0,.99:0,.975:0,.95:0,.9:.02,.5:.45,.1:2.71,.05:3.84,.025:5.02,.01:6.63,.005:7.88},2:{.995:.01,.99:.02,.975:.05,.95:.1,.9:.21,.5:1.39,.1:4.61,.05:5.99,.025:7.38,.01:9.21,.005:10.6},3:{.995:.07,.99:.11,.975:.22,.95:.35,.9:.58,.5:2.37,.1:6.25,.05:7.81,.025:9.35,.01:11.34,.005:12.84},4:{.995:.21,.99:.3,.975:.48,.95:.71,.9:1.06,.5:3.36,.1:7.78,.05:9.49,.025:11.14,.01:13.28,.005:14.86},5:{.995:.41,.99:.55,.975:.83,.95:1.15,.9:1.61,.5:4.35,.1:9.24,.05:11.07,.025:12.83,.01:15.09,.005:16.75},6:{.995:.68,.99:.87,.975:1.24,.95:1.64,.9:2.2,.5:5.35,.1:10.65,.05:12.59,.025:14.45,.01:16.81,.005:18.55},7:{.995:.99,.99:1.25,.975:1.69,.95:2.17,.9:2.83,.5:6.35,.1:12.02,.05:14.07,.025:16.01,.01:18.48,.005:20.28},8:{.995:1.34,.99:1.65,.975:2.18,.95:2.73,.9:3.49,.5:7.34,.1:13.36,.05:15.51,.025:17.53,.01:20.09,.005:21.96},9:{.995:1.73,.99:2.09,.975:2.7,.95:3.33,.9:4.17,.5:8.34,.1:14.68,.05:16.92,.025:19.02,.01:21.67,.005:23.59},10:{.995:2.16,.99:2.56,.975:3.25,.95:3.94,.9:4.87,.5:9.34,.1:15.99,.05:18.31,.025:20.48,.01:23.21,.005:25.19},11:{.995:2.6,.99:3.05,.975:3.82,.95:4.57,.9:5.58,.5:10.34,.1:17.28,.05:19.68,.025:21.92,.01:24.72,.005:26.76},12:{.995:3.07,.99:3.57,.975:4.4,.95:5.23,.9:6.3,.5:11.34,.1:18.55,.05:21.03,.025:23.34,.01:26.22,.005:28.3},13:{.995:3.57,.99:4.11,.975:5.01,.95:5.89,.9:7.04,.5:12.34,.1:19.81,.05:22.36,.025:24.74,.01:27.69,.005:29.82},14:{.995:4.07,.99:4.66,.975:5.63,.95:6.57,.9:7.79,.5:13.34,.1:21.06,.05:23.68,.025:26.12,.01:29.14,.005:31.32},15:{.995:4.6,.99:5.23,.975:6.27,.95:7.26,.9:8.55,.5:14.34,.1:22.31,.05:25,.025:27.49,.01:30.58,.005:32.8},16:{.995:5.14,.99:5.81,.975:6.91,.95:7.96,.9:9.31,.5:15.34,.1:23.54,.05:26.3,.025:28.85,.01:32,.005:34.27},17:{.995:5.7,.99:6.41,.975:7.56,.95:8.67,.9:10.09,.5:16.34,.1:24.77,.05:27.59,.025:30.19,.01:33.41,.005:35.72},18:{.995:6.26,.99:7.01,.975:8.23,.95:9.39,.9:10.87,.5:17.34,.1:25.99,.05:28.87,.025:31.53,.01:34.81,.005:37.16},19:{.995:6.84,.99:7.63,.975:8.91,.95:10.12,.9:11.65,.5:18.34,.1:27.2,.05:30.14,.025:32.85,.01:36.19,.005:38.58},20:{.995:7.43,.99:8.26,.975:9.59,.95:10.85,.9:12.44,.5:19.34,.1:28.41,.05:31.41,.025:34.17,.01:37.57,.005:40},21:{.995:8.03,.99:8.9,.975:10.28,.95:11.59,.9:13.24,.5:20.34,.1:29.62,.05:32.67,.025:35.48,.01:38.93,.005:41.4},22:{.995:8.64,.99:9.54,.975:10.98,.95:12.34,.9:14.04,.5:21.34,.1:30.81,.05:33.92,.025:36.78,.01:40.29,.005:42.8},23:{.995:9.26,.99:10.2,.975:11.69,.95:13.09,.9:14.85,.5:22.34,.1:32.01,.05:35.17,.025:38.08,.01:41.64,.005:44.18},24:{.995:9.89,.99:10.86,.975:12.4,.95:13.85,.9:15.66,.5:23.34,.1:33.2,.05:36.42,.025:39.36,.01:42.98,.005:45.56},25:{.995:10.52,.99:11.52,.975:13.12,.95:14.61,.9:16.47,.5:24.34,.1:34.28,.05:37.65,.025:40.65,.01:44.31,.005:46.93},26:{.995:11.16,.99:12.2,.975:13.84,.95:15.38,.9:17.29,.5:25.34,.1:35.56,.05:38.89,.025:41.92,.01:45.64,.005:48.29},27:{.995:11.81,.99:12.88,.975:14.57,.95:16.15,.9:18.11,.5:26.34,.1:36.74,.05:40.11,.025:43.19,.01:46.96,.005:49.65},28:{.995:12.46,.99:13.57,.975:15.31,.95:16.93,.9:18.94,.5:27.34,.1:37.92,.05:41.34,.025:44.46,.01:48.28,.005:50.99},29:{.995:13.12,.99:14.26,.975:16.05,.95:17.71,.9:19.77,.5:28.34,.1:39.09,.05:42.56,.025:45.72,.01:49.59,.005:52.34},30:{.995:13.79,.99:14.95,.975:16.79,.95:18.49,.9:20.6,.5:29.34,.1:40.26,.05:43.77,.025:46.98,.01:50.89,.005:53.67},40:{.995:20.71,.99:22.16,.975:24.43,.95:26.51,.9:29.05,.5:39.34,.1:51.81,.05:55.76,.025:59.34,.01:63.69,.005:66.77},50:{.995:27.99,.99:29.71,.975:32.36,.95:34.76,.9:37.69,.5:49.33,.1:63.17,.05:67.5,.025:71.42,.01:76.15,.005:79.49},60:{.995:35.53,.99:37.48,.975:40.48,.95:43.19,.9:46.46,.5:59.33,.1:74.4,.05:79.08,.025:83.3,.01:88.38,.005:91.95},70:{.995:43.28,.99:45.44,.975:48.76,.95:51.74,.9:55.33,.5:69.33,.1:85.53,.05:90.53,.025:95.02,.01:100.42,.005:104.22},80:{.995:51.17,.99:53.54,.975:57.15,.95:60.39,.9:64.28,.5:79.33,.1:96.58,.05:101.88,.025:106.63,.01:112.33,.005:116.32},90:{.995:59.2,.99:61.75,.975:65.65,.95:69.13,.9:73.29,.5:89.33,.1:107.57,.05:113.14,.025:118.14,.01:124.12,.005:128.3},100:{.995:67.33,.99:70.06,.975:74.22,.95:77.93,.9:82.36,.5:99.33,.1:118.5,.05:124.34,.025:129.56,.01:135.81,.005:140.17}};U.linear_regression=t,U.standard_deviation=h,U.r_squared=o,U.median=j,U.mean=i,U.mode=v,U.min=u,U.max=l,U.sum=r,U.quantile=N,U.quantile_sorted=b,U.iqr=P,U.mad=w,U.chunk=I,U.shuffle=L,U.shuffle_in_place=S,U.sample=C,U.sample_covariance=m,U.sample_correlation=y,U.sample_variance=d,U.sample_standard_deviation=f,U.sample_skewness=A,U.geometric_mean=s,U.harmonic_mean=a,U.root_mean_square=p,U.variance=g,U.t_test=x,U.t_test_two_sample=E,U.jenksMatrices=R,U.jenksBreaks=O,U.jenks=M,U.bayesian=n,U.epsilon=H,U.factorial=F,U.bernoulli_distribution=B,U.binomial_distribution=q,U.poisson_distribution=_,U.chi_squared_goodness_of_fit=V,U.z_score=G,U.cumulative_std_normal_probability=D,U.standard_normal_table=z,U.error_function=T,U.average=i,U.interquartile_range=P,U.mixin=k,U.median_absolute_deviation=w,U.rms=p,U.erf=T}(this)},{}],70:[function(t,e,o){function n(t){return t*Math.PI/180}var r=t(\"turf-invariant\");e.exports=function(t,e,o){r.featureOf(t,\"Point\",\"distance\"),r.featureOf(e,\"Point\",\"distance\");var i,s=t.geometry.coordinates,a=e.geometry.coordinates,p=n(a[1]-s[1]),u=n(a[0]-s[0]),l=n(s[1]),g=n(a[1]),h=Math.sin(p/2)*Math.sin(p/2)+Math.sin(u/2)*Math.sin(u/2)*Math.cos(l)*Math.cos(g),c=2*Math.atan2(Math.sqrt(h),Math.sqrt(1-h));switch(o){case\"miles\":i=3960;break;case\"kilometers\":i=6373;break;case\"degrees\":i=57.2957795;break;case\"radians\":i=1;break;case void 0:i=6373;break;default:throw new Error('unknown option given to \"units\"')}var d=i*c;return d}},{\"turf-invariant\":71}],71:[function(t,e,o){function n(t,e,o){if(!e||!o)throw new Error(\"type and name required\");if(!t||t.type!==e)throw new Error(\"Invalid input to \"+o+\": must be a \"+e+\", given \"+t.type)}function r(t,e,o){if(!o)throw new Error(\".featureOf() requires a name\");if(!t||\"Feature\"!==t.type||!t.geometry)throw new Error(\"Invalid input to \"+o+\", Feature with geometry required\");if(!t.geometry||t.geometry.type!==e)throw new Error(\"Invalid input to \"+o+\": must be a \"+e+\", given \"+t.geometry.type)}function i(t,e,o){if(!o)throw new Error(\".collectionOf() requires a name\");if(!t||\"FeatureCollection\"!==t.type)throw new Error(\"Invalid input to \"+o+\", FeatureCollection required\");for(var n=0;n<t.features.length;n++){var r=t.features[n];if(!r||\"Feature\"!==r.type||!r.geometry)throw new Error(\"Invalid input to \"+o+\", Feature with geometry required\");if(!r.geometry||r.geometry.type!==e)throw new Error(\"Invalid input to \"+o+\": must be a \"+e+\", given \"+r.geometry.type)}}e.exports.geojsonType=n,e.exports.collectionOf=i,e.exports.featureOf=r},{}],72:[function(t,e,o){var n=t(\"turf-extent\"),r=t(\"turf-bbox-polygon\");e.exports=function(t,e){var o=n(t),i=r(o);return i}},{\"turf-bbox-polygon\":22,\"turf-extent\":80}],73:[function(t,e,o){var n=t(\"jsts\");e.exports=function(t,e,o){var r=JSON.parse(JSON.stringify(t)),i=JSON.parse(JSON.stringify(e));\"Feature\"!==r.type&&(r={type:\"Feature\",properties:{},geometry:r}),\"Feature\"!==i.type&&(i={type:\"Feature\",properties:{},geometry:i});var s=new n.io.GeoJSONReader,a=s.read(JSON.stringify(r.geometry)),p=s.read(JSON.stringify(i.geometry)),u=a.difference(p),l=new n.io.GeoJSONParser;return u=l.write(u),r.geometry=u,\"GeometryCollection\"===r.geometry.type&&0===r.geometry.geometries.length?void 0:{type:\"Feature\",properties:r.properties,geometry:u}}},{jsts:74}],74:[function(t,e,o){arguments[4][27][0].apply(o,arguments)},{\"./lib/jsts\":75,dup:27,\"javascript.util\":77}],75:[function(t,e,o){arguments[4][28][0].apply(o,arguments)},{dup:28}],76:[function(t,e,o){(function(t){(function(){function e(t,e){var o=t.split(\".\"),n=O;o[0]in n||!n.execScript||n.execScript(\"var \"+o[0]);for(var r;o.length&&(r=o.shift());)o.length||void 0===e?n=n[r]?n[r]:n[r]={}:n[r]=e}function o(t,e){function o(){}o.prototype=e.prototype,t.q=e.prototype,t.prototype=new o,t.prototype.constructor=t,t.p=function(t,o,n){var r=Array.prototype.slice.call(arguments,2);return e.prototype[o].apply(t,r)}}function n(t){this.message=t||\"\"}function r(t){this.message=t||\"\"}function i(){}function s(){}function a(){}function p(){}function u(t){this.message=t||\"\"}function l(t){this.message=t||\"\"}function g(t){this.a=[],t instanceof s&&this.e(t)}function h(t){this.j=t}function c(){}function d(){this.i={}}function f(){}function m(t){this.a=[],t instanceof s&&this.e(t)}function y(t){this.k=t}function j(){}function v(){}function x(){this.a=[]}function E(t){return null==t?null:t.parent}function I(t,e){null!==t&&(t.color=e)}function S(t){return null==t?null:t.left}function L(t){return null==t?null:t.right}function C(){this.d=null,this.n=0}function N(t,e){if(null!=e){var o=e.right;e.right=o.left,null!=o.left&&(o.left.parent=e),o.parent=e.parent,null==e.parent?t.d=o:e.parent.left==e?e.parent.left=o:e.parent.right=o,o.left=e,e.parent=o}}function b(t,e){if(null!=e){var o=e.left;e.left=o.right,null!=o.right&&(o.right.parent=e),o.parent=e.parent,null==e.parent?t.d=o:e.parent.right==e?e.parent.right=o:e.parent.left=o,o.right=e,e.parent=o}}function P(t){if(null===t)return null;if(null!==t.right)for(var e=t.right;null!==e.left;)e=e.left;else for(e=t.parent;null!==e&&t===e.right;)t=e,e=e.parent;return e}function w(t){this.a=[],t instanceof s&&this.e(t)}function R(t){this.l=t}var O=this;o(n,Error),e(\"javascript.util.EmptyStackException\",n),n.prototype.name=\"EmptyStackException\",o(r,Error),e(\"javascript.util.IndexOutOfBoundsException\",r),r.prototype.name=\"IndexOutOfBoundsException\",e(\"javascript.util.Iterator\",i),i.prototype.hasNext=i.prototype.c,i.prototype.next=i.prototype.next,i.prototype.remove=i.prototype.remove,e(\"javascript.util.Collection\",s),o(a,s),e(\"javascript.util.List\",a),e(\"javascript.util.Map\",p),o(u,Error),e(\"javascript.util.NoSuchElementException\",u),u.prototype.name=\"NoSuchElementException\",o(l,Error),l.prototype.name=\"OperationNotSupported\",o(g,a),e(\"javascript.util.ArrayList\",g),g.prototype.a=null,g.prototype.add=function(t){return this.a.push(t),!0},g.prototype.add=g.prototype.add,g.prototype.e=function(t){for(t=t.f();t.c();)this.add(t.next());return!0},g.prototype.addAll=g.prototype.e,g.prototype.set=function(t,e){var o=this.a[t];return this.a[t]=e,o},g.prototype.set=g.prototype.set,g.prototype.f=function(){return new h(this)},g.prototype.iterator=g.prototype.f,g.prototype.get=function(t){if(0>t||t>=this.size())throw new r;return this.a[t]},g.prototype.get=g.prototype.get,g.prototype.g=function(){return 0===this.a.length},g.prototype.isEmpty=g.prototype.g,g.prototype.size=function(){return this.a.length},g.prototype.size=g.prototype.size,\ng.prototype.h=function(){for(var t=[],e=0,o=this.a.length;o>e;e++)t.push(this.a[e]);return t},g.prototype.toArray=g.prototype.h,g.prototype.remove=function(t){for(var e=!1,o=0,n=this.a.length;n>o;o++)if(this.a[o]===t){this.a.splice(o,1),e=!0;break}return e},g.prototype.remove=g.prototype.remove,e(\"$jscomp.scope.Iterator_\",h),h.prototype.j=null,h.prototype.b=0,h.prototype.next=function(){if(this.b===this.j.size())throw new u;return this.j.get(this.b++)},h.prototype.next=h.prototype.next,h.prototype.c=function(){return this.b<this.j.size()?!0:!1},h.prototype.hasNext=h.prototype.c,h.prototype.remove=function(){throw new l},h.prototype.remove=h.prototype.remove,e(\"javascript.util.Arrays\",c),c.sort=function(){var t,e,o,n=arguments[0];if(1===arguments.length)n.sort();else if(2===arguments.length)e=arguments[1],o=function(t,o){return e.compare(t,o)},n.sort(o);else if(3===arguments.length)for(t=n.slice(arguments[1],arguments[2]),t.sort(),o=n.slice(0,arguments[1]).concat(t,n.slice(arguments[2],n.length)),n.splice(0,n.length),t=0;t<o.length;t++)n.push(o[t]);else if(4===arguments.length)for(t=n.slice(arguments[1],arguments[2]),e=arguments[3],o=function(t,o){return e.compare(t,o)},t.sort(o),o=n.slice(0,arguments[1]).concat(t,n.slice(arguments[2],n.length)),n.splice(0,n.length),t=0;t<o.length;t++)n.push(o[t])},c.asList=function(t){for(var e=new g,o=0,n=t.length;n>o;o++)e.add(t[o]);return e},o(d,p),e(\"javascript.util.HashMap\",d),d.prototype.i=null,d.prototype.get=function(t){return this.i[t]||null},d.prototype.get=d.prototype.get,d.prototype.put=function(t,e){return this.i[t]=e},d.prototype.put=d.prototype.put,d.prototype.m=function(){var t,e=new g;for(t in this.i)this.i.hasOwnProperty(t)&&e.add(this.i[t]);return e},d.prototype.values=d.prototype.m,d.prototype.size=function(){return this.m().size()},d.prototype.size=d.prototype.size,o(f,s),e(\"javascript.util.Set\",f),o(m,f),e(\"javascript.util.HashSet\",m),m.prototype.a=null,m.prototype.contains=function(t){for(var e=0,o=this.a.length;o>e;e++)if(this.a[e]===t)return!0;return!1},m.prototype.contains=m.prototype.contains,m.prototype.add=function(t){return this.contains(t)?!1:(this.a.push(t),!0)},m.prototype.add=m.prototype.add,m.prototype.e=function(t){for(t=t.f();t.c();)this.add(t.next());return!0},m.prototype.addAll=m.prototype.e,m.prototype.remove=function(){throw new l},m.prototype.remove=m.prototype.remove,m.prototype.size=function(){return this.a.length},m.prototype.g=function(){return 0===this.a.length},m.prototype.isEmpty=m.prototype.g,m.prototype.h=function(){for(var t=[],e=0,o=this.a.length;o>e;e++)t.push(this.a[e]);return t},m.prototype.toArray=m.prototype.h,m.prototype.f=function(){return new y(this)},m.prototype.iterator=m.prototype.f,e(\"$jscomp.scope.Iterator_$1\",y),y.prototype.k=null,y.prototype.b=0,y.prototype.next=function(){if(this.b===this.k.size())throw new u;return this.k.a[this.b++]},y.prototype.next=y.prototype.next,y.prototype.c=function(){return this.b<this.k.size()?!0:!1},y.prototype.hasNext=y.prototype.c,y.prototype.remove=function(){throw new l},y.prototype.remove=y.prototype.remove,o(j,p),e(\"javascript.util.SortedMap\",j),o(v,f),e(\"javascript.util.SortedSet\",v),o(x,a),e(\"javascript.util.Stack\",x),x.prototype.a=null,x.prototype.push=function(t){return this.a.push(t),t},x.prototype.push=x.prototype.push,x.prototype.pop=function(){if(0===this.a.length)throw new n;return this.a.pop()},x.prototype.pop=x.prototype.pop,x.prototype.o=function(){if(0===this.a.length)throw new n;return this.a[this.a.length-1]},x.prototype.peek=x.prototype.o,x.prototype.empty=function(){return 0===this.a.length?!0:!1},x.prototype.empty=x.prototype.empty,x.prototype.g=function(){return this.empty()},x.prototype.isEmpty=x.prototype.g,x.prototype.search=function(t){return this.a.indexOf(t)},x.prototype.search=x.prototype.search,x.prototype.size=function(){return this.a.length},x.prototype.size=x.prototype.size,x.prototype.h=function(){for(var t=[],e=0,o=this.a.length;o>e;e++)t.push(this.a[e]);return t},x.prototype.toArray=x.prototype.h,o(C,j),e(\"javascript.util.TreeMap\",C),C.prototype.get=function(t){for(var e=this.d;null!==e;){var o=t.compareTo(e.key);if(0>o)e=e.left;else{if(!(o>0))return e.value;e=e.right}}return null},C.prototype.get=C.prototype.get,C.prototype.put=function(t,e){if(null===this.d)return this.d={key:t,value:e,left:null,right:null,parent:null,color:0},this.n=1,null;var o,n,r=this.d;do if(o=r,n=t.compareTo(r.key),0>n)r=r.left;else{if(!(n>0))return o=r.value,r.value=e,o;r=r.right}while(null!==r);for(r={key:t,left:null,right:null,value:e,parent:o,color:0},0>n?o.left=r:o.right=r,r.color=1;null!=r&&r!=this.d&&1==r.parent.color;)E(r)==S(E(E(r)))?(o=L(E(E(r))),1==(null==o?0:o.color)?(I(E(r),0),I(o,0),I(E(E(r)),1),r=E(E(r))):(r==L(E(r))&&(r=E(r),N(this,r)),I(E(r),0),I(E(E(r)),1),b(this,E(E(r))))):(o=S(E(E(r))),1==(null==o?0:o.color)?(I(E(r),0),I(o,0),I(E(E(r)),1),r=E(E(r))):(r==S(E(r))&&(r=E(r),b(this,r)),I(E(r),0),I(E(E(r)),1),N(this,E(E(r)))));return this.d.color=0,this.n++,null},C.prototype.put=C.prototype.put,C.prototype.m=function(){var t,e=new g;if(t=this.d,null!=t)for(;null!=t.left;)t=t.left;if(null!==t)for(e.add(t.value);null!==(t=P(t));)e.add(t.value);return e},C.prototype.values=C.prototype.m,C.prototype.size=function(){return this.n},C.prototype.size=C.prototype.size,o(w,v),e(\"javascript.util.TreeSet\",w),w.prototype.a=null,w.prototype.contains=function(t){for(var e=0,o=this.a.length;o>e;e++)if(0===this.a[e].compareTo(t))return!0;return!1},w.prototype.contains=w.prototype.contains,w.prototype.add=function(t){if(this.contains(t))return!1;for(var e=0,o=this.a.length;o>e;e++)if(1===this.a[e].compareTo(t))return this.a.splice(e,0,t),!0;return this.a.push(t),!0},w.prototype.add=w.prototype.add,w.prototype.e=function(t){for(t=t.f();t.c();)this.add(t.next());return!0},w.prototype.addAll=w.prototype.e,w.prototype.remove=function(){throw new l},w.prototype.remove=w.prototype.remove,w.prototype.size=function(){return this.a.length},w.prototype.size=w.prototype.size,w.prototype.g=function(){return 0===this.a.length},w.prototype.isEmpty=w.prototype.g,w.prototype.h=function(){for(var t=[],e=0,o=this.a.length;o>e;e++)t.push(this.a[e]);return t},w.prototype.toArray=w.prototype.h,w.prototype.f=function(){return new R(this)},w.prototype.iterator=w.prototype.f,e(\"$jscomp.scope.Iterator_$2\",R),R.prototype.l=null,R.prototype.b=0,R.prototype.next=function(){if(this.b===this.l.size())throw new u;return this.l.a[this.b++]},R.prototype.next=R.prototype.next,R.prototype.c=function(){return this.b<this.l.size()?!0:!1},R.prototype.hasNext=R.prototype.c,R.prototype.remove=function(){throw new l},R.prototype.remove=R.prototype.remove,\"undefined\"!=typeof t&&(t.javascript={},t.javascript.util={},t.javascript.util.ArrayList=g,t.javascript.util.Arrays=c,t.javascript.util.Collection=s,t.javascript.util.EmptyStackException=n,t.javascript.util.HashMap=d,t.javascript.util.HashSet=m,t.javascript.util.IndexOutOfBoundsException=r,t.javascript.util.Iterator=i,t.javascript.util.List=a,t.javascript.util.Map=p,t.javascript.util.NoSuchElementException=u,t.javascript.util.OperationNotSupported=l,t.javascript.util.Set=f,t.javascript.util.SortedMap=j,t.javascript.util.SortedSet=v,t.javascript.util.Stack=x,t.javascript.util.TreeMap=C,t.javascript.util.TreeSet=w)}).call(this)}).call(this,\"undefined\"!=typeof global?global:\"undefined\"!=typeof self?self:\"undefined\"!=typeof window?window:{})},{}],77:[function(t,e,o){arguments[4][30][0].apply(o,arguments)},{\"./dist/javascript.util-node.min.js\":76,dup:30}],78:[function(t,e,o){var n=t(\"turf-featurecollection\"),r=t(\"turf-meta\").coordEach,i=t(\"turf-point\");e.exports=function(t){var e=[];return r(t,function(t){e.push(i(t))}),n(e)}},{\"turf-featurecollection\":82,\"turf-meta\":79,\"turf-point\":112}],79:[function(t,e,o){arguments[4][33][0].apply(o,arguments)},{dup:33}],80:[function(t,e,o){var n=t(\"turf-meta\").coordEach;e.exports=function(t){var e=[1/0,1/0,-(1/0),-(1/0)];return n(t,function(t){e[0]>t[0]&&(e[0]=t[0]),e[1]>t[1]&&(e[1]=t[1]),e[2]<t[0]&&(e[2]=t[0]),e[3]<t[1]&&(e[3]=t[1])}),e}},{\"turf-meta\":81}],81:[function(t,e,o){arguments[4][33][0].apply(o,arguments)},{dup:33}],82:[function(t,e,o){e.exports=function(t){return{type:\"FeatureCollection\",features:t}}},{}],83:[function(t,e,o){var n=t(\"turf-featurecollection\");e.exports=function(t,e,o){for(var r=n([]),i=0;i<t.features.length;i++)t.features[i].properties[e]===o&&r.features.push(t.features[i]);return r}},{\"turf-featurecollection\":82}],84:[function(t,e,o){function n(t){var e=JSON.parse(JSON.stringify(t));switch(e.type){case\"FeatureCollection\":for(var o=0;o<e.features.length;o++)r(e.features[o].geometry);return e;case\"Feature\":return r(e.geometry),e;default:return r(e),e}}function r(t){var e=t.coordinates;switch(t.type){case\"Point\":i(e);break;case\"LineString\":case\"MultiPoint\":s(e);break;case\"Polygon\":case\"MultiLineString\":a(e);break;case\"MultiPolygon\":p(e);break;case\"GeometryCollection\":t.geometries.forEach(r)}}function i(t){t.reverse()}function s(t){for(var e=0;e<t.length;e++)t[e].reverse()}function a(t){for(var e=0;e<t.length;e++)for(var o=0;o<t[e].length;o++)t[e][o].reverse()}function p(t){for(var e=0;e<t.length;e++)for(var o=0;o<t[e].length;o++)for(var n=0;n<t[e][o].length;n++)t[e][o][n].reverse()}e.exports=n},{}],85:[function(t,e,o){function n(t,e){for(var o=[],n=0;6>n;n++){var r=t[0]+e*p[n],s=t[1]+e*u[n];o.push([r,s])}return o.push(o[0]),i([o])}for(var r=t(\"turf-point\"),i=t(\"turf-polygon\"),s=t(\"turf-distance\"),a=t(\"turf-featurecollection\"),p=[],u=[],l=0;6>l;l++){var g=2*Math.PI/6*l;p.push(Math.cos(g)),u.push(Math.sin(g))}e.exports=function(t,e,o){var i=e/s(r([t[0],t[1]]),r([t[2],t[1]]),o),p=i*(t[2]-t[0]),u=e/s(r([t[0],t[1]]),r([t[0],t[3]]),o),l=(u*(t[3]-t[1]),p/2),g=2*l,h=Math.sqrt(3)/2*g,c=t[2]-t[0],d=t[3]-t[1],f=.75*g,m=h,y=c/(g-l/2),j=Math.ceil(y);Math.round(y)===j&&j++;var v=(j*f-l/2-c)/2-l/2,x=Math.ceil(d/h),E=(d-x*h)/2,I=x*h-d>h/2;I&&(E-=h/4);for(var S=a([]),L=0;j>L;L++)for(var C=0;x>=C;C++){var N=L%2===1;if(!(0===C&&N||0===C&&I)){var b=L*f+t[0]-v,P=C*m+t[1]+E;N&&(P-=h/2),S.features.push(n([b,P],l))}}return S}},{\"turf-distance\":70,\"turf-featurecollection\":82,\"turf-point\":112,\"turf-polygon\":113}],86:[function(t,e,o){function n(t,e){for(var o=!1,n=0,r=e.length-1;n<e.length;r=n++){var i=e[n][0],s=e[n][1],a=e[r][0],p=e[r][1],u=s>t[1]!=p>t[1]&&t[0]<(a-i)*(t[1]-s)/(p-s)+i;u&&(o=!o)}return o}e.exports=function(t,e){var o=e.geometry.coordinates,r=[t.geometry.coordinates[0],t.geometry.coordinates[1]];\"Polygon\"===e.geometry.type&&(o=[o]);for(var i=!1,s=0;s<o.length&&!i;){if(n(r,o[s][0])){for(var a=!1,p=1;p<o[s].length&&!a;)n(r,o[s][p])&&(a=!0),p++;a||(i=!0)}s++}return i}},{}],87:[function(t,e,o){var n=t(\"jsts\");t(\"turf-featurecollection\");e.exports=function(t,e){var o;o=\"Feature\"===t.type?t.geometry:t,\"Feature\"===e.type?geom2=e.geometry:geom2=e;var r=new n.io.GeoJSONReader,i=r.read(JSON.stringify(o)),s=r.read(JSON.stringify(geom2)),a=i.intersection(s),p=new n.io.GeoJSONParser;return a=p.write(a),\"GeometryCollection\"===a.type&&0===a.geometries.length?void 0:{type:\"Feature\",properties:{},geometry:a}}},{jsts:88,\"turf-featurecollection\":82}],88:[function(t,e,o){arguments[4][27][0].apply(o,arguments)},{\"./lib/jsts\":89,dup:27,\"javascript.util\":91}],89:[function(t,e,o){arguments[4][28][0].apply(o,arguments)},{dup:28}],90:[function(t,e,o){(function(t){(function(){function e(t,e){var o=t.split(\".\"),n=O;o[0]in n||!n.execScript||n.execScript(\"var \"+o[0]);for(var r;o.length&&(r=o.shift());)o.length||void 0===e?n=n[r]?n[r]:n[r]={}:n[r]=e}function o(t,e){function o(){}o.prototype=e.prototype,t.q=e.prototype,t.prototype=new o,t.prototype.constructor=t,t.p=function(t,o,n){var r=Array.prototype.slice.call(arguments,2);return e.prototype[o].apply(t,r)}}function n(t){this.message=t||\"\"}function r(t){this.message=t||\"\"}function i(){}function s(){}function a(){}function p(){}function u(t){this.message=t||\"\"}function l(t){this.message=t||\"\"}function g(t){this.a=[],t instanceof s&&this.e(t)}function h(t){this.j=t}function c(){}function d(){this.i={}}function f(){}function m(t){this.a=[],t instanceof s&&this.e(t)}function y(t){this.k=t}function j(){}function v(){}function x(){this.a=[]}function E(t){return null==t?null:t.parent}function I(t,e){null!==t&&(t.color=e)}function S(t){return null==t?null:t.left}function L(t){return null==t?null:t.right}function C(){this.d=null,this.n=0}function N(t,e){if(null!=e){var o=e.right;e.right=o.left,null!=o.left&&(o.left.parent=e),o.parent=e.parent,null==e.parent?t.d=o:e.parent.left==e?e.parent.left=o:e.parent.right=o,o.left=e,e.parent=o}}function b(t,e){if(null!=e){var o=e.left;e.left=o.right,null!=o.right&&(o.right.parent=e),o.parent=e.parent,null==e.parent?t.d=o:e.parent.right==e?e.parent.right=o:e.parent.left=o,o.right=e,e.parent=o}}function P(t){if(null===t)return null;if(null!==t.right)for(var e=t.right;null!==e.left;)e=e.left;else for(e=t.parent;null!==e&&t===e.right;)t=e,e=e.parent;return e}function w(t){this.a=[],t instanceof s&&this.e(t)}function R(t){this.l=t}var O=this;o(n,Error),e(\"javascript.util.EmptyStackException\",n),n.prototype.name=\"EmptyStackException\",o(r,Error),e(\"javascript.util.IndexOutOfBoundsException\",r),r.prototype.name=\"IndexOutOfBoundsException\",e(\"javascript.util.Iterator\",i),i.prototype.hasNext=i.prototype.c,i.prototype.next=i.prototype.next,i.prototype.remove=i.prototype.remove,e(\"javascript.util.Collection\",s),o(a,s),e(\"javascript.util.List\",a),e(\"javascript.util.Map\",p),o(u,Error),e(\"javascript.util.NoSuchElementException\",u),u.prototype.name=\"NoSuchElementException\",o(l,Error),l.prototype.name=\"OperationNotSupported\",o(g,a),e(\"javascript.util.ArrayList\",g),g.prototype.a=null,g.prototype.add=function(t){return this.a.push(t),!0},g.prototype.add=g.prototype.add,g.prototype.e=function(t){for(t=t.f();t.c();)this.add(t.next());return!0},g.prototype.addAll=g.prototype.e,g.prototype.set=function(t,e){var o=this.a[t];return this.a[t]=e,o},g.prototype.set=g.prototype.set,g.prototype.f=function(){return new h(this)},g.prototype.iterator=g.prototype.f,g.prototype.get=function(t){if(0>t||t>=this.size())throw new r;return this.a[t]},g.prototype.get=g.prototype.get,g.prototype.g=function(){return 0===this.a.length},g.prototype.isEmpty=g.prototype.g,g.prototype.size=function(){return this.a.length},g.prototype.size=g.prototype.size,g.prototype.h=function(){for(var t=[],e=0,o=this.a.length;o>e;e++)t.push(this.a[e]);return t},g.prototype.toArray=g.prototype.h,g.prototype.remove=function(t){for(var e=!1,o=0,n=this.a.length;n>o;o++)if(this.a[o]===t){this.a.splice(o,1),e=!0;break}return e},g.prototype.remove=g.prototype.remove,e(\"$jscomp.scope.Iterator_\",h),h.prototype.j=null,h.prototype.b=0,h.prototype.next=function(){if(this.b===this.j.size())throw new u;return this.j.get(this.b++)},h.prototype.next=h.prototype.next,h.prototype.c=function(){return this.b<this.j.size()?!0:!1},h.prototype.hasNext=h.prototype.c,h.prototype.remove=function(){throw new l},h.prototype.remove=h.prototype.remove,e(\"javascript.util.Arrays\",c),c.sort=function(){var t,e,o,n=arguments[0];if(1===arguments.length)n.sort();else if(2===arguments.length)e=arguments[1],o=function(t,o){return e.compare(t,o)},n.sort(o);else if(3===arguments.length)for(t=n.slice(arguments[1],arguments[2]),t.sort(),o=n.slice(0,arguments[1]).concat(t,n.slice(arguments[2],n.length)),n.splice(0,n.length),t=0;t<o.length;t++)n.push(o[t]);else if(4===arguments.length)for(t=n.slice(arguments[1],arguments[2]),e=arguments[3],o=function(t,o){return e.compare(t,o)},t.sort(o),o=n.slice(0,arguments[1]).concat(t,n.slice(arguments[2],n.length)),n.splice(0,n.length),t=0;t<o.length;t++)n.push(o[t])},c.asList=function(t){for(var e=new g,o=0,n=t.length;n>o;o++)e.add(t[o]);return e},o(d,p),e(\"javascript.util.HashMap\",d),d.prototype.i=null,d.prototype.get=function(t){return this.i[t]||null},d.prototype.get=d.prototype.get,d.prototype.put=function(t,e){return this.i[t]=e},d.prototype.put=d.prototype.put,d.prototype.m=function(){var t,e=new g;for(t in this.i)this.i.hasOwnProperty(t)&&e.add(this.i[t]);return e},d.prototype.values=d.prototype.m,d.prototype.size=function(){return this.m().size()},d.prototype.size=d.prototype.size,o(f,s),e(\"javascript.util.Set\",f),o(m,f),e(\"javascript.util.HashSet\",m),m.prototype.a=null,m.prototype.contains=function(t){for(var e=0,o=this.a.length;o>e;e++)if(this.a[e]===t)return!0;return!1},m.prototype.contains=m.prototype.contains,m.prototype.add=function(t){return this.contains(t)?!1:(this.a.push(t),!0)},m.prototype.add=m.prototype.add,m.prototype.e=function(t){for(t=t.f();t.c();)this.add(t.next());return!0},m.prototype.addAll=m.prototype.e,m.prototype.remove=function(){throw new l},m.prototype.remove=m.prototype.remove,m.prototype.size=function(){return this.a.length},m.prototype.g=function(){return 0===this.a.length},m.prototype.isEmpty=m.prototype.g,m.prototype.h=function(){for(var t=[],e=0,o=this.a.length;o>e;e++)t.push(this.a[e]);return t},m.prototype.toArray=m.prototype.h,m.prototype.f=function(){return new y(this)},m.prototype.iterator=m.prototype.f,e(\"$jscomp.scope.Iterator_$1\",y),y.prototype.k=null,y.prototype.b=0,y.prototype.next=function(){if(this.b===this.k.size())throw new u;return this.k.a[this.b++]},y.prototype.next=y.prototype.next,y.prototype.c=function(){return this.b<this.k.size()?!0:!1},y.prototype.hasNext=y.prototype.c,y.prototype.remove=function(){throw new l},y.prototype.remove=y.prototype.remove,o(j,p),e(\"javascript.util.SortedMap\",j),o(v,f),e(\"javascript.util.SortedSet\",v),o(x,a),e(\"javascript.util.Stack\",x),x.prototype.a=null,x.prototype.push=function(t){return this.a.push(t),t},x.prototype.push=x.prototype.push,x.prototype.pop=function(){if(0===this.a.length)throw new n;return this.a.pop()},x.prototype.pop=x.prototype.pop,x.prototype.o=function(){if(0===this.a.length)throw new n;return this.a[this.a.length-1]},x.prototype.peek=x.prototype.o,x.prototype.empty=function(){return 0===this.a.length?!0:!1},x.prototype.empty=x.prototype.empty,x.prototype.g=function(){return this.empty()},x.prototype.isEmpty=x.prototype.g,x.prototype.search=function(t){return this.a.indexOf(t)},x.prototype.search=x.prototype.search,x.prototype.size=function(){return this.a.length},x.prototype.size=x.prototype.size,x.prototype.h=function(){for(var t=[],e=0,o=this.a.length;o>e;e++)t.push(this.a[e]);return t},x.prototype.toArray=x.prototype.h,o(C,j),e(\"javascript.util.TreeMap\",C),C.prototype.get=function(t){for(var e=this.d;null!==e;){var o=t.compareTo(e.key);if(0>o)e=e.left;else{if(!(o>0))return e.value;e=e.right}}return null},C.prototype.get=C.prototype.get,C.prototype.put=function(t,e){if(null===this.d)return this.d={key:t,value:e,left:null,right:null,parent:null,color:0},this.n=1,null;var o,n,r=this.d;do if(o=r,n=t.compareTo(r.key),0>n)r=r.left;else{if(!(n>0))return o=r.value,r.value=e,o;r=r.right}while(null!==r);for(r={key:t,left:null,right:null,value:e,parent:o,color:0},0>n?o.left=r:o.right=r,r.color=1;null!=r&&r!=this.d&&1==r.parent.color;)E(r)==S(E(E(r)))?(o=L(E(E(r))),1==(null==o?0:o.color)?(I(E(r),0),I(o,0),I(E(E(r)),1),r=E(E(r))):(r==L(E(r))&&(r=E(r),N(this,r)),I(E(r),0),I(E(E(r)),1),b(this,E(E(r))))):(o=S(E(E(r))),1==(null==o?0:o.color)?(I(E(r),0),I(o,0),I(E(E(r)),1),r=E(E(r))):(r==S(E(r))&&(r=E(r),b(this,r)),I(E(r),0),I(E(E(r)),1),N(this,E(E(r)))));return this.d.color=0,this.n++,null},C.prototype.put=C.prototype.put,C.prototype.m=function(){var t,e=new g;if(t=this.d,null!=t)for(;null!=t.left;)t=t.left;if(null!==t)for(e.add(t.value);null!==(t=P(t));)e.add(t.value);return e},C.prototype.values=C.prototype.m,C.prototype.size=function(){return this.n},C.prototype.size=C.prototype.size,o(w,v),e(\"javascript.util.TreeSet\",w),w.prototype.a=null,w.prototype.contains=function(t){for(var e=0,o=this.a.length;o>e;e++)if(0===this.a[e].compareTo(t))return!0;return!1},w.prototype.contains=w.prototype.contains,w.prototype.add=function(t){if(this.contains(t))return!1;for(var e=0,o=this.a.length;o>e;e++)if(1===this.a[e].compareTo(t))return this.a.splice(e,0,t),!0;return this.a.push(t),!0},w.prototype.add=w.prototype.add,w.prototype.e=function(t){for(t=t.f();t.c();)this.add(t.next());return!0},w.prototype.addAll=w.prototype.e,w.prototype.remove=function(){throw new l},w.prototype.remove=w.prototype.remove,w.prototype.size=function(){return this.a.length},w.prototype.size=w.prototype.size,w.prototype.g=function(){return 0===this.a.length},w.prototype.isEmpty=w.prototype.g,w.prototype.h=function(){for(var t=[],e=0,o=this.a.length;o>e;e++)t.push(this.a[e]);return t},w.prototype.toArray=w.prototype.h,w.prototype.f=function(){return new R(this)},w.prototype.iterator=w.prototype.f,e(\"$jscomp.scope.Iterator_$2\",R),R.prototype.l=null,R.prototype.b=0,R.prototype.next=function(){if(this.b===this.l.size())throw new u;return this.l.a[this.b++]},R.prototype.next=R.prototype.next,R.prototype.c=function(){return this.b<this.l.size()?!0:!1},R.prototype.hasNext=R.prototype.c,R.prototype.remove=function(){throw new l},R.prototype.remove=R.prototype.remove,\"undefined\"!=typeof t&&(t.javascript={},t.javascript.util={},t.javascript.util.ArrayList=g,t.javascript.util.Arrays=c,t.javascript.util.Collection=s,t.javascript.util.EmptyStackException=n,t.javascript.util.HashMap=d,t.javascript.util.HashSet=m,t.javascript.util.IndexOutOfBoundsException=r,t.javascript.util.Iterator=i,t.javascript.util.List=a,t.javascript.util.Map=p,t.javascript.util.NoSuchElementException=u,t.javascript.util.OperationNotSupported=l,t.javascript.util.Set=f,t.javascript.util.SortedMap=j,t.javascript.util.SortedSet=v,t.javascript.util.Stack=x,t.javascript.util.TreeMap=C,t.javascript.util.TreeSet=w)}).call(this)}).call(this,\"undefined\"!=typeof global?global:\"undefined\"!=typeof self?self:\"undefined\"!=typeof window?window:{})},{}],91:[function(t,e,o){arguments[4][30][0].apply(o,arguments)},{\"./dist/javascript.util-node.min.js\":90,dup:30}],92:[function(t,e,o){function n(t,e){var o=t.x-e.x,n=t.y-e.y;return a>o*o+n*n}function r(t){for(var e=t.head;e;){var o=e.next;e.next=e.prev,e.prev=o,e=o}var o=t.head;t.head=t.tail,t.tail=o}function i(t){this.level=t,this.s=null,this.count=0}function s(t){if(t)this.drawContour=t;else{var e=this;e.contours={},this.drawContour=function(t,o,n,r,s,a){var p=e.contours[a];p||(p=e.contours[a]=new i(s)),p.addSegment({x:t,y:o},{x:n,y:r})},this.contourList=function(){var t=[],o=e.contours;for(var n in o)for(var r=o[n].s,i=o[n].level;r;){var s=r.head,a=[];for(a.level=i,a.k=n;s&&s.p;)a.push(s.p),s=s.next;t.push(a),r=r.next}return t.sort(function(t,e){return t.k-e.k}),t}}this.h=new Array(5),this.sh=new Array(5),this.xh=new Array(5),this.yh=new Array(5)}e.exports=s;var a=1e-10;i.prototype.remove_seq=function(t){t.prev?t.prev.next=t.next:this.s=t.next,t.next&&(t.next.prev=t.prev),--this.count},i.prototype.addSegment=function(t,e){for(var o=this.s,i=null,s=null,a=!1,p=!1;o&&(null==i&&(n(t,o.head.p)?(i=o,a=!0):n(t,o.tail.p)&&(i=o)),null==s&&(n(e,o.head.p)?(s=o,p=!0):n(e,o.tail.p)&&(s=o)),null==s||null==i);)o=o.next;var u=(null!=i?1:0)|(null!=s?2:0);switch(u){case 0:var l={p:t,prev:null},g={p:e,next:null};l.next=g,g.prev=l,i={head:l,tail:g,next:this.s,prev:null,closed:!1},this.s&&(this.s.prev=i),this.s=i,++this.count;break;case 1:var h={p:e};a?(h.next=i.head,h.prev=null,i.head.prev=h,i.head=h):(h.next=null,h.prev=i.tail,i.tail.next=h,i.tail=h);break;case 2:var h={p:t};p?(h.next=s.head,h.prev=null,s.head.prev=h,s.head=h):(h.next=null,h.prev=s.tail,s.tail.next=h,s.tail=h);break;case 3:if(i===s){var h={p:i.tail.p,next:i.head,prev:null};i.head.prev=h,i.head=h,i.closed=!0;break}switch((a?1:0)|(p?2:0)){case 0:r(i);case 1:s.tail.next=i.head,i.head.prev=s.tail,s.tail=i.tail,this.remove_seq(i);break;case 3:r(i);case 2:i.tail.next=s.head,s.head.prev=i.tail,i.tail=s.tail,this.remove_seq(s)}}},s.prototype.contour=function(t,e,o,n,r,i,s,p,u){var l=this.h,g=this.sh,h=this.xh,c=this.yh,d=this.drawContour;this.contours={};for(var f,m,y,j,v,x,E=function(t,e){return(l[e]*h[t]-l[t]*h[e])/(l[e]-l[t])},I=function(t,e){return(l[e]*c[t]-l[t]*c[e])/(l[e]-l[t])},S=0,L=0,C=0,N=0,b=[0,1,1,0],P=[0,0,1,1],w=[[[0,0,8],[0,2,5],[7,6,9]],[[0,3,4],[1,3,1],[4,3,0]],[[9,6,7],[5,2,0],[8,0,0]]],R=r-1;R>=n;R--)for(var O=e;o-1>=O;O++){var M,A;if(M=Math.min(t[O][R],t[O][R+1]),A=Math.min(t[O+1][R],t[O+1][R+1]),v=Math.min(M,A),M=Math.max(t[O][R],t[O][R+1]),A=Math.max(t[O+1][R],t[O+1][R+1]),x=Math.max(M,A),x>=u[0]&&v<=u[p-1])for(var T=0;p>T;T++)if(u[T]>=v&&u[T]<=x){for(var D=4;D>=0;D--)D>0?(l[D]=t[O+b[D-1]][R+P[D-1]]-u[T],h[D]=i[O+b[D-1]],c[D]=s[R+P[D-1]]):(l[0]=.25*(l[1]+l[2]+l[3]+l[4]),h[0]=.5*(i[O]+i[O+1]),c[0]=.5*(s[R]+s[R+1])),l[D]>a?g[D]=1:l[D]<-a?g[D]=-1:g[D]=0;for(D=1;4>=D;D++)if(f=D,m=0,y=4!=D?D+1:1,j=w[g[f]+1][g[m]+1][g[y]+1],0!=j){switch(j){case 1:S=h[f],C=c[f],L=h[m],N=c[m];break;case 2:S=h[m],C=c[m],L=h[y],N=c[y];break;case 3:S=h[y],C=c[y],L=h[f],N=c[f];break;case 4:S=h[f],C=c[f],L=E(m,y),N=I(m,y);break;case 5:S=h[m],C=c[m],L=E(y,f),N=I(y,f);break;case 6:S=h[y],C=c[y],L=E(f,m),N=I(f,m);break;case 7:S=E(f,m),C=I(f,m),L=E(m,y),N=I(m,y);break;case 8:S=E(m,y),C=I(m,y),L=E(y,f),N=I(y,f);break;case 9:S=E(y,f),C=I(y,f),L=E(f,m),N=I(f,m)}d(S,C,L,N,u[T],T)}}}}},{}],93:[function(t,e,o){var n=t(\"turf-tin\"),r=t(\"turf-inside\"),i=t(\"turf-grid\"),s=t(\"turf-extent\"),a=t(\"turf-planepoint\"),p=t(\"turf-featurecollection\"),u=t(\"turf-linestring\"),l=t(\"turf-square\"),g=t(\"./conrec\");e.exports=function(t,e,o,h,c){for(var d=n(t,e),f=s(t),m=l(f),y=i(m,o),j=[],v=0;v<y.features.length;v++)for(var x=y.features[v],E=0;E<d.features.length;E++){var I=d.features[E];r(x,I)&&(x.properties={},x.properties[e]=a(x,I))}for(var S=Math.sqrt(y.features.length),L=0;S>L;L++){var C=y.features.slice(L*S,(L+1)*S),N=[];C.forEach(function(t){t.properties?N.push(t.properties[e]):N.push(0)}),j.push(N)}for(var b=(m[2]-m[0])/S,P=[],w=[],L=0;S>L;L++)P.push(L*b+m[0]),w.push(L*b+m[1]);var R=new g;R.contour(j,0,o,0,o,P,w,h.length,h);var O=R.contourList(),M=p([]);return O.forEach(function(t){if(t.length>2){var o=[];t.forEach(function(t){o.push([t.x,t.y])});var n=u(o);n.properties={},n.properties[e]=t.level,M.features.push(n)}}),M}},{\"./conrec\":92,\"turf-extent\":80,\"turf-featurecollection\":82,\"turf-grid\":94,\"turf-inside\":86,\"turf-linestring\":100,\"turf-planepoint\":108,\"turf-square\":125,\"turf-tin\":128}],94:[function(t,e,o){var n=t(\"turf-point\");e.exports=function(t,e){for(var o=t[0],r=t[1],i=t[2],s=(t[3],(i-o)/e),a={type:\"FeatureCollection\",features:[]},p=0;e>=p;p++)for(var u=0;e>=u;u++)a.features.push(n([p*s+o,u*s+r]));return a}},{\"turf-point\":112}],95:[function(t,e,o){var n=t(\"simple-statistics\");e.exports=function(t,e,o){var r=[],i=[];return t.features.forEach(function(t){void 0!==t.properties[e]&&r.push(t.properties[e])}),i=n.jenks(r,o)}},{\"simple-statistics\":96}],96:[function(t,e,o){arguments[4][69][0].apply(o,arguments)},{dup:69}],97:[function(t,e,o){function n(t,e,o,n,r,i,s,a){var p,u,l,g,h,c={x:null,y:null,onLine1:!1,onLine2:!1};return p=(a-i)*(o-t)-(s-r)*(n-e),0==p?null!=c.x&&null!=c.y?c:!1:(u=e-i,l=t-r,g=(s-r)*u-(a-i)*l,h=(o-t)*u-(n-e)*l,u=g/p,l=h/p,c.x=t+u*(o-t),c.y=e+u*(n-e),u>0&&1>u&&(c.onLine1=!0),l>0&&1>l&&(c.onLine2=!0),c.onLine1&&c.onLine2?[c.x,c.y]:!1)}var r=(t(\"turf-polygon\"),t(\"turf-point\")),i=t(\"turf-featurecollection\");e.exports=function(t){var e,o={intersections:i([]),fixed:null};e=\"Feature\"===t.type?t.geometry:t;return e.coordinates.forEach(function(t){e.coordinates.forEach(function(e){for(var i=0;i<t.length-1;i++)for(var s=0;s<e.length-1;s++){var a=n(t[i][0],t[i][1],t[i+1][0],t[i+1][1],e[s][0],e[s][1],e[s+1][0],e[s+1][1]);a&&o.intersections.features.push(r([a[0],a[1]]))}})}),o}},{\"turf-featurecollection\":82,\"turf-point\":112,\"turf-polygon\":113}],98:[function(t,e,o){var n=t(\"turf-distance\"),r=t(\"turf-point\");e.exports=function(t,e){var o;if(\"Feature\"===t.type)o=t.geometry.coordinates;else{if(\"LineString\"!==t.type)throw new Error(\"input must be a LineString Feature or Geometry\");o=t.geometry.coordinates}for(var i=0,s=0;s<o.length-1;s++)i+=n(r(o[s]),r(o[s+1]),e);return i}},{\"turf-distance\":70,\"turf-point\":112}],99:[function(t,e,o){function n(t,e){for(var o=\"miles\",n=s([1/0,1/0],{dist:1/0}),a=0;a<e.length-1;a++){var l=s(e[a]),g=s(e[a+1]);l.properties.dist=i(t,l,o),g.properties.dist=i(t,g,o);var h=p(l,g),c=u(t,1e3,h+90,o),d=r(t.geometry.coordinates[0],t.geometry.coordinates[1],c.geometry.coordinates[0],c.geometry.coordinates[1],l.geometry.coordinates[0],l.geometry.coordinates[1],g.geometry.coordinates[0],g.geometry.coordinates[1]);d||(c=u(t,1e3,h-90,o),d=r(t.geometry.coordinates[0],t.geometry.coordinates[1],c.geometry.coordinates[0],c.geometry.coordinates[1],l.geometry.coordinates[0],l.geometry.coordinates[1],g.geometry.coordinates[0],g.geometry.coordinates[1])),c.properties.dist=1/0;var f;if(d){var f=s(d);f.properties.dist=i(t,f,o)}l.properties.dist<n.properties.dist&&(n=l,n.properties.index=a),g.properties.dist<n.properties.dist&&(n=g,n.properties.index=a),f&&f.properties.dist<n.properties.dist&&(n=f,n.properties.index=a)}return n}function r(t,e,o,n,r,i,s,a){var p,u,l,g,h,c={x:null,y:null,onLine1:!1,onLine2:!1};return p=(a-i)*(o-t)-(s-r)*(n-e),0==p?null!=c.x&&null!=c.y?c:!1:(u=e-i,l=t-r,g=(s-r)*u-(a-i)*l,h=(o-t)*u-(n-e)*l,u=g/p,l=h/p,c.x=t+u*(o-t),c.y=e+u*(n-e),u>0&&1>u&&(c.onLine1=!0),l>0&&1>l&&(c.onLine2=!0),c.onLine1&&c.onLine2?[c.x,c.y]:!1)}var i=t(\"turf-distance\"),s=t(\"turf-point\"),a=t(\"turf-linestring\"),p=t(\"turf-bearing\"),u=t(\"turf-destination\");e.exports=function(t,e,o){var r;if(\"Feature\"===o.type)r=o.geometry.coordinates;else{if(\"LineString\"!==o.type)throw new Error(\"input must be a LineString Feature or Geometry\");r=o.geometry.coordinates}var i,s=n(t,r),p=n(e,r);i=s.properties.index<=p.properties.index?[s,p]:[p,s];for(var u=a([i[0].geometry.coordinates],{}),l=i[0].properties.index+1;l<i[1].properties.index+1;l++)u.geometry.coordinates.push(r[l]);return u.geometry.coordinates.push(i[1].geometry.coordinates),u}},{\"turf-bearing\":23,\"turf-destination\":67,\"turf-distance\":70,\"turf-linestring\":100,\"turf-point\":112}],100:[function(t,e,o){e.exports=function(t,e){if(!t)throw new Error(\"No coordinates passed\");return{type:\"Feature\",geometry:{type:\"LineString\",coordinates:t},properties:e||{}}}},{}],101:[function(t,e,o){function n(t){for(var e,o=0;o<t.length;o++)(t[o]>e||void 0===e)&&(e=t[o]);return e}var r=t(\"turf-inside\");e.exports=function(t,e,o,i){return t.features.forEach(function(t){t.properties||(t.properties={});var s=[];e.features.forEach(function(e){r(e,t)&&s.push(e.properties[o])}),t.properties[i]=n(s)}),t}},{\"turf-inside\":86}],102:[function(t,e,o){function n(t){if(0===t.length)return null;var e=t.slice().sort(function(t,e){return t-e});if(e.length%2===1)return e[(e.length-1)/2];var o=e[e.length/2-1],n=e[e.length/2];return(o+n)/2}var r=t(\"turf-inside\");e.exports=function(t,e,o,i){return t.features.forEach(function(t){t.properties||(t.properties={});var s=[];e.features.forEach(function(e){r(e,t)&&s.push(e.properties[o])}),t.properties[i]=n(s)}),t}},{\"turf-inside\":86}],103:[function(t,e,o){var n=t(\"clone\"),r=t(\"turf-union\");e.exports=function(t,e){for(var o=n(t.features[0]),i=t.features,s=0,a=i.length;a>s;s++){var p=i[s];p.geometry&&(o=r(o,p))}return o}},{clone:104,\"turf-union\":130}],104:[function(t,e,o){(function(t){\"use strict\";function o(t){return Object.prototype.toString.call(t)}function n(e,o,n,i){function s(e,n){if(null===e)return null;if(0==n)return e;var l,g;if(\"object\"!=typeof e)return e;if(r.isArray(e))l=[];else if(r.isRegExp(e))l=new RegExp(e.source,r.getRegExpFlags(e)),e.lastIndex&&(l.lastIndex=e.lastIndex);else if(r.isDate(e))l=new Date(e.getTime());else{if(u&&t.isBuffer(e))return l=new t(e.length),e.copy(l),l;\"undefined\"==typeof i?(g=Object.getPrototypeOf(e),l=Object.create(g)):(l=Object.create(i),g=i)}if(o){var h=a.indexOf(e);if(-1!=h)return p[h];a.push(e),p.push(l)}for(var c in e){var d;g&&(d=Object.getOwnPropertyDescriptor(g,c)),d&&null==d.set||(l[c]=s(e[c],n-1))}return l}var a=[],p=[],u=\"undefined\"!=typeof t;return\"undefined\"==typeof o&&(o=!0),\"undefined\"==typeof n&&(n=1/0),s(e,n)}var r={isArray:function(t){\nreturn Array.isArray(t)||\"object\"==typeof t&&\"[object Array]\"===o(t)},isDate:function(t){return\"object\"==typeof t&&\"[object Date]\"===o(t)},isRegExp:function(t){return\"object\"==typeof t&&\"[object RegExp]\"===o(t)},getRegExpFlags:function(t){var e=\"\";return t.global&&(e+=\"g\"),t.ignoreCase&&(e+=\"i\"),t.multiline&&(e+=\"m\"),e}};\"object\"==typeof e&&(e.exports=n),n.clonePrototype=function(t){if(null===t)return null;var e=function(){};return e.prototype=t,new e}}).call(this,t(\"buffer\").Buffer)},{buffer:4}],105:[function(t,e,o){var n=t(\"turf-point\");e.exports=function(t,e){if(null===t||null===e)throw new Error(\"Less than two points passed.\");var o=t.geometry.coordinates[0],r=e.geometry.coordinates[0],i=t.geometry.coordinates[1],s=e.geometry.coordinates[1],a=o+r,p=a/2,u=i+s,l=u/2;return n([p,l])}},{\"turf-point\":112}],106:[function(t,e,o){function n(t){for(var e,o=0;o<t.length;o++)(t[o]<e||void 0===e)&&(e=t[o]);return e}var r=t(\"turf-inside\");e.exports=function(t,e,o,i){return t.features.forEach(function(t){t.properties||(t.properties={});var s=[];e.features.forEach(function(e){r(e,t)&&s.push(e.properties[o])}),t.properties[i]=n(s)}),t}},{\"turf-inside\":86}],107:[function(t,e,o){var n=t(\"turf-distance\");e.exports=function(t,e){var o;return e.features.forEach(function(e){if(o){var r=n(t,e,\"miles\");r<o.properties.distance&&(o=e,o.properties.distance=r)}else{o=e;var r=n(t,e,\"miles\");o.properties.distance=r}}),delete o.properties.distance,o}},{\"turf-distance\":70}],108:[function(t,e,o){e.exports=function(t,e){var o=t.geometry.coordinates[0],n=t.geometry.coordinates[1],r=e.geometry.coordinates[0][0][0],i=e.geometry.coordinates[0][0][1],s=e.properties.a,a=e.geometry.coordinates[0][1][0],p=e.geometry.coordinates[0][1][1],u=e.properties.b,l=e.geometry.coordinates[0][2][0],g=e.geometry.coordinates[0][2][1],h=e.properties.c,c=(h*(o-r)*(n-p)+s*(o-a)*(n-g)+u*(o-l)*(n-i)-u*(o-r)*(n-g)-h*(o-a)*(n-i)-s*(o-l)*(n-p))/((o-r)*(n-p)+(o-a)*(n-g)+(o-l)*(n-i)-(o-r)*(n-g)-(o-a)*(n-i)-(o-l)*(n-p));return c}},{}],109:[function(t,e,o){var n=t(\"turf-point\"),r=t(\"turf-featurecollection\"),i=t(\"turf-distance\");e.exports=function(t,e,o){for(var s=r([]),a=e/i(n([t[0],t[1]]),n([t[2],t[1]]),o),p=a*(t[2]-t[0]),u=e/i(n([t[0],t[1]]),n([t[0],t[3]]),o),l=u*(t[3]-t[1]),g=t[0];g<=t[2];){for(var h=t[1];h<=t[3];)s.features.push(n([g,h])),h+=l;g+=p}return s}},{\"turf-distance\":70,\"turf-featurecollection\":82,\"turf-point\":112}],110:[function(t,e,o){function n(t,e){for(var o=\"miles\",n=s([1/0,1/0],{dist:1/0}),u=0;u<e.length-1;u++){var l=s(e[u]),g=s(e[u+1]);l.properties.dist=i(t,l,o),g.properties.dist=i(t,g,o);var h=a(l,g),c=p(t,1e3,h+90,o),d=r(t.geometry.coordinates[0],t.geometry.coordinates[1],c.geometry.coordinates[0],c.geometry.coordinates[1],l.geometry.coordinates[0],l.geometry.coordinates[1],g.geometry.coordinates[0],g.geometry.coordinates[1]);d||(c=p(t,1e3,h-90,o),d=r(t.geometry.coordinates[0],t.geometry.coordinates[1],c.geometry.coordinates[0],c.geometry.coordinates[1],l.geometry.coordinates[0],l.geometry.coordinates[1],g.geometry.coordinates[0],g.geometry.coordinates[1])),c.properties.dist=1/0;var f;if(d){var f=s(d);f.properties.dist=i(t,f,o)}l.properties.dist<n.properties.dist&&(n=l,n.properties.index=u),g.properties.dist<n.properties.dist&&(n=g,n.properties.index=u),f&&f.properties.dist<n.properties.dist&&(n=f,n.properties.index=u)}return n}function r(t,e,o,n,r,i,s,a){var p,u,l,g,h,c={x:null,y:null,onLine1:!1,onLine2:!1};return p=(a-i)*(o-t)-(s-r)*(n-e),0==p?null!=c.x&&null!=c.y?c:!1:(u=e-i,l=t-r,g=(s-r)*u-(a-i)*l,h=(o-t)*u-(n-e)*l,u=g/p,l=h/p,c.x=t+u*(o-t),c.y=e+u*(n-e),u>0&&1>u&&(c.onLine1=!0),l>0&&1>l&&(c.onLine2=!0),c.onLine1&&c.onLine2?[c.x,c.y]:!1)}var i=t(\"turf-distance\"),s=t(\"turf-point\"),a=(t(\"turf-linestring\"),t(\"turf-bearing\")),p=t(\"turf-destination\");e.exports=function(t,e){var o;if(\"Feature\"===t.type)o=t.geometry.coordinates;else{if(\"LineString\"!==t.type)throw new Error(\"input must be a LineString Feature or Geometry\");o=t.geometry.coordinates}return n(e,o)}},{\"turf-bearing\":23,\"turf-destination\":67,\"turf-distance\":70,\"turf-linestring\":100,\"turf-point\":112}],111:[function(t,e,o){function n(t,e,o,n,r,i){var s=Math.sqrt((r-o)*(r-o)+(i-n)*(i-n)),a=Math.sqrt((t-o)*(t-o)+(e-n)*(e-n)),p=Math.sqrt((r-t)*(r-t)+(i-e)*(i-e));return s===a+p?!0:void 0}var r=t(\"turf-featurecollection\"),i=t(\"turf-center\"),s=t(\"turf-distance\"),a=t(\"turf-inside\"),p=t(\"turf-explode\");e.exports=function(t){\"FeatureCollection\"!=t.type&&(\"Feature\"!=t.type&&(t={type:\"Feature\",geometry:t,properties:{}}),t=r([t]));for(var e=i(t),o=!1,u=0;!o&&u<t.features.length;){var l=t.features[u].geometry;if(\"Point\"===l.type)e.geometry.coordinates[0]===l.coordinates[0]&&e.geometry.coordinates[1]===l.coordinates[1]&&(o=!0);else if(\"MultiPoint\"===l.type)for(var g=!1,h=0;!g&&h<l.coordinates.length;)e.geometry.coordinates[0]===l.coordinates[h][0]&&e.geometry.coordinates[1]===l.coordinates[h][1]&&(o=!0,g=!0),h++;else if(\"LineString\"===l.type)for(var c=!1,h=0;!c&&h<l.coordinates.length-1;){var d=e.geometry.coordinates[0],f=e.geometry.coordinates[1],m=l.coordinates[h][0],y=l.coordinates[h][1],j=l.coordinates[h+1][0],v=l.coordinates[h+1][1];n(d,f,m,y,j,v)&&(c=!0,o=!0),h++}else if(\"MultiLineString\"===l.type)for(var x=!1,E=0;!x&&E<l.coordinates.length;){for(var c=!1,h=0,I=l.coordinates[E];!c&&h<I.length-1;){var d=e.geometry.coordinates[0],f=e.geometry.coordinates[1],m=I[h][0],y=I[h][1],j=I[h+1][0],v=I[h+1][1];n(d,f,m,y,j,v)&&(c=!0,o=!0),h++}E++}else if(\"Polygon\"===l.type||\"MultiPolygon\"===l.type){var S={type:\"Feature\",geometry:l,properties:{}};a(e,S)&&(o=!0)}u++}if(o)return e;for(var L=r([]),u=0;u<t.features.length;u++)L.features=L.features.concat(p(t.features[u]).features);for(var C,N=1/0,u=0;u<L.features.length;u++){var b=s(e,L.features[u],\"miles\");N>b&&(N=b,C=L.features[u])}return C}},{\"turf-center\":31,\"turf-distance\":70,\"turf-explode\":78,\"turf-featurecollection\":82,\"turf-inside\":86}],112:[function(t,e,o){var n=Array.isArray||function(t){return\"[object Array]\"===Object.prototype.toString.call(t)};e.exports=function(t,e){if(!n(t))throw new Error(\"Coordinates must be an array\");if(t.length<2)throw new Error(\"Coordinates must be at least 2 numbers long\");return{type:\"Feature\",geometry:{type:\"Point\",coordinates:t},properties:e||{}}}},{}],113:[function(t,e,o){e.exports=function(t,e){if(null===t)throw new Error(\"No coordinates passed\");for(var o=0;o<t.length;o++)for(var n=t[o],r=0;r<n[n.length-1].length;r++){if(n.length<4)throw new Error(\"Each LinearRing of a Polygon must have 4 or more Positions.\");if(n[n.length-1][r]!==n[0][r])throw new Error(\"First and last Position are not equivalent.\")}var i={type:\"Feature\",geometry:{type:\"Polygon\",coordinates:t},properties:e};return i.properties||(i.properties={}),i}},{}],114:[function(t,e,o){var n=t(\"simple-statistics\");e.exports=function(t,e,o){var r=[],i=[];return t.features.forEach(function(t){r.push(t.properties[e])}),o.forEach(function(t){i.push(n.quantile(r,.01*t))}),i}},{\"simple-statistics\":115}],115:[function(t,e,o){arguments[4][69][0].apply(o,arguments)},{dup:69}],116:[function(t,e,o){var n=t(\"geojson-random\");e.exports=function(t,e,o){switch(o=o||{},e=e||1,t){case\"point\":case\"points\":case void 0:return n.point(e,o.bbox);case\"polygon\":case\"polygons\":return n.polygon(e,o.num_vertices,o.max_radial_length,o.bbox);default:throw new Error(\"Unknown type given: valid options are points and polygons\")}}},{\"geojson-random\":117}],117:[function(t,e,o){function n(t){return t?l(t):[a(),p()]}function r(t){return function(e,o){return[e[0]+t[0],e[1]+t[1]]}}function s(){return Math.random()-.5}function a(){return 360*s()}function p(){return 180*s()}function u(t){return{type:\"Point\",coordinates:t||[a(),p()]}}function l(t){return[Math.random()*(t[2]-t[0])+t[0],Math.random()*(t[3]-t[1])+t[1]]}function g(t){return{type:\"Polygon\",coordinates:t}}function h(t){return{type:\"Feature\",geometry:t,properties:{}}}function c(t){return{type:\"FeatureCollection\",features:t}}e.exports=function(){throw new Error(\"call .point() or .polygon() instead\")},e.exports.position=n,e.exports.point=function(t,e){var o=[];for(i=0;i<t;i++)o.push(h(e?u(n(e)):u()));return c(o)},e.exports.polygon=function(t,e,o,s){function a(t,e,o){o[e]=e>0?t+o[e-1]:t}function p(t,e){t=2*t*Math.PI/d[d.length-1];var n=Math.random();l.push([n*o*Math.sin(t),n*o*Math.cos(t)])}\"number\"!=typeof e&&(e=10),\"number\"!=typeof o&&(o=10);var u=[];for(i=0;i<t;i++){var l=[],d=Array.apply(null,new Array(e+1)).map(Math.random);d.forEach(a),d.forEach(p),l[l.length-1]=l[0],l=l.map(r(n(s))),u.push(h(g([l])))}return c(u)}},{}],118:[function(t,e,o){var n=t(\"turf-featurecollection\");t(\"./index.js\");e.exports=function(t,e,o,r,i){var s=n([]);return t.features.forEach(function(t){for(var n=0;n<r.length;n++)t.properties[e]>=r[n][0]&&t.properties[e]<=r[n][1]&&(t.properties[o]=r[n][2]);s.features.push(t)}),s}},{\"./index.js\":118,\"turf-featurecollection\":82}],119:[function(t,e,o){var n=t(\"turf-featurecollection\");e.exports=function(t,e,o){for(var r=n([]),i=0;i<t.features.length;i++)t.features[i].properties[e]!=o&&r.features.push(t.features[i]);return r}},{\"turf-featurecollection\":82}],120:[function(t,e,o){function n(t,e){for(var o,n,r=t.slice(0),i=t.length,s=i-e;i-->s;)n=Math.floor((i+1)*Math.random()),o=r[n],r[n]=r[i],r[i]=o;return r.slice(s)}var r=t(\"turf-featurecollection\");e.exports=function(t,e){var o=r(n(t.features,e));return o}},{\"turf-featurecollection\":82}],121:[function(t,e,o){function n(t,e){return{type:\"Feature\",geometry:t,properties:e}}var r=t(\"simplify-js\");e.exports=function(t,e,o){if(\"LineString\"===t.geometry.type){var i={type:\"LineString\",coordinates:[]},s=t.geometry.coordinates.map(function(t){return{x:t[0],y:t[1]}});return i.coordinates=r(s,e,o).map(function(t){return[t.x,t.y]}),n(i,t.properties)}if(\"Polygon\"===t.geometry.type){var a={type:\"Polygon\",coordinates:[]};return t.geometry.coordinates.forEach(function(t){var n=t.map(function(t){return{x:t[0],y:t[1]}}),i=r(n,e,o).map(function(t){return[t.x,t.y]});a.coordinates.push(i)}),n(a,t.properties)}}},{\"simplify-js\":122}],122:[function(t,e,o){!function(){\"use strict\";function t(t,e){var o=t.x-e.x,n=t.y-e.y;return o*o+n*n}function o(t,e,o){var n=e.x,r=e.y,i=o.x-n,s=o.y-r;if(0!==i||0!==s){var a=((t.x-n)*i+(t.y-r)*s)/(i*i+s*s);a>1?(n=o.x,r=o.y):a>0&&(n+=i*a,r+=s*a)}return i=t.x-n,s=t.y-r,i*i+s*s}function n(e,o){for(var n,r=e[0],i=[r],s=1,a=e.length;a>s;s++)n=e[s],t(n,r)>o&&(i.push(n),r=n);return r!==n&&i.push(n),i}function r(t,e){var n,r,i,s,a=t.length,p=\"undefined\"!=typeof Uint8Array?Uint8Array:Array,u=new p(a),l=0,g=a-1,h=[],c=[];for(u[l]=u[g]=1;g;){for(r=0,n=l+1;g>n;n++)i=o(t[n],t[l],t[g]),i>r&&(s=n,r=i);r>e&&(u[s]=1,h.push(l,s,s,g)),g=h.pop(),l=h.pop()}for(n=0;a>n;n++)u[n]&&c.push(t[n]);return c}function i(t,e,o){var i=void 0!==e?e*e:1;return t=o?t:n(t,i),t=r(t,i)}\"function\"==typeof define&&define.amd?define(function(){return i}):\"undefined\"!=typeof e?e.exports=i:\"undefined\"!=typeof self?self.simplify=i:window.simplify=i}()},{}],123:[function(t,e,o){e.exports=function(t,e){var o=t[2]-t[0],n=t[3]-t[1],r=o*e,i=n*e,s=r-o,a=i-n,p=t[0]-s/2,u=t[1]-a/2,l=s/2+t[2],g=a/2+t[3],h=[p,u,l,g];return h}},{}],124:[function(t,e,o){var n=t(\"turf-featurecollection\"),r=t(\"turf-point\"),i=t(\"turf-polygon\"),s=t(\"turf-distance\");e.exports=function(t,e,o){for(var a=n([]),p=e/s(r([t[0],t[1]]),r([t[2],t[1]]),o),u=p*(t[2]-t[0]),l=e/s(r([t[0],t[1]]),r([t[0],t[3]]),o),g=l*(t[3]-t[1]),h=t[0];h<=t[2];){for(var c=t[1];c<=t[3];){var d=i([[[h,c],[h,c+g],[h+u,c+g],[h+u,c],[h,c]]]);a.features.push(d),c+=g}h+=u}return a}},{\"turf-distance\":70,\"turf-featurecollection\":82,\"turf-point\":112,\"turf-polygon\":113}],125:[function(t,e,o){var n=t(\"turf-midpoint\"),r=t(\"turf-point\"),i=t(\"turf-distance\");e.exports=function(t){var e=[0,0,0,0],o=r([t[0],t[1]]),s=r([t[0],t[3]]),a=(r([t[2],t[3]]),r([t[2],t[1]])),p=i(o,a,\"miles\"),u=i(o,s,\"miles\");if(p>=u){e[0]=t[0],e[2]=t[2];var l=n(o,s);return e[1]=l.geometry.coordinates[1]-(t[2]-t[0])/2,e[3]=l.geometry.coordinates[1]+(t[2]-t[0])/2,e}e[1]=t[1],e[3]=t[3];var g=n(o,a);return e[0]=g.geometry.coordinates[0]-(t[3]-t[1])/2,e[2]=g.geometry.coordinates[0]+(t[3]-t[1])/2,e}},{\"turf-distance\":70,\"turf-midpoint\":105,\"turf-point\":112}],126:[function(t,e,o){function n(t){for(var e=0,o=0;o<t.length;o++)e+=t[o];return e}var r=t(\"turf-inside\");e.exports=function(t,e,o,i){return t.features.forEach(function(t){t.properties||(t.properties={});var s=[];e.features.forEach(function(e){r(e,t)&&s.push(e.properties[o])}),t.properties[i]=n(s)}),t}},{\"turf-inside\":86}],127:[function(t,e,o){var n=t(\"turf-inside\");e.exports=function(t,e,o,r){return t=JSON.parse(JSON.stringify(t)),e=JSON.parse(JSON.stringify(e)),t.features.forEach(function(t){t.properties||(t.properties={}),e.features.forEach(function(e){if(void 0===t.properties[r]){var i=n(t,e);i&&(t.properties[r]=e.properties[o])}})}),t}},{\"turf-inside\":86}],128:[function(t,e,o){function n(t,e,o){this.a=t,this.b=e,this.c=o;var n,r,i,s,a=e.x-t.x,p=e.y-t.y,u=o.x-t.x,l=o.y-t.y,g=a*(t.x+e.x)+p*(t.y+e.y),h=u*(t.x+o.x)+l*(t.y+o.y),c=2*(a*(o.y-e.y)-p*(o.x-e.x));Math.abs(c)<1e-6?(n=Math.min(t.x,e.x,o.x),r=Math.min(t.y,e.y,o.y),i=.5*(Math.max(t.x,e.x,o.x)-n),s=.5*(Math.max(t.y,e.y,o.y)-r),this.x=n+i,this.y=r+s,this.r=i*i+s*s):(this.x=(l*g-p*h)/c,this.y=(a*h-u*g)/c,i=this.x-t.x,s=this.y-t.y,this.r=i*i+s*s)}function r(t,e){return e.x-t.x}function i(t){var e,o,n,r,i,s=t.length;t:for(;s;)for(o=t[--s],e=t[--s],n=s;n;)if(i=t[--n],r=t[--n],e===r&&o===i||e===i&&o===r){t.splice(s,2),t.splice(n,2),s-=2;continue t}}function s(t){if(t.length<3)return[];t.sort(r);for(var e=t.length-1,o=t[e].x,s=t[0].x,a=t[e].y,p=a;e--;)t[e].y<a&&(a=t[e].y),t[e].y>p&&(p=t[e].y);var u,l,g,h=s-o,c=p-a,d=h>c?h:c,f=.5*(s+o),m=.5*(p+a),y=[new n({x:f-20*d,y:m-d,__sentinel:!0},{x:f,y:m+20*d,__sentinel:!0},{x:f+20*d,y:m-d,__sentinel:!0})],j=[],v=[];for(e=t.length;e--;){for(v.length=0,u=y.length;u--;)h=t[e].x-y[u].x,h>0&&h*h>y[u].r?(j.push(y[u]),y.splice(u,1)):(c=t[e].y-y[u].y,h*h+c*c>y[u].r||(v.push(y[u].a,y[u].b,y[u].b,y[u].c,y[u].c,y[u].a),y.splice(u,1)));for(i(v),u=v.length;u;)g=v[--u],l=v[--u],y.push(new n(l,g,t[e]))}for(Array.prototype.push.apply(j,y),e=j.length;e--;)(j[e].a.__sentinel||j[e].b.__sentinel||j[e].c.__sentinel)&&j.splice(e,1);return j}var a=t(\"turf-polygon\"),p=t(\"turf-featurecollection\");e.exports=function(t,e){return p(s(t.features.map(function(t){var o={x:t.geometry.coordinates[0],y:t.geometry.coordinates[1]};return e&&(o.z=t.properties[e]),o})).map(function(t){return a([[[t.a.x,t.a.y],[t.b.x,t.b.y],[t.c.x,t.c.y],[t.a.x,t.a.y]]],{a:t.a.z,b:t.b.z,c:t.c.z})}))}},{\"turf-featurecollection\":82,\"turf-polygon\":113}],129:[function(t,e,o){var n=t(\"turf-featurecollection\"),r=t(\"turf-point\"),i=t(\"turf-polygon\"),s=t(\"turf-distance\");e.exports=function(t,e,o){for(var a=n([]),p=e/s(r([t[0],t[1]]),r([t[2],t[1]]),o),u=p*(t[2]-t[0]),l=e/s(r([t[0],t[1]]),r([t[0],t[3]]),o),g=l*(t[3]-t[1]),h=0,c=t[0];c<=t[2];){for(var d=0,f=t[1];f<=t[3];){if(h%2===0&&d%2===0){var m=i([[[c,f],[c,f+g],[c+u,f],[c,f]]]);a.features.push(m);var y=i([[[c,f+g],[c+u,f+g],[c+u,f],[c,f+g]]]);a.features.push(y)}else if(h%2===0&&d%2===1){var m=i([[[c,f],[c+u,f+g],[c+u,f],[c,f]]]);a.features.push(m);var y=i([[[c,f],[c,f+g],[c+u,f+g],[c,f]]]);a.features.push(y)}else if(d%2===0&&h%2===1){var m=i([[[c,f],[c,f+g],[c+u,f+g],[c,f]]]);a.features.push(m);var y=i([[[c,f],[c+u,f+g],[c+u,f],[c,f]]]);a.features.push(y)}else if(d%2===1&&h%2===1){var m=i([[[c,f],[c,f+g],[c+u,f],[c,f]]]);a.features.push(m);var y=i([[[c,f+g],[c+u,f+g],[c+u,f],[c,f+g]]]);a.features.push(y)}f+=g,d++}h++,c+=u}return a}},{\"turf-distance\":70,\"turf-featurecollection\":82,\"turf-point\":112,\"turf-polygon\":113}],130:[function(t,e,o){var n=t(\"jsts\");e.exports=function(t,e){var o=new n.io.GeoJSONReader,r=o.read(JSON.stringify(t.geometry)),i=o.read(JSON.stringify(e.geometry)),s=r.union(i),a=new n.io.GeoJSONParser;return s=a.write(s),{type:\"Feature\",geometry:s,properties:t.properties}}},{jsts:131}],131:[function(t,e,o){arguments[4][27][0].apply(o,arguments)},{\"./lib/jsts\":132,dup:27,\"javascript.util\":134}],132:[function(t,e,o){arguments[4][28][0].apply(o,arguments)},{dup:28}],133:[function(t,e,o){(function(t){(function(){function e(t,e){var o=t.split(\".\"),n=O;o[0]in n||!n.execScript||n.execScript(\"var \"+o[0]);for(var r;o.length&&(r=o.shift());)o.length||void 0===e?n=n[r]?n[r]:n[r]={}:n[r]=e}function o(t,e){function o(){}o.prototype=e.prototype,t.q=e.prototype,t.prototype=new o,t.prototype.constructor=t,t.p=function(t,o,n){var r=Array.prototype.slice.call(arguments,2);return e.prototype[o].apply(t,r)}}function n(t){this.message=t||\"\"}function r(t){this.message=t||\"\"}function i(){}function s(){}function a(){}function p(){}function u(t){this.message=t||\"\"}function l(t){this.message=t||\"\"}function g(t){this.a=[],t instanceof s&&this.e(t)}function h(t){this.j=t}function c(){}function d(){this.i={}}function f(){}function m(t){this.a=[],t instanceof s&&this.e(t)}function y(t){this.k=t}function j(){}function v(){}function x(){this.a=[]}function E(t){return null==t?null:t.parent}function I(t,e){null!==t&&(t.color=e)}function S(t){return null==t?null:t.left}function L(t){return null==t?null:t.right}function C(){this.d=null,this.n=0}function N(t,e){if(null!=e){var o=e.right;e.right=o.left,null!=o.left&&(o.left.parent=e),o.parent=e.parent,null==e.parent?t.d=o:e.parent.left==e?e.parent.left=o:e.parent.right=o,o.left=e,e.parent=o}}function b(t,e){if(null!=e){var o=e.left;e.left=o.right,null!=o.right&&(o.right.parent=e),o.parent=e.parent,null==e.parent?t.d=o:e.parent.right==e?e.parent.right=o:e.parent.left=o,o.right=e,e.parent=o}}function P(t){if(null===t)return null;if(null!==t.right)for(var e=t.right;null!==e.left;)e=e.left;else for(e=t.parent;null!==e&&t===e.right;)t=e,e=e.parent;return e}function w(t){this.a=[],t instanceof s&&this.e(t)}function R(t){this.l=t}var O=this;o(n,Error),e(\"javascript.util.EmptyStackException\",n),n.prototype.name=\"EmptyStackException\",o(r,Error),e(\"javascript.util.IndexOutOfBoundsException\",r),r.prototype.name=\"IndexOutOfBoundsException\",e(\"javascript.util.Iterator\",i),i.prototype.hasNext=i.prototype.c,i.prototype.next=i.prototype.next,i.prototype.remove=i.prototype.remove,e(\"javascript.util.Collection\",s),o(a,s),e(\"javascript.util.List\",a),e(\"javascript.util.Map\",p),o(u,Error),e(\"javascript.util.NoSuchElementException\",u),u.prototype.name=\"NoSuchElementException\",o(l,Error),l.prototype.name=\"OperationNotSupported\",o(g,a),e(\"javascript.util.ArrayList\",g),g.prototype.a=null,g.prototype.add=function(t){return this.a.push(t),!0},g.prototype.add=g.prototype.add,g.prototype.e=function(t){for(t=t.f();t.c();)this.add(t.next());return!0},g.prototype.addAll=g.prototype.e,g.prototype.set=function(t,e){var o=this.a[t];return this.a[t]=e,o},g.prototype.set=g.prototype.set,g.prototype.f=function(){return new h(this)},g.prototype.iterator=g.prototype.f,g.prototype.get=function(t){if(0>t||t>=this.size())throw new r;return this.a[t]},g.prototype.get=g.prototype.get,g.prototype.g=function(){return 0===this.a.length},g.prototype.isEmpty=g.prototype.g,g.prototype.size=function(){return this.a.length},g.prototype.size=g.prototype.size,g.prototype.h=function(){for(var t=[],e=0,o=this.a.length;o>e;e++)t.push(this.a[e]);return t},g.prototype.toArray=g.prototype.h,g.prototype.remove=function(t){for(var e=!1,o=0,n=this.a.length;n>o;o++)if(this.a[o]===t){this.a.splice(o,1),e=!0;break}return e},g.prototype.remove=g.prototype.remove,e(\"$jscomp.scope.Iterator_\",h),h.prototype.j=null,h.prototype.b=0,h.prototype.next=function(){if(this.b===this.j.size())throw new u;return this.j.get(this.b++)},h.prototype.next=h.prototype.next,h.prototype.c=function(){return this.b<this.j.size()?!0:!1},h.prototype.hasNext=h.prototype.c,h.prototype.remove=function(){throw new l},h.prototype.remove=h.prototype.remove,e(\"javascript.util.Arrays\",c),c.sort=function(){var t,e,o,n=arguments[0];if(1===arguments.length)n.sort();else if(2===arguments.length)e=arguments[1],o=function(t,o){return e.compare(t,o)},n.sort(o);else if(3===arguments.length)for(t=n.slice(arguments[1],arguments[2]),t.sort(),o=n.slice(0,arguments[1]).concat(t,n.slice(arguments[2],n.length)),n.splice(0,n.length),t=0;t<o.length;t++)n.push(o[t]);else if(4===arguments.length)for(t=n.slice(arguments[1],arguments[2]),e=arguments[3],o=function(t,o){return e.compare(t,o)},t.sort(o),o=n.slice(0,arguments[1]).concat(t,n.slice(arguments[2],n.length)),n.splice(0,n.length),t=0;t<o.length;t++)n.push(o[t])},c.asList=function(t){for(var e=new g,o=0,n=t.length;n>o;o++)e.add(t[o]);return e},o(d,p),e(\"javascript.util.HashMap\",d),d.prototype.i=null,d.prototype.get=function(t){return this.i[t]||null},d.prototype.get=d.prototype.get,d.prototype.put=function(t,e){return this.i[t]=e},d.prototype.put=d.prototype.put,d.prototype.m=function(){var t,e=new g;for(t in this.i)this.i.hasOwnProperty(t)&&e.add(this.i[t]);return e},d.prototype.values=d.prototype.m,d.prototype.size=function(){return this.m().size()},d.prototype.size=d.prototype.size,o(f,s),e(\"javascript.util.Set\",f),o(m,f),e(\"javascript.util.HashSet\",m),m.prototype.a=null,m.prototype.contains=function(t){for(var e=0,o=this.a.length;o>e;e++)if(this.a[e]===t)return!0;return!1},m.prototype.contains=m.prototype.contains,m.prototype.add=function(t){return this.contains(t)?!1:(this.a.push(t),!0)},m.prototype.add=m.prototype.add,m.prototype.e=function(t){for(t=t.f();t.c();)this.add(t.next());return!0},m.prototype.addAll=m.prototype.e,m.prototype.remove=function(){throw new l},m.prototype.remove=m.prototype.remove,m.prototype.size=function(){return this.a.length},m.prototype.g=function(){return 0===this.a.length},m.prototype.isEmpty=m.prototype.g,m.prototype.h=function(){for(var t=[],e=0,o=this.a.length;o>e;e++)t.push(this.a[e]);return t},m.prototype.toArray=m.prototype.h,m.prototype.f=function(){return new y(this)},m.prototype.iterator=m.prototype.f,e(\"$jscomp.scope.Iterator_$1\",y),y.prototype.k=null,y.prototype.b=0,y.prototype.next=function(){if(this.b===this.k.size())throw new u;return this.k.a[this.b++]},y.prototype.next=y.prototype.next,y.prototype.c=function(){return this.b<this.k.size()?!0:!1},y.prototype.hasNext=y.prototype.c,y.prototype.remove=function(){throw new l},y.prototype.remove=y.prototype.remove,o(j,p),e(\"javascript.util.SortedMap\",j),o(v,f),e(\"javascript.util.SortedSet\",v),o(x,a),e(\"javascript.util.Stack\",x),x.prototype.a=null,x.prototype.push=function(t){return this.a.push(t),t},x.prototype.push=x.prototype.push,x.prototype.pop=function(){if(0===this.a.length)throw new n;return this.a.pop()},x.prototype.pop=x.prototype.pop,x.prototype.o=function(){if(0===this.a.length)throw new n;return this.a[this.a.length-1]},x.prototype.peek=x.prototype.o,x.prototype.empty=function(){return 0===this.a.length?!0:!1},x.prototype.empty=x.prototype.empty,x.prototype.g=function(){return this.empty()},x.prototype.isEmpty=x.prototype.g,x.prototype.search=function(t){return this.a.indexOf(t)},x.prototype.search=x.prototype.search,x.prototype.size=function(){return this.a.length},x.prototype.size=x.prototype.size,x.prototype.h=function(){for(var t=[],e=0,o=this.a.length;o>e;e++)t.push(this.a[e]);return t},x.prototype.toArray=x.prototype.h,o(C,j),e(\"javascript.util.TreeMap\",C),C.prototype.get=function(t){for(var e=this.d;null!==e;){var o=t.compareTo(e.key);if(0>o)e=e.left;else{if(!(o>0))return e.value;e=e.right}}return null},C.prototype.get=C.prototype.get,C.prototype.put=function(t,e){if(null===this.d)return this.d={key:t,value:e,left:null,right:null,parent:null,color:0},this.n=1,null;var o,n,r=this.d;do if(o=r,n=t.compareTo(r.key),0>n)r=r.left;else{if(!(n>0))return o=r.value,r.value=e,o;r=r.right}while(null!==r);for(r={key:t,left:null,right:null,value:e,parent:o,color:0},0>n?o.left=r:o.right=r,r.color=1;null!=r&&r!=this.d&&1==r.parent.color;)E(r)==S(E(E(r)))?(o=L(E(E(r))),1==(null==o?0:o.color)?(I(E(r),0),I(o,0),I(E(E(r)),1),r=E(E(r))):(r==L(E(r))&&(r=E(r),N(this,r)),I(E(r),0),I(E(E(r)),1),b(this,E(E(r))))):(o=S(E(E(r))),1==(null==o?0:o.color)?(I(E(r),0),I(o,0),I(E(E(r)),1),r=E(E(r))):(r==S(E(r))&&(r=E(r),b(this,r)),I(E(r),0),I(E(E(r)),1),N(this,E(E(r)))));return this.d.color=0,this.n++,null},C.prototype.put=C.prototype.put,C.prototype.m=function(){var t,e=new g;if(t=this.d,null!=t)for(;null!=t.left;)t=t.left;if(null!==t)for(e.add(t.value);null!==(t=P(t));)e.add(t.value);return e},C.prototype.values=C.prototype.m,C.prototype.size=function(){return this.n},C.prototype.size=C.prototype.size,o(w,v),e(\"javascript.util.TreeSet\",w),w.prototype.a=null,w.prototype.contains=function(t){for(var e=0,o=this.a.length;o>e;e++)if(0===this.a[e].compareTo(t))return!0;return!1},w.prototype.contains=w.prototype.contains,w.prototype.add=function(t){if(this.contains(t))return!1;for(var e=0,o=this.a.length;o>e;e++)if(1===this.a[e].compareTo(t))return this.a.splice(e,0,t),!0;return this.a.push(t),!0},w.prototype.add=w.prototype.add,w.prototype.e=function(t){for(t=t.f();t.c();)this.add(t.next());return!0},w.prototype.addAll=w.prototype.e,w.prototype.remove=function(){throw new l},w.prototype.remove=w.prototype.remove,w.prototype.size=function(){return this.a.length},w.prototype.size=w.prototype.size,w.prototype.g=function(){return 0===this.a.length},w.prototype.isEmpty=w.prototype.g,w.prototype.h=function(){for(var t=[],e=0,o=this.a.length;o>e;e++)t.push(this.a[e]);return t},w.prototype.toArray=w.prototype.h,w.prototype.f=function(){return new R(this)},w.prototype.iterator=w.prototype.f,e(\"$jscomp.scope.Iterator_$2\",R),R.prototype.l=null,R.prototype.b=0,R.prototype.next=function(){if(this.b===this.l.size())throw new u;return this.l.a[this.b++]},R.prototype.next=R.prototype.next,R.prototype.c=function(){return this.b<this.l.size()?!0:!1},R.prototype.hasNext=R.prototype.c,R.prototype.remove=function(){throw new l},R.prototype.remove=R.prototype.remove,\"undefined\"!=typeof t&&(t.javascript={},t.javascript.util={},t.javascript.util.ArrayList=g,t.javascript.util.Arrays=c,t.javascript.util.Collection=s,t.javascript.util.EmptyStackException=n,t.javascript.util.HashMap=d,t.javascript.util.HashSet=m,t.javascript.util.IndexOutOfBoundsException=r,t.javascript.util.Iterator=i,t.javascript.util.List=a,t.javascript.util.Map=p,t.javascript.util.NoSuchElementException=u,t.javascript.util.OperationNotSupported=l,t.javascript.util.Set=f,t.javascript.util.SortedMap=j,t.javascript.util.SortedSet=v,t.javascript.util.Stack=x,t.javascript.util.TreeMap=C,t.javascript.util.TreeSet=w)}).call(this)}).call(this,\"undefined\"!=typeof global?global:\"undefined\"!=typeof self?self:\"undefined\"!=typeof window?window:{})},{}],134:[function(t,e,o){arguments[4][30][0].apply(o,arguments)},{\"./dist/javascript.util-node.min.js\":133,dup:30}],135:[function(t,e,o){var n=t(\"simple-statistics\"),r=t(\"turf-inside\");e.exports=function(t,e,o,i){return t.features.forEach(function(t){t.properties||(t.properties={});var s=[];e.features.forEach(function(e){r(e,t)&&s.push(e.properties[o])}),t.properties[i]=n.variance(s)}),t}},{\"simple-statistics\":136,\"turf-inside\":86}],136:[function(t,e,o){arguments[4][69][0].apply(o,arguments)},{dup:69}],137:[function(t,e,o){var n=t(\"turf-inside\"),r=t(\"turf-featurecollection\");e.exports=function(t,e){for(var o=r([]),i=0;i<e.features.length;i++)for(var s=0;s<t.features.length;s++){var a=n(t.features[s],e.features[i]);a&&o.features.push(t.features[s])}return o}},{\"turf-featurecollection\":82,\"turf-inside\":86}],138:[function(t,e,o){\"use strict\";function n(t){for(var e in t)if(t.hasOwnProperty(e))return!1;return!0}function r(t,e){function o(){4===g.readyState&&u()}function i(){var t=void 0;if(g.response?t=g.response:\"text\"!==g.responseType&&g.responseType||(t=g.responseText||g.responseXML),x)try{t=JSON.parse(t)}catch(e){}return t}function s(t){clearTimeout(d),t instanceof Error||(t=new Error(\"\"+(t||\"Unknown XMLHttpRequest Error\"))),t.statusCode=0,e(t,l)}function u(){if(!c){var o;clearTimeout(d),o=t.useXDR&&void 0===g.status?200:1223===g.status?204:g.status;var n=l,r=null;0!==o?(n={body:i(),statusCode:o,method:m,headers:{},url:f,rawRequest:g},g.getAllResponseHeaders&&(n.headers=p(g.getAllResponseHeaders()))):r=new Error(\"Internal XMLHttpRequest Error\"),e(r,n,n.body)}}var l={body:void 0,headers:{},statusCode:0,method:m,url:f,rawRequest:g};if(\"string\"==typeof t&&(t={uri:t}),t=t||{},\"undefined\"==typeof e)throw new Error(\"callback argument missing\");e=a(e);var g=t.xhr||null;g||(g=t.cors||t.useXDR?new r.XDomainRequest:new r.XMLHttpRequest);var h,c,d,f=g.url=t.uri||t.url,m=g.method=t.method||\"GET\",y=t.body||t.data,j=g.headers=t.headers||{},v=!!t.sync,x=!1;if(\"json\"in t&&(x=!0,j.accept||j.Accept||(j.Accept=\"application/json\"),\"GET\"!==m&&\"HEAD\"!==m&&(j[\"content-type\"]||j[\"Content-Type\"]||(j[\"Content-Type\"]=\"application/json\"),y=JSON.stringify(t.json))),g.onreadystatechange=o,g.onload=u,g.onerror=s,g.onprogress=function(){},g.ontimeout=s,g.open(m,f,!v,t.username,t.password),v||(g.withCredentials=!!t.withCredentials),!v&&t.timeout>0&&(d=setTimeout(function(){c=!0,g.abort(\"timeout\");var t=new Error(\"XMLHttpRequest timeout\");t.code=\"ETIMEDOUT\",s(t)},t.timeout)),g.setRequestHeader)for(h in j)j.hasOwnProperty(h)&&g.setRequestHeader(h,j[h]);else if(t.headers&&!n(t.headers))throw new Error(\"Headers cannot be set on an XDomainRequest object\");return\"responseType\"in t&&(g.responseType=t.responseType),\"beforeSend\"in t&&\"function\"==typeof t.beforeSend&&t.beforeSend(g),g.send(y),g}function i(){}var s=t(\"global/window\"),a=t(\"once\"),p=t(\"parse-headers\");e.exports=r,r.XMLHttpRequest=s.XMLHttpRequest||i,r.XDomainRequest=\"withCredentials\"in new r.XMLHttpRequest?r.XMLHttpRequest:s.XDomainRequest},{\"global/window\":139,once:140,\"parse-headers\":144}],139:[function(t,e,o){(function(t){\"undefined\"!=typeof window?e.exports=window:\"undefined\"!=typeof t?e.exports=t:\"undefined\"!=typeof self?e.exports=self:e.exports={}}).call(this,\"undefined\"!=typeof global?global:\"undefined\"!=typeof self?self:\"undefined\"!=typeof window?window:{})},{}],140:[function(t,e,o){function n(t){var e=!1;return function(){return e?void 0:(e=!0,t.apply(this,arguments))}}e.exports=n,n.proto=n(function(){Object.defineProperty(Function.prototype,\"once\",{value:function(){return n(this)},configurable:!0})})},{}],141:[function(t,e,o){function n(t,e,o){if(!a(e))throw new TypeError(\"iterator must be a function\");arguments.length<3&&(o=this),\"[object Array]\"===p.call(t)?r(t,e,o):\"string\"==typeof t?i(t,e,o):s(t,e,o)}function r(t,e,o){for(var n=0,r=t.length;r>n;n++)u.call(t,n)&&e.call(o,t[n],n,t)}function i(t,e,o){for(var n=0,r=t.length;r>n;n++)e.call(o,t.charAt(n),n,t)}function s(t,e,o){for(var n in t)u.call(t,n)&&e.call(o,t[n],n,t)}var a=t(\"is-function\");e.exports=n;var p=Object.prototype.toString,u=Object.prototype.hasOwnProperty},{\"is-function\":142}],142:[function(t,e,o){function n(t){var e=r.call(t);return\"[object Function]\"===e||\"function\"==typeof t&&\"[object RegExp]\"!==e||\"undefined\"!=typeof window&&(t===window.setTimeout||t===window.alert||t===window.confirm||t===window.prompt)}e.exports=n;var r=Object.prototype.toString},{}],143:[function(t,e,o){function n(t){return t.replace(/^\\s*|\\s*$/g,\"\")}o=e.exports=n,o.left=function(t){return t.replace(/^\\s*/,\"\")},o.right=function(t){return t.replace(/\\s*$/,\"\")}},{}],144:[function(t,e,o){var n=t(\"trim\"),r=t(\"for-each\"),i=function(t){return\"[object Array]\"===Object.prototype.toString.call(t)};e.exports=function(t){if(!t)return{};var e={};return r(n(t).split(\"\\n\"),function(t){var o=t.indexOf(\":\"),r=n(t.slice(0,o)).toLowerCase(),s=n(t.slice(o+1));\"undefined\"==typeof e[r]?e[r]=s:i(e[r])?e[r].push(s):e[r]=[e[r],s]}),e}},{\"for-each\":141,trim:143}],145:[function(t,e,o){\"use strict\";Object.defineProperty(o,\"__esModule\",{value:!0});var n={0:\"#f51a1a\",1:\"#a21aff\",2:\"#b34b00\",3:\"#18dbff\",4:\"#ff1518\",5:\"#88fa60\"};o[\"default\"]=n,e.exports=o[\"default\"]},{}],146:[function(t,e,o){(function(e){\"use strict\";var o=t(\"babel-runtime/helpers/interop-require-default\")[\"default\"],n=t(\"babel-runtime/helpers/interop-require-wildcard\")[\"default\"],r=t(\"xhr\"),i=o(r),s=t(\"spin.js\"),a=(n(s),t(\"../config.json\")),p=n(a),u=t(\"./colors\"),l=n(u),g=t(\"leaflet-knn\"),h=o(g),c=t(\"turf\");\no(c);t(\"leaflet-hash\");var d=e.L||t(\"leaflet\");console.log(h[\"default\"]);var f=\"mapbox.dark\",m=4,y=e.map=d.map(document.querySelector(\".map\")),j=(d.hash(y),void 0),v=void 0,x=void 0;d.tileLayer(\"https://api.mapbox.com/v4/\"+f+\"/{z}/{x}/{y}.png?access_token=\"+p.api_token,{attribution:\"Mapbox &copy; OSM contributors\"}).addTo(y);i[\"default\"]({url:\"data/data.json\"},function(t,e,o){if(!t){x=o=JSON.parse(o),v=d.geoJson(o,{style:function(t){return{color:l[t.properties.id],weight:m/(t.properties.id+1),fillOpacity:.1,clickable:!1}}});var n=v.getBounds();y.fitBounds(n,{padding:[20,20]}),v.addTo(y),j=h[\"default\"](v)}});var E=void 0;y.on(\"click\",function(t){E?E.setLatLng(t.latlng):E=d.marker(t.latlng).addTo(y);var e=j.nearest(t.latlng,1);console.log(e)})}).call(this,\"undefined\"!=typeof global?global:\"undefined\"!=typeof self?self:\"undefined\"!=typeof window?window:{})},{\"../config.json\":1,\"./colors\":145,\"babel-runtime/helpers/interop-require-default\":2,\"babel-runtime/helpers/interop-require-wildcard\":3,leaflet:\"leaflet\",\"leaflet-hash\":8,\"leaflet-knn\":9,\"spin.js\":14,turf:15,xhr:138}]},{},[146]);\n//# sourceMappingURL=app.min.js.map\n","\"use strict\";\n\nexports[\"default\"] = function (obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n};\n\nexports.__esModule = true;","\"use strict\";\n\nexports[\"default\"] = function (obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n      }\n    }\n\n    newObj[\"default\"] = obj;\n    return newObj;\n  }\n};\n\nexports.__esModule = true;","/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\nvar base64 = require('base64-js')\nvar ieee754 = require('ieee754')\nvar isArray = require('is-array')\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\nBuffer.poolSize = 8192 // not used by this implementation\n\nvar rootParent = {}\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Use Object implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * Due to various browser bugs, sometimes the Object implementation will be used even\n * when the browser supports typed arrays.\n *\n * Note:\n *\n *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n *\n *   - Safari 5-7 lacks support for changing the `Object.prototype.constructor` property\n *     on objects.\n *\n *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n *\n *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n *     incorrect length in some situations.\n\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n * get the Object implementation, which is slower but behaves correctly.\n */\nBuffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined\n  ? global.TYPED_ARRAY_SUPPORT\n  : typedArraySupport()\n\nfunction typedArraySupport () {\n  function Bar () {}\n  try {\n    var arr = new Uint8Array(1)\n    arr.foo = function () { return 42 }\n    arr.constructor = Bar\n    return arr.foo() === 42 && // typed array instances can be augmented\n        arr.constructor === Bar && // constructor can be set\n        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`\n        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`\n  } catch (e) {\n    return false\n  }\n}\n\nfunction kMaxLength () {\n  return Buffer.TYPED_ARRAY_SUPPORT\n    ? 0x7fffffff\n    : 0x3fffffff\n}\n\n/**\n * Class: Buffer\n * =============\n *\n * The Buffer constructor returns instances of `Uint8Array` that are augmented\n * with function properties for all the node `Buffer` API functions. We use\n * `Uint8Array` so that square bracket notation works as expected -- it returns\n * a single octet.\n *\n * By augmenting the instances, we can avoid modifying the `Uint8Array`\n * prototype.\n */\nfunction Buffer (arg) {\n  if (!(this instanceof Buffer)) {\n    // Avoid going through an ArgumentsAdaptorTrampoline in the common case.\n    if (arguments.length > 1) return new Buffer(arg, arguments[1])\n    return new Buffer(arg)\n  }\n\n  this.length = 0\n  this.parent = undefined\n\n  // Common case.\n  if (typeof arg === 'number') {\n    return fromNumber(this, arg)\n  }\n\n  // Slightly less common case.\n  if (typeof arg === 'string') {\n    return fromString(this, arg, arguments.length > 1 ? arguments[1] : 'utf8')\n  }\n\n  // Unusual.\n  return fromObject(this, arg)\n}\n\nfunction fromNumber (that, length) {\n  that = allocate(that, length < 0 ? 0 : checked(length) | 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n    for (var i = 0; i < length; i++) {\n      that[i] = 0\n    }\n  }\n  return that\n}\n\nfunction fromString (that, string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') encoding = 'utf8'\n\n  // Assumption: byteLength() return value is always < kMaxLength.\n  var length = byteLength(string, encoding) | 0\n  that = allocate(that, length)\n\n  that.write(string, encoding)\n  return that\n}\n\nfunction fromObject (that, object) {\n  if (Buffer.isBuffer(object)) return fromBuffer(that, object)\n\n  if (isArray(object)) return fromArray(that, object)\n\n  if (object == null) {\n    throw new TypeError('must start with number, buffer, array or string')\n  }\n\n  if (typeof ArrayBuffer !== 'undefined') {\n    if (object.buffer instanceof ArrayBuffer) {\n      return fromTypedArray(that, object)\n    }\n    if (object instanceof ArrayBuffer) {\n      return fromArrayBuffer(that, object)\n    }\n  }\n\n  if (object.length) return fromArrayLike(that, object)\n\n  return fromJsonObject(that, object)\n}\n\nfunction fromBuffer (that, buffer) {\n  var length = checked(buffer.length) | 0\n  that = allocate(that, length)\n  buffer.copy(that, 0, 0, length)\n  return that\n}\n\nfunction fromArray (that, array) {\n  var length = checked(array.length) | 0\n  that = allocate(that, length)\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\n// Duplicate of fromArray() to keep fromArray() monomorphic.\nfunction fromTypedArray (that, array) {\n  var length = checked(array.length) | 0\n  that = allocate(that, length)\n  // Truncating the elements is probably not what people expect from typed\n  // arrays with BYTES_PER_ELEMENT > 1 but it's compatible with the behavior\n  // of the old Buffer constructor.\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\nfunction fromArrayBuffer (that, array) {\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    array.byteLength\n    that = Buffer._augment(new Uint8Array(array))\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    that = fromTypedArray(that, new Uint8Array(array))\n  }\n  return that\n}\n\nfunction fromArrayLike (that, array) {\n  var length = checked(array.length) | 0\n  that = allocate(that, length)\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\n// Deserialize { type: 'Buffer', data: [1,2,3,...] } into a Buffer object.\n// Returns a zero-length buffer for inputs that don't conform to the spec.\nfunction fromJsonObject (that, object) {\n  var array\n  var length = 0\n\n  if (object.type === 'Buffer' && isArray(object.data)) {\n    array = object.data\n    length = checked(array.length) | 0\n  }\n  that = allocate(that, length)\n\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\nif (Buffer.TYPED_ARRAY_SUPPORT) {\n  Buffer.prototype.__proto__ = Uint8Array.prototype\n  Buffer.__proto__ = Uint8Array\n}\n\nfunction allocate (that, length) {\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = Buffer._augment(new Uint8Array(length))\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    that.length = length\n    that._isBuffer = true\n  }\n\n  var fromPool = length !== 0 && length <= Buffer.poolSize >>> 1\n  if (fromPool) that.parent = rootParent\n\n  return that\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < kMaxLength` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= kMaxLength()) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + kMaxLength().toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (subject, encoding) {\n  if (!(this instanceof SlowBuffer)) return new SlowBuffer(subject, encoding)\n\n  var buf = new Buffer(subject, encoding)\n  delete buf.parent\n  return buf\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return !!(b != null && b._isBuffer)\n}\n\nBuffer.compare = function compare (a, b) {\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError('Arguments must be Buffers')\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  var i = 0\n  var len = Math.min(x, y)\n  while (i < len) {\n    if (a[i] !== b[i]) break\n\n    ++i\n  }\n\n  if (i !== len) {\n    x = a[i]\n    y = b[i]\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'binary':\n    case 'base64':\n    case 'raw':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!isArray(list)) throw new TypeError('list argument must be an Array of Buffers.')\n\n  if (list.length === 0) {\n    return new Buffer(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; i++) {\n      length += list[i].length\n    }\n  }\n\n  var buf = new Buffer(length)\n  var pos = 0\n  for (i = 0; i < list.length; i++) {\n    var item = list[i]\n    item.copy(buf, pos)\n    pos += item.length\n  }\n  return buf\n}\n\nfunction byteLength (string, encoding) {\n  if (typeof string !== 'string') string = '' + string\n\n  var len = string.length\n  if (len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'binary':\n      // Deprecated\n      case 'raw':\n      case 'raws':\n        return len\n      case 'utf8':\n      case 'utf-8':\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) return utf8ToBytes(string).length // assume utf8\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\n// pre-set for values that may exist in the future\nBuffer.prototype.length = undefined\nBuffer.prototype.parent = undefined\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  start = start | 0\n  end = end === undefined || end === Infinity ? this.length : end | 0\n\n  if (!encoding) encoding = 'utf8'\n  if (start < 0) start = 0\n  if (end > this.length) end = this.length\n  if (end <= start) return ''\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'binary':\n        return binarySlice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length | 0\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  if (this.length > 0) {\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')\n    if (this.length > max) str += ' ... '\n  }\n  return '<Buffer ' + str + '>'\n}\n\nBuffer.prototype.compare = function compare (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return 0\n  return Buffer.compare(this, b)\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset) {\n  if (byteOffset > 0x7fffffff) byteOffset = 0x7fffffff\n  else if (byteOffset < -0x80000000) byteOffset = -0x80000000\n  byteOffset >>= 0\n\n  if (this.length === 0) return -1\n  if (byteOffset >= this.length) return -1\n\n  // Negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = Math.max(this.length + byteOffset, 0)\n\n  if (typeof val === 'string') {\n    if (val.length === 0) return -1 // special case: looking for empty string always fails\n    return String.prototype.indexOf.call(this, val, byteOffset)\n  }\n  if (Buffer.isBuffer(val)) {\n    return arrayIndexOf(this, val, byteOffset)\n  }\n  if (typeof val === 'number') {\n    if (Buffer.TYPED_ARRAY_SUPPORT && Uint8Array.prototype.indexOf === 'function') {\n      return Uint8Array.prototype.indexOf.call(this, val, byteOffset)\n    }\n    return arrayIndexOf(this, [ val ], byteOffset)\n  }\n\n  function arrayIndexOf (arr, val, byteOffset) {\n    var foundIndex = -1\n    for (var i = 0; byteOffset + i < arr.length; i++) {\n      if (arr[byteOffset + i] === val[foundIndex === -1 ? 0 : i - foundIndex]) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === val.length) return byteOffset + foundIndex\n      } else {\n        foundIndex = -1\n      }\n    }\n    return -1\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\n// `get` is deprecated\nBuffer.prototype.get = function get (offset) {\n  console.log('.get() is deprecated. Access using array indexes instead.')\n  return this.readUInt8(offset)\n}\n\n// `set` is deprecated\nBuffer.prototype.set = function set (v, offset) {\n  console.log('.set() is deprecated. Access using array indexes instead.')\n  return this.writeUInt8(v, offset)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  // must be an even number of digits\n  var strLen = string.length\n  if (strLen % 2 !== 0) throw new Error('Invalid hex string')\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; i++) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (isNaN(parsed)) throw new Error('Invalid hex string')\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction binaryWrite (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset | 0\n    if (isFinite(length)) {\n      length = length | 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  // legacy write(string, encoding, offset, length) - remove in v0.13\n  } else {\n    var swap = encoding\n    encoding = offset\n    offset = length | 0\n    length = swap\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'binary':\n        return binaryWrite(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n      : (firstByte > 0xBF) ? 2\n      : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; i++) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction binarySlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; i++) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; i++) {\n    out += toHex(buf[i])\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    newBuf = Buffer._augment(this.subarray(start, end))\n  } else {\n    var sliceLen = end - start\n    newBuf = new Buffer(sliceLen, undefined)\n    for (var i = 0; i < sliceLen; i++) {\n      newBuf[i] = this[i + start]\n    }\n  }\n\n  if (newBuf.length) newBuf.parent = this.parent || this\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('buffer must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('value is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkInt(this, value, offset, byteLength, Math.pow(2, 8 * byteLength), 0)\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkInt(this, value, offset, byteLength, Math.pow(2, 8 * byteLength), 0)\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nfunction objectWriteUInt16 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; i++) {\n    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>\n      (littleEndian ? i : 1 - i) * 8\n  }\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nfunction objectWriteUInt32 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffffffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; i++) {\n    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff\n  }\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset + 3] = (value >>> 24)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 1] = (value >>> 8)\n    this[offset] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = value < 0 ? 1 : 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = value < 0 ? 1 : 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 3] = (value >>> 24)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (value > max || value < min) throw new RangeError('value is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('index out of range')\n  if (offset < 0) throw new RangeError('index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n  var i\n\n  if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (i = len - 1; i >= 0; i--) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n    // ascending copy from start\n    for (i = 0; i < len; i++) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else {\n    target._set(this.subarray(start, start + len), targetStart)\n  }\n\n  return len\n}\n\n// fill(value, start=0, end=buffer.length)\nBuffer.prototype.fill = function fill (value, start, end) {\n  if (!value) value = 0\n  if (!start) start = 0\n  if (!end) end = this.length\n\n  if (end < start) throw new RangeError('end < start')\n\n  // Fill 0 bytes; we're done\n  if (end === start) return\n  if (this.length === 0) return\n\n  if (start < 0 || start >= this.length) throw new RangeError('start out of bounds')\n  if (end < 0 || end > this.length) throw new RangeError('end out of bounds')\n\n  var i\n  if (typeof value === 'number') {\n    for (i = start; i < end; i++) {\n      this[i] = value\n    }\n  } else {\n    var bytes = utf8ToBytes(value.toString())\n    var len = bytes.length\n    for (i = start; i < end; i++) {\n      this[i] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n/**\n * Creates a new `ArrayBuffer` with the *copied* memory of the buffer instance.\n * Added in Node 0.12. Only available in browsers that support ArrayBuffer.\n */\nBuffer.prototype.toArrayBuffer = function toArrayBuffer () {\n  if (typeof Uint8Array !== 'undefined') {\n    if (Buffer.TYPED_ARRAY_SUPPORT) {\n      return (new Buffer(this)).buffer\n    } else {\n      var buf = new Uint8Array(this.length)\n      for (var i = 0, len = buf.length; i < len; i += 1) {\n        buf[i] = this[i]\n      }\n      return buf.buffer\n    }\n  } else {\n    throw new TypeError('Buffer.toArrayBuffer not supported in this browser')\n  }\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar BP = Buffer.prototype\n\n/**\n * Augment a Uint8Array *instance* (not the Uint8Array class!) with Buffer methods\n */\nBuffer._augment = function _augment (arr) {\n  arr.constructor = Buffer\n  arr._isBuffer = true\n\n  // save reference to original Uint8Array set method before overwriting\n  arr._set = arr.set\n\n  // deprecated\n  arr.get = BP.get\n  arr.set = BP.set\n\n  arr.write = BP.write\n  arr.toString = BP.toString\n  arr.toLocaleString = BP.toString\n  arr.toJSON = BP.toJSON\n  arr.equals = BP.equals\n  arr.compare = BP.compare\n  arr.indexOf = BP.indexOf\n  arr.copy = BP.copy\n  arr.slice = BP.slice\n  arr.readUIntLE = BP.readUIntLE\n  arr.readUIntBE = BP.readUIntBE\n  arr.readUInt8 = BP.readUInt8\n  arr.readUInt16LE = BP.readUInt16LE\n  arr.readUInt16BE = BP.readUInt16BE\n  arr.readUInt32LE = BP.readUInt32LE\n  arr.readUInt32BE = BP.readUInt32BE\n  arr.readIntLE = BP.readIntLE\n  arr.readIntBE = BP.readIntBE\n  arr.readInt8 = BP.readInt8\n  arr.readInt16LE = BP.readInt16LE\n  arr.readInt16BE = BP.readInt16BE\n  arr.readInt32LE = BP.readInt32LE\n  arr.readInt32BE = BP.readInt32BE\n  arr.readFloatLE = BP.readFloatLE\n  arr.readFloatBE = BP.readFloatBE\n  arr.readDoubleLE = BP.readDoubleLE\n  arr.readDoubleBE = BP.readDoubleBE\n  arr.writeUInt8 = BP.writeUInt8\n  arr.writeUIntLE = BP.writeUIntLE\n  arr.writeUIntBE = BP.writeUIntBE\n  arr.writeUInt16LE = BP.writeUInt16LE\n  arr.writeUInt16BE = BP.writeUInt16BE\n  arr.writeUInt32LE = BP.writeUInt32LE\n  arr.writeUInt32BE = BP.writeUInt32BE\n  arr.writeIntLE = BP.writeIntLE\n  arr.writeIntBE = BP.writeIntBE\n  arr.writeInt8 = BP.writeInt8\n  arr.writeInt16LE = BP.writeInt16LE\n  arr.writeInt16BE = BP.writeInt16BE\n  arr.writeInt32LE = BP.writeInt32LE\n  arr.writeInt32BE = BP.writeInt32BE\n  arr.writeFloatLE = BP.writeFloatLE\n  arr.writeFloatBE = BP.writeFloatBE\n  arr.writeDoubleLE = BP.writeDoubleLE\n  arr.writeDoubleBE = BP.writeDoubleBE\n  arr.fill = BP.fill\n  arr.inspect = BP.inspect\n  arr.toArrayBuffer = BP.toArrayBuffer\n\n  return arr\n}\n\nvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = stringtrim(str).replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction stringtrim (str) {\n  if (str.trim) return str.trim()\n  return str.replace(/^\\s+|\\s+$/g, '')\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; i++) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00 | 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; i++) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; i++) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; i++) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n","var lookup = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n\n;(function (exports) {\n\t'use strict';\n\n  var Arr = (typeof Uint8Array !== 'undefined')\n    ? Uint8Array\n    : Array\n\n\tvar PLUS   = '+'.charCodeAt(0)\n\tvar SLASH  = '/'.charCodeAt(0)\n\tvar NUMBER = '0'.charCodeAt(0)\n\tvar LOWER  = 'a'.charCodeAt(0)\n\tvar UPPER  = 'A'.charCodeAt(0)\n\tvar PLUS_URL_SAFE = '-'.charCodeAt(0)\n\tvar SLASH_URL_SAFE = '_'.charCodeAt(0)\n\n\tfunction decode (elt) {\n\t\tvar code = elt.charCodeAt(0)\n\t\tif (code === PLUS ||\n\t\t    code === PLUS_URL_SAFE)\n\t\t\treturn 62 // '+'\n\t\tif (code === SLASH ||\n\t\t    code === SLASH_URL_SAFE)\n\t\t\treturn 63 // '/'\n\t\tif (code < NUMBER)\n\t\t\treturn -1 //no match\n\t\tif (code < NUMBER + 10)\n\t\t\treturn code - NUMBER + 26 + 26\n\t\tif (code < UPPER + 26)\n\t\t\treturn code - UPPER\n\t\tif (code < LOWER + 26)\n\t\t\treturn code - LOWER + 26\n\t}\n\n\tfunction b64ToByteArray (b64) {\n\t\tvar i, j, l, tmp, placeHolders, arr\n\n\t\tif (b64.length % 4 > 0) {\n\t\t\tthrow new Error('Invalid string. Length must be a multiple of 4')\n\t\t}\n\n\t\t// the number of equal signs (place holders)\n\t\t// if there are two placeholders, than the two characters before it\n\t\t// represent one byte\n\t\t// if there is only one, then the three characters before it represent 2 bytes\n\t\t// this is just a cheap hack to not do indexOf twice\n\t\tvar len = b64.length\n\t\tplaceHolders = '=' === b64.charAt(len - 2) ? 2 : '=' === b64.charAt(len - 1) ? 1 : 0\n\n\t\t// base64 is 4/3 + up to two characters of the original data\n\t\tarr = new Arr(b64.length * 3 / 4 - placeHolders)\n\n\t\t// if there are placeholders, only get up to the last complete 4 chars\n\t\tl = placeHolders > 0 ? b64.length - 4 : b64.length\n\n\t\tvar L = 0\n\n\t\tfunction push (v) {\n\t\t\tarr[L++] = v\n\t\t}\n\n\t\tfor (i = 0, j = 0; i < l; i += 4, j += 3) {\n\t\t\ttmp = (decode(b64.charAt(i)) << 18) | (decode(b64.charAt(i + 1)) << 12) | (decode(b64.charAt(i + 2)) << 6) | decode(b64.charAt(i + 3))\n\t\t\tpush((tmp & 0xFF0000) >> 16)\n\t\t\tpush((tmp & 0xFF00) >> 8)\n\t\t\tpush(tmp & 0xFF)\n\t\t}\n\n\t\tif (placeHolders === 2) {\n\t\t\ttmp = (decode(b64.charAt(i)) << 2) | (decode(b64.charAt(i + 1)) >> 4)\n\t\t\tpush(tmp & 0xFF)\n\t\t} else if (placeHolders === 1) {\n\t\t\ttmp = (decode(b64.charAt(i)) << 10) | (decode(b64.charAt(i + 1)) << 4) | (decode(b64.charAt(i + 2)) >> 2)\n\t\t\tpush((tmp >> 8) & 0xFF)\n\t\t\tpush(tmp & 0xFF)\n\t\t}\n\n\t\treturn arr\n\t}\n\n\tfunction uint8ToBase64 (uint8) {\n\t\tvar i,\n\t\t\textraBytes = uint8.length % 3, // if we have 1 byte left, pad 2 bytes\n\t\t\toutput = \"\",\n\t\t\ttemp, length\n\n\t\tfunction encode (num) {\n\t\t\treturn lookup.charAt(num)\n\t\t}\n\n\t\tfunction tripletToBase64 (num) {\n\t\t\treturn encode(num >> 18 & 0x3F) + encode(num >> 12 & 0x3F) + encode(num >> 6 & 0x3F) + encode(num & 0x3F)\n\t\t}\n\n\t\t// go through the array every three bytes, we'll deal with trailing stuff later\n\t\tfor (i = 0, length = uint8.length - extraBytes; i < length; i += 3) {\n\t\t\ttemp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])\n\t\t\toutput += tripletToBase64(temp)\n\t\t}\n\n\t\t// pad the end with zeros, but make sure to not forget the extra bytes\n\t\tswitch (extraBytes) {\n\t\t\tcase 1:\n\t\t\t\ttemp = uint8[uint8.length - 1]\n\t\t\t\toutput += encode(temp >> 2)\n\t\t\t\toutput += encode((temp << 4) & 0x3F)\n\t\t\t\toutput += '=='\n\t\t\t\tbreak\n\t\t\tcase 2:\n\t\t\t\ttemp = (uint8[uint8.length - 2] << 8) + (uint8[uint8.length - 1])\n\t\t\t\toutput += encode(temp >> 10)\n\t\t\t\toutput += encode((temp >> 4) & 0x3F)\n\t\t\t\toutput += encode((temp << 2) & 0x3F)\n\t\t\t\toutput += '='\n\t\t\t\tbreak\n\t\t}\n\n\t\treturn output\n\t}\n\n\texports.toByteArray = b64ToByteArray\n\texports.fromByteArray = uint8ToBase64\n}(typeof exports === 'undefined' ? (this.base64js = {}) : exports))\n","exports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = nBytes * 8 - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = nBytes * 8 - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = (value * c - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n","\n/**\n * isArray\n */\n\nvar isArray = Array.isArray;\n\n/**\n * toString\n */\n\nvar str = Object.prototype.toString;\n\n/**\n * Whether or not the given `val`\n * is an array.\n *\n * example:\n *\n *        isArray([]);\n *        // > true\n *        isArray(arguments);\n *        // > false\n *        isArray('');\n *        // > false\n *\n * @param {mixed} val\n * @return {bool}\n */\n\nmodule.exports = isArray || function (val) {\n  return !! val && '[object Array]' == str.call(val);\n};\n","(function(window) {\n\tvar HAS_HASHCHANGE = (function() {\n\t\tvar doc_mode = window.documentMode;\n\t\treturn ('onhashchange' in window) &&\n\t\t\t(doc_mode === undefined || doc_mode > 7);\n\t})();\n\n\tL.Hash = function(map) {\n\t\tthis.onHashChange = L.Util.bind(this.onHashChange, this);\n\n\t\tif (map) {\n\t\t\tthis.init(map);\n\t\t}\n\t};\n\n\tL.Hash.parseHash = function(hash) {\n\t\tif(hash.indexOf('#') === 0) {\n\t\t\thash = hash.substr(1);\n\t\t}\n\t\tvar args = hash.split(\"/\");\n\t\tif (args.length == 3) {\n\t\t\tvar zoom = parseInt(args[0], 10),\n\t\t\tlat = parseFloat(args[1]),\n\t\t\tlon = parseFloat(args[2]);\n\t\t\tif (isNaN(zoom) || isNaN(lat) || isNaN(lon)) {\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\t\t\treturn {\n\t\t\t\t\tcenter: new L.LatLng(lat, lon),\n\t\t\t\t\tzoom: zoom\n\t\t\t\t};\n\t\t\t}\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t};\n\n\tL.Hash.formatHash = function(map) {\n\t\tvar center = map.getCenter(),\n\t\t    zoom = map.getZoom(),\n\t\t    precision = Math.max(0, Math.ceil(Math.log(zoom) / Math.LN2));\n\n\t\treturn \"#\" + [zoom,\n\t\t\tcenter.lat.toFixed(precision),\n\t\t\tcenter.lng.toFixed(precision)\n\t\t].join(\"/\");\n\t},\n\n\tL.Hash.prototype = {\n\t\tmap: null,\n\t\tlastHash: null,\n\n\t\tparseHash: L.Hash.parseHash,\n\t\tformatHash: L.Hash.formatHash,\n\n\t\tinit: function(map) {\n\t\t\tthis.map = map;\n\n\t\t\t// reset the hash\n\t\t\tthis.lastHash = null;\n\t\t\tthis.onHashChange();\n\n\t\t\tif (!this.isListening) {\n\t\t\t\tthis.startListening();\n\t\t\t}\n\t\t},\n\n\t\tremoveFrom: function(map) {\n\t\t\tif (this.changeTimeout) {\n\t\t\t\tclearTimeout(this.changeTimeout);\n\t\t\t}\n\n\t\t\tif (this.isListening) {\n\t\t\t\tthis.stopListening();\n\t\t\t}\n\n\t\t\tthis.map = null;\n\t\t},\n\n\t\tonMapMove: function() {\n\t\t\t// bail if we're moving the map (updating from a hash),\n\t\t\t// or if the map is not yet loaded\n\n\t\t\tif (this.movingMap || !this.map._loaded) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tvar hash = this.formatHash(this.map);\n\t\t\tif (this.lastHash != hash) {\n\t\t\t\tlocation.replace(hash);\n\t\t\t\tthis.lastHash = hash;\n\t\t\t}\n\t\t},\n\n\t\tmovingMap: false,\n\t\tupdate: function() {\n\t\t\tvar hash = location.hash;\n\t\t\tif (hash === this.lastHash) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar parsed = this.parseHash(hash);\n\t\t\tif (parsed) {\n\t\t\t\tthis.movingMap = true;\n\n\t\t\t\tthis.map.setView(parsed.center, parsed.zoom);\n\n\t\t\t\tthis.movingMap = false;\n\t\t\t} else {\n\t\t\t\tthis.onMapMove(this.map);\n\t\t\t}\n\t\t},\n\n\t\t// defer hash change updates every 100ms\n\t\tchangeDefer: 100,\n\t\tchangeTimeout: null,\n\t\tonHashChange: function() {\n\t\t\t// throttle calls to update() so that they only happen every\n\t\t\t// `changeDefer` ms\n\t\t\tif (!this.changeTimeout) {\n\t\t\t\tvar that = this;\n\t\t\t\tthis.changeTimeout = setTimeout(function() {\n\t\t\t\t\tthat.update();\n\t\t\t\t\tthat.changeTimeout = null;\n\t\t\t\t}, this.changeDefer);\n\t\t\t}\n\t\t},\n\n\t\tisListening: false,\n\t\thashChangeInterval: null,\n\t\tstartListening: function() {\n\t\t\tthis.map.on(\"moveend\", this.onMapMove, this);\n\n\t\t\tif (HAS_HASHCHANGE) {\n\t\t\t\tL.DomEvent.addListener(window, \"hashchange\", this.onHashChange);\n\t\t\t} else {\n\t\t\t\tclearInterval(this.hashChangeInterval);\n\t\t\t\tthis.hashChangeInterval = setInterval(this.onHashChange, 50);\n\t\t\t}\n\t\t\tthis.isListening = true;\n\t\t},\n\n\t\tstopListening: function() {\n\t\t\tthis.map.off(\"moveend\", this.onMapMove, this);\n\n\t\t\tif (HAS_HASHCHANGE) {\n\t\t\t\tL.DomEvent.removeListener(window, \"hashchange\", this.onHashChange);\n\t\t\t} else {\n\t\t\t\tclearInterval(this.hashChangeInterval);\n\t\t\t}\n\t\t\tthis.isListening = false;\n\t\t}\n\t};\n\tL.hash = function(map) {\n\t\treturn new L.Hash(map);\n\t};\n\tL.Map.prototype.addHash = function() {\n\t\tthis._hash = L.hash(this);\n\t};\n\tL.Map.prototype.removeHash = function() {\n\t\tthis._hash.removeFrom();\n\t};\n})(window);\n","var sphereKnn = require('sphere-knn');\n\nmodule.exports = function(layer) {\n    'use strict';\n\n    if (!(layer instanceof L.GeoJSON)) throw new Error('must be L.GeoJSON');\n\n    var points = [];\n\n    layer.eachLayer(collectPoints);\n\n    function collectPoints(l) {\n        points = points.concat(reformat(flat(l.feature.geometry.coordinates), l));\n    }\n\n    var sknn = sphereKnn(points);\n\n    sknn.nearest = function(p, n, max_distance) {\n        if (p instanceof L.LatLng) p = [p.lng, p.lat];\n        return sknn(p[1], p[0], n, max_distance);\n    };\n\n    sknn.nearestLayer = function(p, n, max_distance) {\n        if (p instanceof L.LatLng) p = [p.lng, p.lat];\n        return collapse(sknn(p[1], p[0], n, max_distance));\n    };\n\n    return sknn;\n};\n\nfunction collapse(results) {\n    var l = [], included = {};\n    for (var i = 0; i < results.length; i++) {\n        if (included[L.stamp(results[i].layer)] == undefined) {\n            l.push(results[i]);\n            included[L.stamp(results[i].layer)] = true;\n        }\n    }\n    return l;\n}\n\nfunction reformat(coords, layer) {\n    var l = [];\n    for (var i = 0; i < coords.length; i++) {\n        l.push({ lon: coords[i][0], lat: coords[i][1], layer: layer });\n    }\n    return l;\n}\n\nfunction flat(coords) {\n    var i = 0, j = 0, k = 0, l = [];\n    if (typeof coords[0] === 'object' &&\n        typeof coords[0][0] === 'object' &&\n        typeof coords[0][0][0] === 'object') {\n        for (;i < coords.length; i++) {\n            for (;j < coords[i].length; j++) {\n                for (;k < coords[i][j].length; k++) l.push(coords[i][j][k]);\n            }\n        }\n        return l;\n    } else if (typeof coords[0] === 'object' &&\n        typeof coords[0][0] === 'object') {\n        for (;i < coords.length; i++) {\n            for (;j < coords[i].length; j++) l.push(coords[i][j]);\n        }\n        return l;\n    } else if (typeof coords[0] === 'object') {\n        return coords;\n    } else {\n        return [coords];\n    }\n}\n","var spherekd = require(\"./lib/spherekd\")\n\nmodule.exports = function(points) {\n  /* Inflate the toad! */\n  var root = spherekd.build(points)\n\n  /* Lurch off into the sunset! */\n  return function(lat, lon, n, max) {\n    return spherekd.lookup(lat, lon, root, n, max)\n  }\n}\n","function defaultComparator(a, b) {\n  return a - b\n}\n\nexports.search = function(item, array, comparator) {\n  if(!comparator)\n    comparator = defaultComparator\n\n  var low  = 0,\n      high = array.length - 1,\n      mid, comp\n\n  while(low <= high) {\n    mid  = (low + high) >>> 1\n    comp = comparator(array[mid], item)\n\n    if(comp < 0)\n      low = mid + 1\n\n    else if(comp > 0)\n      high = mid - 1\n\n    else\n      return mid\n  }\n\n  return -(low + 1)\n}\n\nexports.insert = function(item, array, comparator) {\n  var i = exports.search(item, array, comparator)\n\n  if(i < 0)\n    i = -(i + 1)\n\n  array.splice(i, 0, item)\n}\n","var binary = require(\"./binary\")\n\nfunction Node(axis, split, left, right) {\n  this.axis  = axis\n  this.split = split\n  this.left  = left\n  this.right = right\n}\n\nfunction distance(a, b) {\n  var i = Math.min(a.length, b.length),\n      d = 0,\n      k\n\n  while(i--) {\n    k  = b[i] - a[i]\n    d += k * k\n  }\n\n  return d\n}\n\nfunction byDistance(a, b) {\n  return a.dist - b.dist\n}\n\nfunction buildrec(array, depth) {\n  /* This should only happen if you request a kd-tree with zero elements. */\n  if(array.length === 0)\n    return null\n\n  /* If there's only one item, then it's a leaf node! */\n  if(array.length === 1)\n    return array[0]\n\n  /* Uh oh. Well, we have to partition the data set and recurse. Start by\n   * finding the bounding box of the given points; whichever side is the\n   * longest is the one we'll use for the splitting plane. */\n  var axis = depth % array[0].position.length\n\n  /* Sort the points along the splitting plane. */\n  /* FIXME: For very large trees, it would be faster to use some sort of median\n   * finding and partitioning algorithm. It'd also be a lot more complicated. */\n  array.sort(function(a, b) {\n    return a.position[axis] - b.position[axis]\n  })\n\n  /* Find the median point. It's position is going to be the location of the\n   * splitting plane. */\n  var i = Math.floor(array.length * 0.5)\n\n  /* Split, recurse, yadda yadda. */\n  ++depth\n\n  return new Node(\n    axis,\n    array[i].position[axis],\n    buildrec(array.slice(0, i), depth),\n    buildrec(array.slice(i   ), depth)\n  )\n}\n\nfunction build(array) {\n  return buildrec(array, 0)\n}\n\nfunction lookup(position, node, n, max) {\n  if(!(max > 0))\n    max = Number.POSITIVE_INFINITY\n\n  var array = []\n\n  /* Degenerate cases. */\n  if(node === null || n <= 0)\n    return array\n\n  var stack = [node, 0],\n      dist, i\n\n  while(stack.length) {\n    dist = stack.pop()\n    node = stack.pop()\n\n    /* If this subtree is further away than we care about, then skip it. */\n    if(dist > max)\n      continue\n\n    /* If we've already found enough locations, and the furthest one is closer\n     * than this subtree possibly could be, just skip the subtree. */\n    if(array.length === n && array[array.length - 1].dist < dist * dist)\n      continue\n\n    /* Iterate all the way down the tree, adding nodes that we need to remember\n     * to visit later onto the stack. */\n    while(node instanceof Node) {\n      if(position[node.axis] < node.split) {\n        stack.push(node.right, node.split - position[node.axis])\n        node = node.left\n      }\n\n      else {\n        stack.push(node.left, position[node.axis] - node.split)\n        node = node.right\n      }\n    }\n\n    /* Once we've hit a leaf node, insert it into the array of candidates,\n     * making sure to keep the array in sorted order. */\n    dist = distance(position, node.position)\n    if(dist <= max * max)\n      binary.insert({object: node, dist: dist}, array, byDistance)\n\n    /* If the array's too long, cull it. */\n    if(array.length > n)\n      array.pop()\n  }\n\n  /* Strip candidate wrapper objects. */\n  i = array.length\n\n  while(i--)\n    array[i] = array[i].object\n\n  return array\n}\n\nexports.build  = build\nexports.lookup = lookup\n","var kd               = require(\"./kd\"),\n    rad              = Math.PI / 180,\n    invEarthDiameter = 1 / 12742018 /* meters */\n\nfunction spherical2cartesian(lat, lon) {\n  lat *= rad\n  lon *= rad\n  var cos = Math.cos(lat)\n  return [cos * Math.cos(lon), Math.sin(lat), cos * Math.sin(lon)]\n}\n\nfunction Position(object) {\n  var lat, lon;\n\n  /* Find latitude. */\n  if(object.hasOwnProperty(\"lat\"))\n    lat = object.lat;\n\n  else if(object.hasOwnProperty(\"latitude\"))\n    lat = object.latitude;\n\n  else if(object.hasOwnProperty(\"location\") &&\n          Array.isArray(object.location) &&\n          object.location.length === 2)\n    lat = object.location[0];\n\n  /* Find longitude. */\n  if(object.hasOwnProperty(\"lon\"))\n    lon = object.lon;\n\n  else if(object.hasOwnProperty(\"longitude\"))\n    lon = object.longitude;\n\n  else if(object.hasOwnProperty(\"lng\"))\n    lon = object.lng;\n\n  else if(object.hasOwnProperty(\"long\"))\n    lon = object.long;\n\n  else if(object.hasOwnProperty(\"location\") &&\n          Array.isArray(object.location) &&\n          object.location.length === 2)\n    lon = object.location[1];\n\n  /* Finally, set this object's properties. */\n  this.object = object;\n  this.position = spherical2cartesian(lat, lon);\n}\n\nfunction build(array) {\n  var i   = array.length,\n      out = new Array(i)\n\n  while(i--)\n    out[i] = new Position(array[i])\n\n  return kd.build(out)\n}\n\nfunction lookup(lat, lon, node, n, max) {\n  var array = kd.lookup(\n        spherical2cartesian(lat, lon),\n        node,\n        n,\n        max > 0 ? 2 * Math.sin(max * invEarthDiameter) : undefined\n      ),\n      i     = array.length\n\n  /* Strip off position wrapper objects. */\n  while(i--)\n    array[i] = array[i].object\n\n  return array\n}\n\nexports.build  = build\nexports.lookup = lookup\n","/**\n * Copyright (c) 2011-2014 Felix Gnass\n * Licensed under the MIT license\n * http://spin.js.org/\n *\n * Example:\n    var opts = {\n      lines: 12             // The number of lines to draw\n    , length: 7             // The length of each line\n    , width: 5              // The line thickness\n    , radius: 10            // The radius of the inner circle\n    , scale: 1.0            // Scales overall size of the spinner\n    , corners: 1            // Roundness (0..1)\n    , color: '#000'         // #rgb or #rrggbb\n    , opacity: 1/4          // Opacity of the lines\n    , rotate: 0             // Rotation offset\n    , direction: 1          // 1: clockwise, -1: counterclockwise\n    , speed: 1              // Rounds per second\n    , trail: 100            // Afterglow percentage\n    , fps: 20               // Frames per second when using setTimeout()\n    , zIndex: 2e9           // Use a high z-index by default\n    , className: 'spinner'  // CSS class to assign to the element\n    , top: '50%'            // center vertically\n    , left: '50%'           // center horizontally\n    , shadow: false         // Whether to render a shadow\n    , hwaccel: false        // Whether to use hardware acceleration (might be buggy)\n    , position: 'absolute'  // Element positioning\n    }\n    var target = document.getElementById('foo')\n    var spinner = new Spinner(opts).spin(target)\n */\n;(function (root, factory) {\n\n  /* CommonJS */\n  if (typeof module == 'object' && module.exports) module.exports = factory()\n\n  /* AMD module */\n  else if (typeof define == 'function' && define.amd) define(factory)\n\n  /* Browser global */\n  else root.Spinner = factory()\n}(this, function () {\n  \"use strict\"\n\n  var prefixes = ['webkit', 'Moz', 'ms', 'O'] /* Vendor prefixes */\n    , animations = {} /* Animation rules keyed by their name */\n    , useCssAnimations /* Whether to use CSS animations or setTimeout */\n    , sheet /* A stylesheet to hold the @keyframe or VML rules. */\n\n  /**\n   * Utility function to create elements. If no tag name is given,\n   * a DIV is created. Optionally properties can be passed.\n   */\n  function createEl (tag, prop) {\n    var el = document.createElement(tag || 'div')\n      , n\n\n    for (n in prop) el[n] = prop[n]\n    return el\n  }\n\n  /**\n   * Appends children and returns the parent.\n   */\n  function ins (parent /* child1, child2, ...*/) {\n    for (var i = 1, n = arguments.length; i < n; i++) {\n      parent.appendChild(arguments[i])\n    }\n\n    return parent\n  }\n\n  /**\n   * Creates an opacity keyframe animation rule and returns its name.\n   * Since most mobile Webkits have timing issues with animation-delay,\n   * we create separate rules for each line/segment.\n   */\n  function addAnimation (alpha, trail, i, lines) {\n    var name = ['opacity', trail, ~~(alpha * 100), i, lines].join('-')\n      , start = 0.01 + i/lines * 100\n      , z = Math.max(1 - (1-alpha) / trail * (100-start), alpha)\n      , prefix = useCssAnimations.substring(0, useCssAnimations.indexOf('Animation')).toLowerCase()\n      , pre = prefix && '-' + prefix + '-' || ''\n\n    if (!animations[name]) {\n      sheet.insertRule(\n        '@' + pre + 'keyframes ' + name + '{' +\n        '0%{opacity:' + z + '}' +\n        start + '%{opacity:' + alpha + '}' +\n        (start+0.01) + '%{opacity:1}' +\n        (start+trail) % 100 + '%{opacity:' + alpha + '}' +\n        '100%{opacity:' + z + '}' +\n        '}', sheet.cssRules.length)\n\n      animations[name] = 1\n    }\n\n    return name\n  }\n\n  /**\n   * Tries various vendor prefixes and returns the first supported property.\n   */\n  function vendor (el, prop) {\n    var s = el.style\n      , pp\n      , i\n\n    prop = prop.charAt(0).toUpperCase() + prop.slice(1)\n    if (s[prop] !== undefined) return prop\n    for (i = 0; i < prefixes.length; i++) {\n      pp = prefixes[i]+prop\n      if (s[pp] !== undefined) return pp\n    }\n  }\n\n  /**\n   * Sets multiple style properties at once.\n   */\n  function css (el, prop) {\n    for (var n in prop) {\n      el.style[vendor(el, n) || n] = prop[n]\n    }\n\n    return el\n  }\n\n  /**\n   * Fills in default values.\n   */\n  function merge (obj) {\n    for (var i = 1; i < arguments.length; i++) {\n      var def = arguments[i]\n      for (var n in def) {\n        if (obj[n] === undefined) obj[n] = def[n]\n      }\n    }\n    return obj\n  }\n\n  /**\n   * Returns the line color from the given string or array.\n   */\n  function getColor (color, idx) {\n    return typeof color == 'string' ? color : color[idx % color.length]\n  }\n\n  // Built-in defaults\n\n  var defaults = {\n    lines: 12             // The number of lines to draw\n  , length: 7             // The length of each line\n  , width: 5              // The line thickness\n  , radius: 10            // The radius of the inner circle\n  , scale: 1.0            // Scales overall size of the spinner\n  , corners: 1            // Roundness (0..1)\n  , color: '#000'         // #rgb or #rrggbb\n  , opacity: 1/4          // Opacity of the lines\n  , rotate: 0             // Rotation offset\n  , direction: 1          // 1: clockwise, -1: counterclockwise\n  , speed: 1              // Rounds per second\n  , trail: 100            // Afterglow percentage\n  , fps: 20               // Frames per second when using setTimeout()\n  , zIndex: 2e9           // Use a high z-index by default\n  , className: 'spinner'  // CSS class to assign to the element\n  , top: '50%'            // center vertically\n  , left: '50%'           // center horizontally\n  , shadow: false         // Whether to render a shadow\n  , hwaccel: false        // Whether to use hardware acceleration (might be buggy)\n  , position: 'absolute'  // Element positioning\n  }\n\n  /** The constructor */\n  function Spinner (o) {\n    this.opts = merge(o || {}, Spinner.defaults, defaults)\n  }\n\n  // Global defaults that override the built-ins:\n  Spinner.defaults = {}\n\n  merge(Spinner.prototype, {\n    /**\n     * Adds the spinner to the given target element. If this instance is already\n     * spinning, it is automatically removed from its previous target b calling\n     * stop() internally.\n     */\n    spin: function (target) {\n      this.stop()\n\n      var self = this\n        , o = self.opts\n        , el = self.el = createEl(null, {className: o.className})\n\n      css(el, {\n        position: o.position\n      , width: 0\n      , zIndex: o.zIndex\n      , left: o.left\n      , top: o.top\n      })\n\n      if (target) {\n        target.insertBefore(el, target.firstChild || null)\n      }\n\n      el.setAttribute('role', 'progressbar')\n      self.lines(el, self.opts)\n\n      if (!useCssAnimations) {\n        // No CSS animation support, use setTimeout() instead\n        var i = 0\n          , start = (o.lines - 1) * (1 - o.direction) / 2\n          , alpha\n          , fps = o.fps\n          , f = fps / o.speed\n          , ostep = (1 - o.opacity) / (f * o.trail / 100)\n          , astep = f / o.lines\n\n        ;(function anim () {\n          i++\n          for (var j = 0; j < o.lines; j++) {\n            alpha = Math.max(1 - (i + (o.lines - j) * astep) % f * ostep, o.opacity)\n\n            self.opacity(el, j * o.direction + start, alpha, o)\n          }\n          self.timeout = self.el && setTimeout(anim, ~~(1000 / fps))\n        })()\n      }\n      return self\n    }\n\n    /**\n     * Stops and removes the Spinner.\n     */\n  , stop: function () {\n      var el = this.el\n      if (el) {\n        clearTimeout(this.timeout)\n        if (el.parentNode) el.parentNode.removeChild(el)\n        this.el = undefined\n      }\n      return this\n    }\n\n    /**\n     * Internal method that draws the individual lines. Will be overwritten\n     * in VML fallback mode below.\n     */\n  , lines: function (el, o) {\n      var i = 0\n        , start = (o.lines - 1) * (1 - o.direction) / 2\n        , seg\n\n      function fill (color, shadow) {\n        return css(createEl(), {\n          position: 'absolute'\n        , width: o.scale * (o.length + o.width) + 'px'\n        , height: o.scale * o.width + 'px'\n        , background: color\n        , boxShadow: shadow\n        , transformOrigin: 'left'\n        , transform: 'rotate(' + ~~(360/o.lines*i + o.rotate) + 'deg) translate(' + o.scale*o.radius + 'px' + ',0)'\n        , borderRadius: (o.corners * o.scale * o.width >> 1) + 'px'\n        })\n      }\n\n      for (; i < o.lines; i++) {\n        seg = css(createEl(), {\n          position: 'absolute'\n        , top: 1 + ~(o.scale * o.width / 2) + 'px'\n        , transform: o.hwaccel ? 'translate3d(0,0,0)' : ''\n        , opacity: o.opacity\n        , animation: useCssAnimations && addAnimation(o.opacity, o.trail, start + i * o.direction, o.lines) + ' ' + 1 / o.speed + 's linear infinite'\n        })\n\n        if (o.shadow) ins(seg, css(fill('#000', '0 0 4px #000'), {top: '2px'}))\n        ins(el, ins(seg, fill(getColor(o.color, i), '0 0 1px rgba(0,0,0,.1)')))\n      }\n      return el\n    }\n\n    /**\n     * Internal method that adjusts the opacity of a single line.\n     * Will be overwritten in VML fallback mode below.\n     */\n  , opacity: function (el, i, val) {\n      if (i < el.childNodes.length) el.childNodes[i].style.opacity = val\n    }\n\n  })\n\n\n  function initVML () {\n\n    /* Utility function to create a VML tag */\n    function vml (tag, attr) {\n      return createEl('<' + tag + ' xmlns=\"urn:schemas-microsoft.com:vml\" class=\"spin-vml\">', attr)\n    }\n\n    // No CSS transforms but VML support, add a CSS rule for VML elements:\n    sheet.addRule('.spin-vml', 'behavior:url(#default#VML)')\n\n    Spinner.prototype.lines = function (el, o) {\n      var r = o.scale * (o.length + o.width)\n        , s = o.scale * 2 * r\n\n      function grp () {\n        return css(\n          vml('group', {\n            coordsize: s + ' ' + s\n          , coordorigin: -r + ' ' + -r\n          })\n        , { width: s, height: s }\n        )\n      }\n\n      var margin = -(o.width + o.length) * o.scale * 2 + 'px'\n        , g = css(grp(), {position: 'absolute', top: margin, left: margin})\n        , i\n\n      function seg (i, dx, filter) {\n        ins(\n          g\n        , ins(\n            css(grp(), {rotation: 360 / o.lines * i + 'deg', left: ~~dx})\n          , ins(\n              css(\n                vml('roundrect', {arcsize: o.corners})\n              , { width: r\n                , height: o.scale * o.width\n                , left: o.scale * o.radius\n                , top: -o.scale * o.width >> 1\n                , filter: filter\n                }\n              )\n            , vml('fill', {color: getColor(o.color, i), opacity: o.opacity})\n            , vml('stroke', {opacity: 0}) // transparent stroke to fix color bleeding upon opacity change\n            )\n          )\n        )\n      }\n\n      if (o.shadow)\n        for (i = 1; i <= o.lines; i++) {\n          seg(i, -2, 'progid:DXImageTransform.Microsoft.Blur(pixelradius=2,makeshadow=1,shadowopacity=.3)')\n        }\n\n      for (i = 1; i <= o.lines; i++) seg(i)\n      return ins(el, g)\n    }\n\n    Spinner.prototype.opacity = function (el, i, val, o) {\n      var c = el.firstChild\n      o = o.shadow && o.lines || 0\n      if (c && i + o < c.childNodes.length) {\n        c = c.childNodes[i + o]; c = c && c.firstChild; c = c && c.firstChild\n        if (c) c.opacity = val\n      }\n    }\n  }\n\n  if (typeof document !== 'undefined') {\n    sheet = (function () {\n      var el = createEl('style', {type : 'text/css'})\n      ins(document.getElementsByTagName('head')[0], el)\n      return el.sheet || el.styleSheet\n    }())\n\n    var probe = css(createEl('group'), {behavior: 'url(#default#VML)'})\n\n    if (!vendor(probe, 'transform') && probe.adj) initVML()\n    else useCssAnimations = vendor(probe, 'animation')\n  }\n\n  return Spinner\n\n}));\n","/**\n * Turf is a modular GIS engine written in JavaScript. It performs geospatial\n * processing tasks with GeoJSON data and can be run on a server or in a browser.\n *\n * @module turf\n * @summary GIS For Web Maps\n */\nmodule.exports = {\n  isolines: require('turf-isolines'),\n  merge: require('turf-merge'),\n  convex: require('turf-convex'),\n  within: require('turf-within'),\n  concave: require('turf-concave'),\n  count: require('turf-count'),\n  erase: require('turf-erase'),\n  variance: require('turf-variance'),\n  deviation: require('turf-deviation'),\n  median: require('turf-median'),\n  min: require('turf-min'),\n  max: require('turf-max'),\n  aggregate: require('turf-aggregate'),\n  flip: require('turf-flip'),\n  simplify: require('turf-simplify'),\n  sum: require('turf-sum'),\n  average: require('turf-average'),\n  bezier: require('turf-bezier'),\n  tag: require('turf-tag'),\n  size: require('turf-size'),\n  sample: require('turf-sample'),\n  jenks: require('turf-jenks'),\n  quantile: require('turf-quantile'),\n  envelope: require('turf-envelope'),\n  square: require('turf-square'),\n  midpoint: require('turf-midpoint'),\n  buffer: require('turf-buffer'),\n  center: require('turf-center'),\n  centroid: require('turf-centroid'),\n  combine: require('turf-combine'),\n  distance: require('turf-distance'),\n  explode: require('turf-explode'),\n  extent: require('turf-extent'),\n  bboxPolygon: require('turf-bbox-polygon'),\n  featurecollection: require('turf-featurecollection'),\n  filter: require('turf-filter'),\n  inside: require('turf-inside'),\n  intersect: require('turf-intersect'),\n  linestring: require('turf-linestring'),\n  nearest: require('turf-nearest'),\n  planepoint: require('turf-planepoint'),\n  point: require('turf-point'),\n  polygon: require('turf-polygon'),\n  random: require('turf-random'),\n  reclass: require('turf-reclass'),\n  remove: require('turf-remove'),\n  tin: require('turf-tin'),\n  union: require('turf-union'),\n  bearing: require('turf-bearing'),\n  destination: require('turf-destination'),\n  kinks: require('turf-kinks'),\n  pointOnSurface: require('turf-point-on-surface'),\n  area: require('turf-area'),\n  along: require('turf-along'),\n  lineDistance: require('turf-line-distance'),\n  lineSlice: require('turf-line-slice'),\n  pointOnLine: require('turf-point-on-line'),\n  pointGrid: require('turf-point-grid'),\n  squareGrid: require('turf-square-grid'),\n  triangleGrid: require('turf-triangle-grid'),\n  hexGrid: require('turf-hex-grid')\n};\n","var average = require('turf-average');\nvar sum = require('turf-sum');\nvar median = require('turf-median');\nvar min = require('turf-min');\nvar max = require('turf-max');\nvar deviation = require('turf-deviation');\nvar variance = require('turf-variance');\nvar count = require('turf-count');\nvar operations = {};\noperations.average = average;\noperations.sum = sum;\noperations.median = median;\noperations.min = min;\noperations.max = max;\noperations.deviation = deviation;\noperations.variance = variance;\noperations.count = count;\n\n/**\n* Calculates a series of aggregations for a set of {@link Point} features within a set of {@link Polygon} features. Sum, average, count, min, max, and deviation are supported.\n*\n* @module turf/aggregate\n* @category aggregation\n* @param {FeatureCollection} polygons a FeatureCollection of {@link Polygon} features\n* @param {FeatureCollection} points a FeatureCollection of {@link Point} features\n* @param {Array} aggregations an array of aggregation objects\n* @return {FeatureCollection} a FeatureCollection of {@link Polygon} features with properties listed as `outField` values in `aggregations`\n* @example\n* var polygons = {\n*   \"type\": \"FeatureCollection\",\n*   \"features\": [\n*     {\n*       \"type\": \"Feature\",\n*       \"properties\": {},\n*       \"geometry\": {\n*         \"type\": \"Polygon\",\n*         \"coordinates\": [[\n*           [1.669921, 48.632908],\n*           [1.669921, 49.382372],\n*           [3.636474, 49.382372],\n*           [3.636474, 48.632908],\n*           [1.669921, 48.632908]\n*         ]]\n*       }\n*     }, {\n*       \"type\": \"Feature\",\n*       \"properties\": {},\n*       \"geometry\": {\n*         \"type\": \"Polygon\",\n*         \"coordinates\": [[\n*           [2.230224, 47.85003],\n*           [2.230224, 48.611121],\n*           [4.361572, 48.611121],\n*           [4.361572, 47.85003],\n*           [2.230224, 47.85003]\n*         ]]\n*       }\n*     }\n*   ]\n* };\n* var points = {\n*   \"type\": \"FeatureCollection\",\n*   \"features\": [\n*     {\n*       \"type\": \"Feature\",\n*       \"properties\": {\n*         \"population\": 200\n*       },\n*       \"geometry\": {\n*         \"type\": \"Point\",\n*         \"coordinates\": [2.054443,49.138596]\n*       }\n*     },\n*     {\n*       \"type\": \"Feature\",\n*       \"properties\": {\n*         \"population\": 600\n*       },\n*       \"geometry\": {\n*         \"type\": \"Point\",\n*         \"coordinates\": [3.065185,48.850258]\n*       }\n*     },\n*     {\n*       \"type\": \"Feature\",\n*       \"properties\": {\n*         \"population\": 100\n*       },\n*       \"geometry\": {\n*         \"type\": \"Point\",\n*         \"coordinates\": [2.329101,48.79239]\n*       }\n*     },\n*     {\n*       \"type\": \"Feature\",\n*       \"properties\": {\n*         \"population\": 200\n*       },\n*       \"geometry\": {\n*         \"type\": \"Point\",\n*         \"coordinates\": [2.614746,48.334343]\n*       }\n*     },\n*     {\n*       \"type\": \"Feature\",\n*       \"properties\": {\n*         \"population\": 300\n*       },\n*       \"geometry\": {\n*         \"type\": \"Point\",\n*         \"coordinates\": [3.416748,48.056053]\n*       }\n*     }\n*   ]\n* };\n* var aggregations = [\n*   {\n*     aggregation: 'sum',\n*     inField: 'population',\n*     outField: 'pop_sum'\n*   },\n*   {\n*     aggregation: 'average',\n*     inField: 'population',\n*     outField: 'pop_avg'\n*   },\n*   {\n*     aggregation: 'median',\n*     inField: 'population',\n*     outField: 'pop_median'\n*   },\n*   {\n*     aggregation: 'min',\n*     inField: 'population',\n*     outField: 'pop_min'\n*   },\n*   {\n*     aggregation: 'max',\n*     inField: 'population',\n*     outField: 'pop_max'\n*   },\n*   {\n*     aggregation: 'deviation',\n*     inField: 'population',\n*     outField: 'pop_deviation'\n*   },\n*   {\n*     aggregation: 'variance',\n*     inField: 'population',\n*     outField: 'pop_variance'\n*   },\n*   {\n*     aggregation: 'count',\n*     inField: '',\n*     outField: 'point_count'\n*   }\n* ];\n*\n* var aggregated = turf.aggregate(\n*   polygons, points, aggregations);\n*\n* var result = turf.featurecollection(\n*   points.features.concat(aggregated.features));\n*\n* //=result\n*/\n\nmodule.exports = function(polygons, points, aggregations){\n  for (var i = 0, len = aggregations.length; i < len; i++) {\n    var agg = aggregations[i],\n      operation = agg.aggregation,\n      unrecognizedError;\n\n    if (isAggregationOperation(operation)) {\n      if (operation === 'count') {\n        polygons = operations[operation](polygons, points, agg.outField);\n      } else {\n        polygons = operations[operation](polygons, points, agg.inField, agg.outField);\n      }\n    } else {\n      throw new Error('\"'+ operation +'\" is not a recognized aggregation operation.');\n    }\n  }\n\n  return polygons;\n};\n\nfunction isAggregationOperation(operation) {\n  return operation === 'average' ||\n    operation === 'sum' ||\n    operation === 'median' ||\n    operation === 'min' ||\n    operation === 'max' ||\n    operation === 'deviation' ||\n    operation === 'variance' ||\n    operation === 'count';\n}\n","var distance = require('turf-distance');\nvar point = require('turf-point');\nvar bearing = require('turf-bearing');\nvar destination = require('turf-destination');\n\n/**\n * Takes a {@link LineString} feature and returns a {@link Point} feature at a specified distance along a line.\n *\n * @module turf/along\n * @category measurement\n * @param {LineString} line a LineString feature\n * @param {Number} distance distance along the line\n * @param {String} [units=miles] can be degrees, radians, miles, or kilometers\n * @return {Point} Point along the line at `distance` distance\n * @example\n * var line = {\n *   \"type\": \"Feature\",\n *   \"properties\": {},\n *   \"geometry\": {\n *     \"type\": \"LineString\",\n *     \"coordinates\": [\n *       [-77.031669, 38.878605],\n *       [-77.029609, 38.881946],\n *       [-77.020339, 38.884084],\n *       [-77.025661, 38.885821],\n *       [-77.021884, 38.889563],\n *       [-77.019824, 38.892368]\n *     ]\n *   }\n * };\n *\n * var along = turf.along(line, 1, 'miles');\n *\n * var result = {\n *   \"type\": \"FeatureCollection\",\n *   \"features\": [line, along]\n * };\n *\n * //=result\n */\nmodule.exports = function (line, dist, units) {\n  var coords;\n  if(line.type === 'Feature') coords = line.geometry.coordinates;\n  else if(line.type === 'LineString') coords = line.geometry.coordinates;\n  else throw new Error('input must be a LineString Feature or Geometry');\n\n  var travelled = 0;\n  for(var i = 0; i < coords.length; i++) {\n    if (dist >= travelled && i === coords.length - 1) break;\n    else if(travelled >= dist) {\n      var overshot = dist - travelled;\n      if(!overshot) return point(coords[i]);\n      else {\n        var direction = bearing(point(coords[i]), point(coords[i-1])) - 180;\n        var interpolated = destination(point(coords[i]), overshot, direction, units);\n        return interpolated;\n      }\n    }\n    else {\n      travelled += distance(point(coords[i]), point(coords[i+1]), units);\n    }\n  }\n  return point(coords[coords.length - 1]);\n}\n","var geometryArea = require('geojson-area').geometry;\n\n/**\n * Takes a {@link GeoJSON} feature or {@link FeatureCollection} of any type and returns the area of that feature\n * in square meters.\n *\n * @module turf/area\n * @category measurement\n * @param {GeoJSON} input a {@link Feature} or {@link FeatureCollection} of any type\n * @return {Number} area in square meters\n * @example\n * var polygons = {\n *   \"type\": \"FeatureCollection\",\n *   \"features\": [\n *     {\n *       \"type\": \"Feature\",\n *       \"properties\": {},\n *       \"geometry\": {\n *         \"type\": \"Polygon\",\n *         \"coordinates\": [[\n *           [-67.031021, 10.458102],\n *           [-67.031021, 10.53372],\n *           [-66.929397, 10.53372],\n *           [-66.929397, 10.458102],\n *           [-67.031021, 10.458102]\n *         ]]\n *       }\n *     }, {\n *       \"type\": \"Feature\",\n *       \"properties\": {},\n *       \"geometry\": {\n *         \"type\": \"Polygon\",\n *         \"coordinates\": [[\n *           [-66.919784, 10.397325],\n *           [-66.919784, 10.513467],\n *           [-66.805114, 10.513467],\n *           [-66.805114, 10.397325],\n *           [-66.919784, 10.397325]\n *         ]]\n *       }\n *     }\n *   ]\n * };\n *\n * var area = turf.area(polygons);\n *\n * //=area\n */\nmodule.exports = function(_) {\n    if (_.type === 'FeatureCollection') {\n        for (var i = 0, sum = 0; i < _.features.length; i++) {\n            if (_.features[i].geometry) {\n                sum += geometryArea(_.features[i].geometry);\n            }\n        }\n        return sum;\n    } else if (_.type === 'Feature') {\n        return geometryArea(_.geometry);\n    } else {\n        return geometryArea(_);\n    }\n};\n","var wgs84 = require('wgs84');\n\nmodule.exports.geometry = geometry;\nmodule.exports.ring = ringArea;\n\nfunction geometry(_) {\n    var area = 0, i;\n    switch (_.type) {\n        case 'Polygon':\n            return polygonArea(_.coordinates);\n        case 'MultiPolygon':\n            for (i = 0; i < _.coordinates.length; i++) {\n                area += polygonArea(_.coordinates[i]);\n            }\n            return area;\n        case 'Point':\n        case 'MultiPoint':\n        case 'LineString':\n        case 'MultiLineString':\n            return 0;\n        case 'GeometryCollection':\n            for (i = 0; i < _.geometries.length; i++) {\n                area += geometry(_.geometries[i]);\n            }\n            return area;\n    }\n}\n\nfunction polygonArea(coords) {\n    var area = 0;\n    if (coords && coords.length > 0) {\n        area += Math.abs(ringArea(coords[0]));\n        for (var i = 1; i < coords.length; i++) {\n            area -= Math.abs(ringArea(coords[i]));\n        }\n    }\n    return area;\n}\n\n/**\n * Calculate the approximate area of the polygon were it projected onto\n *     the earth.  Note that this area will be positive if ring is oriented\n *     clockwise, otherwise it will be negative.\n *\n * Reference:\n * Robert. G. Chamberlain and William H. Duquette, \"Some Algorithms for\n *     Polygons on a Sphere\", JPL Publication 07-03, Jet Propulsion\n *     Laboratory, Pasadena, CA, June 2007 http://trs-new.jpl.nasa.gov/dspace/handle/2014/40409\n *\n * Returns:\n * {float} The approximate signed geodesic area of the polygon in square\n *     meters.\n */\n\nfunction ringArea(coords) {\n    var area = 0;\n\n    if (coords.length > 2) {\n        var p1, p2;\n        for (var i = 0; i < coords.length - 1; i++) {\n            p1 = coords[i];\n            p2 = coords[i + 1];\n            area += rad(p2[0] - p1[0]) * (2 + Math.sin(rad(p1[1])) + Math.sin(rad(p2[1])));\n        }\n\n        area = area * wgs84.RADIUS * wgs84.RADIUS / 2;\n    }\n\n    return area;\n}\n\nfunction rad(_) {\n    return _ * Math.PI / 180;\n}\n","module.exports.RADIUS = 6378137;\nmodule.exports.FLATTENING = 1/298.257223563;\nmodule.exports.POLAR_RADIUS = 6356752.3142;\n","var inside = require('turf-inside');\n\n/**\n * Calculates the average value of a field for a set of {@link Point} features within a set of {@link Polygon} features.\n *\n * @module turf/average\n * @category aggregation\n * @param {FeatureCollection} polygons a FeatureCollection of {@link Polygon} features\n * @param {FeatureCollection} points a FeatureCollection of {@link Point} features\n * @param {string} field the field in the `points` features from which to pull values to average\n * @param {string} outputField the field in the `polygons` FeatureCollection to put results of the averages\n * @return {FeatureCollection} a FeatureCollection of {@link Polygon} features with the value of `outField` set to the calculated average\n * @example\n* var polygons = {\n *   \"type\": \"FeatureCollection\",\n *   \"features\": [\n *     {\n *       \"type\": \"Feature\",\n *       \"properties\": {},\n *       \"geometry\": {\n *         \"type\": \"Polygon\",\n *         \"coordinates\": [[\n *           [10.666351, 59.890659],\n *           [10.666351, 59.936784],\n *           [10.762481, 59.936784],\n *           [10.762481, 59.890659],\n *           [10.666351, 59.890659]\n *         ]]\n *       }\n *     }, {\n *       \"type\": \"Feature\",\n *       \"properties\": {},\n *       \"geometry\": {\n *         \"type\": \"Polygon\",\n *         \"coordinates\": [[\n *           [10.764541, 59.889281],\n *           [10.764541, 59.937128],\n *           [10.866165, 59.937128],\n *           [10.866165, 59.889281],\n *           [10.764541, 59.889281]\n *         ]]\n *       }\n *     }\n *   ]\n * };\n * var points = {\n *   \"type\": \"FeatureCollection\",\n *   \"features\": [\n *     {\n *       \"type\": \"Feature\",\n *       \"properties\": {\n *         \"population\": 200\n *       },\n *       \"geometry\": {\n *         \"type\": \"Point\",\n *         \"coordinates\": [10.724029, 59.926807]\n *       }\n *     }, {\n *       \"type\": \"Feature\",\n *       \"properties\": {\n *         \"population\": 600\n *       },\n *       \"geometry\": {\n *         \"type\": \"Point\",\n *         \"coordinates\": [10.715789, 59.904778]\n *       }\n *     }, {\n *       \"type\": \"Feature\",\n *       \"properties\": {\n *         \"population\": 100\n *       },\n *       \"geometry\": {\n *         \"type\": \"Point\",\n *         \"coordinates\": [10.746002, 59.908566]\n *       }\n *     }, {\n *       \"type\": \"Feature\",\n *       \"properties\": {\n *         \"population\": 200\n *       },\n *       \"geometry\": {\n *         \"type\": \"Point\",\n *         \"coordinates\": [10.806427, 59.908910]\n *       }\n *     }, {\n *       \"type\": \"Feature\",\n *       \"properties\": {\n *         \"population\": 300\n *       },\n *       \"geometry\": {\n *         \"type\": \"Point\",\n *         \"coordinates\": [10.79544, 59.931624]\n *       }\n *     }\n *   ]\n * };\n *\n * var averaged = turf.average(\n *  polygons, points, 'population', 'pop_avg');\n *\n * var resultFeatures = points.features.concat(\n *   averaged.features);\n * var result = {\n *   \"type\": \"FeatureCollection\",\n *   \"features\": resultFeatures\n * };\n *\n * //=result\n */\nmodule.exports = function(polyFC, ptFC, inField, outField, done){\n  polyFC.features.forEach(function(poly){\n    if(!poly.properties) poly.properties = {};\n    var values = [];\n    ptFC.features.forEach(function(pt){\n      if (inside(pt, poly)) values.push(pt.properties[inField]);\n    });\n    poly.properties[outField] = average(values);\n  });\n\n  return polyFC;\n}\n\nfunction average(values) {\n  var sum = 0;\n  for (var i = 0; i < values.length; i++) {\n    sum += values[i];\n  }\n  return sum / values.length;\n}\n","var polygon = require('turf-polygon');\n\n/**\n * Takes a bbox and returns the equivalent {@link Polygon} feature.\n *\n * @module turf/bbox-polygon\n * @category measurement\n * @param {Array<number>} bbox an Array of bounding box coordinates in the form: ```[xLow, yLow, xHigh, yHigh]```\n * @return {Polygon} a Polygon representation of the bounding box\n * @example\n * var bbox = [0, 0, 10, 10];\n *\n * var poly = turf.bboxPolygon(bbox);\n *\n * //=poly\n */\n\nmodule.exports = function(bbox){\n  var lowLeft = [bbox[0], bbox[1]];\n  var topLeft = [bbox[0], bbox[3]];\n  var topRight = [bbox[2], bbox[3]];\n  var lowRight = [bbox[2], bbox[1]];\n\n  var poly = polygon([[\n    lowLeft,\n    lowRight,\n    topRight,\n    topLeft,\n    lowLeft\n  ]]);\n  return poly;\n}\n","//http://en.wikipedia.org/wiki/Haversine_formula\n//http://www.movable-type.co.uk/scripts/latlong.html\n\n/**\n * Takes two {@link Point} features and finds the bearing between them.\n *\n * @module turf/bearing\n * @category measurement\n * @param {Point} start starting Point\n * @param {Point} end ending Point\n * @category measurement\n * @returns {Number} bearing in decimal degrees\n * @example\n * var point1 = {\n *   \"type\": \"Feature\",\n *   \"properties\": {\n *     \"marker-color\": '#f00'\n *   },\n *   \"geometry\": {\n *     \"type\": \"Point\",\n *     \"coordinates\": [-75.343, 39.984]\n *   }\n * };\n * var point2 = {\n *   \"type\": \"Feature\",\n *   \"properties\": {\n *     \"marker-color\": '#0f0'\n *   },\n *   \"geometry\": {\n *     \"type\": \"Point\",\n *     \"coordinates\": [-75.534, 39.123]\n *   }\n * };\n *\n * var points = {\n *   \"type\": \"FeatureCollection\",\n *   \"features\": [point1, point2]\n * };\n *\n * //=points\n *\n * var bearing = turf.bearing(point1, point2);\n *\n * //=bearing\n */\nmodule.exports = function (point1, point2) {\n    var coordinates1 = point1.geometry.coordinates;\n    var coordinates2 = point2.geometry.coordinates;\n\n    var lon1 = toRad(coordinates1[0]);\n    var lon2 = toRad(coordinates2[0]);\n    var lat1 = toRad(coordinates1[1]);\n    var lat2 = toRad(coordinates2[1]);\n    var a = Math.sin(lon2 - lon1) * Math.cos(lat2);\n    var b = Math.cos(lat1) * Math.sin(lat2) -\n        Math.sin(lat1) * Math.cos(lat2) * Math.cos(lon2 - lon1);\n\n    var bearing = toDeg(Math.atan2(a, b));\n\n    return bearing;\n};\n\nfunction toRad(degree) {\n    return degree * Math.PI / 180;\n}\n\nfunction toDeg(radian) {\n    return radian * 180 / Math.PI;\n}\n","var linestring = require('turf-linestring');\nvar Spline = require('./spline.js');\n\n/**\n * Takes a {@link LineString} feature and returns a curved version of the line\n * by applying a [Bezier spline](http://en.wikipedia.org/wiki/B%C3%A9zier_spline)\n * algorithm.\n *\n * The bezier spline implementation is by [Leszek Rybicki](http://leszek.rybicki.cc/).\n *\n * @module turf/bezier\n * @category transformation\n * @param {LineString} line the input LineString\n * @param {number} [resolution=10000] time in milliseconds between points\n * @param {number} [sharpness=0.85] a measure of how curvy the path should be between splines\n * @returns {LineString} curved line\n * @example\n * var line = {\n *   \"type\": \"Feature\",\n *   \"properties\": {\n *     \"stroke\": \"#f00\"\n *   },\n *   \"geometry\": {\n *     \"type\": \"LineString\",\n *     \"coordinates\": [\n *       [-76.091308, 18.427501],\n *       [-76.695556, 18.729501],\n *       [-76.552734, 19.40443],\n *       [-74.61914, 19.134789],\n *       [-73.652343, 20.07657],\n *       [-73.157958, 20.210656]\n *     ]\n *   }\n * };\n *\n * var curved = turf.bezier(line);\n * curved.properties = { stroke: '#0f0' };\n *\n * var result = {\n *   \"type\": \"FeatureCollection\",\n *   \"features\": [line, curved]\n * };\n *\n * //=result\n */\nmodule.exports = function(line, resolution, sharpness){\n  var lineOut = linestring([]);\n\n  lineOut.properties = line.properties;\n  var pts = line.geometry.coordinates.map(function(pt){\n    return {x: pt[0], y: pt[1]};\n  });\n\n  var spline = new Spline({\n    points: pts,\n    duration: resolution,\n    sharpness: sharpness\n  });\n  for (var i=0; i<spline.duration; i+=10) {\n    var pos = spline.pos(i);\n    if (Math.floor(i/100)%2===0) {\n        lineOut.geometry.coordinates.push([pos.x, pos.y]);\n    }\n  }\n\n  return lineOut;\n};\n"," /**\n   * BezierSpline\n   * http://leszekr.github.com/\n   *\n   * @copyright\n   * Copyright (C) 2012 Leszek Rybicki.\n   *\n   * @license\n   * This file is part of BezierSpline\n   *\n   * BezierSpline is free software: you can redistribute it and/or modify\n   * it under the terms of the GNU Lesser General Public License as published by\n   * the Free Software Foundation, either version 3 of the License, or\n   * (at your option) any later version.\n   *\n   * BezierSpline is distributed in the hope that it will be useful,\n   * but WITHOUT ANY WARRANTY; without even the implied warranty of\n   * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n   * GNU General Public License for more details.\n   *\n   * You should have received a copy of the GNU General Public License\n   * along with BezierSpline.  If not, see <http://www.gnu.org/copyleft/lesser.html>.\n   */\n\n  /*\n  Usage:\n\n    var spline = new Spline({\n      points: array_of_control_points,\n      duration: time_in_miliseconds,\n      sharpness: how_curvy,\n      stepLength: distance_between_points_to_cache\n    });\n\n  */\nvar Spline = function(options){\n    this.points = options.points || [];\n    this.duration = options.duration || 10000;\n    this.sharpness = options.sharpness || 0.85;\n    this.centers = [];\n    this.controls = [];\n    this.stepLength = options.stepLength || 60;\n    this.length = this.points.length;\n    this.delay = 0;\n    // this is to ensure compatibility with the 2d version\n    for(var i=0; i<this.length; i++) this.points[i].z = this.points[i].z || 0;\n    for(var i=0; i<this.length-1; i++){\n      var p1 = this.points[i];\n      var p2 = this.points[i+1];\n      this.centers.push({x:(p1.x+p2.x)/2, y:(p1.y+p2.y)/2, z:(p1.z+p2.z)/2});\n    }\n    this.controls.push([this.points[0],this.points[0]]);\n    for(var i=0; i<this.centers.length-1; i++){\n      var p1 = this.centers[i];\n      var p2 = this.centers[i+1];\n      var dx = this.points[i+1].x-(this.centers[i].x+this.centers[i+1].x)/2;\n      var dy = this.points[i+1].y-(this.centers[i].y+this.centers[i+1].y)/2;\n      var dz = this.points[i+1].z-(this.centers[i].y+this.centers[i+1].z)/2;\n      this.controls.push([{\n        x:(1.0-this.sharpness)*this.points[i+1].x+this.sharpness*(this.centers[i].x+dx),\n        y:(1.0-this.sharpness)*this.points[i+1].y+this.sharpness*(this.centers[i].y+dy),\n        z:(1.0-this.sharpness)*this.points[i+1].z+this.sharpness*(this.centers[i].z+dz)},\n      {\n        x:(1.0-this.sharpness)*this.points[i+1].x+this.sharpness*(this.centers[i+1].x+dx),\n        y:(1.0-this.sharpness)*this.points[i+1].y+this.sharpness*(this.centers[i+1].y+dy),\n        z:(1.0-this.sharpness)*this.points[i+1].z+this.sharpness*(this.centers[i+1].z+dz)}]);\n    }\n    this.controls.push([this.points[this.length-1],this.points[this.length-1]]);\n    this.steps = this.cacheSteps(this.stepLength);\n    return this;\n  };\n\n  /*\n    Caches an array of equidistant (more or less) points on the curve.\n  */\n  Spline.prototype.cacheSteps = function(mindist){\n    var steps = [];\n    var laststep = this.pos(0);\n    steps.push(0);\n    for(var t=0; t<this.duration; t+=10){\n      var step = this.pos(t);\n      var dist = Math.sqrt((step.x-laststep.x)*(step.x-laststep.x)+(step.y-laststep.y)*(step.y-laststep.y)+(step.z-laststep.z)*(step.z-laststep.z));\n      if(dist>mindist){\n        steps.push(t);\n        laststep = step;\n      }\n    }\n    return steps;\n  };\n\n  /*\n    returns angle and speed in the given point in the curve\n  */\n  Spline.prototype.vector = function(t){\n    var p1 = this.pos(t+10);\n    var p2 = this.pos(t-10);\n    return {\n      angle:180*Math.atan2(p1.y-p2.y, p1.x-p2.x)/3.14,\n      speed:Math.sqrt((p2.x-p1.x)*(p2.x-p1.x)+(p2.y-p1.y)*(p2.y-p1.y)+(p2.z-p1.z)*(p2.z-p1.z))\n    };\n  };\n\n  /*\n    Gets the position of the point, given time.\n\n    WARNING: The speed is not constant. The time it takes between control points is constant.\n\n    For constant speed, use Spline.steps[i];\n  */\n  Spline.prototype.pos = function(time){\n\n    function bezier(t, p1, c1, c2, p2){\n      var B = function(t) {\n        var t2=t*t, t3=t2*t;\n        return [(t3),(3*t2*(1-t)),(3*t*(1-t)*(1-t)),((1-t)*(1-t)*(1-t))]\n      }\n      var b = B(t)\n      var pos = {\n        x : p2.x * b[0] + c2.x * b[1] +c1.x * b[2] + p1.x * b[3],\n        y : p2.y * b[0] + c2.y * b[1] +c1.y * b[2] + p1.y * b[3],\n        z : p2.z * b[0] + c2.z * b[1] +c1.z * b[2] + p1.z * b[3]\n      }\n      return pos;\n    }\n    var t = time-this.delay;\n    if(t<0) t=0;\n    if(t>this.duration) t=this.duration-1;\n    //t = t-this.delay;\n    var t2 = (t)/this.duration;\n    if(t2>=1) return this.points[this.length-1];\n\n    var n = Math.floor((this.points.length-1)*t2);\n    var t1 = (this.length-1)*t2-n;\n    return bezier(t1,this.points[n],this.controls[n][1],this.controls[n+1][0],this.points[n+1]);\n  }\n\n  module.exports = Spline;\n","// http://stackoverflow.com/questions/839899/how-do-i-calculate-a-point-on-a-circles-circumference\n// radians = degrees * (pi/180)\n// https://github.com/bjornharrtell/jsts/blob/master/examples/buffer.html\n\nvar featurecollection = require('turf-featurecollection');\nvar polygon = require('turf-polygon');\nvar combine = require('turf-combine');\nvar jsts = require('jsts');\n\n/**\n* Calculates a buffer for a {@link Point}, {@link LineString}, or {@link Polygon} {@link Feature}/{@link FeatureCollection} for a given radius. Units supported are miles, kilometers, and degrees.\n*\n* @module turf/buffer\n* @category transformation\n* @param {FeatureCollection} feature a Feature or FeatureCollection of any type\n* @param {Number} distance distance to draw the buffer\n* @param {String} unit 'miles' or 'kilometers'\n* @return {FeatureCollection} a FeatureCollection containing {@link Polygon} features representing buffers\n*\n* @example\n* var pt = {\n*   \"type\": \"Feature\",\n*   \"properties\": {},\n*   \"geometry\": {\n*     \"type\": \"Point\",\n*     \"coordinates\": [-90.548630, 14.616599]\n*   }\n* };\n* var unit = 'miles';\n*\n* var buffered = turf.buffer(pt, 500, unit);\n*\n* var resultFeatures = buffered.features.concat(pt);\n* var result = {\n*   \"type\": \"FeatureCollection\",\n*   \"features\": resultFeatures\n* };\n*\n* //=result\n*/\n\nmodule.exports = function(feature, radius, units){\n  var buffered;\n\n  switch(units){\n    case 'miles':\n      radius = radius / 69.047;\n      break\n    case 'feet':\n      radius = radius / 364568.0;\n      break\n    case 'kilometers':\n      radius = radius / 111.12;\n      break\n    case 'meters':\n      radius = radius / 111120.0;\n      break\n    case 'degrees':\n      break\n  }\n\n  if(feature.type === 'FeatureCollection'){\n    var multi = combine(feature);\n    multi.properties = {};\n    buffered = bufferOp(multi, radius);\n    return buffered;\n  }\n  else{\n    buffered = bufferOp(feature, radius);\n    return buffered;\n  }\n}\n\nvar bufferOp = function(feature, radius){\n  var reader = new jsts.io.GeoJSONReader();\n  var geom = reader.read(JSON.stringify(feature.geometry));\n  var buffered = geom.buffer(radius);\n  var parser = new jsts.io.GeoJSONParser();\n  buffered = parser.write(buffered);\n\n  if(buffered.type === 'MultiPolygon'){\n    buffered = {\n      type: 'Feature',\n      geometry: buffered,\n      properties: {}\n    };\n    buffered = featurecollection([buffered]);\n  }\n  else{\n    buffered = featurecollection([polygon(buffered.coordinates)]);\n  }\n\n  return buffered;\n}\n","require('javascript.util');\nvar jsts = require('./lib/jsts');\nmodule.exports = jsts\n","/* The JSTS Topology Suite is a collection of JavaScript classes that\nimplement the fundamental operations required to validate a given\ngeo-spatial data set to a known topological specification.\n\nCopyright (C) 2011 The Authors\n\nThis library is free software; you can redistribute it and/or\nmodify it under the terms of the GNU Lesser General Public\nLicense as published by the Free Software Foundation; either\nversion 2.1 of the License, or (at your option) any later version.\n\nThis library is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\nLesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public\nLicense along with this library; if not, write to the Free Software\nFoundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA */\njsts={version:'0.15.0',algorithm:{distance:{},locate:{}},error:{},geom:{util:{}},geomgraph:{index:{}},index:{bintree:{},chain:{},kdtree:{},quadtree:{},strtree:{}},io:{},noding:{snapround:{}},operation:{buffer:{},distance:{},overlay:{snap:{}},polygonize:{},predicate:{},relate:{},union:{},valid:{}},planargraph:{},simplify:{},triangulate:{quadedge:{}},util:{}};if(typeof String.prototype.trim!=='function'){String.prototype.trim=function(){return this.replace(/^\\s+|\\s+$/g,'');};}\njsts.abstractFunc=function(){throw new jsts.error.AbstractMethodInvocationError();};jsts.error={};jsts.error.IllegalArgumentError=function(message){this.name='IllegalArgumentError';this.message=message;};jsts.error.IllegalArgumentError.prototype=new Error();jsts.error.TopologyError=function(message,pt){this.name='TopologyError';this.message=pt?message+' [ '+pt+' ]':message;};jsts.error.TopologyError.prototype=new Error();jsts.error.AbstractMethodInvocationError=function(){this.name='AbstractMethodInvocationError';this.message='Abstract method called, should be implemented in subclass.';};jsts.error.AbstractMethodInvocationError.prototype=new Error();jsts.error.NotImplementedError=function(){this.name='NotImplementedError';this.message='This method has not yet been implemented.';};jsts.error.NotImplementedError.prototype=new Error();jsts.error.NotRepresentableError=function(message){this.name='NotRepresentableError';this.message=message;};jsts.error.NotRepresentableError.prototype=new Error();jsts.error.LocateFailureError=function(message){this.name='LocateFailureError';this.message=message;};jsts.error.LocateFailureError.prototype=new Error();if(typeof module!==\"undefined\")module.exports=jsts;jsts.geom.GeometryFilter=function(){};jsts.geom.GeometryFilter.prototype.filter=function(geom){throw new jsts.error.AbstractMethodInvocationError();};jsts.geom.util.PolygonExtracter=function(comps){this.comps=comps;};jsts.geom.util.PolygonExtracter.prototype=new jsts.geom.GeometryFilter();jsts.geom.util.PolygonExtracter.prototype.comps=null;jsts.geom.util.PolygonExtracter.getPolygons=function(geom,list){if(list===undefined){list=[];}\nif(geom instanceof jsts.geom.Polygon){list.push(geom);}else if(geom instanceof jsts.geom.GeometryCollection){geom.apply(new jsts.geom.util.PolygonExtracter(list));}\nreturn list;};jsts.geom.util.PolygonExtracter.prototype.filter=function(geom){if(geom instanceof jsts.geom.Polygon)\nthis.comps.push(geom);};jsts.io.WKTParser=function(geometryFactory){this.geometryFactory=geometryFactory||new jsts.geom.GeometryFactory();this.regExes={'typeStr':/^\\s*(\\w+)\\s*\\(\\s*(.*)\\s*\\)\\s*$/,'emptyTypeStr':/^\\s*(\\w+)\\s*EMPTY\\s*$/,'spaces':/\\s+/,'parenComma':/\\)\\s*,\\s*\\(/,'doubleParenComma':/\\)\\s*\\)\\s*,\\s*\\(\\s*\\(/,'trimParens':/^\\s*\\(?(.*?)\\)?\\s*$/};};jsts.io.WKTParser.prototype.read=function(wkt){var geometry,type,str;wkt=wkt.replace(/[\\n\\r]/g,' ');var matches=this.regExes.typeStr.exec(wkt);if(wkt.search('EMPTY')!==-1){matches=this.regExes.emptyTypeStr.exec(wkt);matches[2]=undefined;}\nif(matches){type=matches[1].toLowerCase();str=matches[2];if(this.parse[type]){geometry=this.parse[type].apply(this,[str]);}}\nif(geometry===undefined)\nthrow new Error('Could not parse WKT '+wkt);return geometry;};jsts.io.WKTParser.prototype.write=function(geometry){return this.extractGeometry(geometry);};jsts.io.WKTParser.prototype.extractGeometry=function(geometry){var type=geometry.CLASS_NAME.split('.')[2].toLowerCase();if(!this.extract[type]){return null;}\nvar wktType=type.toUpperCase();var data;if(geometry.isEmpty()){data=wktType+' EMPTY';}else{data=wktType+'('+this.extract[type].apply(this,[geometry])+')';}\nreturn data;};jsts.io.WKTParser.prototype.extract={'coordinate':function(coordinate){return coordinate.x+' '+coordinate.y;},'point':function(point){return point.coordinate.x+' '+point.coordinate.y;},'multipoint':function(multipoint){var array=[];for(var i=0,len=multipoint.geometries.length;i<len;++i){array.push('('+\nthis.extract.point.apply(this,[multipoint.geometries[i]])+')');}\nreturn array.join(',');},'linestring':function(linestring){var array=[];for(var i=0,len=linestring.points.length;i<len;++i){array.push(this.extract.coordinate.apply(this,[linestring.points[i]]));}\nreturn array.join(',');},'multilinestring':function(multilinestring){var array=[];for(var i=0,len=multilinestring.geometries.length;i<len;++i){array.push('('+\nthis.extract.linestring.apply(this,[multilinestring.geometries[i]])+')');}\nreturn array.join(',');},'polygon':function(polygon){var array=[];array.push('('+this.extract.linestring.apply(this,[polygon.shell])+')');for(var i=0,len=polygon.holes.length;i<len;++i){array.push('('+this.extract.linestring.apply(this,[polygon.holes[i]])+')');}\nreturn array.join(',');},'multipolygon':function(multipolygon){var array=[];for(var i=0,len=multipolygon.geometries.length;i<len;++i){array.push('('+this.extract.polygon.apply(this,[multipolygon.geometries[i]])+')');}\nreturn array.join(',');},'geometrycollection':function(collection){var array=[];for(var i=0,len=collection.geometries.length;i<len;++i){array.push(this.extractGeometry.apply(this,[collection.geometries[i]]));}\nreturn array.join(',');}};jsts.io.WKTParser.prototype.parse={'point':function(str){if(str===undefined){return this.geometryFactory.createPoint(null);}\nvar coords=str.trim().split(this.regExes.spaces);return this.geometryFactory.createPoint(new jsts.geom.Coordinate(coords[0],coords[1]));},'multipoint':function(str){if(str===undefined){return this.geometryFactory.createMultiPoint(null);}\nvar point;var points=str.trim().split(',');var components=[];for(var i=0,len=points.length;i<len;++i){point=points[i].replace(this.regExes.trimParens,'$1');components.push(this.parse.point.apply(this,[point]));}\nreturn this.geometryFactory.createMultiPoint(components);},'linestring':function(str){if(str===undefined){return this.geometryFactory.createLineString(null);}\nvar points=str.trim().split(',');var components=[];var coords;for(var i=0,len=points.length;i<len;++i){coords=points[i].trim().split(this.regExes.spaces);components.push(new jsts.geom.Coordinate(coords[0],coords[1]));}\nreturn this.geometryFactory.createLineString(components);},'linearring':function(str){if(str===undefined){return this.geometryFactory.createLinearRing(null);}\nvar points=str.trim().split(',');var components=[];var coords;for(var i=0,len=points.length;i<len;++i){coords=points[i].trim().split(this.regExes.spaces);components.push(new jsts.geom.Coordinate(coords[0],coords[1]));}\nreturn this.geometryFactory.createLinearRing(components);},'multilinestring':function(str){if(str===undefined){return this.geometryFactory.createMultiLineString(null);}\nvar line;var lines=str.trim().split(this.regExes.parenComma);var components=[];for(var i=0,len=lines.length;i<len;++i){line=lines[i].replace(this.regExes.trimParens,'$1');components.push(this.parse.linestring.apply(this,[line]));}\nreturn this.geometryFactory.createMultiLineString(components);},'polygon':function(str){if(str===undefined){return this.geometryFactory.createPolygon(null);}\nvar ring,linestring,linearring;var rings=str.trim().split(this.regExes.parenComma);var shell;var holes=[];for(var i=0,len=rings.length;i<len;++i){ring=rings[i].replace(this.regExes.trimParens,'$1');linestring=this.parse.linestring.apply(this,[ring]);linearring=this.geometryFactory.createLinearRing(linestring.points);if(i===0){shell=linearring;}else{holes.push(linearring);}}\nreturn this.geometryFactory.createPolygon(shell,holes);},'multipolygon':function(str){if(str===undefined){return this.geometryFactory.createMultiPolygon(null);}\nvar polygon;var polygons=str.trim().split(this.regExes.doubleParenComma);var components=[];for(var i=0,len=polygons.length;i<len;++i){polygon=polygons[i].replace(this.regExes.trimParens,'$1');components.push(this.parse.polygon.apply(this,[polygon]));}\nreturn this.geometryFactory.createMultiPolygon(components);},'geometrycollection':function(str){if(str===undefined){return this.geometryFactory.createGeometryCollection(null);}\nstr=str.replace(/,\\s*([A-Za-z])/g,'|$1');var wktArray=str.trim().split('|');var components=[];for(var i=0,len=wktArray.length;i<len;++i){components.push(jsts.io.WKTParser.prototype.read.apply(this,[wktArray[i]]));}\nreturn this.geometryFactory.createGeometryCollection(components);}};jsts.index.ItemVisitor=function(){};jsts.index.ItemVisitor.prototype.visitItem=function(){throw new jsts.error.AbstractMethodInvocationError();};jsts.algorithm.CGAlgorithms=function(){};jsts.algorithm.CGAlgorithms.CLOCKWISE=-1;jsts.algorithm.CGAlgorithms.RIGHT=jsts.algorithm.CGAlgorithms.CLOCKWISE;jsts.algorithm.CGAlgorithms.COUNTERCLOCKWISE=1;jsts.algorithm.CGAlgorithms.LEFT=jsts.algorithm.CGAlgorithms.COUNTERCLOCKWISE;jsts.algorithm.CGAlgorithms.COLLINEAR=0;jsts.algorithm.CGAlgorithms.STRAIGHT=jsts.algorithm.CGAlgorithms.COLLINEAR;jsts.algorithm.CGAlgorithms.orientationIndex=function(p1,p2,q){var dx1,dy1,dx2,dy2;dx1=p2.x-p1.x;dy1=p2.y-p1.y;dx2=q.x-p2.x;dy2=q.y-p2.y;return jsts.algorithm.RobustDeterminant.signOfDet2x2(dx1,dy1,dx2,dy2);};jsts.algorithm.CGAlgorithms.isPointInRing=function(p,ring){return jsts.algorithm.CGAlgorithms.locatePointInRing(p,ring)!==jsts.geom.Location.EXTERIOR;};jsts.algorithm.CGAlgorithms.locatePointInRing=function(p,ring){return jsts.algorithm.RayCrossingCounter.locatePointInRing(p,ring);};jsts.algorithm.CGAlgorithms.isOnLine=function(p,pt){var lineIntersector,i,il,p0,p1;lineIntersector=new jsts.algorithm.RobustLineIntersector();for(i=1,il=pt.length;i<il;i++){p0=pt[i-1];p1=pt[i];lineIntersector.computeIntersection(p,p0,p1);if(lineIntersector.hasIntersection()){return true;}}\nreturn false;};jsts.algorithm.CGAlgorithms.isCCW=function(ring){var nPts,hiPt,hiIndex,p,iPrev,iNext,prev,next,i,disc,isCCW;nPts=ring.length-1;if(nPts<3){throw new jsts.IllegalArgumentError('Ring has fewer than 3 points, so orientation cannot be determined');}\nhiPt=ring[0];hiIndex=0;i=1;for(i;i<=nPts;i++){p=ring[i];if(p.y>hiPt.y){hiPt=p;hiIndex=i;}}\niPrev=hiIndex;do{iPrev=iPrev-1;if(iPrev<0){iPrev=nPts;}}while(ring[iPrev].equals2D(hiPt)&&iPrev!==hiIndex);iNext=hiIndex;do{iNext=(iNext+1)%nPts;}while(ring[iNext].equals2D(hiPt)&&iNext!==hiIndex);prev=ring[iPrev];next=ring[iNext];if(prev.equals2D(hiPt)||next.equals2D(hiPt)||prev.equals2D(next)){return false;}\ndisc=jsts.algorithm.CGAlgorithms.computeOrientation(prev,hiPt,next);isCCW=false;if(disc===0){isCCW=(prev.x>next.x);}else{isCCW=(disc>0);}\nreturn isCCW;};jsts.algorithm.CGAlgorithms.computeOrientation=function(p1,p2,q){return jsts.algorithm.CGAlgorithms.orientationIndex(p1,p2,q);};jsts.algorithm.CGAlgorithms.distancePointLine=function(p,A,B){if(!(A instanceof jsts.geom.Coordinate)){jsts.algorithm.CGAlgorithms.distancePointLine2.apply(this,arguments);}\nif(A.x===B.x&&A.y===B.y){return p.distance(A);}\nvar r,s;r=((p.x-A.x)*(B.x-A.x)+(p.y-A.y)*(B.y-A.y))/((B.x-A.x)*(B.x-A.x)+(B.y-A.y)*(B.y-A.y));if(r<=0.0){return p.distance(A);}\nif(r>=1.0){return p.distance(B);}\ns=((A.y-p.y)*(B.x-A.x)-(A.x-p.x)*(B.y-A.y))/((B.x-A.x)*(B.x-A.x)+(B.y-A.y)*(B.y-A.y));return Math.abs(s)*Math.sqrt(((B.x-A.x)*(B.x-A.x)+(B.y-A.y)*(B.y-A.y)));};jsts.algorithm.CGAlgorithms.distancePointLinePerpendicular=function(p,A,B){var s=((A.y-p.y)*(B.x-A.x)-(A.x-p.x)*(B.y-A.y))/((B.x-A.x)*(B.x-A.x)+(B.y-A.y)*(B.y-A.y));return Math.abs(s)*Math.sqrt(((B.x-A.x)*(B.x-A.x)+(B.y-A.y)*(B.y-A.y)));};jsts.algorithm.CGAlgorithms.distancePointLine2=function(p,line){var minDistance,i,il,dist;if(line.length===0){throw new jsts.error.IllegalArgumentError('Line array must contain at least one vertex');}\nminDistance=p.distance(line[0]);for(i=0,il=line.length-1;i<il;i++){dist=jsts.algorithm.CGAlgorithms.distancePointLine(p,line[i],line[i+1]);if(dist<minDistance){minDistance=dist;}}\nreturn minDistance;};jsts.algorithm.CGAlgorithms.distanceLineLine=function(A,B,C,D){if(A.equals(B)){return jsts.algorithm.CGAlgorithms.distancePointLine(A,C,D);}\nif(C.equals(D)){return jsts.algorithm.CGAlgorithms.distancePointLine(D,A,B);}\nvar r_top,r_bot,s_top,s_bot,s,r;r_top=(A.y-C.y)*(D.x-C.x)-(A.x-C.x)*(D.y-C.y);r_bot=(B.x-A.x)*(D.y-C.y)-(B.y-A.y)*(D.x-C.x);s_top=(A.y-C.y)*(B.x-A.x)-(A.x-C.x)*(B.y-A.y);s_bot=(B.x-A.x)*(D.y-C.y)-(B.y-A.y)*(D.x-C.x);if((r_bot===0)||(s_bot===0)){return Math.min(jsts.algorithm.CGAlgorithms.distancePointLine(A,C,D),Math.min(jsts.algorithm.CGAlgorithms.distancePointLine(B,C,D),Math.min(jsts.algorithm.CGAlgorithms.distancePointLine(C,A,B),jsts.algorithm.CGAlgorithms.distancePointLine(D,A,B))));}\ns=s_top/s_bot;r=r_top/r_bot;if((r<0)||(r>1)||(s<0)||(s>1)){return Math.min(jsts.algorithm.CGAlgorithms.distancePointLine(A,C,D),Math.min(jsts.algorithm.CGAlgorithms.distancePointLine(B,C,D),Math.min(jsts.algorithm.CGAlgorithms.distancePointLine(C,A,B),jsts.algorithm.CGAlgorithms.distancePointLine(D,A,B))));}\nreturn 0.0;};jsts.algorithm.CGAlgorithms.signedArea=function(ring){if(ring.length<3){return 0.0;}\nvar sum,i,il,bx,by,cx,cy;sum=0.0;for(i=0,il=ring.length-1;i<il;i++){bx=ring[i].x;by=ring[i].y;cx=ring[i+1].x;cy=ring[i+1].y;sum+=(bx+cx)*(cy-by);}\nreturn-sum/2.0;};jsts.algorithm.CGAlgorithms.signedArea=function(ring){var n,sum,p,bx,by,i,cx,cy;n=ring.length;if(n<3){return 0.0;}\nsum=0.0;p=ring[0];bx=p.x;by=p.y;for(i=1;i<n;i++){p=ring[i];cx=p.x;cy=p.y;sum+=(bx+cx)*(cy-by);bx=cx;by=cy;}\nreturn-sum/2.0;};jsts.algorithm.CGAlgorithms.computeLength=function(pts){var n=pts.length,len,x0,y0,x1,y1,dx,dy,p,i,il;if(n<=1){return 0.0;}\nlen=0.0;p=pts[0];x0=p.x;y0=p.y;i=1,il=n;for(i;i<n;i++){p=pts[i];x1=p.x;y1=p.y;dx=x1-x0;dy=y1-y0;len+=Math.sqrt(dx*dx+dy*dy);x0=x1;y0=y1;}\nreturn len;};jsts.algorithm.CGAlgorithms.length=function(){};jsts.algorithm.Angle=function(){};jsts.algorithm.Angle.PI_TIMES_2=2.0*Math.PI;jsts.algorithm.Angle.PI_OVER_2=Math.PI/2.0;jsts.algorithm.Angle.PI_OVER_4=Math.PI/4.0;jsts.algorithm.Angle.COUNTERCLOCKWISE=jsts.algorithm.CGAlgorithms.COUNTERCLOCKWISE;jsts.algorithm.Angle.CLOCKWISE=jsts.algorithm.CGAlgorithms.CLOCKWISE;jsts.algorithm.Angle.NONE=jsts.algorithm.CGAlgorithms.COLLINEAR;jsts.algorithm.Angle.toDegrees=function(radians){return(radians*180)/Math.PI;};jsts.algorithm.Angle.toRadians=function(angleDegrees){return(angleDegrees*Math.PI)/180.0;};jsts.algorithm.Angle.angle=function(){if(arguments.length===1){return jsts.algorithm.Angle.angleFromOrigo(arguments[0]);}else{return jsts.algorithm.Angle.angleBetweenCoords(arguments[0],arguments[1]);}};jsts.algorithm.Angle.angleBetweenCoords=function(p0,p1){var dx,dy;dx=p1.x-p0.x;dy=p1.y-p0.y;return Math.atan2(dy,dx);};jsts.algorithm.Angle.angleFromOrigo=function(p){return Math.atan2(p.y,p.x);};jsts.algorithm.Angle.isAcute=function(p0,p1,p2){var dx0,dy0,dx1,dy1,dotprod;dx0=p0.x-p1.x;dy0=p0.y-p1.y;dx1=p2.x-p1.x;dy1=p2.y-p1.y;dotprod=dx0*dx1+dy0*dy1;return dotprod>0;};jsts.algorithm.Angle.isObtuse=function(p0,p1,p2){var dx0,dy0,dx1,dy1,dotprod;dx0=p0.x-p1.x;dy0=p0.y-p1.y;dx1=p2.x-p1.x;dy1=p2.y-p1.y;dotprod=dx0*dx1+dy0*dy1;return dotprod<0;};jsts.algorithm.Angle.angleBetween=function(tip1,tail,tip2){var a1,a2;a1=jsts.algorithm.Angle.angle(tail,tip1);a2=jsts.algorithm.Angle.angle(tail,tip2);return jsts.algorithm.Angle.diff(a1,a2);};jsts.algorithm.Angle.angleBetweenOriented=function(tip1,tail,tip2){var a1,a2,angDel;a1=jsts.algorithm.Angle.angle(tail,tip1);a2=jsts.algorithm.Angle.angle(tail,tip2);angDel=a2-a1;if(angDel<=-Math.PI){return angDel+jsts.algorithm.Angle.PI_TIMES_2;}\nif(angDel>Math.PI){return angDel-jsts.algorithm.Angle.PI_TIMES_2;}\nreturn angDel;};jsts.algorithm.Angle.interiorAngle=function(p0,p1,p2){var anglePrev,angleNext;anglePrev=jsts.algorithm.Angle.angle(p1,p0);angleNext=jsts.algorithm.Angle.angle(p1,p2);return Math.abs(angleNext-anglePrev);};jsts.algorithm.Angle.getTurn=function(ang1,ang2){var crossproduct=Math.sin(ang2-ang1);if(crossproduct>0){return jsts.algorithm.Angle.COUNTERCLOCKWISE;}\nif(crossproduct<0){return jsts.algorithm.Angle.CLOCKWISE;}\nreturn jsts.algorithm.Angle.NONE;};jsts.algorithm.Angle.normalize=function(angle){while(angle>Math.PI){angle-=jsts.algorithm.Angle.PI_TIMES_2;}\nwhile(angle<=-Math.PI){angle+=jsts.algorithm.Angle.PI_TIMES_2;}\nreturn angle;};jsts.algorithm.Angle.normalizePositive=function(angle){if(angle<0.0){while(angle<0.0){angle+=jsts.algorithm.Angle.PI_TIMES_2;}\nif(angle>=jsts.algorithm.Angle.PI_TIMES_2){angle=0.0;}}\nelse{while(angle>=jsts.algorithm.Angle.PI_TIMES_2){angle-=jsts.algorithm.Angle.PI_TIMES_2;}\nif(angle<0.0){angle=0.0;}}\nreturn angle;};jsts.algorithm.Angle.diff=function(ang1,ang2){var delAngle;if(ang1<ang2){delAngle=ang2-ang1;}else{delAngle=ang1-ang2;}\nif(delAngle>Math.PI){delAngle=(2*Math.PI)-delAngle;}\nreturn delAngle;};jsts.geom.GeometryComponentFilter=function(){};jsts.geom.GeometryComponentFilter.prototype.filter=function(geom){throw new jsts.error.AbstractMethodInvocationError();};jsts.geom.util.LinearComponentExtracter=function(lines,isForcedToLineString){this.lines=lines;this.isForcedToLineString=isForcedToLineString;};jsts.geom.util.LinearComponentExtracter.prototype=new jsts.geom.GeometryComponentFilter();jsts.geom.util.LinearComponentExtracter.prototype.lines=null;jsts.geom.util.LinearComponentExtracter.prototype.isForcedToLineString=false;jsts.geom.util.LinearComponentExtracter.getLines=function(geoms,lines){if(arguments.length==1){return jsts.geom.util.LinearComponentExtracter.getLines5.apply(this,arguments);}\nelse if(arguments.length==2&&typeof lines==='boolean'){return jsts.geom.util.LinearComponentExtracter.getLines6.apply(this,arguments);}\nelse if(arguments.length==2&&geoms instanceof jsts.geom.Geometry){return jsts.geom.util.LinearComponentExtracter.getLines3.apply(this,arguments);}\nelse if(arguments.length==3&&geoms instanceof jsts.geom.Geometry){return jsts.geom.util.LinearComponentExtracter.getLines4.apply(this,arguments);}\nelse if(arguments.length==3){return jsts.geom.util.LinearComponentExtracter.getLines2.apply(this,arguments);}\nfor(var i=0;i<geoms.length;i++){var g=geoms[i];jsts.geom.util.LinearComponentExtracter.getLines3(g,lines);}\nreturn lines;};jsts.geom.util.LinearComponentExtracter.getLines2=function(geoms,lines,forceToLineString){for(var i=0;i<geoms.length;i++){var g=geoms[i];jsts.geom.util.LinearComponentExtracter.getLines4(g,lines,forceToLineString);}\nreturn lines;};jsts.geom.util.LinearComponentExtracter.getLines3=function(geom,lines){if(geom instanceof LineString){lines.add(geom);}else{geom.apply(new jsts.geom.util.LinearComponentExtracter(lines));}\nreturn lines;};jsts.geom.util.LinearComponentExtracter.getLines4=function(geom,lines,forceToLineString){geom.apply(new jsts.geom.util.LinearComponentExtracter(lines,forceToLineString));return lines;};jsts.geom.util.LinearComponentExtracter.getLines5=function(geom){return jsts.geom.util.LinearComponentExtracter.getLines6(geom,false);};jsts.geom.util.LinearComponentExtracter.getLines6=function(geom,forceToLineString){var lines=[];geom.apply(new jsts.geom.util.LinearComponentExtracter(lines,forceToLineString));return lines;};jsts.geom.util.LinearComponentExtracter.prototype.setForceToLineString=function(isForcedToLineString){this.isForcedToLineString=isForcedToLineString;};jsts.geom.util.LinearComponentExtracter.prototype.filter=function(geom){if(this.isForcedToLineString&&geom instanceof jsts.geom.LinearRing){var line=geom.getFactory().createLineString(geom.getCoordinateSequence());this.lines.push(line);return;}\nif(geom instanceof jsts.geom.LineString||geom instanceof jsts.geom.LinearRing)\nthis.lines.push(geom);};jsts.geom.Location=function(){};jsts.geom.Location.INTERIOR=0;jsts.geom.Location.BOUNDARY=1;jsts.geom.Location.EXTERIOR=2;jsts.geom.Location.NONE=-1;jsts.geom.Location.toLocationSymbol=function(locationValue){switch(locationValue){case jsts.geom.Location.EXTERIOR:return'e';case jsts.geom.Location.BOUNDARY:return'b';case jsts.geom.Location.INTERIOR:return'i';case jsts.geom.Location.NONE:return'-';}\nthrow new jsts.IllegalArgumentError('Unknown location value: '+\nlocationValue);};(function(){jsts.io.GeoJSONReader=function(geometryFactory){this.geometryFactory=geometryFactory||new jsts.geom.GeometryFactory();this.precisionModel=this.geometryFactory.getPrecisionModel();this.parser=new jsts.io.GeoJSONParser(this.geometryFactory);};jsts.io.GeoJSONReader.prototype.read=function(geoJson){var geometry=this.parser.read(geoJson);if(this.precisionModel.getType()===jsts.geom.PrecisionModel.FIXED){this.reducePrecision(geometry);}\nreturn geometry;};jsts.io.GeoJSONReader.prototype.reducePrecision=function(geometry){var i,len;if(geometry.coordinate){this.precisionModel.makePrecise(geometry.coordinate);}else if(geometry.points){for(i=0,len=geometry.points.length;i<len;i++){this.precisionModel.makePrecise(geometry.points[i]);}}else if(geometry.geometries){for(i=0,len=geometry.geometries.length;i<len;i++){this.reducePrecision(geometry.geometries[i]);}}};})();jsts.geom.Geometry=function(factory){this.factory=factory;};jsts.geom.Geometry.prototype.envelope=null;jsts.geom.Geometry.prototype.factory=null;jsts.geom.Geometry.prototype.getGeometryType=function(){return'Geometry';};jsts.geom.Geometry.hasNonEmptyElements=function(geometries){var i;for(i=0;i<geometries.length;i++){if(!geometries[i].isEmpty()){return true;}}\nreturn false;};jsts.geom.Geometry.hasNullElements=function(array){var i;for(i=0;i<array.length;i++){if(array[i]===null){return true;}}\nreturn false;};jsts.geom.Geometry.prototype.getFactory=function(){if(this.factory===null||this.factory===undefined){this.factory=new jsts.geom.GeometryFactory();}\nreturn this.factory;};jsts.geom.Geometry.prototype.getNumGeometries=function(){return 1;};jsts.geom.Geometry.prototype.getGeometryN=function(n){return this;};jsts.geom.Geometry.prototype.getPrecisionModel=function(){return this.getFactory().getPrecisionModel();};jsts.geom.Geometry.prototype.getCoordinate=function(){throw new jsts.error.AbstractMethodInvocationError();};jsts.geom.Geometry.prototype.getCoordinates=function(){throw new jsts.error.AbstractMethodInvocationError();};jsts.geom.Geometry.prototype.getNumPoints=function(){throw new jsts.error.AbstractMethodInvocationError();};jsts.geom.Geometry.prototype.isSimple=function(){this.checkNotGeometryCollection(this);var op=new jsts.operation.IsSimpleOp(this);return op.isSimple();};jsts.geom.Geometry.prototype.isValid=function(){var isValidOp=new jsts.operation.valid.IsValidOp(this);return isValidOp.isValid();};jsts.geom.Geometry.prototype.isEmpty=function(){throw new jsts.error.AbstractMethodInvocationError();};jsts.geom.Geometry.prototype.distance=function(g){return jsts.operation.distance.DistanceOp.distance(this,g);};jsts.geom.Geometry.prototype.isWithinDistance=function(geom,distance){var envDist=this.getEnvelopeInternal().distance(geom.getEnvelopeInternal());if(envDist>distance){return false;}\nreturn DistanceOp.isWithinDistance(this,geom,distance);};jsts.geom.Geometry.prototype.isRectangle=function(){return false;};jsts.geom.Geometry.prototype.getArea=function(){return 0.0;};jsts.geom.Geometry.prototype.getLength=function(){return 0.0;};jsts.geom.Geometry.prototype.getCentroid=function(){if(this.isEmpty()){return null;}\nvar cent;var centPt=null;var dim=this.getDimension();if(dim===0){cent=new jsts.algorithm.CentroidPoint();cent.add(this);centPt=cent.getCentroid();}else if(dim===1){cent=new jsts.algorithm.CentroidLine();cent.add(this);centPt=cent.getCentroid();}else{cent=new jsts.algorithm.CentroidArea();cent.add(this);centPt=cent.getCentroid();}\nreturn this.createPointFromInternalCoord(centPt,this);};jsts.geom.Geometry.prototype.getInteriorPoint=function(){var intPt;var interiorPt=null;var dim=this.getDimension();if(dim===0){intPt=new jsts.algorithm.InteriorPointPoint(this);interiorPt=intPt.getInteriorPoint();}else if(dim===1){intPt=new jsts.algorithm.InteriorPointLine(this);interiorPt=intPt.getInteriorPoint();}else{intPt=new jsts.algorithm.InteriorPointArea(this);interiorPt=intPt.getInteriorPoint();}\nreturn this.createPointFromInternalCoord(interiorPt,this);};jsts.geom.Geometry.prototype.getDimension=function(){throw new jsts.error.AbstractMethodInvocationError();};jsts.geom.Geometry.prototype.getBoundary=function(){throw new jsts.error.AbstractMethodInvocationError();};jsts.geom.Geometry.prototype.getBoundaryDimension=function(){throw new jsts.error.AbstractMethodInvocationError();};jsts.geom.Geometry.prototype.getEnvelope=function(){return this.getFactory().toGeometry(this.getEnvelopeInternal());};jsts.geom.Geometry.prototype.getEnvelopeInternal=function(){if(this.envelope===null){this.envelope=this.computeEnvelopeInternal();}\nreturn this.envelope;};jsts.geom.Geometry.prototype.disjoint=function(g){return!this.intersects(g);};jsts.geom.Geometry.prototype.touches=function(g){if(!this.getEnvelopeInternal().intersects(g.getEnvelopeInternal())){return false;}\nreturn this.relate(g).isTouches(this.getDimension(),g.getDimension());};jsts.geom.Geometry.prototype.intersects=function(g){if(!this.getEnvelopeInternal().intersects(g.getEnvelopeInternal())){return false;}\nif(this.isRectangle()){return jsts.operation.predicate.RectangleIntersects.intersects(this,g);}\nif(g.isRectangle()){return jsts.operation.predicate.RectangleIntersects.intersects(g,this);}\nreturn this.relate(g).isIntersects();};jsts.geom.Geometry.prototype.crosses=function(g){if(!this.getEnvelopeInternal().intersects(g.getEnvelopeInternal())){return false;}\nreturn this.relate(g).isCrosses(this.getDimension(),g.getDimension());};jsts.geom.Geometry.prototype.within=function(g){return g.contains(this);};jsts.geom.Geometry.prototype.contains=function(g){if(!this.getEnvelopeInternal().contains(g.getEnvelopeInternal())){return false;}\nif(this.isRectangle()){return jsts.operation.predicate.RectangleContains.contains(this,g);}\nreturn this.relate(g).isContains();};jsts.geom.Geometry.prototype.overlaps=function(g){if(!this.getEnvelopeInternal().intersects(g.getEnvelopeInternal())){return false;}\nreturn this.relate(g).isOverlaps(this.getDimension(),g.getDimension());};jsts.geom.Geometry.prototype.covers=function(g){if(!this.getEnvelopeInternal().covers(g.getEnvelopeInternal())){return false;}\nif(this.isRectangle()){return true;}\nreturn this.relate(g).isCovers();};jsts.geom.Geometry.prototype.coveredBy=function(g){return g.covers(this);};jsts.geom.Geometry.prototype.relate=function(g,intersectionPattern){if(arguments.length===1){return this.relate2.apply(this,arguments);}\nreturn this.relate2(g).matches(intersectionPattern);};jsts.geom.Geometry.prototype.relate2=function(g){this.checkNotGeometryCollection(this);this.checkNotGeometryCollection(g);return jsts.operation.relate.RelateOp.relate(this,g);};jsts.geom.Geometry.prototype.equalsTopo=function(g){if(!this.getEnvelopeInternal().equals(g.getEnvelopeInternal())){return false;}\nreturn this.relate(g).isEquals(this.getDimension(),g.getDimension());};jsts.geom.Geometry.prototype.equals=function(o){if(o instanceof jsts.geom.Geometry||o instanceof jsts.geom.LinearRing||o instanceof jsts.geom.Polygon||o instanceof jsts.geom.GeometryCollection||o instanceof jsts.geom.MultiPoint||o instanceof jsts.geom.MultiLineString||o instanceof jsts.geom.MultiPolygon){return this.equalsExact(o);}\nreturn false;};jsts.geom.Geometry.prototype.buffer=function(distance,quadrantSegments,endCapStyle){var params=new jsts.operation.buffer.BufferParameters(quadrantSegments,endCapStyle)\nreturn jsts.operation.buffer.BufferOp.bufferOp2(this,distance,params);};jsts.geom.Geometry.prototype.convexHull=function(){return new jsts.algorithm.ConvexHull(this).getConvexHull();};jsts.geom.Geometry.prototype.intersection=function(other){if(this.isEmpty()){return this.getFactory().createGeometryCollection(null);}\nif(other.isEmpty()){return this.getFactory().createGeometryCollection(null);}\nif(this.isGeometryCollection(this)){var g2=other;}\nthis.checkNotGeometryCollection(this);this.checkNotGeometryCollection(other);return jsts.operation.overlay.snap.SnapIfNeededOverlayOp.overlayOp(this,other,jsts.operation.overlay.OverlayOp.INTERSECTION);};jsts.geom.Geometry.prototype.union=function(other){if(arguments.length===0){return jsts.operation.union.UnaryUnionOp.union(this);}\nif(this.isEmpty()){return other.clone();}\nif(other.isEmpty()){return this.clone();}\nthis.checkNotGeometryCollection(this);this.checkNotGeometryCollection(other);return jsts.operation.overlay.snap.SnapIfNeededOverlayOp.overlayOp(this,other,jsts.operation.overlay.OverlayOp.UNION);};jsts.geom.Geometry.prototype.difference=function(other){if(this.isEmpty()){return this.getFactory().createGeometryCollection(null);}\nif(other.isEmpty()){return this.clone();}\nthis.checkNotGeometryCollection(this);this.checkNotGeometryCollection(other);return jsts.operation.overlay.snap.SnapIfNeededOverlayOp.overlayOp(this,other,jsts.operation.overlay.OverlayOp.DIFFERENCE);};jsts.geom.Geometry.prototype.symDifference=function(other){if(this.isEmpty()){return other.clone();}\nif(other.isEmpty()){return this.clone();}\nthis.checkNotGeometryCollection(this);this.checkNotGeometryCollection(other);return jsts.operation.overlay.snap.SnapIfNeededOverlayOp.overlayOp(this,other,jsts.operation.overlay.OverlayOp.SYMDIFFERENCE);};jsts.geom.Geometry.prototype.equalsExact=function(other,tolerance){throw new jsts.error.AbstractMethodInvocationError();};jsts.geom.Geometry.prototype.equalsNorm=function(g){if(g===null||g===undefined)\nreturn false;return this.norm().equalsExact(g.norm());};jsts.geom.Geometry.prototype.apply=function(filter){throw new jsts.error.AbstractMethodInvocationError();};jsts.geom.Geometry.prototype.clone=function(){throw new jsts.error.AbstractMethodInvocationError();};jsts.geom.Geometry.prototype.normalize=function(){throw new jsts.error.AbstractMethodInvocationError();};jsts.geom.Geometry.prototype.norm=function(){var copy=this.clone();copy.normalize();return copy;};jsts.geom.Geometry.prototype.compareTo=function(o){var other=o;if(this.getClassSortIndex()!==other.getClassSortIndex()){return this.getClassSortIndex()-other.getClassSortIndex();}\nif(this.isEmpty()&&other.isEmpty()){return 0;}\nif(this.isEmpty()){return-1;}\nif(other.isEmpty()){return 1;}\nreturn this.compareToSameClass(o);};jsts.geom.Geometry.prototype.isEquivalentClass=function(other){if(this instanceof jsts.geom.Point&&other instanceof jsts.geom.Point){return true;}else if(this instanceof jsts.geom.LineString&&(other instanceof jsts.geom.LineString|other instanceof jsts.geom.LinearRing)){return true;}else if(this instanceof jsts.geom.LinearRing&&(other instanceof jsts.geom.LineString|other instanceof jsts.geom.LinearRing)){return true;}else if(this instanceof jsts.geom.Polygon&&(other instanceof jsts.geom.Polygon)){return true;}else if(this instanceof jsts.geom.MultiPoint&&(other instanceof jsts.geom.MultiPoint)){return true;}else if(this instanceof jsts.geom.MultiLineString&&(other instanceof jsts.geom.MultiLineString)){return true;}else if(this instanceof jsts.geom.MultiPolygon&&(other instanceof jsts.geom.MultiPolygon)){return true;}else if(this instanceof jsts.geom.GeometryCollection&&(other instanceof jsts.geom.GeometryCollection)){return true;}\nreturn false;};jsts.geom.Geometry.prototype.checkNotGeometryCollection=function(g){if(g.isGeometryCollectionBase()){throw new jsts.error.IllegalArgumentError('This method does not support GeometryCollection');}};jsts.geom.Geometry.prototype.isGeometryCollection=function(){return(this instanceof jsts.geom.GeometryCollection);};jsts.geom.Geometry.prototype.isGeometryCollectionBase=function(){return(this.CLASS_NAME==='jsts.geom.GeometryCollection');};jsts.geom.Geometry.prototype.computeEnvelopeInternal=function(){throw new jsts.error.AbstractMethodInvocationError();};jsts.geom.Geometry.prototype.compareToSameClass=function(o){throw new jsts.error.AbstractMethodInvocationError();};jsts.geom.Geometry.prototype.compare=function(a,b){var i=a.iterator();var j=b.iterator();while(i.hasNext()&&j.hasNext()){var aElement=i.next();var bElement=j.next();var comparison=aElement.compareTo(bElement);if(comparison!==0){return comparison;}}\nif(i.hasNext()){return 1;}\nif(j.hasNext()){return-1;}\nreturn 0;};jsts.geom.Geometry.prototype.equal=function(a,b,tolerance){if(tolerance===undefined||tolerance===null||tolerance===0){return a.equals(b);}\nreturn a.distance(b)<=tolerance;};jsts.geom.Geometry.prototype.getClassSortIndex=function(){var sortedClasses=[jsts.geom.Point,jsts.geom.MultiPoint,jsts.geom.LineString,jsts.geom.LinearRing,jsts.geom.MultiLineString,jsts.geom.Polygon,jsts.geom.MultiPolygon,jsts.geom.GeometryCollection];for(var i=0;i<sortedClasses.length;i++){if(this instanceof sortedClasses[i])\nreturn i;}\njsts.util.Assert.shouldNeverReachHere('Class not supported: '+this);return-1;};jsts.geom.Geometry.prototype.toString=function(){return new jsts.io.WKTWriter().write(this);};jsts.geom.Geometry.prototype.createPointFromInternalCoord=function(coord,exemplar){exemplar.getPrecisionModel().makePrecise(coord);return exemplar.getFactory().createPoint(coord);};(function(){jsts.geom.Coordinate=function(x,y){if(typeof x==='number'){this.x=x;this.y=y;}else if(x instanceof jsts.geom.Coordinate){this.x=parseFloat(x.x);this.y=parseFloat(x.y);}else if(x===undefined||x===null){this.x=0;this.y=0;}else if(typeof x==='string'){this.x=parseFloat(x);this.y=parseFloat(y);}};jsts.geom.Coordinate.prototype.setCoordinate=function(other){this.x=other.x;this.y=other.y;};jsts.geom.Coordinate.prototype.clone=function(){return new jsts.geom.Coordinate(this.x,this.y);};jsts.geom.Coordinate.prototype.distance=function(p){var dx=this.x-p.x;var dy=this.y-p.y;return Math.sqrt(dx*dx+dy*dy);};jsts.geom.Coordinate.prototype.equals2D=function(other){if(this.x!==other.x){return false;}\nif(this.y!==other.y){return false;}\nreturn true;};jsts.geom.Coordinate.prototype.equals=function(other){if(!other instanceof jsts.geom.Coordinate||other===undefined){return false;}\nreturn this.equals2D(other);};jsts.geom.Coordinate.prototype.compareTo=function(other){if(this.x<other.x){return-1;}\nif(this.x>other.x){return 1;}\nif(this.y<other.y){return-1;}\nif(this.y>other.y){return 1;}\nreturn 0;};jsts.geom.Coordinate.prototype.toString=function(){return'('+this.x+', '+this.y+')';};})();jsts.geom.Envelope=function(){jsts.geom.Envelope.prototype.init.apply(this,arguments);};jsts.geom.Envelope.prototype.minx=null;jsts.geom.Envelope.prototype.maxx=null;jsts.geom.Envelope.prototype.miny=null;jsts.geom.Envelope.prototype.maxy=null;jsts.geom.Envelope.prototype.init=function(){if(typeof arguments[0]==='number'&&arguments.length===4){this.initFromValues(arguments[0],arguments[1],arguments[2],arguments[3]);}else if(arguments[0]instanceof jsts.geom.Coordinate&&arguments.length===1){this.initFromCoordinate(arguments[0]);}else if(arguments[0]instanceof jsts.geom.Coordinate&&arguments.length===2){this.initFromCoordinates(arguments[0],arguments[1]);}else if(arguments[0]instanceof jsts.geom.Envelope&&arguments.length===1){this.initFromEnvelope(arguments[0]);}else{this.setToNull();}};jsts.geom.Envelope.prototype.initFromValues=function(x1,x2,y1,y2){if(x1<x2){this.minx=x1;this.maxx=x2;}else{this.minx=x2;this.maxx=x1;}\nif(y1<y2){this.miny=y1;this.maxy=y2;}else{this.miny=y2;this.maxy=y1;}};jsts.geom.Envelope.prototype.initFromCoordinates=function(p1,p2){this.initFromValues(p1.x,p2.x,p1.y,p2.y);};jsts.geom.Envelope.prototype.initFromCoordinate=function(p){this.initFromValues(p.x,p.x,p.y,p.y);};jsts.geom.Envelope.prototype.initFromEnvelope=function(env){this.minx=env.minx;this.maxx=env.maxx;this.miny=env.miny;this.maxy=env.maxy;};jsts.geom.Envelope.prototype.setToNull=function(){this.minx=0;this.maxx=-1;this.miny=0;this.maxy=-1;};jsts.geom.Envelope.prototype.isNull=function(){return this.maxx<this.minx;};jsts.geom.Envelope.prototype.getHeight=function(){if(this.isNull()){return 0;}\nreturn this.maxy-this.miny;};jsts.geom.Envelope.prototype.getWidth=function(){if(this.isNull()){return 0;}\nreturn this.maxx-this.minx;};jsts.geom.Envelope.prototype.getMinX=function(){return this.minx;};jsts.geom.Envelope.prototype.getMaxX=function(){return this.maxx;};jsts.geom.Envelope.prototype.getMinY=function(){return this.miny;};jsts.geom.Envelope.prototype.getMaxY=function(){return this.maxy;};jsts.geom.Envelope.prototype.getArea=function(){return this.getWidth()*this.getHeight();};jsts.geom.Envelope.prototype.expandToInclude=function(){if(arguments[0]instanceof jsts.geom.Coordinate){this.expandToIncludeCoordinate(arguments[0]);}else if(arguments[0]instanceof jsts.geom.Envelope){this.expandToIncludeEnvelope(arguments[0]);}else{this.expandToIncludeValues(arguments[0],arguments[1]);}};jsts.geom.Envelope.prototype.expandToIncludeCoordinate=function(p){this.expandToIncludeValues(p.x,p.y);};jsts.geom.Envelope.prototype.expandToIncludeValues=function(x,y){if(this.isNull()){this.minx=x;this.maxx=x;this.miny=y;this.maxy=y;}else{if(x<this.minx){this.minx=x;}\nif(x>this.maxx){this.maxx=x;}\nif(y<this.miny){this.miny=y;}\nif(y>this.maxy){this.maxy=y;}}};jsts.geom.Envelope.prototype.expandToIncludeEnvelope=function(other){if(other.isNull()){return;}\nif(this.isNull()){this.minx=other.getMinX();this.maxx=other.getMaxX();this.miny=other.getMinY();this.maxy=other.getMaxY();}else{if(other.minx<this.minx){this.minx=other.minx;}\nif(other.maxx>this.maxx){this.maxx=other.maxx;}\nif(other.miny<this.miny){this.miny=other.miny;}\nif(other.maxy>this.maxy){this.maxy=other.maxy;}}};jsts.geom.Envelope.prototype.expandBy=function(){if(arguments.length===1){this.expandByDistance(arguments[0]);}else{this.expandByDistances(arguments[0],arguments[1]);}};jsts.geom.Envelope.prototype.expandByDistance=function(distance){this.expandByDistances(distance,distance);};jsts.geom.Envelope.prototype.expandByDistances=function(deltaX,deltaY){if(this.isNull()){return;}\nthis.minx-=deltaX;this.maxx+=deltaX;this.miny-=deltaY;this.maxy+=deltaY;if(this.minx>this.maxx||this.miny>this.maxy){this.setToNull();}};jsts.geom.Envelope.prototype.translate=function(transX,transY){if(this.isNull()){return;}\nthis.init(this.minx+transX,this.maxx+transX,this.miny+transY,this.maxy+transY);};jsts.geom.Envelope.prototype.centre=function(){if(this.isNull()){return null;}\nreturn new jsts.geom.Coordinate((this.minx+this.maxx)/2.0,(this.miny+this.maxy)/2.0);};jsts.geom.Envelope.prototype.intersection=function(env){if(this.isNull()||env.isNull()||!this.intersects(env)){return new jsts.geom.Envelope();}\nvar intMinX=this.minx>env.minx?this.minx:env.minx;var intMinY=this.miny>env.miny?this.miny:env.miny;var intMaxX=this.maxx<env.maxx?this.maxx:env.maxx;var intMaxY=this.maxy<env.maxy?this.maxy:env.maxy;return new jsts.geom.Envelope(intMinX,intMaxX,intMinY,intMaxY);};jsts.geom.Envelope.prototype.intersects=function(){if(arguments[0]instanceof jsts.geom.Envelope){return this.intersectsEnvelope(arguments[0]);}else if(arguments[0]instanceof jsts.geom.Coordinate){return this.intersectsCoordinate(arguments[0]);}else{return this.intersectsValues(arguments[0],arguments[1]);}};jsts.geom.Envelope.prototype.intersectsEnvelope=function(other){if(this.isNull()||other.isNull()){return false;}\nvar result=!(other.minx>this.maxx||other.maxx<this.minx||other.miny>this.maxy||other.maxy<this.miny);return result;};jsts.geom.Envelope.prototype.intersectsCoordinate=function(p){return this.intersectsValues(p.x,p.y);};jsts.geom.Envelope.prototype.intersectsValues=function(x,y){if(this.isNull()){return false;}\nreturn!(x>this.maxx||x<this.minx||y>this.maxy||y<this.miny);};jsts.geom.Envelope.prototype.contains=function(){if(arguments[0]instanceof jsts.geom.Envelope){return this.containsEnvelope(arguments[0]);}else if(arguments[0]instanceof jsts.geom.Coordinate){return this.containsCoordinate(arguments[0]);}else{return this.containsValues(arguments[0],arguments[1]);}};jsts.geom.Envelope.prototype.containsEnvelope=function(other){return this.coversEnvelope(other);};jsts.geom.Envelope.prototype.containsCoordinate=function(p){return this.coversCoordinate(p);};jsts.geom.Envelope.prototype.containsValues=function(x,y){return this.coversValues(x,y);};jsts.geom.Envelope.prototype.covers=function(){if(arguments[0]instanceof jsts.geom.Envelope){return this.coversEnvelope(arguments[0]);}else if(arguments[0]instanceof jsts.geom.Coordinate){return this.coversCoordinate(arguments[0]);}else{return this.coversValues(arguments[0],arguments[1]);}};jsts.geom.Envelope.prototype.coversValues=function(x,y){if(this.isNull()){return false;}\nreturn x>=this.minx&&x<=this.maxx&&y>=this.miny&&y<=this.maxy;};jsts.geom.Envelope.prototype.coversCoordinate=function(p){return this.coversValues(p.x,p.y);};jsts.geom.Envelope.prototype.coversEnvelope=function(other){if(this.isNull()||other.isNull()){return false;}\nreturn other.minx>=this.minx&&other.maxx<=this.maxx&&other.miny>=this.miny&&other.maxy<=this.maxy;};jsts.geom.Envelope.prototype.distance=function(env){if(this.intersects(env)){return 0;}\nvar dx=0.0;if(this.maxx<env.minx){dx=env.minx-this.maxx;}\nif(this.minx>env.maxx){dx=this.minx-env.maxx;}\nvar dy=0.0;if(this.maxy<env.miny){dy=env.miny-this.maxy;}\nif(this.miny>env.maxy){dy=this.miny-env.maxy;}\nif(dx===0.0){return dy;}\nif(dy===0.0){return dx;}\nreturn Math.sqrt(dx*dx+dy*dy);};jsts.geom.Envelope.prototype.equals=function(other){if(this.isNull()){return other.isNull();}\nreturn this.maxx===other.maxx&&this.maxy===other.maxy&&this.minx===other.minx&&this.miny===other.miny;};jsts.geom.Envelope.prototype.toString=function(){return'Env['+this.minx+' : '+this.maxx+', '+this.miny+' : '+\nthis.maxy+']';};jsts.geom.Envelope.intersects=function(p1,p2,q){if(arguments.length===4){return jsts.geom.Envelope.intersectsEnvelope(arguments[0],arguments[1],arguments[2],arguments[3]);}\nvar xc1=p1.x<p2.x?p1.x:p2.x;var xc2=p1.x>p2.x?p1.x:p2.x;var yc1=p1.y<p2.y?p1.y:p2.y;var yc2=p1.y>p2.y?p1.y:p2.y;if(((q.x>=xc1)&&(q.x<=xc2))&&((q.y>=yc1)&&(q.y<=yc2))){return true;}\nreturn false;};jsts.geom.Envelope.intersectsEnvelope=function(p1,p2,q1,q2){var minq=Math.min(q1.x,q2.x);var maxq=Math.max(q1.x,q2.x);var minp=Math.min(p1.x,p2.x);var maxp=Math.max(p1.x,p2.x);if(minp>maxq){return false;}\nif(maxp<minq){return false;}\nminq=Math.min(q1.y,q2.y);maxq=Math.max(q1.y,q2.y);minp=Math.min(p1.y,p2.y);maxp=Math.max(p1.y,p2.y);if(minp>maxq){return false;}\nif(maxp<minq){return false;}\nreturn true;};jsts.geom.Envelope.prototype.clone=function(){return new jsts.geom.Envelope(this.minx,this.maxx,this.miny,this.maxy);};jsts.geom.util.GeometryCombiner=function(geoms){this.geomFactory=jsts.geom.util.GeometryCombiner.extractFactory(geoms);this.inputGeoms=geoms;};jsts.geom.util.GeometryCombiner.combine=function(geoms){if(arguments.length>1)return this.combine2.apply(this,arguments);var combiner=new jsts.geom.util.GeometryCombiner(geoms);return combiner.combine();};jsts.geom.util.GeometryCombiner.combine2=function(){var arrayList=new javascript.util.ArrayList();Array.prototype.slice.call(arguments).forEach(function(a){arrayList.add(a);});var combiner=new jsts.geom.util.GeometryCombiner(arrayList);return combiner.combine();};jsts.geom.util.GeometryCombiner.prototype.geomFactory=null;jsts.geom.util.GeometryCombiner.prototype.skipEmpty=false;jsts.geom.util.GeometryCombiner.prototype.inputGeoms;jsts.geom.util.GeometryCombiner.extractFactory=function(geoms){if(geoms.isEmpty())return null;return geoms.iterator().next().getFactory();};jsts.geom.util.GeometryCombiner.prototype.combine=function(){var elems=new javascript.util.ArrayList(),i;for(i=this.inputGeoms.iterator();i.hasNext();){var g=i.next();this.extractElements(g,elems);}\nif(elems.size()===0){if(this.geomFactory!==null){return this.geomFactory.createGeometryCollection(null);}\nreturn null;}\nreturn this.geomFactory.buildGeometry(elems);};jsts.geom.util.GeometryCombiner.prototype.extractElements=function(geom,elems){if(geom===null){return;}\nfor(var i=0;i<geom.getNumGeometries();i++){var elemGeom=geom.getGeometryN(i);if(this.skipEmpty&&elemGeom.isEmpty()){continue;}\nelems.add(elemGeom);}};jsts.geom.PrecisionModel=function(modelType){if(typeof modelType==='number'){this.modelType=jsts.geom.PrecisionModel.FIXED;this.scale=modelType;return;}\nthis.modelType=modelType||jsts.geom.PrecisionModel.FLOATING;if(this.modelType===jsts.geom.PrecisionModel.FIXED){this.scale=1.0;}};jsts.geom.PrecisionModel.FLOATING='FLOATING';jsts.geom.PrecisionModel.FIXED='FIXED';jsts.geom.PrecisionModel.FLOATING_SINGLE='FLOATING_SINGLE';jsts.geom.PrecisionModel.prototype.scale=null;jsts.geom.PrecisionModel.prototype.modelType=null;jsts.geom.PrecisionModel.prototype.isFloating=function(){return this.modelType===jsts.geom.PrecisionModel.FLOATING||this.modelType===jsts.geom.PrecisionModel.FLOATING_SINLGE;};jsts.geom.PrecisionModel.prototype.getScale=function(){return this.scale;};jsts.geom.PrecisionModel.prototype.getType=function(){return this.modelType;};jsts.geom.PrecisionModel.prototype.equals=function(other){return true;if(!(other instanceof jsts.geom.PrecisionModel)){return false;}\nvar otherPrecisionModel=other;return this.modelType===otherPrecisionModel.modelType&&this.scale===otherPrecisionModel.scale;};jsts.geom.PrecisionModel.prototype.makePrecise=function(val){if(val instanceof jsts.geom.Coordinate){this.makePrecise2(val);return;}\nif(isNaN(val))\nreturn val;if(this.modelType===jsts.geom.PrecisionModel.FIXED){return Math.round(val*this.scale)/this.scale;}\nreturn val;};jsts.geom.PrecisionModel.prototype.makePrecise2=function(coord){if(this.modelType===jsts.geom.PrecisionModel.FLOATING)\nreturn;coord.x=this.makePrecise(coord.x);coord.y=this.makePrecise(coord.y);};jsts.geom.PrecisionModel.prototype.compareTo=function(o){var other=o;return 0;};jsts.geom.CoordinateFilter=function(){};jsts.geom.CoordinateFilter.prototype.filter=function(coord){throw new jsts.error.AbstractMethodInvocationError();};jsts.simplify.DouglasPeuckerLineSimplifier=function(pts){this.pts=pts;this.seg=new jsts.geom.LineSegment();};jsts.simplify.DouglasPeuckerLineSimplifier.prototype.pts=null;jsts.simplify.DouglasPeuckerLineSimplifier.prototype.usePt=null;jsts.simplify.DouglasPeuckerLineSimplifier.prototype.distanceTolerance=null;jsts.simplify.DouglasPeuckerLineSimplifier.simplify=function(pts,distanceTolerance){var simp=new jsts.simplify.DouglasPeuckerLineSimplifier(pts);simp.setDistanceTolerance(distanceTolerance);return simp.simplify();};jsts.simplify.DouglasPeuckerLineSimplifier.prototype.setDistanceTolerance=function(distanceTolerance){this.distanceTolerance=distanceTolerance;};jsts.simplify.DouglasPeuckerLineSimplifier.prototype.simplify=function(){this.usePt=[];for(var i=0;i<this.pts.length;i++){this.usePt[i]=true;}\nthis.simplifySection(0,this.pts.length-1);var coordList=new jsts.geom.CoordinateList();for(var j=0;j<this.pts.length;j++){if(this.usePt[j]){coordList.add(new jsts.geom.Coordinate(this.pts[j]));}}\nreturn coordList.toCoordinateArray();};jsts.simplify.DouglasPeuckerLineSimplifier.prototype.seg=null;jsts.simplify.DouglasPeuckerLineSimplifier.prototype.simplifySection=function(i,j){if(i+1==j){return;}\nthis.seg.p0=this.pts[i];this.seg.p1=this.pts[j];var maxDistance=-1.0;var maxIndex=i;for(var k=i+1;k<j;k++){var distance=this.seg.distance(this.pts[k]);if(distance>maxDistance){maxDistance=distance;maxIndex=k;}}\nif(maxDistance<=this.distanceTolerance){for(var l=i+1;l<j;l++){this.usePt[l]=false;}}else{this.simplifySection(i,maxIndex);this.simplifySection(maxIndex,j);}};jsts.geomgraph.EdgeIntersection=function(coord,segmentIndex,dist){this.coord=new jsts.geom.Coordinate(coord);this.segmentIndex=segmentIndex;this.dist=dist;};jsts.geomgraph.EdgeIntersection.prototype.coord=null;jsts.geomgraph.EdgeIntersection.prototype.segmentIndex=null;jsts.geomgraph.EdgeIntersection.prototype.dist=null;jsts.geomgraph.EdgeIntersection.prototype.getCoordinate=function(){return this.coord;};jsts.geomgraph.EdgeIntersection.prototype.getSegmentIndex=function(){return this.segmentIndex;};jsts.geomgraph.EdgeIntersection.prototype.getDistance=function(){return this.dist;};jsts.geomgraph.EdgeIntersection.prototype.compareTo=function(other){return this.compare(other.segmentIndex,other.dist);};jsts.geomgraph.EdgeIntersection.prototype.compare=function(segmentIndex,dist){if(this.segmentIndex<segmentIndex)\nreturn-1;if(this.segmentIndex>segmentIndex)\nreturn 1;if(this.dist<dist)\nreturn-1;if(this.dist>dist)\nreturn 1;return 0;};jsts.geomgraph.EdgeIntersection.prototype.isEndPoint=function(maxSegmentIndex){if(this.segmentIndex===0&&this.dist===0.0)\nreturn true;if(this.segmentIndex===maxSegmentIndex)\nreturn true;return false;};jsts.geomgraph.EdgeIntersection.prototype.toString=function(){return''+this.segmentIndex+this.dist;};(function(){var EdgeIntersection=jsts.geomgraph.EdgeIntersection;var TreeMap=javascript.util.TreeMap;jsts.geomgraph.EdgeIntersectionList=function(edge){this.nodeMap=new TreeMap();this.edge=edge;};jsts.geomgraph.EdgeIntersectionList.prototype.nodeMap=null;jsts.geomgraph.EdgeIntersectionList.prototype.edge=null;jsts.geomgraph.EdgeIntersectionList.prototype.isIntersection=function(pt){for(var it=this.iterator();it.hasNext();){var ei=it.next();if(ei.coord.equals(pt)){return true;}}\nreturn false;};jsts.geomgraph.EdgeIntersectionList.prototype.add=function(intPt,segmentIndex,dist){var eiNew=new EdgeIntersection(intPt,segmentIndex,dist);var ei=this.nodeMap.get(eiNew);if(ei!==null){return ei;}\nthis.nodeMap.put(eiNew,eiNew);return eiNew;};jsts.geomgraph.EdgeIntersectionList.prototype.iterator=function(){return this.nodeMap.values().iterator();};jsts.geomgraph.EdgeIntersectionList.prototype.addEndpoints=function(){var maxSegIndex=this.edge.pts.length-1;this.add(this.edge.pts[0],0,0.0);this.add(this.edge.pts[maxSegIndex],maxSegIndex,0.0);};jsts.geomgraph.EdgeIntersectionList.prototype.addSplitEdges=function(edgeList)\n{this.addEndpoints();var it=this.iterator();var eiPrev=it.next();while(it.hasNext()){var ei=it.next();var newEdge=this.createSplitEdge(eiPrev,ei);edgeList.add(newEdge);eiPrev=ei;}};jsts.geomgraph.EdgeIntersectionList.prototype.createSplitEdge=function(ei0,ei1){var npts=ei1.segmentIndex-ei0.segmentIndex+2;var lastSegStartPt=this.edge.pts[ei1.segmentIndex];var useIntPt1=ei1.dist>0.0||!ei1.coord.equals2D(lastSegStartPt);if(!useIntPt1){npts--;}\nvar pts=[];var ipt=0;pts[ipt++]=new jsts.geom.Coordinate(ei0.coord);for(var i=ei0.segmentIndex+1;i<=ei1.segmentIndex;i++){pts[ipt++]=this.edge.pts[i];}\nif(useIntPt1)pts[ipt]=ei1.coord;return new jsts.geomgraph.Edge(pts,new jsts.geomgraph.Label(this.edge.label));};})();(function(){var AssertionFailedException=function(message){this.message=message;};AssertionFailedException.prototype=new Error();AssertionFailedException.prototype.name='AssertionFailedException';jsts.util.AssertionFailedException=AssertionFailedException;})();(function(){var AssertionFailedException=jsts.util.AssertionFailedException;jsts.util.Assert=function(){};jsts.util.Assert.isTrue=function(assertion,message){if(!assertion){if(message===null){throw new AssertionFailedException();}else{throw new AssertionFailedException(message);}}};jsts.util.Assert.equals=function(expectedValue,actualValue,message){if(!actualValue.equals(expectedValue)){throw new AssertionFailedException('Expected '+expectedValue+' but encountered '+actualValue+\n(message!=null?': '+message:''));}};jsts.util.Assert.shouldNeverReachHere=function(message){throw new AssertionFailedException('Should never reach here'+\n(message!=null?': '+message:''));};})();(function(){var Location=jsts.geom.Location;var Assert=jsts.util.Assert;var ArrayList=javascript.util.ArrayList;jsts.operation.relate.RelateComputer=function(arg){this.li=new jsts.algorithm.RobustLineIntersector();this.ptLocator=new jsts.algorithm.PointLocator();this.nodes=new jsts.geomgraph.NodeMap(new jsts.operation.relate.RelateNodeFactory());this.isolatedEdges=new ArrayList();this.arg=arg;};jsts.operation.relate.RelateComputer.prototype.li=null;jsts.operation.relate.RelateComputer.prototype.ptLocator=null;jsts.operation.relate.RelateComputer.prototype.arg=null;jsts.operation.relate.RelateComputer.prototype.nodes=null;jsts.operation.relate.RelateComputer.prototype.im=null;jsts.operation.relate.RelateComputer.prototype.isolatedEdges=null;jsts.operation.relate.RelateComputer.prototype.invalidPoint=null;jsts.operation.relate.RelateComputer.prototype.computeIM=function(){var im=new jsts.geom.IntersectionMatrix();im.set(Location.EXTERIOR,Location.EXTERIOR,2);if(!this.arg[0].getGeometry().getEnvelopeInternal().intersects(this.arg[1].getGeometry().getEnvelopeInternal())){this.computeDisjointIM(im);return im;}\nthis.arg[0].computeSelfNodes(this.li,false);this.arg[1].computeSelfNodes(this.li,false);var intersector=this.arg[0].computeEdgeIntersections(this.arg[1],this.li,false);this.computeIntersectionNodes(0);this.computeIntersectionNodes(1);this.copyNodesAndLabels(0);this.copyNodesAndLabels(1);this.labelIsolatedNodes();this.computeProperIntersectionIM(intersector,im);var eeBuilder=new jsts.operation.relate.EdgeEndBuilder();var ee0=eeBuilder.computeEdgeEnds(this.arg[0].getEdgeIterator());this.insertEdgeEnds(ee0);var ee1=eeBuilder.computeEdgeEnds(this.arg[1].getEdgeIterator());this.insertEdgeEnds(ee1);this.labelNodeEdges();this.labelIsolatedEdges(0,1);this.labelIsolatedEdges(1,0);this.updateIM(im);return im;};jsts.operation.relate.RelateComputer.prototype.insertEdgeEnds=function(ee){for(var i=ee.iterator();i.hasNext();){var e=i.next();this.nodes.add(e);}};jsts.operation.relate.RelateComputer.prototype.computeProperIntersectionIM=function(intersector,im){var dimA=this.arg[0].getGeometry().getDimension();var dimB=this.arg[1].getGeometry().getDimension();var hasProper=intersector.hasProperIntersection();var hasProperInterior=intersector.hasProperInteriorIntersection();if(dimA===2&&dimB===2){if(hasProper)\nim.setAtLeast('212101212');}\nelse if(dimA===2&&dimB===1){if(hasProper)\nim.setAtLeast('FFF0FFFF2');if(hasProperInterior)\nim.setAtLeast('1FFFFF1FF');}else if(dimA===1&&dimB===2){if(hasProper)\nim.setAtLeast('F0FFFFFF2');if(hasProperInterior)\nim.setAtLeast('1F1FFFFFF');}\nelse if(dimA===1&&dimB===1){if(hasProperInterior)\nim.setAtLeast('0FFFFFFFF');}};jsts.operation.relate.RelateComputer.prototype.copyNodesAndLabels=function(argIndex){for(var i=this.arg[argIndex].getNodeIterator();i.hasNext();){var graphNode=i.next();var newNode=this.nodes.addNode(graphNode.getCoordinate());newNode.setLabel(argIndex,graphNode.getLabel().getLocation(argIndex));}};jsts.operation.relate.RelateComputer.prototype.computeIntersectionNodes=function(argIndex){for(var i=this.arg[argIndex].getEdgeIterator();i.hasNext();){var e=i.next();var eLoc=e.getLabel().getLocation(argIndex);for(var eiIt=e.getEdgeIntersectionList().iterator();eiIt.hasNext();){var ei=eiIt.next();var n=this.nodes.addNode(ei.coord);if(eLoc===Location.BOUNDARY)\nn.setLabelBoundary(argIndex);else{if(n.getLabel().isNull(argIndex))\nn.setLabel(argIndex,Location.INTERIOR);}}}};jsts.operation.relate.RelateComputer.prototype.labelIntersectionNodes=function(argIndex){for(var i=this.arg[argIndex].getEdgeIterator();i.hasNext();){var e=i.next();var eLoc=e.getLabel().getLocation(argIndex);for(var eiIt=e.getEdgeIntersectionList().iterator();eiIt.hasNext();){var ei=eiIt.next();var n=this.nodes.find(ei.coord);if(n.getLabel().isNull(argIndex)){if(eLoc===Location.BOUNDARY)\nn.setLabelBoundary(argIndex);else\nn.setLabel(argIndex,Location.INTERIOR);}}}};jsts.operation.relate.RelateComputer.prototype.computeDisjointIM=function(im){var ga=this.arg[0].getGeometry();if(!ga.isEmpty()){im.set(Location.INTERIOR,Location.EXTERIOR,ga.getDimension());im.set(Location.BOUNDARY,Location.EXTERIOR,ga.getBoundaryDimension());}\nvar gb=this.arg[1].getGeometry();if(!gb.isEmpty()){im.set(Location.EXTERIOR,Location.INTERIOR,gb.getDimension());im.set(Location.EXTERIOR,Location.BOUNDARY,gb.getBoundaryDimension());}};jsts.operation.relate.RelateComputer.prototype.labelNodeEdges=function(){for(var ni=this.nodes.iterator();ni.hasNext();){var node=ni.next();node.getEdges().computeLabelling(this.arg);}};jsts.operation.relate.RelateComputer.prototype.updateIM=function(im){for(var ei=this.isolatedEdges.iterator();ei.hasNext();){var e=ei.next();e.updateIM(im);}\nfor(var ni=this.nodes.iterator();ni.hasNext();){var node=ni.next();node.updateIM(im);node.updateIMFromEdges(im);}};jsts.operation.relate.RelateComputer.prototype.labelIsolatedEdges=function(thisIndex,targetIndex){for(var ei=this.arg[thisIndex].getEdgeIterator();ei.hasNext();){var e=ei.next();if(e.isIsolated()){this.labelIsolatedEdge(e,targetIndex,this.arg[targetIndex].getGeometry());this.isolatedEdges.add(e);}}};jsts.operation.relate.RelateComputer.prototype.labelIsolatedEdge=function(e,targetIndex,target){if(target.getDimension()>0){var loc=this.ptLocator.locate(e.getCoordinate(),target);e.getLabel().setAllLocations(targetIndex,loc);}else{e.getLabel().setAllLocations(targetIndex,Location.EXTERIOR);}};jsts.operation.relate.RelateComputer.prototype.labelIsolatedNodes=function(){for(var ni=this.nodes.iterator();ni.hasNext();){var n=ni.next();var label=n.getLabel();Assert.isTrue(label.getGeometryCount()>0,'node with empty label found');if(n.isIsolated()){if(label.isNull(0))\nthis.labelIsolatedNode(n,0);else\nthis.labelIsolatedNode(n,1);}}};jsts.operation.relate.RelateComputer.prototype.labelIsolatedNode=function(n,targetIndex){var loc=this.ptLocator.locate(n.getCoordinate(),this.arg[targetIndex].getGeometry());n.getLabel().setAllLocations(targetIndex,loc);};})();(function(){var Assert=jsts.util.Assert;jsts.geomgraph.GraphComponent=function(label){this.label=label;};jsts.geomgraph.GraphComponent.prototype.label=null;jsts.geomgraph.GraphComponent.prototype._isInResult=false;jsts.geomgraph.GraphComponent.prototype._isCovered=false;jsts.geomgraph.GraphComponent.prototype._isCoveredSet=false;jsts.geomgraph.GraphComponent.prototype._isVisited=false;jsts.geomgraph.GraphComponent.prototype.getLabel=function(){return this.label;};jsts.geomgraph.GraphComponent.prototype.setLabel=function(label){if(arguments.length===2){this.setLabel2.apply(this,arguments);return;}\nthis.label=label;};jsts.geomgraph.GraphComponent.prototype.setInResult=function(isInResult){this._isInResult=isInResult;};jsts.geomgraph.GraphComponent.prototype.isInResult=function(){return this._isInResult;};jsts.geomgraph.GraphComponent.prototype.setCovered=function(isCovered){this._isCovered=isCovered;this._isCoveredSet=true;};jsts.geomgraph.GraphComponent.prototype.isCovered=function(){return this._isCovered;};jsts.geomgraph.GraphComponent.prototype.isCoveredSet=function(){return this._isCoveredSet;};jsts.geomgraph.GraphComponent.prototype.isVisited=function(){return this._isVisited;};jsts.geomgraph.GraphComponent.prototype.setVisited=function(isVisited){this._isVisited=isVisited;};jsts.geomgraph.GraphComponent.prototype.getCoordinate=function(){throw new jsts.error.AbstractMethodInvocationError();};jsts.geomgraph.GraphComponent.prototype.computeIM=function(im){throw new jsts.error.AbstractMethodInvocationError();};jsts.geomgraph.GraphComponent.prototype.isIsolated=function(){throw new jsts.error.AbstractMethodInvocationError();};jsts.geomgraph.GraphComponent.prototype.updateIM=function(im){Assert.isTrue(this.label.getGeometryCount()>=2,'found partial label');this.computeIM(im);};})();jsts.geomgraph.Node=function(coord,edges){this.coord=coord;this.edges=edges;this.label=new jsts.geomgraph.Label(0,jsts.geom.Location.NONE);};jsts.geomgraph.Node.prototype=new jsts.geomgraph.GraphComponent();jsts.geomgraph.Node.prototype.coord=null;jsts.geomgraph.Node.prototype.edges=null;jsts.geomgraph.Node.prototype.isIsolated=function(){return(this.label.getGeometryCount()==1);};jsts.geomgraph.Node.prototype.setLabel2=function(argIndex,onLocation){if(this.label===null){this.label=new jsts.geomgraph.Label(argIndex,onLocation);}else\nthis.label.setLocation(argIndex,onLocation);};jsts.geomgraph.Node.prototype.setLabelBoundary=function(argIndex){var loc=jsts.geom.Location.NONE;if(this.label!==null)\nloc=this.label.getLocation(argIndex);var newLoc;switch(loc){case jsts.geom.Location.BOUNDARY:newLoc=jsts.geom.Location.INTERIOR;break;case jsts.geom.Location.INTERIOR:newLoc=jsts.geom.Location.BOUNDARY;break;default:newLoc=jsts.geom.Location.BOUNDARY;break;}\nthis.label.setLocation(argIndex,newLoc);};jsts.geomgraph.Node.prototype.add=function(e){this.edges.insert(e);e.setNode(this);};jsts.geomgraph.Node.prototype.getCoordinate=function(){return this.coord;};jsts.geomgraph.Node.prototype.getEdges=function(){return this.edges;};jsts.geomgraph.Node.prototype.isIncidentEdgeInResult=function(){for(var it=this.getEdges().getEdges().iterator();it.hasNext();){var de=it.next();if(de.getEdge().isInResult())\nreturn true;}\nreturn false;};jsts.geom.Point=function(coordinate,factory){this.factory=factory;if(coordinate===undefined)\nreturn;this.coordinate=coordinate;};jsts.geom.Point.prototype=new jsts.geom.Geometry();jsts.geom.Point.constructor=jsts.geom.Point;jsts.geom.Point.CLASS_NAME='jsts.geom.Point';jsts.geom.Point.prototype.coordinate=null;jsts.geom.Point.prototype.getX=function(){return this.coordinate.x;};jsts.geom.Point.prototype.getY=function(){return this.coordinate.y;};jsts.geom.Point.prototype.getCoordinate=function(){return this.coordinate;};jsts.geom.Point.prototype.getCoordinates=function(){return this.isEmpty()?[]:[this.coordinate];};jsts.geom.Point.prototype.getCoordinateSequence=function(){return this.isEmpty()?[]:[this.coordinate];};jsts.geom.Point.prototype.isEmpty=function(){return this.coordinate===null;};jsts.geom.Point.prototype.equalsExact=function(other,tolerance){if(!this.isEquivalentClass(other)){return false;}\nif(this.isEmpty()&&other.isEmpty()){return true;}\nreturn this.equal(other.getCoordinate(),this.getCoordinate(),tolerance);};jsts.geom.Point.prototype.getNumPoints=function(){return this.isEmpty()?0:1;};jsts.geom.Point.prototype.isSimple=function(){return true;};jsts.geom.Point.prototype.getBoundary=function(){return new jsts.geom.GeometryCollection(null);};jsts.geom.Point.prototype.computeEnvelopeInternal=function(){if(this.isEmpty()){return new jsts.geom.Envelope();}\nreturn new jsts.geom.Envelope(this.coordinate);};jsts.geom.Point.prototype.apply=function(filter){if(filter instanceof jsts.geom.GeometryFilter||filter instanceof jsts.geom.GeometryComponentFilter){filter.filter(this);}else if(filter instanceof jsts.geom.CoordinateFilter){if(this.isEmpty()){return;}\nfilter.filter(this.getCoordinate());}};jsts.geom.Point.prototype.clone=function(){return new jsts.geom.Point(this.coordinate.clone(),this.factory);};jsts.geom.Point.prototype.getDimension=function(){return 0;};jsts.geom.Point.prototype.getBoundaryDimension=function(){return jsts.geom.Dimension.FALSE;};jsts.geom.Point.prototype.reverse=function(){return this.clone();};jsts.geom.Point.prototype.isValid=function(){if(!jsts.operation.valid.IsValidOp.isValid(this.getCoordinate())){return false;}\nreturn true;};jsts.geom.Point.prototype.normalize=function(){};jsts.geom.Point.prototype.compareToSameClass=function(other){var point=other;return this.getCoordinate().compareTo(point.getCoordinate());};jsts.geom.Point.prototype.getGeometryType=function(){return'Point';};jsts.geom.Point.prototype.hashCode=function(){return'Point_'+this.coordinate.hashCode();};jsts.geom.Point.prototype.CLASS_NAME='jsts.geom.Point';jsts.geom.Dimension=function(){};jsts.geom.Dimension.P=0;jsts.geom.Dimension.L=1;jsts.geom.Dimension.A=2;jsts.geom.Dimension.FALSE=-1;jsts.geom.Dimension.TRUE=-2;jsts.geom.Dimension.DONTCARE=-3;jsts.geom.Dimension.toDimensionSymbol=function(dimensionValue){switch(dimensionValue){case jsts.geom.Dimension.FALSE:return'F';case jsts.geom.Dimension.TRUE:return'T';case jsts.geom.Dimension.DONTCARE:return'*';case jsts.geom.Dimension.P:return'0';case jsts.geom.Dimension.L:return'1';case jsts.geom.Dimension.A:return'2';}\nthrow new jsts.IllegalArgumentError('Unknown dimension value: '+\ndimensionValue);};jsts.geom.Dimension.toDimensionValue=function(dimensionSymbol){switch(dimensionSymbol.toUpperCase()){case'F':return jsts.geom.Dimension.FALSE;case'T':return jsts.geom.Dimension.TRUE;case'*':return jsts.geom.Dimension.DONTCARE;case'0':return jsts.geom.Dimension.P;case'1':return jsts.geom.Dimension.L;case'2':return jsts.geom.Dimension.A;}\nthrow new jsts.error.IllegalArgumentError('Unknown dimension symbol: '+\ndimensionSymbol);};(function(){var Dimension=jsts.geom.Dimension;jsts.geom.LineString=function(points,factory){this.factory=factory;this.points=points||[];};jsts.geom.LineString.prototype=new jsts.geom.Geometry();jsts.geom.LineString.constructor=jsts.geom.LineString;jsts.geom.LineString.prototype.points=null;jsts.geom.LineString.prototype.getCoordinates=function(){return this.points;};jsts.geom.LineString.prototype.getCoordinateSequence=function(){return this.points;};jsts.geom.LineString.prototype.getCoordinateN=function(n){return this.points[n];};jsts.geom.LineString.prototype.getCoordinate=function(){if(this.isEmpty()){return null;}\nreturn this.getCoordinateN(0);};jsts.geom.LineString.prototype.getDimension=function(){return 1;};jsts.geom.LineString.prototype.getBoundaryDimension=function(){if(this.isClosed()){return Dimension.FALSE;}\nreturn 0;};jsts.geom.LineString.prototype.isEmpty=function(){return this.points.length===0;};jsts.geom.LineString.prototype.getNumPoints=function(){return this.points.length;};jsts.geom.LineString.prototype.getPointN=function(n){return this.getFactory().createPoint(this.points[n]);};jsts.geom.LineString.prototype.getStartPoint=function(){if(this.isEmpty()){return null;}\nreturn this.getPointN(0);};jsts.geom.LineString.prototype.getEndPoint=function(){if(this.isEmpty()){return null;}\nreturn this.getPointN(this.getNumPoints()-1);};jsts.geom.LineString.prototype.isClosed=function(){if(this.isEmpty()){return false;}\nreturn this.getCoordinateN(0).equals2D(this.getCoordinateN(this.points.length-1));};jsts.geom.LineString.prototype.isRing=function(){return this.isClosed()&&this.isSimple();};jsts.geom.LineString.prototype.getGeometryType=function(){return'LineString';};jsts.geom.LineString.prototype.getLength=function(){return jsts.algorithm.CGAlgorithms.computeLength(this.points);};jsts.geom.LineString.prototype.getBoundary=function(){return(new jsts.operation.BoundaryOp(this)).getBoundary();};jsts.geom.LineString.prototype.computeEnvelopeInternal=function(){if(this.isEmpty()){return new jsts.geom.Envelope();}\nvar env=new jsts.geom.Envelope();this.points.forEach(function(component){env.expandToInclude(component);});return env;};jsts.geom.LineString.prototype.equalsExact=function(other,tolerance){if(!this.isEquivalentClass(other)){return false;}\nif(this.points.length!==other.points.length){return false;}\nif(this.isEmpty()&&other.isEmpty()){return true;}\nreturn this.points.reduce(function(equal,point,i){return equal&&jsts.geom.Geometry.prototype.equal(point,other.points[i],tolerance);});};jsts.geom.LineString.prototype.isEquivalentClass=function(other){return other instanceof jsts.geom.LineString;};jsts.geom.LineString.prototype.compareToSameClass=function(o){var line=o;var i=0,il=this.points.length;var j=0,jl=line.points.length;while(i<il&&j<jl){var comparison=this.points[i].compareTo(line.points[j]);if(comparison!==0){return comparison;}\ni++;j++;}\nif(i<il){return 1;}\nif(j<jl){return-1;}\nreturn 0;};jsts.geom.LineString.prototype.apply=function(filter){if(filter instanceof jsts.geom.GeometryFilter||filter instanceof jsts.geom.GeometryComponentFilter){filter.filter(this);}else if(filter instanceof jsts.geom.CoordinateFilter){for(var i=0,len=this.points.length;i<len;i++){filter.filter(this.points[i]);}}else if(filter instanceof jsts.geom.CoordinateSequenceFilter){this.apply2.apply(this,arguments);}};jsts.geom.LineString.prototype.apply2=function(filter){if(this.points.length===0)\nreturn;for(var i=0;i<this.points.length;i++){filter.filter(this.points,i);if(filter.isDone())\nbreak;}\nif(filter.isGeometryChanged()){}};jsts.geom.LineString.prototype.clone=function(){var points=[];for(var i=0,len=this.points.length;i<len;i++){points.push(this.points[i].clone());}\nreturn this.factory.createLineString(points);};jsts.geom.LineString.prototype.normalize=function(){var i,il,j,ci,cj,len;len=this.points.length;il=parseInt(len/2);for(i=0;i<il;i++){j=len-1-i;ci=this.points[i];cj=this.points[j];if(!ci.equals(cj)){if(ci.compareTo(cj)>0){this.points.reverse();}\nreturn;}}};jsts.geom.LineString.prototype.CLASS_NAME='jsts.geom.LineString';})();(function(){jsts.geom.Polygon=function(shell,holes,factory){this.shell=shell||factory.createLinearRing(null);this.holes=holes||[];this.factory=factory;};jsts.geom.Polygon.prototype=new jsts.geom.Geometry();jsts.geom.Polygon.constructor=jsts.geom.Polygon;jsts.geom.Polygon.prototype.getCoordinate=function(){return this.shell.getCoordinate();};jsts.geom.Polygon.prototype.getCoordinates=function(){if(this.isEmpty()){return[];}\nvar coordinates=[];var k=-1;var shellCoordinates=this.shell.getCoordinates();for(var x=0;x<shellCoordinates.length;x++){k++;coordinates[k]=shellCoordinates[x];}\nfor(var i=0;i<this.holes.length;i++){var childCoordinates=this.holes[i].getCoordinates();for(var j=0;j<childCoordinates.length;j++){k++;coordinates[k]=childCoordinates[j];}}\nreturn coordinates;};jsts.geom.Polygon.prototype.getNumPoints=function(){var numPoints=this.shell.getNumPoints();for(var i=0;i<this.holes.length;i++){numPoints+=this.holes[i].getNumPoints();}\nreturn numPoints;};jsts.geom.Polygon.prototype.isEmpty=function(){return this.shell.isEmpty();};jsts.geom.Polygon.prototype.isRectangle=function(){if(this.getNumInteriorRing()!=0)return false;if(this.shell==null)return false;if(this.shell.getNumPoints()!=5)return false;var seq=this.shell.getCoordinateSequence();var env=this.getEnvelopeInternal();for(var i=0;i<5;i++){var x=seq[i].x;if(!(x==env.getMinX()||x==env.getMaxX()))return false;var y=seq[i].y;if(!(y==env.getMinY()||y==env.getMaxY()))return false;}\nvar prevX=seq[0].x;var prevY=seq[0].y;for(var i=1;i<=4;i++){var x=seq[i].x;var y=seq[i].y;var xChanged=x!=prevX;var yChanged=y!=prevY;if(xChanged==yChanged)\nreturn false;prevX=x;prevY=y;}\nreturn true;};jsts.geom.Polygon.prototype.getExteriorRing=function(){return this.shell;};jsts.geom.Polygon.prototype.getInteriorRingN=function(n){return this.holes[n];};jsts.geom.Polygon.prototype.getNumInteriorRing=function(){return this.holes.length;};jsts.geom.Polygon.prototype.getArea=function(){var area=0.0;area+=Math.abs(jsts.algorithm.CGAlgorithms.signedArea(this.shell.getCoordinateSequence()));for(var i=0;i<this.holes.length;i++){area-=Math.abs(jsts.algorithm.CGAlgorithms.signedArea(this.holes[i].getCoordinateSequence()));}\nreturn area;};jsts.geom.Polygon.prototype.getLength=function(){var len=0.0;len+=this.shell.getLength();for(var i=0;i<this.holes.length;i++){len+=this.holes[i].getLength();}\nreturn len;};jsts.geom.Polygon.prototype.getBoundary=function(){if(this.isEmpty()){return this.getFactory().createMultiLineString(null);}\nvar rings=[];rings[0]=this.shell.clone();for(var i=0,len=this.holes.length;i<len;i++){rings[i+1]=this.holes[i].clone();}\nif(rings.length<=1)\nreturn rings[0];return this.getFactory().createMultiLineString(rings);};jsts.geom.Polygon.prototype.computeEnvelopeInternal=function(){return this.shell.getEnvelopeInternal();};jsts.geom.Polygon.prototype.getDimension=function(){return 2;};jsts.geom.Polygon.prototype.getBoundaryDimension=function(){return 1;};jsts.geom.Polygon.prototype.equalsExact=function(other,tolerance){if(!this.isEquivalentClass(other)){return false;}\nif(this.isEmpty()&&other.isEmpty()){return true;}\nif(this.isEmpty()!==other.isEmpty()){return false;}\nif(!this.shell.equalsExact(other.shell,tolerance)){return false;}\nif(this.holes.length!==other.holes.length){return false;}\nif(this.holes.length!==other.holes.length){return false;}\nfor(var i=0;i<this.holes.length;i++){if(!(this.holes[i]).equalsExact(other.holes[i],tolerance)){return false;}}\nreturn true;};jsts.geom.Polygon.prototype.compareToSameClass=function(o){return this.shell.compareToSameClass(o.shell);};jsts.geom.Polygon.prototype.apply=function(filter){if(filter instanceof jsts.geom.GeometryComponentFilter){filter.filter(this);this.shell.apply(filter);for(var i=0,len=this.holes.length;i<len;i++){this.holes[i].apply(filter);}}else if(filter instanceof jsts.geom.GeometryFilter){filter.filter(this);}else if(filter instanceof jsts.geom.CoordinateFilter){this.shell.apply(filter);for(var i=0,len=this.holes.length;i<len;i++){this.holes[i].apply(filter);}}else if(filter instanceof jsts.geom.CoordinateSequenceFilter){this.apply2.apply(this,arguments);}};jsts.geom.Polygon.prototype.apply2=function(filter){this.shell.apply(filter);if(!filter.isDone()){for(var i=0;i<this.holes.length;i++){this.holes[i].apply(filter);if(filter.isDone())\nbreak;}}\nif(filter.isGeometryChanged()){}};jsts.geom.Polygon.prototype.clone=function(){var holes=[];for(var i=0,len=this.holes.length;i<len;i++){holes.push(this.holes[i].clone());}\nreturn this.factory.createPolygon(this.shell.clone(),holes);};jsts.geom.Polygon.prototype.normalize=function(){this.normalize2(this.shell,true);for(var i=0,len=this.holes.length;i<len;i++){this.normalize2(this.holes[i],false);}\nthis.holes.sort();};jsts.geom.Polygon.prototype.normalize2=function(ring,clockwise){if(ring.isEmpty()){return;}\nvar uniqueCoordinates=ring.points.slice(0,ring.points.length-1);var minCoordinate=jsts.geom.CoordinateArrays.minCoordinate(ring.points);jsts.geom.CoordinateArrays.scroll(uniqueCoordinates,minCoordinate);ring.points=uniqueCoordinates.concat();ring.points[uniqueCoordinates.length]=uniqueCoordinates[0];if(jsts.algorithm.CGAlgorithms.isCCW(ring.points)===clockwise){ring.points.reverse();}};jsts.geom.Polygon.prototype.getGeometryType=function(){return'Polygon';};jsts.geom.Polygon.prototype.CLASS_NAME='jsts.geom.Polygon';})();(function(){var Geometry=jsts.geom.Geometry;var TreeSet=javascript.util.TreeSet;var Arrays=javascript.util.Arrays;jsts.geom.GeometryCollection=function(geometries,factory){this.geometries=geometries||[];this.factory=factory;};jsts.geom.GeometryCollection.prototype=new Geometry();jsts.geom.GeometryCollection.constructor=jsts.geom.GeometryCollection;jsts.geom.GeometryCollection.prototype.isEmpty=function(){for(var i=0,len=this.geometries.length;i<len;i++){var geometry=this.getGeometryN(i);if(!geometry.isEmpty()){return false;}}\nreturn true;};jsts.geom.GeometryCollection.prototype.getArea=function(){var area=0.0;for(var i=0,len=this.geometries.length;i<len;i++){area+=this.getGeometryN(i).getArea();}\nreturn area;};jsts.geom.GeometryCollection.prototype.getLength=function(){var length=0.0;for(var i=0,len=this.geometries.length;i<len;i++){length+=this.getGeometryN(i).getLength();}\nreturn length;};jsts.geom.GeometryCollection.prototype.getCoordinate=function(){if(this.isEmpty())\nreturn null;return this.getGeometryN(0).getCoordinate();};jsts.geom.GeometryCollection.prototype.getCoordinates=function(){var coordinates=[];var k=-1;for(var i=0,len=this.geometries.length;i<len;i++){var geometry=this.getGeometryN(i);var childCoordinates=geometry.getCoordinates();for(var j=0;j<childCoordinates.length;j++){k++;coordinates[k]=childCoordinates[j];}}\nreturn coordinates;};jsts.geom.GeometryCollection.prototype.getNumGeometries=function(){return this.geometries.length;};jsts.geom.GeometryCollection.prototype.getGeometryN=function(n){var geometry=this.geometries[n];if(geometry instanceof jsts.geom.Coordinate){geometry=new jsts.geom.Point(geometry);}\nreturn geometry;};jsts.geom.GeometryCollection.prototype.getNumPoints=function(n){var numPoints=0;for(var i=0;i<this.geometries.length;i++){numPoints+=this.geometries[i].getNumPoints();}\nreturn numPoints;}\njsts.geom.GeometryCollection.prototype.equalsExact=function(other,tolerance){if(!this.isEquivalentClass(other)){return false;}\nif(this.geometries.length!==other.geometries.length){return false;}\nfor(var i=0,len=this.geometries.length;i<len;i++){var geometry=this.getGeometryN(i);if(!geometry.equalsExact(other.getGeometryN(i),tolerance)){return false;}}\nreturn true;};jsts.geom.GeometryCollection.prototype.clone=function(){var geometries=[];for(var i=0,len=this.geometries.length;i<len;i++){geometries.push(this.geometries[i].clone());}\nreturn this.factory.createGeometryCollection(geometries);};jsts.geom.GeometryCollection.prototype.normalize=function(){for(var i=0,len=this.geometries.length;i<len;i++){this.getGeometryN(i).normalize();}\nthis.geometries.sort();};jsts.geom.GeometryCollection.prototype.compareToSameClass=function(o){var theseElements=new TreeSet(Arrays.asList(this.geometries));var otherElements=new TreeSet(Arrays.asList(o.geometries));return this.compare(theseElements,otherElements);};jsts.geom.GeometryCollection.prototype.apply=function(filter){if(filter instanceof jsts.geom.GeometryFilter||filter instanceof jsts.geom.GeometryComponentFilter){filter.filter(this);for(var i=0,len=this.geometries.length;i<len;i++){this.getGeometryN(i).apply(filter);}}else if(filter instanceof jsts.geom.CoordinateFilter){for(var i=0,len=this.geometries.length;i<len;i++){this.getGeometryN(i).apply(filter);}}else if(filter instanceof jsts.geom.CoordinateSequenceFilter){this.apply2.apply(this,arguments);}};jsts.geom.GeometryCollection.prototype.apply2=function(filter){if(this.geometries.length==0)\nreturn;for(var i=0;i<this.geometries.length;i++){this.geometries[i].apply(filter);if(filter.isDone()){break;}}\nif(filter.isGeometryChanged()){}};jsts.geom.GeometryCollection.prototype.getDimension=function(){var dimension=jsts.geom.Dimension.FALSE;for(var i=0,len=this.geometries.length;i<len;i++){var geometry=this.getGeometryN(i);dimension=Math.max(dimension,geometry.getDimension());}\nreturn dimension;};jsts.geom.GeometryCollection.prototype.computeEnvelopeInternal=function(){var envelope=new jsts.geom.Envelope();for(var i=0,len=this.geometries.length;i<len;i++){var geometry=this.getGeometryN(i);envelope.expandToInclude(geometry.getEnvelopeInternal());}\nreturn envelope;};jsts.geom.GeometryCollection.prototype.CLASS_NAME='jsts.geom.GeometryCollection';})();jsts.algorithm.Centroid=function(geometry){this.areaBasePt=null;this.triangleCent3=new jsts.geom.Coordinate();this.areasum2=0;this.cg3=new jsts.geom.Coordinate();this.lineCentSum=new jsts.geom.Coordinate();this.totalLength=0;this.ptCount=0;this.ptCentSum=new jsts.geom.Coordinate();this.add(geometry);};jsts.algorithm.Centroid.getCentroid=function(geometry){var cent=new jsts.algorithm.Centroid(geometry);return cent.getCentroid();};jsts.algorithm.Centroid.centroid3=function(p1,p2,p3,c){c.x=p1.x+p2.x+p3.x;c.y=p1.y+p2.y+p3.y;};jsts.algorithm.Centroid.area2=function(p1,p2,p3){return(p2.x-p1.x)*(p3.y-p1.y)-(p3.x-p1.x)*(p2.y-p1.y);};jsts.algorithm.Centroid.prototype.add=function(geom){if(geom.isEmpty()){return;}\nif(geom instanceof jsts.geom.Point){this.addPoint(geom.getCoordinate());}else if(geom instanceof jsts.geom.LineString){this.addLineSegments(geom.getCoordinates());}else if(geom instanceof jsts.geom.Polygon){this.addPolygon(geom);}else if(geom instanceof jsts.geom.GeometryCollection){for(var i=0;i<geom.getNumGeometries();i++){this.add(geom.getGeometryN(i));}}};jsts.algorithm.Centroid.prototype.getCentroid=function(){var cent=new jsts.geom.Coordinate();if(Math.abs(this.areasum2)>0){cent.x=this.cg3.x/3/this.areasum2;cent.y=this.cg3.y/3/this.areasum2;}else if(this.totalLength>0){cent.x=this.lineCentSum.x/this.totalLength;cent.y=this.lineCentSum.y/this.totalLength;}else if(this.ptCount>0){cent.x=this.ptCentSum.x/this.ptCount;cent.y=this.ptCentSum.y/this.ptCount;}else{return null;}\nreturn cent;};jsts.algorithm.Centroid.prototype.setBasePoint=function(basePt){if(this.areaBasePt===null){this.areaBasePt=basePt;}};jsts.algorithm.Centroid.prototype.addPolygon=function(poly){this.addShell(poly.getExteriorRing().getCoordinates());for(var i=0;i<poly.getNumInteriorRing();i++){this.addHole(poly.getInteriorRingN(i).getCoordinates());}};jsts.algorithm.Centroid.prototype.addShell=function(pts){if(pts.length>0){this.setBasePoint(pts[0]);}\nvar isPositiveArea=!jsts.algorithm.CGAlgorithms.isCCW(pts);for(var i=0;i<pts.length-1;i++){this.addTriangle(this.areaBasePt,pts[i],pts[i+1],isPositiveArea);}\nthis.addLineSegments(pts);};jsts.algorithm.Centroid.prototype.addHole=function(pts){var isPositiveArea=jsts.algorithm.CGAlgorithms.isCCW(pts);for(var i=0;i<pts.length-1;i++){this.addTriangle(this.areaBasePt,pts[i],pts[i+1],isPositiveArea);}\nthis.addLineSegments(pts);};jsts.algorithm.Centroid.prototype.addTriangle=function(p0,p1,p2,isPositiveArea){var sign=(isPositiveArea)?1:-1;jsts.algorithm.Centroid.centroid3(p0,p1,p2,this.triangleCent3);var area2=jsts.algorithm.Centroid.area2(p0,p1,p2);this.cg3.x+=sign*area2*this.triangleCent3.x;this.cg3.y+=sign*area2*this.triangleCent3.y;this.areasum2+=sign*area2;};jsts.algorithm.Centroid.prototype.addLineSegments=function(pts){var lineLen=0;for(var i=0;i<pts.length-1;i++){var segmentLen=pts[i].distance(pts[i+1]);if(segmentLen===0){continue;}\nlineLen+=segmentLen;var midx=(pts[i].x+pts[i+1].x)/2;this.lineCentSum.x+=segmentLen*midx;var midy=(pts[i].y+pts[i+1].y)/2;this.lineCentSum.y+=segmentLen*midy;}\nthis.totalLength+=lineLen;if(lineLen===0&&pts.length>0){this.addPoint(pts[0]);}};jsts.algorithm.Centroid.prototype.addPoint=function(pt){this.ptCount+=1;this.ptCentSum.x+=pt.x;this.ptCentSum.y+=pt.y;};(function(){var EdgeRing=function(factory){this.deList=new javascript.util.ArrayList();this.factory=factory;};EdgeRing.findEdgeRingContaining=function(testEr,shellList){var testRing=testEr.getRing();var testEnv=testRing.getEnvelopeInternal();var testPt=testRing.getCoordinateN(0);var minShell=null;var minEnv=null;for(var it=shellList.iterator();it.hasNext();){var tryShell=it.next();var tryRing=tryShell.getRing();var tryEnv=tryRing.getEnvelopeInternal();if(minShell!=null)\nminEnv=minShell.getRing().getEnvelopeInternal();var isContained=false;if(tryEnv.equals(testEnv))\ncontinue;testPt=jsts.geom.CoordinateArrays.ptNotInList(testRing.getCoordinates(),tryRing.getCoordinates());if(tryEnv.contains(testEnv)&&jsts.algorithm.CGAlgorithms.isPointInRing(testPt,tryRing.getCoordinates()))\nisContained=true;if(isContained){if(minShell==null||minEnv.contains(tryEnv)){minShell=tryShell;}}}\nreturn minShell;};EdgeRing.ptNotInList=function(testPts,pts){for(var i=0;i<testPts.length;i++){var testPt=testPts[i];if(!isInList(testPt,pts))\nreturn testPt;}\nreturn null;};EdgeRing.isInList=function(pt,pts){for(var i=0;i<pts.length;i++){if(pt.equals(pts[i]))\nreturn true;}\nreturn false;}\nEdgeRing.prototype.factory=null;EdgeRing.prototype.deList=null;EdgeRing.prototype.ring=null;EdgeRing.prototype.ringPts=null;EdgeRing.prototype.holes=null;EdgeRing.prototype.add=function(de){this.deList.add(de);};EdgeRing.prototype.isHole=function(){var ring=this.getRing();return jsts.algorithm.CGAlgorithms.isCCW(ring.getCoordinates());};EdgeRing.prototype.addHole=function(hole){if(this.holes==null)\nthis.holes=new javascript.util.ArrayList();this.holes.add(hole);};EdgeRing.prototype.getPolygon=function(){var holeLR=null;if(this.holes!=null){holeLR=[];for(var i=0;i<this.holes.size();i++){holeLR[i]=this.holes.get(i);}}\nvar poly=this.factory.createPolygon(this.ring,holeLR);return poly;};EdgeRing.prototype.isValid=function(){this.getCoordinates();if(this.ringPts.length<=3)\nreturn false;this.getRing();return this.ring.isValid();};EdgeRing.prototype.getCoordinates=function(){if(this.ringPts==null){var coordList=new jsts.geom.CoordinateList();for(var i=this.deList.iterator();i.hasNext();){var de=i.next();var edge=de.getEdge();EdgeRing.addEdge(edge.getLine().getCoordinates(),de.getEdgeDirection(),coordList);}\nthis.ringPts=coordList.toCoordinateArray();}\nreturn this.ringPts;};EdgeRing.prototype.getLineString=function(){this.getCoordinates();return this.factory.createLineString(this.ringPts);};EdgeRing.prototype.getRing=function(){if(this.ring!=null)\nreturn this.ring;this.getCoordinates();if(this.ringPts.length<3)\nconsole.log(this.ringPts);try{this.ring=this.factory.createLinearRing(this.ringPts);}catch(ex){console.log(this.ringPts);}\nreturn this.ring;};EdgeRing.addEdge=function(coords,isForward,coordList){if(isForward){for(var i=0;i<coords.length;i++){coordList.add(coords[i],false);}}else{for(var i=coords.length-1;i>=0;i--){coordList.add(coords[i],false);}}};jsts.operation.polygonize.EdgeRing=EdgeRing;})();(function(){var GraphComponent=function(){};GraphComponent.setVisited=function(i,visited){while(i.hasNext()){var comp=i.next();comp.setVisited(visited);}};GraphComponent.setMarked=function(i,marked){while(i.hasNext()){var comp=i.next();comp.setMarked(marked);}};GraphComponent.getComponentWithVisitedState=function(i,visitedState){while(i.hasNext()){var comp=i.next();if(comp.isVisited()==visitedState)\nreturn comp;}\nreturn null;};GraphComponent.prototype._isMarked=false;GraphComponent.prototype._isVisited=false;GraphComponent.prototype.data;GraphComponent.prototype.isVisited=function(){return this._isVisited;};GraphComponent.prototype.setVisited=function(isVisited){this._isVisited=isVisited;};GraphComponent.prototype.isMarked=function(){return this._isMarked;};GraphComponent.prototype.setMarked=function(isMarked){this._isMarked=isMarked;};GraphComponent.prototype.setContext=function(data){this.data=data;};GraphComponent.prototype.getContext=function(){return data;};GraphComponent.prototype.setData=function(data){this.data=data;};GraphComponent.prototype.getData=function(){return data;};GraphComponent.prototype.isRemoved=function(){throw new jsts.error.AbstractMethodInvocationError();};jsts.planargraph.GraphComponent=GraphComponent;})();(function(){var GraphComponent=jsts.planargraph.GraphComponent;var Edge=function(de0,de1){if(de0===undefined){return;}\nthis.setDirectedEdges(de0,de1);};Edge.prototype=new GraphComponent();Edge.prototype.dirEdge=null;Edge.prototype.setDirectedEdges=function(de0,de1){this.dirEdge=[de0,de1];de0.setEdge(this);de1.setEdge(this);de0.setSym(de1);de1.setSym(de0);de0.getFromNode().addOutEdge(de0);de1.getFromNode().addOutEdge(de1);};Edge.prototype.getDirEdge=function(i){if(i instanceof jsts.planargraph.Node){this.getDirEdge2(i);}\nreturn this.dirEdge[i];};Edge.prototype.getDirEdge2=function(fromNode){if(this.dirEdge[0].getFromNode()==fromNode)\nreturn this.dirEdge[0];if(this.dirEdge[1].getFromNode()==fromNode)\nreturn this.dirEdge[1];return null;};Edge.prototype.getOppositeNode=function(node){if(this.dirEdge[0].getFromNode()==node)\nreturn this.dirEdge[0].getToNode();if(this.dirEdge[1].getFromNode()==node)\nreturn this.dirEdge[1].getToNode();return null;};Edge.prototype.remove=function(){this.dirEdge=null;};Edge.prototype.isRemoved=function(){return dirEdge==null;};jsts.planargraph.Edge=Edge;})();jsts.operation.polygonize.PolygonizeEdge=function(line){this.line=line;};jsts.operation.polygonize.PolygonizeEdge.prototype=new jsts.planargraph.Edge();jsts.operation.polygonize.PolygonizeEdge.prototype.line=null;jsts.operation.polygonize.PolygonizeEdge.prototype.getLine=function(){return this.line;};(function(){var ArrayList=javascript.util.ArrayList;var GraphComponent=jsts.planargraph.GraphComponent;var DirectedEdge=function(from,to,directionPt,edgeDirection){if(from===undefined){return;}\nthis.from=from;this.to=to;this.edgeDirection=edgeDirection;this.p0=from.getCoordinate();this.p1=directionPt;var dx=this.p1.x-this.p0.x;var dy=this.p1.y-this.p0.y;this.quadrant=jsts.geomgraph.Quadrant.quadrant(dx,dy);this.angle=Math.atan2(dy,dx);};DirectedEdge.prototype=new GraphComponent();DirectedEdge.toEdges=function(dirEdges){var edges=new ArrayList();for(var i=dirEdges.iterator();i.hasNext();){edges.add((i.next()).parentEdge);}\nreturn edges;};DirectedEdge.prototype.parentEdge=null;DirectedEdge.prototype.from=null;DirectedEdge.prototype.to=null;DirectedEdge.prototype.p0=null;DirectedEdge.prototype.p1=null;DirectedEdge.prototype.sym=null;DirectedEdge.prototype.edgeDirection=null;DirectedEdge.prototype.quadrant=null;DirectedEdge.prototype.angle=null;DirectedEdge.prototype.getEdge=function(){return this.parentEdge;};DirectedEdge.prototype.setEdge=function(parentEdge){this.parentEdge=parentEdge;};DirectedEdge.prototype.getQuadrant=function(){return this.quadrant;};DirectedEdge.prototype.getDirectionPt=function(){return this.p1;};DirectedEdge.prototype.getEdgeDirection=function(){return this.edgeDirection;};DirectedEdge.prototype.getFromNode=function(){return this.from;};DirectedEdge.prototype.getToNode=function(){return this.to;};DirectedEdge.prototype.getCoordinate=function(){return this.from.getCoordinate();};DirectedEdge.prototype.getAngle=function(){return this.angle;};DirectedEdge.prototype.getSym=function(){return this.sym;};DirectedEdge.prototype.setSym=function(sym){this.sym=sym;};DirectedEdge.prototype.remove=function(){this.sym=null;this.parentEdge=null;};DirectedEdge.prototype.isRemoved=function(){return this.parentEdge==null;};DirectedEdge.prototype.compareTo=function(obj){var de=obj;return this.compareDirection(de);};DirectedEdge.prototype.compareDirection=function(e){if(this.quadrant>e.quadrant)\nreturn 1;if(this.quadrant<e.quadrant)\nreturn-1;return jsts.algorithm.CGAlgorithms.computeOrientation(e.p0,e.p1,this.p1);};jsts.planargraph.DirectedEdge=DirectedEdge;})();(function(){var DirectedEdge=jsts.planargraph.DirectedEdge;var PolygonizeDirectedEdge=function(from,to,directionPt,edgeDirection){DirectedEdge.apply(this,arguments);};PolygonizeDirectedEdge.prototype=new DirectedEdge();PolygonizeDirectedEdge.prototype.edgeRing=null;PolygonizeDirectedEdge.prototype.next=null;PolygonizeDirectedEdge.prototype.label=-1;PolygonizeDirectedEdge.prototype.getLabel=function(){return this.label;};PolygonizeDirectedEdge.prototype.setLabel=function(label){this.label=label;};PolygonizeDirectedEdge.prototype.getNext=function(){return this.next;};PolygonizeDirectedEdge.prototype.setNext=function(next){this.next=next;};PolygonizeDirectedEdge.prototype.isInRing=function(){return this.edgeRing!=null;};PolygonizeDirectedEdge.prototype.setRing=function(edgeRing){this.edgeRing=edgeRing;};jsts.operation.polygonize.PolygonizeDirectedEdge=PolygonizeDirectedEdge;})();(function(){var ArrayList=javascript.util.ArrayList;var DirectedEdgeStar=function(){this.outEdges=new ArrayList();};DirectedEdgeStar.prototype.outEdges=null;DirectedEdgeStar.prototype.sorted=false;DirectedEdgeStar.prototype.add=function(de){this.outEdges.add(de);this.sorted=false;};DirectedEdgeStar.prototype.remove=function(de){this.outEdges.remove(de);};DirectedEdgeStar.prototype.iterator=function(){this.sortEdges();return this.outEdges.iterator();};DirectedEdgeStar.prototype.getDegree=function(){return this.outEdges.size();};DirectedEdgeStar.prototype.getCoordinate=function(){var it=iterator();if(!it.hasNext())\nreturn null;var e=it.next();return e.getCoordinate();};DirectedEdgeStar.prototype.getEdges=function(){this.sortEdges();return this.outEdges;};DirectedEdgeStar.prototype.sortEdges=function(){if(!this.sorted){var array=this.outEdges.toArray();array.sort(function(a,b){return a.compareTo(b);});this.outEdges=javascript.util.Arrays.asList(array);this.sorted=true;}};DirectedEdgeStar.prototype.getIndex=function(edge){if(edge instanceof jsts.planargraph.DirectedEdge){return this.getIndex2(edge);}else if(typeof(edge)==='number'){return this.getIndex3(edge);}\nthis.sortEdges();for(var i=0;i<this.outEdges.size();i++){var de=this.outEdges.get(i);if(de.getEdge()==edge)\nreturn i;}\nreturn-1;};DirectedEdgeStar.prototype.getIndex2=function(dirEdge){this.sortEdges();for(var i=0;i<this.outEdges.size();i++){var de=this.outEdges.get(i);if(de==dirEdge)\nreturn i;}\nreturn-1;};DirectedEdgeStar.prototype.getIndex3=function(i){var modi=toInt(i%this.outEdges.size());if(modi<0)\nmodi+=this.outEdges.size();return modi;};DirectedEdgeStar.prototype.getNextEdge=function(dirEdge){var i=this.getIndex(dirEdge);return this.outEdges.get(getIndex(i+1));};DirectedEdgeStar.prototype.getNextCWEdge=function(dirEdge){var i=this.getIndex(dirEdge);return this.outEdges.get(getIndex(i-1));};jsts.planargraph.DirectedEdgeStar=DirectedEdgeStar;})();(function(){var GraphComponent=jsts.planargraph.GraphComponent;var DirectedEdgeStar=jsts.planargraph.DirectedEdgeStar;var Node=function(pt,deStar){this.pt=pt;this.deStar=deStar||new DirectedEdgeStar();};Node.prototype=new GraphComponent();Node.getEdgesBetween=function(node0,node1){var edges0=DirectedEdge.toEdges(node0.getOutEdges().getEdges());var commonEdges=new javascript.util.HashSet(edges0);var edges1=DirectedEdge.toEdges(node1.getOutEdges().getEdges());commonEdges.retainAll(edges1);return commonEdges;};Node.prototype.pt=null;Node.prototype.deStar=null;Node.prototype.getCoordinate=function(){return this.pt;};Node.prototype.addOutEdge=function(de){this.deStar.add(de);};Node.prototype.getOutEdges=function(){return this.deStar;};Node.prototype.getDegree=function(){return this.deStar.getDegree();};Node.prototype.getIndex=function(edge){return this.deStar.getIndex(edge);};Node.prototype.remove=function(de){if(de===undefined){return this.remove2();}\nthis.deStar.remove(de);};Node.prototype.remove2=function(){this.pt=null;};Node.prototype.isRemoved=function(){return this.pt==null;};jsts.planargraph.Node=Node;})();(function(){var NodeMap=function(){this.nodeMap=new javascript.util.TreeMap();};NodeMap.prototype.nodeMap=null;NodeMap.prototype.add=function(n){this.nodeMap.put(n.getCoordinate(),n);return n;};NodeMap.prototype.remove=function(pt){return this.nodeMap.remove(pt);};NodeMap.prototype.find=function(coord){return this.nodeMap.get(coord);};NodeMap.prototype.iterator=function(){return this.nodeMap.values().iterator();};NodeMap.prototype.values=function(){return this.nodeMap.values();};jsts.planargraph.NodeMap=NodeMap;})();(function(){var ArrayList=javascript.util.ArrayList;var PlanarGraph=function(){this.edges=new javascript.util.HashSet();this.dirEdges=new javascript.util.HashSet();this.nodeMap=new jsts.planargraph.NodeMap();};PlanarGraph.prototype.edges=null;PlanarGraph.prototype.dirEdges=null;PlanarGraph.prototype.nodeMap=null;PlanarGraph.prototype.findNode=function(pt){return this.nodeMap.find(pt);};PlanarGraph.prototype.add=function(node){if(node instanceof jsts.planargraph.Edge){return this.add2(node);}else if(node instanceof jsts.planargraph.DirectedEdge){return this.add3(node);}\nthis.nodeMap.add(node);};PlanarGraph.prototype.add2=function(edge){this.edges.add(edge);this.add(edge.getDirEdge(0));this.add(edge.getDirEdge(1));};PlanarGraph.prototype.add3=function(dirEdge){this.dirEdges.add(dirEdge);};PlanarGraph.prototype.nodeIterator=function(){return this.nodeMap.iterator();};PlanarGraph.prototype.contains=function(e){if(e instanceof jsts.planargraph.DirectedEdge){return this.contains2(e);}\nreturn this.edges.contains(e);};PlanarGraph.prototype.contains2=function(de){return this.dirEdges.contains(de);};PlanarGraph.prototype.getNodes=function(){return this.nodeMap.values();};PlanarGraph.prototype.dirEdgeIterator=function(){return this.dirEdges.iterator();};PlanarGraph.prototype.edgeIterator=function(){return this.edges.iterator();};PlanarGraph.prototype.getEdges=function(){return this.edges;};PlanarGraph.prototype.remove=function(edge){if(edge instanceof jsts.planargraph.DirectedEdge){return this.remove2(edge);}\nthis.remove(edge.getDirEdge(0));this.remove(edge.getDirEdge(1));this.edges.remove(edge);this.edge.remove();};PlanarGraph.prototype.remove2=function(de){if(de instanceof jsts.planargraph.Node){return this.remove3(de);}\nvar sym=de.getSym();if(sym!=null)\nsym.setSym(null);de.getFromNode().remove(de);de.remove();this.dirEdges.remove(de);};PlanarGraph.prototype.remove3=function(node){var outEdges=node.getOutEdges().getEdges();for(var i=outEdges.iterator();i.hasNext();){var de=i.next();var sym=de.getSym();if(sym!=null)\nthis.remove(sym);this.dirEdges.remove(de);var edge=de.getEdge();if(edge!=null){this.edges.remove(edge);}}\nthis.nodeMap.remove(node.getCoordinate());node.remove();};PlanarGraph.prototype.findNodesOfDegree=function(degree){var nodesFound=new ArrayList();for(var i=this.nodeIterator();i.hasNext();){var node=i.next();if(node.getDegree()==degree)\nnodesFound.add(node);}\nreturn nodesFound;};jsts.planargraph.PlanarGraph=PlanarGraph;})();(function(){var ArrayList=javascript.util.ArrayList;var Stack=javascript.util.Stack;var HashSet=javascript.util.HashSet;var Assert=jsts.util.Assert;var EdgeRing=jsts.operation.polygonize.EdgeRing;var PolygonizeEdge=jsts.operation.polygonize.PolygonizeEdge;var PolygonizeDirectedEdge=jsts.operation.polygonize.PolygonizeDirectedEdge;var PlanarGraph=jsts.planargraph.PlanarGraph;var Node=jsts.planargraph.Node;var PolygonizeGraph=function(factory){PlanarGraph.apply(this);this.factory=factory;};PolygonizeGraph.prototype=new PlanarGraph();PolygonizeGraph.getDegreeNonDeleted=function(node){var edges=node.getOutEdges().getEdges();var degree=0;for(var i=edges.iterator();i.hasNext();){var de=i.next();if(!de.isMarked())\ndegree++;}\nreturn degree;};PolygonizeGraph.getDegree=function(node,label){var edges=node.getOutEdges().getEdges();var degree=0;for(var i=edges.iterator();i.hasNext();){var de=i.next();if(de.getLabel()==label)\ndegree++;}\nreturn degree;};PolygonizeGraph.deleteAllEdges=function(node){var edges=node.getOutEdges().getEdges();for(var i=edges.iterator();i.hasNext();){var de=i.next();de.setMarked(true);var sym=de.getSym();if(sym!=null)\nsym.setMarked(true);}};PolygonizeGraph.prototype.factory=null;PolygonizeGraph.prototype.addEdge=function(line){if(line.isEmpty()){return;}\nvar linePts=jsts.geom.CoordinateArrays.removeRepeatedPoints(line.getCoordinates());if(linePts.length<2){return;}\nvar startPt=linePts[0];var endPt=linePts[linePts.length-1];var nStart=this.getNode(startPt);var nEnd=this.getNode(endPt);var de0=new PolygonizeDirectedEdge(nStart,nEnd,linePts[1],true);var de1=new PolygonizeDirectedEdge(nEnd,nStart,linePts[linePts.length-2],false);var edge=new PolygonizeEdge(line);edge.setDirectedEdges(de0,de1);this.add(edge);};PolygonizeGraph.prototype.getNode=function(pt){var node=this.findNode(pt);if(node==null){node=new Node(pt);this.add(node);}\nreturn node;};PolygonizeGraph.prototype.computeNextCWEdges=function(){for(var iNode=this.nodeIterator();iNode.hasNext();){var node=iNode.next();PolygonizeGraph.computeNextCWEdges(node);}};PolygonizeGraph.prototype.convertMaximalToMinimalEdgeRings=function(ringEdges){for(var i=ringEdges.iterator();i.hasNext();){var de=i.next();var label=de.getLabel();var intNodes=PolygonizeGraph.findIntersectionNodes(de,label);if(intNodes==null)\ncontinue;for(var iNode=intNodes.iterator();iNode.hasNext();){var node=iNode.next();PolygonizeGraph.computeNextCCWEdges(node,label);}}};PolygonizeGraph.findIntersectionNodes=function(startDE,label){var de=startDE;var intNodes=null;do{var node=de.getFromNode();if(PolygonizeGraph.getDegree(node,label)>1){if(intNodes==null)\nintNodes=new ArrayList();intNodes.add(node);}\nde=de.getNext();Assert.isTrue(de!=null,'found null DE in ring');Assert.isTrue(de==startDE||!de.isInRing(),'found DE already in ring');}while(de!=startDE);return intNodes;};PolygonizeGraph.prototype.getEdgeRings=function(){this.computeNextCWEdges();PolygonizeGraph.label(this.dirEdges,-1);var maximalRings=PolygonizeGraph.findLabeledEdgeRings(this.dirEdges);this.convertMaximalToMinimalEdgeRings(maximalRings);var edgeRingList=new ArrayList();for(var i=this.dirEdges.iterator();i.hasNext();){var de=i.next();if(de.isMarked())\ncontinue;if(de.isInRing())\ncontinue;var er=this.findEdgeRing(de);edgeRingList.add(er);}\nreturn edgeRingList;};PolygonizeGraph.findLabeledEdgeRings=function(dirEdges){var edgeRingStarts=new ArrayList();var currLabel=1;for(var i=dirEdges.iterator();i.hasNext();){var de=i.next();if(de.isMarked())\ncontinue;if(de.getLabel()>=0)\ncontinue;edgeRingStarts.add(de);var edges=PolygonizeGraph.findDirEdgesInRing(de);PolygonizeGraph.label(edges,currLabel);currLabel++;}\nreturn edgeRingStarts;};PolygonizeGraph.prototype.deleteCutEdges=function(){this.computeNextCWEdges();PolygonizeGraph.findLabeledEdgeRings(this.dirEdges);var cutLines=new ArrayList();for(var i=this.dirEdges.iterator();i.hasNext();){var de=i.next();if(de.isMarked())\ncontinue;var sym=de.getSym();if(de.getLabel()==sym.getLabel()){de.setMarked(true);sym.setMarked(true);var e=de.getEdge();cutLines.add(e.getLine());}}\nreturn cutLines;};PolygonizeGraph.label=function(dirEdges,label){for(var i=dirEdges.iterator();i.hasNext();){var de=i.next();de.setLabel(label);}};PolygonizeGraph.computeNextCWEdges=function(node){var deStar=node.getOutEdges();var startDE=null;var prevDE=null;for(var i=deStar.getEdges().iterator();i.hasNext();){var outDE=i.next();if(outDE.isMarked())\ncontinue;if(startDE==null)\nstartDE=outDE;if(prevDE!=null){var sym=prevDE.getSym();sym.setNext(outDE);}\nprevDE=outDE;}\nif(prevDE!=null){var sym=prevDE.getSym();sym.setNext(startDE);}};PolygonizeGraph.computeNextCCWEdges=function(node,label){var deStar=node.getOutEdges();var firstOutDE=null;var prevInDE=null;var edges=deStar.getEdges();for(var i=edges.size()-1;i>=0;i--){var de=edges.get(i);var sym=de.getSym();var outDE=null;if(de.getLabel()==label)\noutDE=de;var inDE=null;if(sym.getLabel()==label)\ninDE=sym;if(outDE==null&&inDE==null)\ncontinue;if(inDE!=null){prevInDE=inDE;}\nif(outDE!=null){if(prevInDE!=null){prevInDE.setNext(outDE);prevInDE=null;}\nif(firstOutDE==null)\nfirstOutDE=outDE;}}\nif(prevInDE!=null){Assert.isTrue(firstOutDE!=null);prevInDE.setNext(firstOutDE);}};PolygonizeGraph.findDirEdgesInRing=function(startDE){var de=startDE;var edges=new ArrayList();do{edges.add(de);de=de.getNext();Assert.isTrue(de!=null,'found null DE in ring');Assert.isTrue(de==startDE||!de.isInRing(),'found DE already in ring');}while(de!=startDE);return edges;};PolygonizeGraph.prototype.findEdgeRing=function(startDE){var de=startDE;var er=new EdgeRing(this.factory);do{er.add(de);de.setRing(er);de=de.getNext();Assert.isTrue(de!=null,'found null DE in ring');Assert.isTrue(de==startDE||!de.isInRing(),'found DE already in ring');}while(de!=startDE);return er;};PolygonizeGraph.prototype.deleteDangles=function(){var nodesToRemove=this.findNodesOfDegree(1);var dangleLines=new HashSet();var nodeStack=new Stack();for(var i=nodesToRemove.iterator();i.hasNext();){nodeStack.push(i.next());}\nwhile(!nodeStack.isEmpty()){var node=nodeStack.pop();PolygonizeGraph.deleteAllEdges(node);var nodeOutEdges=node.getOutEdges().getEdges();for(var i=nodeOutEdges.iterator();i.hasNext();){var de=i.next();de.setMarked(true);var sym=de.getSym();if(sym!=null)\nsym.setMarked(true);var e=de.getEdge();dangleLines.add(e.getLine());var toNode=de.getToNode();if(PolygonizeGraph.getDegreeNonDeleted(toNode)==1)\nnodeStack.push(toNode);}}\nreturn dangleLines;};PolygonizeGraph.prototype.computeDepthParity=function(){while(true){var de=null;if(de==null)\nreturn;this.computeDepthParity(de);}};PolygonizeGraph.prototype.computeDepthParity=function(de){};jsts.operation.polygonize.PolygonizeGraph=PolygonizeGraph;})();jsts.index.strtree.Interval=function(){var other;if(arguments.length===1){other=arguments[0];return jsts.index.strtree.Interval(other.min,other.max);}else if(arguments.length===2){jsts.util.Assert.isTrue(this.min<=this.max);this.min=arguments[0];this.max=arguments[1];}};jsts.index.strtree.Interval.prototype.min=null;jsts.index.strtree.Interval.prototype.max=null;jsts.index.strtree.Interval.prototype.getCentre=function(){return(this.min+this.max)/2;};jsts.index.strtree.Interval.prototype.expandToInclude=function(other){this.max=Math.max(this.max,other.max);this.min=Math.min(this.min,other.min);return this;};jsts.index.strtree.Interval.prototype.intersects=function(other){return!(other.min>this.max||other.max<this.min);};jsts.index.strtree.Interval.prototype.equals=function(o){if(!(o instanceof jsts.index.strtree.Interval)){return false;}\nother=o;return this.min===other.min&&this.max===other.max;};jsts.geom.GeometryFactory=function(precisionModel){this.precisionModel=precisionModel||new jsts.geom.PrecisionModel();};jsts.geom.GeometryFactory.prototype.precisionModel=null;jsts.geom.GeometryFactory.prototype.getPrecisionModel=function(){return this.precisionModel;};jsts.geom.GeometryFactory.prototype.createPoint=function(coordinate){var point=new jsts.geom.Point(coordinate,this);return point;};jsts.geom.GeometryFactory.prototype.createLineString=function(coordinates){var lineString=new jsts.geom.LineString(coordinates,this);return lineString;};jsts.geom.GeometryFactory.prototype.createLinearRing=function(coordinates){var linearRing=new jsts.geom.LinearRing(coordinates,this);return linearRing;};jsts.geom.GeometryFactory.prototype.createPolygon=function(shell,holes){var polygon=new jsts.geom.Polygon(shell,holes,this);return polygon;};jsts.geom.GeometryFactory.prototype.createMultiPoint=function(points){if(points&&points[0]instanceof jsts.geom.Coordinate){var converted=[];var i;for(i=0;i<points.length;i++){converted.push(this.createPoint(points[i]));}\npoints=converted;}\nreturn new jsts.geom.MultiPoint(points,this);};jsts.geom.GeometryFactory.prototype.createMultiLineString=function(lineStrings){return new jsts.geom.MultiLineString(lineStrings,this);};jsts.geom.GeometryFactory.prototype.createMultiPolygon=function(polygons){return new jsts.geom.MultiPolygon(polygons,this);};jsts.geom.GeometryFactory.prototype.buildGeometry=function(geomList){var geomClass=null;var isHeterogeneous=false;var hasGeometryCollection=false;for(var i=geomList.iterator();i.hasNext();){var geom=i.next();var partClass=geom.CLASS_NAME;if(geomClass===null){geomClass=partClass;}\nif(!(partClass===geomClass)){isHeterogeneous=true;}\nif(geom.isGeometryCollectionBase())\nhasGeometryCollection=true;}\nif(geomClass===null){return this.createGeometryCollection(null);}\nif(isHeterogeneous||hasGeometryCollection){return this.createGeometryCollection(geomList.toArray());}\nvar geom0=geomList.get(0);var isCollection=geomList.size()>1;if(isCollection){if(geom0 instanceof jsts.geom.Polygon){return this.createMultiPolygon(geomList.toArray());}else if(geom0 instanceof jsts.geom.LineString){return this.createMultiLineString(geomList.toArray());}else if(geom0 instanceof jsts.geom.Point){return this.createMultiPoint(geomList.toArray());}\njsts.util.Assert.shouldNeverReachHere('Unhandled class: '+geom0);}\nreturn geom0;};jsts.geom.GeometryFactory.prototype.createGeometryCollection=function(geometries){return new jsts.geom.GeometryCollection(geometries,this);};jsts.geom.GeometryFactory.prototype.toGeometry=function(envelope){if(envelope.isNull()){return this.createPoint(null);}\nif(envelope.getMinX()===envelope.getMaxX()&&envelope.getMinY()===envelope.getMaxY()){return this.createPoint(new jsts.geom.Coordinate(envelope.getMinX(),envelope.getMinY()));}\nif(envelope.getMinX()===envelope.getMaxX()||envelope.getMinY()===envelope.getMaxY()){return this.createLineString([new jsts.geom.Coordinate(envelope.getMinX(),envelope.getMinY()),new jsts.geom.Coordinate(envelope.getMaxX(),envelope.getMaxY())]);}\nreturn this.createPolygon(this.createLinearRing([new jsts.geom.Coordinate(envelope.getMinX(),envelope.getMinY()),new jsts.geom.Coordinate(envelope.getMinX(),envelope.getMaxY()),new jsts.geom.Coordinate(envelope.getMaxX(),envelope.getMaxY()),new jsts.geom.Coordinate(envelope.getMaxX(),envelope.getMinY()),new jsts.geom.Coordinate(envelope.getMinX(),envelope.getMinY())]),null);};jsts.geomgraph.NodeFactory=function(){};jsts.geomgraph.NodeFactory.prototype.createNode=function(coord){return new jsts.geomgraph.Node(coord,null);};(function(){jsts.geomgraph.Position=function(){};jsts.geomgraph.Position.ON=0;jsts.geomgraph.Position.LEFT=1;jsts.geomgraph.Position.RIGHT=2;jsts.geomgraph.Position.opposite=function(position){if(position===jsts.geomgraph.Position.LEFT){return jsts.geomgraph.Position.RIGHT;}\nif(position===jsts.geomgraph.Position.RIGHT){return jsts.geomgraph.Position.LEFT;}\nreturn position;};})();jsts.geomgraph.TopologyLocation=function(){this.location=[];if(arguments.length===3){var on=arguments[0];var left=arguments[1];var right=arguments[2];this.init(3);this.location[jsts.geomgraph.Position.ON]=on;this.location[jsts.geomgraph.Position.LEFT]=left;this.location[jsts.geomgraph.Position.RIGHT]=right;}else if(arguments[0]instanceof jsts.geomgraph.TopologyLocation){var gl=arguments[0];this.init(gl.location.length);if(gl!=null){for(var i=0;i<this.location.length;i++){this.location[i]=gl.location[i];}}}else if(typeof arguments[0]==='number'){var on=arguments[0];this.init(1);this.location[jsts.geomgraph.Position.ON]=on;}else if(arguments[0]instanceof Array){var location=arguments[0];this.init(location.length);}};jsts.geomgraph.TopologyLocation.prototype.location=null;jsts.geomgraph.TopologyLocation.prototype.init=function(size){this.location[size-1]=null;this.setAllLocations(jsts.geom.Location.NONE);};jsts.geomgraph.TopologyLocation.prototype.get=function(posIndex){if(posIndex<this.location.length)\nreturn this.location[posIndex];return jsts.geom.Location.NONE;};jsts.geomgraph.TopologyLocation.prototype.isNull=function(){for(var i=0;i<this.location.length;i++){if(this.location[i]!==jsts.geom.Location.NONE)\nreturn false;}\nreturn true;};jsts.geomgraph.TopologyLocation.prototype.isAnyNull=function(){for(var i=0;i<this.location.length;i++){if(this.location[i]===jsts.geom.Location.NONE)\nreturn true;}\nreturn false;};jsts.geomgraph.TopologyLocation.prototype.isEqualOnSide=function(le,locIndex){return this.location[locIndex]==le.location[locIndex];};jsts.geomgraph.TopologyLocation.prototype.isArea=function(){return this.location.length>1;};jsts.geomgraph.TopologyLocation.prototype.isLine=function(){return this.location.length===1;};jsts.geomgraph.TopologyLocation.prototype.flip=function(){if(this.location.length<=1)\nreturn;var temp=this.location[jsts.geomgraph.Position.LEFT];this.location[jsts.geomgraph.Position.LEFT]=this.location[jsts.geomgraph.Position.RIGHT];this.location[jsts.geomgraph.Position.RIGHT]=temp;};jsts.geomgraph.TopologyLocation.prototype.setAllLocations=function(locValue){for(var i=0;i<this.location.length;i++){this.location[i]=locValue;}};jsts.geomgraph.TopologyLocation.prototype.setAllLocationsIfNull=function(locValue){for(var i=0;i<this.location.length;i++){if(this.location[i]===jsts.geom.Location.NONE)\nthis.location[i]=locValue;}};jsts.geomgraph.TopologyLocation.prototype.setLocation=function(locIndex,locValue){if(locValue!==undefined){this.location[locIndex]=locValue;}else{this.setLocation(jsts.geomgraph.Position.ON,locIndex);}};jsts.geomgraph.TopologyLocation.prototype.getLocations=function(){return location;};jsts.geomgraph.TopologyLocation.prototype.setLocations=function(on,left,right){this.location[jsts.geomgraph.Position.ON]=on;this.location[jsts.geomgraph.Position.LEFT]=left;this.location[jsts.geomgraph.Position.RIGHT]=right;};jsts.geomgraph.TopologyLocation.prototype.allPositionsEqual=function(loc){for(var i=0;i<this.location.length;i++){if(this.location[i]!==loc)\nreturn false;}\nreturn true;};jsts.geomgraph.TopologyLocation.prototype.merge=function(gl){if(gl.location.length>this.location.length){var newLoc=[];newLoc[jsts.geomgraph.Position.ON]=this.location[jsts.geomgraph.Position.ON];newLoc[jsts.geomgraph.Position.LEFT]=jsts.geom.Location.NONE;newLoc[jsts.geomgraph.Position.RIGHT]=jsts.geom.Location.NONE;this.location=newLoc;}\nfor(var i=0;i<this.location.length;i++){if(this.location[i]===jsts.geom.Location.NONE&&i<gl.location.length)\nthis.location[i]=gl.location[i];}};jsts.geomgraph.Label=function(){this.elt=[];var geomIndex,onLoc,leftLoc,lbl,rightLoc;if(arguments.length===4){geomIndex=arguments[0];onLoc=arguments[1];leftLoc=arguments[2];rightLoc=arguments[3];this.elt[0]=new jsts.geomgraph.TopologyLocation(jsts.geom.Location.NONE,jsts.geom.Location.NONE,jsts.geom.Location.NONE);this.elt[1]=new jsts.geomgraph.TopologyLocation(jsts.geom.Location.NONE,jsts.geom.Location.NONE,jsts.geom.Location.NONE);this.elt[geomIndex].setLocations(onLoc,leftLoc,rightLoc);}else if(arguments.length===3){onLoc=arguments[0];leftLoc=arguments[1];rightLoc=arguments[2];this.elt[0]=new jsts.geomgraph.TopologyLocation(onLoc,leftLoc,rightLoc);this.elt[1]=new jsts.geomgraph.TopologyLocation(onLoc,leftLoc,rightLoc);}else if(arguments.length===2){geomIndex=arguments[0];onLoc=arguments[1];this.elt[0]=new jsts.geomgraph.TopologyLocation(jsts.geom.Location.NONE);this.elt[1]=new jsts.geomgraph.TopologyLocation(jsts.geom.Location.NONE);this.elt[geomIndex].setLocation(onLoc);}else if(arguments[0]instanceof jsts.geomgraph.Label){lbl=arguments[0];this.elt[0]=new jsts.geomgraph.TopologyLocation(lbl.elt[0]);this.elt[1]=new jsts.geomgraph.TopologyLocation(lbl.elt[1]);}else if(typeof arguments[0]==='number'){onLoc=arguments[0];this.elt[0]=new jsts.geomgraph.TopologyLocation(onLoc);this.elt[1]=new jsts.geomgraph.TopologyLocation(onLoc);}};jsts.geomgraph.Label.toLineLabel=function(label){var i,lineLabel=new jsts.geomgraph.Label(jsts.geom.Location.NONE);for(i=0;i<2;i++){lineLabel.setLocation(i,label.getLocation(i));}\nreturn lineLabel;};jsts.geomgraph.Label.prototype.elt=null;jsts.geomgraph.Label.prototype.flip=function(){this.elt[0].flip();this.elt[1].flip();};jsts.geomgraph.Label.prototype.getLocation=function(geomIndex,posIndex){if(arguments.length==1){return this.getLocation2.apply(this,arguments);}\nreturn this.elt[geomIndex].get(posIndex);};jsts.geomgraph.Label.prototype.getLocation2=function(geomIndex){return this.elt[geomIndex].get(jsts.geomgraph.Position.ON);};jsts.geomgraph.Label.prototype.setLocation=function(geomIndex,posIndex,location){if(arguments.length==2){this.setLocation2.apply(this,arguments);return;}\nthis.elt[geomIndex].setLocation(posIndex,location);};jsts.geomgraph.Label.prototype.setLocation2=function(geomIndex,location){this.elt[geomIndex].setLocation(jsts.geomgraph.Position.ON,location);};jsts.geomgraph.Label.prototype.setAllLocations=function(geomIndex,location){this.elt[geomIndex].setAllLocations(location);};jsts.geomgraph.Label.prototype.setAllLocationsIfNull=function(geomIndex,location){if(arguments.length==1){this.setAllLocationsIfNull2.apply(this,arguments);return;}\nthis.elt[geomIndex].setAllLocationsIfNull(location);};jsts.geomgraph.Label.prototype.setAllLocationsIfNull2=function(location){this.setAllLocationsIfNull(0,location);this.setAllLocationsIfNull(1,location);};jsts.geomgraph.Label.prototype.merge=function(lbl){var i;for(i=0;i<2;i++){if(this.elt[i]===null&&lbl.elt[i]!==null){this.elt[i]=new jsts.geomgraph.TopologyLocation(lbl.elt[i]);}else{this.elt[i].merge(lbl.elt[i]);}}};jsts.geomgraph.Label.prototype.getGeometryCount=function(){var count=0;if(!this.elt[0].isNull()){count++;}\nif(!this.elt[1].isNull()){count++;}\nreturn count;};jsts.geomgraph.Label.prototype.isNull=function(geomIndex){return this.elt[geomIndex].isNull();};jsts.geomgraph.Label.prototype.isAnyNull=function(geomIndex){return this.elt[geomIndex].isAnyNull();};jsts.geomgraph.Label.prototype.isArea=function(){if(arguments.length==1){return this.isArea2(arguments[0]);}\nreturn this.elt[0].isArea()||this.elt[1].isArea();};jsts.geomgraph.Label.prototype.isArea2=function(geomIndex){return this.elt[geomIndex].isArea();};jsts.geomgraph.Label.prototype.isLine=function(geomIndex){return this.elt[geomIndex].isLine();};jsts.geomgraph.Label.prototype.isEqualOnSide=function(lbl,side){return this.elt[0].isEqualOnSide(lbl.elt[0],side)&&this.elt[1].isEqualOnSide(lbl.elt[1],side);};jsts.geomgraph.Label.prototype.allPositionsEqual=function(geomIndex,loc){return this.elt[geomIndex].allPositionsEqual(loc);};jsts.geomgraph.Label.prototype.toLine=function(geomIndex){if(this.elt[geomIndex].isArea()){this.elt[geomIndex]=new jsts.geomgraph.TopologyLocation(this.elt[geomIndex].location[0]);}};jsts.geomgraph.EdgeRing=function(start,geometryFactory){this.edges=[];this.pts=[];this.holes=[];this.label=new jsts.geomgraph.Label(jsts.geom.Location.NONE);this.geometryFactory=geometryFactory;if(start){this.computePoints(start);this.computeRing();}};jsts.geomgraph.EdgeRing.prototype.startDe=null;jsts.geomgraph.EdgeRing.prototype.maxNodeDegree=-1;jsts.geomgraph.EdgeRing.prototype.edges=null;jsts.geomgraph.EdgeRing.prototype.pts=null;jsts.geomgraph.EdgeRing.prototype.label=null;jsts.geomgraph.EdgeRing.prototype.ring=null;jsts.geomgraph.EdgeRing.prototype._isHole=null;jsts.geomgraph.EdgeRing.prototype.shell=null;jsts.geomgraph.EdgeRing.prototype.holes=null;jsts.geomgraph.EdgeRing.prototype.geometryFactory=null;jsts.geomgraph.EdgeRing.prototype.isIsolated=function(){return(this.label.getGeometryCount()==1);};jsts.geomgraph.EdgeRing.prototype.isHole=function(){return this._isHole;};jsts.geomgraph.EdgeRing.prototype.getCoordinate=function(i){return this.pts[i];};jsts.geomgraph.EdgeRing.prototype.getLinearRing=function(){return this.ring;};jsts.geomgraph.EdgeRing.prototype.getLabel=function(){return this.label;};jsts.geomgraph.EdgeRing.prototype.isShell=function(){return this.shell===null;};jsts.geomgraph.EdgeRing.prototype.getShell=function(){return this.shell;};jsts.geomgraph.EdgeRing.prototype.setShell=function(shell){this.shell=shell;if(shell!==null)\nshell.addHole(this);};jsts.geomgraph.EdgeRing.prototype.addHole=function(ring){this.holes.push(ring);};jsts.geomgraph.EdgeRing.prototype.toPolygon=function(geometryFactory){var holeLR=[];for(var i=0;i<this.holes.length;i++){holeLR[i]=this.holes[i].getLinearRing();}\nvar poly=this.geometryFactory.createPolygon(this.getLinearRing(),holeLR);return poly;};jsts.geomgraph.EdgeRing.prototype.computeRing=function(){if(this.ring!==null)\nreturn;var coord=[];for(var i=0;i<this.pts.length;i++){coord[i]=this.pts[i];}\nthis.ring=this.geometryFactory.createLinearRing(coord);this._isHole=jsts.algorithm.CGAlgorithms.isCCW(this.ring.getCoordinates());};jsts.geomgraph.EdgeRing.prototype.getNext=function(de){throw new jsts.error.AbstractInvocationError();};jsts.geomgraph.EdgeRing.prototype.setEdgeRing=function(de,er){throw new jsts.error.AbstractInvocationError();};jsts.geomgraph.EdgeRing.prototype.getEdges=function(){return this.edges;};jsts.geomgraph.EdgeRing.prototype.computePoints=function(start){this.startDe=start;var de=start;var isFirstEdge=true;do{if(de===null)\nthrow new jsts.error.TopologyError('Found null DirectedEdge');if(de.getEdgeRing()===this)\nthrow new jsts.error.TopologyError('Directed Edge visited twice during ring-building at '+\nde.getCoordinate());this.edges.push(de);var label=de.getLabel();jsts.util.Assert.isTrue(label.isArea());this.mergeLabel(label);this.addPoints(de.getEdge(),de.isForward(),isFirstEdge);isFirstEdge=false;this.setEdgeRing(de,this);de=this.getNext(de);}while(de!==this.startDe);};jsts.geomgraph.EdgeRing.prototype.getMaxNodeDegree=function(){if(this.maxNodeDegree<0)\nthis.computeMaxNodeDegree();return this.maxNodeDegree;};jsts.geomgraph.EdgeRing.prototype.computeMaxNodeDegree=function(){this.maxNodeDegree=0;var de=this.startDe;do{var node=de.getNode();var degree=node.getEdges().getOutgoingDegree(this);if(degree>this.maxNodeDegree)\nthis.maxNodeDegree=degree;de=this.getNext(de);}while(de!==this.startDe);this.maxNodeDegree*=2;};jsts.geomgraph.EdgeRing.prototype.setInResult=function(){var de=this.startDe;do{de.getEdge().setInResult(true);de=de.getNext();}while(de!=this.startDe);};jsts.geomgraph.EdgeRing.prototype.mergeLabel=function(deLabel){this.mergeLabel2(deLabel,0);this.mergeLabel2(deLabel,1);};jsts.geomgraph.EdgeRing.prototype.mergeLabel2=function(deLabel,geomIndex){var loc=deLabel.getLocation(geomIndex,jsts.geomgraph.Position.RIGHT);if(loc==jsts.geom.Location.NONE)\nreturn;if(this.label.getLocation(geomIndex)===jsts.geom.Location.NONE){this.label.setLocation(geomIndex,loc);return;}};jsts.geomgraph.EdgeRing.prototype.addPoints=function(edge,isForward,isFirstEdge){var edgePts=edge.getCoordinates();if(isForward){var startIndex=1;if(isFirstEdge)\nstartIndex=0;for(var i=startIndex;i<edgePts.length;i++){this.pts.push(edgePts[i]);}}else{var startIndex=edgePts.length-2;if(isFirstEdge)\nstartIndex=edgePts.length-1;for(var i=startIndex;i>=0;i--){this.pts.push(edgePts[i]);}}};jsts.geomgraph.EdgeRing.prototype.containsPoint=function(p){var shell=this.getLinearRing();var env=shell.getEnvelopeInternal();if(!env.contains(p))\nreturn false;if(!jsts.algorithm.CGAlgorithms.isPointInRing(p,shell.getCoordinates()))\nreturn false;for(var i=0;i<this.holes.length;i++){var hole=this.holes[i];if(hole.containsPoint(p))\nreturn false;}\nreturn true;};(function(){jsts.geom.LinearRing=function(points,factory){jsts.geom.LineString.apply(this,arguments);};jsts.geom.LinearRing.prototype=new jsts.geom.LineString();jsts.geom.LinearRing.constructor=jsts.geom.LinearRing;jsts.geom.LinearRing.prototype.getBoundaryDimension=function(){return jsts.geom.Dimension.FALSE;};jsts.geom.LinearRing.prototype.isSimple=function(){return true;};jsts.geom.LinearRing.prototype.getGeometryType=function(){return'LinearRing';};jsts.geom.LinearRing.MINIMUM_VALID_SIZE=4;jsts.geom.LinearRing.prototype.CLASS_NAME='jsts.geom.LinearRing';})();jsts.index.strtree.Boundable=function(){};jsts.index.strtree.Boundable.prototype.getBounds=function(){throw new jsts.error.AbstractMethodInvocationError();};jsts.index.strtree.AbstractNode=function(level){this.level=level;this.childBoundables=[];};jsts.index.strtree.AbstractNode.prototype=new jsts.index.strtree.Boundable();jsts.index.strtree.AbstractNode.constructor=jsts.index.strtree.AbstractNode;jsts.index.strtree.AbstractNode.prototype.childBoundables=null;jsts.index.strtree.AbstractNode.prototype.bounds=null;jsts.index.strtree.AbstractNode.prototype.level=null;jsts.index.strtree.AbstractNode.prototype.getChildBoundables=function(){return this.childBoundables;};jsts.index.strtree.AbstractNode.prototype.computeBounds=function(){throw new jsts.error.AbstractMethodInvocationError();};jsts.index.strtree.AbstractNode.prototype.getBounds=function(){if(this.bounds===null){this.bounds=this.computeBounds();}\nreturn this.bounds;};jsts.index.strtree.AbstractNode.prototype.getLevel=function(){return this.level;};jsts.index.strtree.AbstractNode.prototype.addChildBoundable=function(childBoundable){this.childBoundables.push(childBoundable);};(function(){jsts.noding.Noder=function(){};jsts.noding.Noder.prototype.computeNodes=jsts.abstractFunc;jsts.noding.Noder.prototype.getNodedSubstrings=jsts.abstractFunc;})();(function(){var Noder=jsts.noding.Noder;jsts.noding.SinglePassNoder=function(){};jsts.noding.SinglePassNoder.prototype=new Noder();jsts.noding.SinglePassNoder.constructor=jsts.noding.SinglePassNoder;jsts.noding.SinglePassNoder.prototype.segInt=null;jsts.noding.SinglePassNoder.prototype.setSegmentIntersector=function(segInt){this.segInt=segInt;};})();jsts.index.SpatialIndex=function(){};jsts.index.SpatialIndex.prototype.insert=function(itemEnv,item){throw new jsts.error.AbstractMethodInvocationError();};jsts.index.SpatialIndex.prototype.query=function(searchEnv,visitor){throw new jsts.error.AbstractMethodInvocationError();};jsts.index.SpatialIndex.prototype.remove=function(itemEnv,item){throw new jsts.error.AbstractMethodInvocationError();};jsts.index.strtree.AbstractSTRtree=function(nodeCapacity){if(nodeCapacity===undefined)\nreturn;this.itemBoundables=[];jsts.util.Assert.isTrue(nodeCapacity>1,'Node capacity must be greater than 1');this.nodeCapacity=nodeCapacity;};jsts.index.strtree.AbstractSTRtree.IntersectsOp=function(){};jsts.index.strtree.AbstractSTRtree.IntersectsOp.prototype.intersects=function(aBounds,bBounds){throw new jsts.error.AbstractMethodInvocationError();};jsts.index.strtree.AbstractSTRtree.prototype.root=null;jsts.index.strtree.AbstractSTRtree.prototype.built=false;jsts.index.strtree.AbstractSTRtree.prototype.itemBoundables=null;jsts.index.strtree.AbstractSTRtree.prototype.nodeCapacity=null;jsts.index.strtree.AbstractSTRtree.prototype.build=function(){jsts.util.Assert.isTrue(!this.built);this.root=this.itemBoundables.length===0?this.createNode(0):this.createHigherLevels(this.itemBoundables,-1);this.built=true;};jsts.index.strtree.AbstractSTRtree.prototype.createNode=function(level){throw new jsts.error.AbstractMethodInvocationError();};jsts.index.strtree.AbstractSTRtree.prototype.createParentBoundables=function(childBoundables,newLevel){jsts.util.Assert.isTrue(!(childBoundables.length===0));var parentBoundables=[];parentBoundables.push(this.createNode(newLevel));var sortedChildBoundables=[];for(var i=0;i<childBoundables.length;i++){sortedChildBoundables.push(childBoundables[i]);}\nsortedChildBoundables.sort(this.getComparator());for(var i=0;i<sortedChildBoundables.length;i++){var childBoundable=sortedChildBoundables[i];if(this.lastNode(parentBoundables).getChildBoundables().length===this.getNodeCapacity()){parentBoundables.push(this.createNode(newLevel));}\nthis.lastNode(parentBoundables).addChildBoundable(childBoundable);}\nreturn parentBoundables;};jsts.index.strtree.AbstractSTRtree.prototype.lastNode=function(nodes){return nodes[nodes.length-1];};jsts.index.strtree.AbstractSTRtree.prototype.compareDoubles=function(a,b){return a>b?1:a<b?-1:0;};jsts.index.strtree.AbstractSTRtree.prototype.createHigherLevels=function(boundablesOfALevel,level){jsts.util.Assert.isTrue(!(boundablesOfALevel.length===0));var parentBoundables=this.createParentBoundables(boundablesOfALevel,level+1);if(parentBoundables.length===1){return parentBoundables[0];}\nreturn this.createHigherLevels(parentBoundables,level+1);};jsts.index.strtree.AbstractSTRtree.prototype.getRoot=function(){if(!this.built)\nthis.build();return this.root;};jsts.index.strtree.AbstractSTRtree.prototype.getNodeCapacity=function(){return this.nodeCapacity;};jsts.index.strtree.AbstractSTRtree.prototype.size=function(){if(arguments.length===1){return this.size2(arguments[0]);}\nif(!this.built){this.build();}\nif(this.itemBoundables.length===0){return 0;}\nreturn this.size2(root);};jsts.index.strtree.AbstractSTRtree.prototype.size2=function(node){var size=0;var childBoundables=node.getChildBoundables();for(var i=0;i<childBoundables.length;i++){var childBoundable=childBoundables[i];if(childBoundable instanceof jsts.index.strtree.AbstractNode){size+=this.size(childBoundable);}else if(childBoundable instanceof jsts.index.strtree.ItemBoundable){size+=1;}}\nreturn size;};jsts.index.strtree.AbstractSTRtree.prototype.depth=function(){if(arguments.length===1){return this.depth2(arguments[0]);}\nif(!this.built){this.build();}\nif(this.itemBoundables.length===0){return 0;}\nreturn this.depth2(root);};jsts.index.strtree.AbstractSTRtree.prototype.depth2=function(){var maxChildDepth=0;var childBoundables=node.getChildBoundables();for(var i=0;i<childBoundables.length;i++){var childBoundable=childBoundables[i];if(childBoundable instanceof jsts.index.strtree.AbstractNode){var childDepth=this.depth(childBoundable);if(childDepth>maxChildDepth)\nmaxChildDepth=childDepth;}}\nreturn maxChildDepth+1;};jsts.index.strtree.AbstractSTRtree.prototype.insert=function(bounds,item){jsts.util.Assert.isTrue(!this.built,'Cannot insert items into an STR packed R-tree after it has been built.');this.itemBoundables.push(new jsts.index.strtree.ItemBoundable(bounds,item));};jsts.index.strtree.AbstractSTRtree.prototype.query=function(searchBounds){if(arguments.length>1){this.query2.apply(this,arguments);}\nif(!this.built){this.build();}\nvar matches=[];if(this.itemBoundables.length===0){jsts.util.Assert.isTrue(this.root.getBounds()===null);return matches;}\nif(this.getIntersectsOp().intersects(this.root.getBounds(),searchBounds)){this.query3(searchBounds,this.root,matches);}\nreturn matches;};jsts.index.strtree.AbstractSTRtree.prototype.query2=function(searchBounds,visitor){if(arguments.length>2){this.query3.apply(this,arguments);}\nif(!this.built){this.build();}\nif(this.itemBoundables.length===0){jsts.util.Assert.isTrue(this.root.getBounds()===null);}\nif(this.getIntersectsOp().intersects(this.root.getBounds(),searchBounds)){this.query4(searchBounds,this.root,visitor);}};jsts.index.strtree.AbstractSTRtree.prototype.query3=function(searchBounds,node,matches){if(!(arguments[2]instanceof Array)){this.query4.apply(this,arguments);}\nvar childBoundables=node.getChildBoundables();for(var i=0;i<childBoundables.length;i++){var childBoundable=childBoundables[i];if(!this.getIntersectsOp().intersects(childBoundable.getBounds(),searchBounds)){continue;}\nif(childBoundable instanceof jsts.index.strtree.AbstractNode){this.query3(searchBounds,childBoundable,matches);}else if(childBoundable instanceof jsts.index.strtree.ItemBoundable){matches.push(childBoundable.getItem());}else{jsts.util.Assert.shouldNeverReachHere();}}};jsts.index.strtree.AbstractSTRtree.prototype.query4=function(searchBounds,node,visitor){var childBoundables=node.getChildBoundables();for(var i=0;i<childBoundables.length;i++){var childBoundable=childBoundables[i];if(!this.getIntersectsOp().intersects(childBoundable.getBounds(),searchBounds)){continue;}\nif(childBoundable instanceof jsts.index.strtree.AbstractNode){this.query4(searchBounds,childBoundable,visitor);}else if(childBoundable instanceof jsts.index.strtree.ItemBoundable){visitor.visitItem(childBoundable.getItem());}else{jsts.util.Assert.shouldNeverReachHere();}}};jsts.index.strtree.AbstractSTRtree.prototype.getIntersectsOp=function(){throw new jsts.error.AbstractMethodInvocationError();};jsts.index.strtree.AbstractSTRtree.prototype.itemsTree=function(){if(arguments.length===1){return this.itemsTree2.apply(this,arguments);}\nif(!this.built){this.build();}\nvar valuesTree=this.itemsTree2(this.root);if(valuesTree===null)\nreturn[];return valuesTree;};jsts.index.strtree.AbstractSTRtree.prototype.itemsTree2=function(node){var valuesTreeForNode=[];var childBoundables=node.getChildBoundables();for(var i=0;i<childBoundables.length;i++){var childBoundable=childBoundables[i];if(childBoundable instanceof jsts.index.strtree.AbstractNode){var valuesTreeForChild=this.itemsTree(childBoundable);if(valuesTreeForChild!=null)\nvaluesTreeForNode.push(valuesTreeForChild);}else if(childBoundable instanceof jsts.index.strtree.ItemBoundable){valuesTreeForNode.push(childBoundable.getItem());}else{jsts.util.Assert.shouldNeverReachHere();}}\nif(valuesTreeForNode.length<=0)\nreturn null;return valuesTreeForNode;};jsts.index.strtree.AbstractSTRtree.prototype.remove=function(searchBounds,item){if(!this.built){this.build();}\nif(this.itemBoundables.length===0){jsts.util.Assert.isTrue(this.root.getBounds()==null);}\nif(this.getIntersectsOp().intersects(this.root.getBounds(),searchBounds)){return this.remove2(searchBounds,this.root,item);}\nreturn false;};jsts.index.strtree.AbstractSTRtree.prototype.remove2=function(searchBounds,node,item){var found=this.removeItem(node,item);if(found)\nreturn true;var childToPrune=null;var childBoundables=node.getChildBoundables();for(var i=0;i<childBoundables.length;i++){var childBoundable=childBoundables[i];if(!this.getIntersectsOp().intersects(childBoundable.getBounds(),searchBounds)){continue;}\nif(childBoundable instanceof jsts.index.strtree.AbstractNode){found=this.remove(searchBounds,childBoundable,item);if(found){childToPrune=childBoundable;break;}}}\nif(childToPrune!=null){if(childToPrune.getChildBoundables().length===0){childBoundables.splice(childBoundables.indexOf(childToPrune),1);}}\nreturn found;};jsts.index.strtree.AbstractSTRtree.prototype.removeItem=function(node,item){var childToRemove=null;var childBoundables=node.getChildBoundables();for(var i=0;i<childBoundables.length;i++){var childBoundable=childBoundables[i];if(childBoundable instanceof jsts.index.strtree.ItemBoundable){if(childBoundable.getItem()===item)\nchildToRemove=childBoundable;}}\nif(childToRemove!==null){childBoundables.splice(childBoundables.indexOf(childToRemove),1);return true;}\nreturn false;};jsts.index.strtree.AbstractSTRtree.prototype.boundablesAtLevel=function(level){if(arguments.length>1){this.boundablesAtLevel2.apply(this,arguments);return;}\nvar boundables=[];this.boundablesAtLevel2(level,this.root,boundables);return boundables;};jsts.index.strtree.AbstractSTRtree.prototype.boundablesAtLevel2=function(level,top,boundables){jsts.util.Assert.isTrue(level>-2);if(top.getLevel()===level){boundables.add(top);return;}\nvar childBoundables=node.getChildBoundables();for(var i=0;i<childBoundables.length;i++){var boundable=childBoundables[i];if(boundable instanceof jsts.index.strtree.AbstractNode){this.boundablesAtLevel(level,boundable,boundables);}else{jsts.util.Assert.isTrue(boundable instanceof jsts.index.strtree.ItemBoundable);if(level===-1){boundables.add(boundable);}}}\nreturn;};jsts.index.strtree.AbstractSTRtree.prototype.getComparator=function(){throw new jsts.error.AbstractMethodInvocationError();};jsts.index.strtree.STRtree=function(nodeCapacity){nodeCapacity=nodeCapacity||jsts.index.strtree.STRtree.DEFAULT_NODE_CAPACITY;jsts.index.strtree.AbstractSTRtree.call(this,nodeCapacity);};jsts.index.strtree.STRtree.prototype=new jsts.index.strtree.AbstractSTRtree();jsts.index.strtree.STRtree.constructor=jsts.index.strtree.STRtree;jsts.index.strtree.STRtree.prototype.xComparator=function(o1,o2){return jsts.index.strtree.AbstractSTRtree.prototype.compareDoubles(jsts.index.strtree.STRtree.prototype.centreX(o1.getBounds()),jsts.index.strtree.STRtree.prototype.centreX(o2.getBounds()));};jsts.index.strtree.STRtree.prototype.yComparator=function(o1,o2){return jsts.index.strtree.AbstractSTRtree.prototype.compareDoubles(jsts.index.strtree.STRtree.prototype.centreY(o1.getBounds()),jsts.index.strtree.STRtree.prototype.centreY(o2.getBounds()));};jsts.index.strtree.STRtree.prototype.centreX=function(e){return jsts.index.strtree.STRtree.prototype.avg(e.getMinX(),e.getMaxX());};jsts.index.strtree.STRtree.prototype.centreY=function(e){return jsts.index.strtree.STRtree.prototype.avg(e.getMinY(),e.getMaxY());};jsts.index.strtree.STRtree.prototype.avg=function(a,b){return(a+b)/2.0;};jsts.index.strtree.STRtree.prototype.intersectsOp={intersects:function(aBounds,bBounds){return aBounds.intersects(bBounds);}};jsts.index.strtree.STRtree.prototype.createParentBoundables=function(childBoundables,newLevel){jsts.util.Assert.isTrue(!(childBoundables.length===0));var minLeafCount=Math.ceil(childBoundables.length/this.getNodeCapacity());var sortedChildBoundables=[];for(var i=0;i<childBoundables.length;i++){sortedChildBoundables.push(childBoundables[i]);}\nsortedChildBoundables.sort(this.xComparator);var verticalSlices=this.verticalSlices(sortedChildBoundables,Math.ceil(Math.sqrt(minLeafCount)));return this.createParentBoundablesFromVerticalSlices(verticalSlices,newLevel);};jsts.index.strtree.STRtree.prototype.createParentBoundablesFromVerticalSlices=function(verticalSlices,newLevel){jsts.util.Assert.isTrue(verticalSlices.length>0);var parentBoundables=[];for(var i=0;i<verticalSlices.length;i++){parentBoundables=parentBoundables.concat(this.createParentBoundablesFromVerticalSlice(verticalSlices[i],newLevel));}\nreturn parentBoundables;};jsts.index.strtree.STRtree.prototype.createParentBoundablesFromVerticalSlice=function(childBoundables,newLevel){return jsts.index.strtree.AbstractSTRtree.prototype.createParentBoundables.call(this,childBoundables,newLevel);};jsts.index.strtree.STRtree.prototype.verticalSlices=function(childBoundables,sliceCount){var sliceCapacity=Math.ceil(childBoundables.length/sliceCount);var slices=[];var i=0,boundablesAddedToSlice,childBoundable;for(var j=0;j<sliceCount;j++){slices[j]=[];boundablesAddedToSlice=0;while(i<childBoundables.length&&boundablesAddedToSlice<sliceCapacity){childBoundable=childBoundables[i++];slices[j].push(childBoundable);boundablesAddedToSlice++;}}\nreturn slices;};jsts.index.strtree.STRtree.DEFAULT_NODE_CAPACITY=10;jsts.index.strtree.STRtree.prototype.createNode=function(level){var abstractNode=new jsts.index.strtree.AbstractNode(level);abstractNode.computeBounds=function(){var bounds=null;var childBoundables=this.getChildBoundables();for(var i=0;i<childBoundables.length;i++){var childBoundable=childBoundables[i];if(bounds===null){bounds=new jsts.geom.Envelope(childBoundable.getBounds());}else{bounds.expandToInclude(childBoundable.getBounds());}}\nreturn bounds;};return abstractNode;};jsts.index.strtree.STRtree.prototype.getIntersectsOp=function(){return this.intersectsOp;};jsts.index.strtree.STRtree.prototype.insert=function(itemEnv,item){if(itemEnv.isNull()){return;}\njsts.index.strtree.AbstractSTRtree.prototype.insert.call(this,itemEnv,item);};jsts.index.strtree.STRtree.prototype.query=function(searchEnv,visitor){return jsts.index.strtree.AbstractSTRtree.prototype.query.apply(this,arguments);};jsts.index.strtree.STRtree.prototype.remove=function(itemEnv,item){return jsts.index.strtree.AbstractSTRtree.prototype.remove.call(this,itemEnv,item);};jsts.index.strtree.STRtree.prototype.size=function(){return jsts.index.strtree.AbstractSTRtree.prototype.size.call(this);};jsts.index.strtree.STRtree.prototype.depth=function(){return jsts.index.strtree.AbstractSTRtree.prototype.depth.call(this);};jsts.index.strtree.STRtree.prototype.getComparator=function(){return this.yComparator;};jsts.index.strtree.STRtree.prototype.nearestNeighbour=function(itemDist){var bp=new jsts.index.strtree.BoundablePair(this.getRoot(),this.getRoot(),itemDist);return this.nearestNeighbour4(bp);};jsts.index.strtree.STRtree.prototype.nearestNeighbour2=function(env,item,itemDist){var bnd=new jsts.index.strtree.ItemBoundable(env,item);var bp=new jsts.index.strtree.BoundablePair(this.getRoot(),bnd,itemDist);return this.nearestNeighbour4(bp)[0];};jsts.index.strtree.STRtree.prototype.nearestNeighbour3=function(tree,itemDist){var bp=new jsts.index.strtree.BoundablePair(this.getRoot(),tree.getRoot(),itemDist);return this.nearestNeighbour4(bp);};jsts.index.strtree.STRtree.prototype.nearestNeighbour4=function(initBndPair){return this.nearestNeighbour5(initBndPair,Double.POSITIVE_INFINITY);};jsts.index.strtree.STRtree.prototype.nearestNeighbour5=function(initBndPair,maxDistance){var distanceLowerBound=maxDistance;var minPair=null;var priQ=[];priQ.push(initBndPair);while(!priQ.isEmpty()&&distanceLowerBound>0.0){var bndPair=priQ.pop();var currentDistance=bndPair.getDistance();if(currentDistance>=distanceLowerBound)\nbreak;if(bndPair.isLeaves()){distanceLowerBound=currentDistance;minPair=bndPair;}else{bndPair.expandToQueue(priQ,distanceLowerBound);}}\nreturn[minPair.getBoundable(0).getItem(),minPair.getBoundable(1).getItem()];};jsts.noding.SegmentString=function(){};jsts.noding.SegmentString.prototype.getData=jsts.abstractFunc;jsts.noding.SegmentString.prototype.setData=jsts.abstractFunc;jsts.noding.SegmentString.prototype.size=jsts.abstractFunc;jsts.noding.SegmentString.prototype.getCoordinate=jsts.abstractFunc;jsts.noding.SegmentString.prototype.getCoordinates=jsts.abstractFunc;jsts.noding.SegmentString.prototype.isClosed=jsts.abstractFunc;jsts.noding.NodableSegmentString=function(){};jsts.noding.NodableSegmentString.prototype=new jsts.noding.SegmentString();jsts.noding.NodableSegmentString.prototype.addIntersection=jsts.abstractFunc;jsts.noding.NodedSegmentString=function(pts,data){this.nodeList=new jsts.noding.SegmentNodeList(this);this.pts=pts;this.data=data;};jsts.noding.NodedSegmentString.prototype=new jsts.noding.NodableSegmentString();jsts.noding.NodedSegmentString.constructor=jsts.noding.NodedSegmentString;jsts.noding.NodedSegmentString.getNodedSubstrings=function(segStrings){if(arguments.length===2){jsts.noding.NodedSegmentString.getNodedSubstrings2.apply(this,arguments);return;}\nvar resultEdgelist=new javascript.util.ArrayList();jsts.noding.NodedSegmentString.getNodedSubstrings2(segStrings,resultEdgelist);return resultEdgelist;};jsts.noding.NodedSegmentString.getNodedSubstrings2=function(segStrings,resultEdgelist){for(var i=segStrings.iterator();i.hasNext();){var ss=i.next();ss.getNodeList().addSplitEdges(resultEdgelist);}};jsts.noding.NodedSegmentString.prototype.nodeList=null;jsts.noding.NodedSegmentString.prototype.pts=null;jsts.noding.NodedSegmentString.prototype.data=null;jsts.noding.NodedSegmentString.prototype.getData=function(){return this.data;};jsts.noding.NodedSegmentString.prototype.setData=function(data){this.data=data;};jsts.noding.NodedSegmentString.prototype.getNodeList=function(){return this.nodeList;};jsts.noding.NodedSegmentString.prototype.size=function(){return this.pts.length;};jsts.noding.NodedSegmentString.prototype.getCoordinate=function(i){return this.pts[i];};jsts.noding.NodedSegmentString.prototype.getCoordinates=function(){return this.pts;};jsts.noding.NodedSegmentString.prototype.isClosed=function(){return this.pts[0].equals(this.pts[this.pts.length-1]);};jsts.noding.NodedSegmentString.prototype.getSegmentOctant=function(index){if(index===this.pts.length-1)\nreturn-1;return this.safeOctant(this.getCoordinate(index),this.getCoordinate(index+1));};jsts.noding.NodedSegmentString.prototype.safeOctant=function(p0,p1){if(p0.equals2D(p1))\nreturn 0;return jsts.noding.Octant.octant(p0,p1);};jsts.noding.NodedSegmentString.prototype.addIntersections=function(li,segmentIndex,geomIndex){for(var i=0;i<li.getIntersectionNum();i++){this.addIntersection(li,segmentIndex,geomIndex,i);}};jsts.noding.NodedSegmentString.prototype.addIntersection=function(li,segmentIndex,geomIndex,intIndex){if(li instanceof jsts.geom.Coordinate){this.addIntersection2.apply(this,arguments);return;}\nvar intPt=new jsts.geom.Coordinate(li.getIntersection(intIndex));this.addIntersection2(intPt,segmentIndex);};jsts.noding.NodedSegmentString.prototype.addIntersection2=function(intPt,segmentIndex){this.addIntersectionNode(intPt,segmentIndex);};jsts.noding.NodedSegmentString.prototype.addIntersectionNode=function(intPt,segmentIndex){var normalizedSegmentIndex=segmentIndex;var nextSegIndex=normalizedSegmentIndex+1;if(nextSegIndex<this.pts.length){var nextPt=this.pts[nextSegIndex];if(intPt.equals2D(nextPt)){normalizedSegmentIndex=nextSegIndex;}}\nvar ei=this.nodeList.add(intPt,normalizedSegmentIndex);return ei;};jsts.noding.NodedSegmentString.prototype.toString=function(){var geometryFactory=new jsts.geom.GeometryFactory();return new jsts.io.WKTWriter().write(geometryFactory.createLineString(this.pts));};jsts.index.chain.MonotoneChainBuilder=function(){};jsts.index.chain.MonotoneChainBuilder.toIntArray=function(list){var array=[];for(var i=0;i<list.length;i++){array[i]=list[i];}\nreturn array;};jsts.index.chain.MonotoneChainBuilder.getChains=function(pts){if(arguments.length===2){return jsts.index.chain.MonotoneChainBuilder.getChains2.apply(this,arguments);}\nreturn jsts.index.chain.MonotoneChainBuilder.getChains2(pts,null);};jsts.index.chain.MonotoneChainBuilder.getChains2=function(pts,context){var mcList=[];var startIndex=jsts.index.chain.MonotoneChainBuilder.getChainStartIndices(pts);for(var i=0;i<startIndex.length-1;i++){var mc=new jsts.index.chain.MonotoneChain(pts,startIndex[i],startIndex[i+1],context);mcList.push(mc);}\nreturn mcList;};jsts.index.chain.MonotoneChainBuilder.getChainStartIndices=function(pts){var start=0;var startIndexList=[];startIndexList.push(start);do{var last=jsts.index.chain.MonotoneChainBuilder.findChainEnd(pts,start);startIndexList.push(last);start=last;}while(start<pts.length-1);var startIndex=jsts.index.chain.MonotoneChainBuilder.toIntArray(startIndexList);return startIndex;};jsts.index.chain.MonotoneChainBuilder.findChainEnd=function(pts,start){var safeStart=start;while(safeStart<pts.length-1&&pts[safeStart].equals2D(pts[safeStart+1])){safeStart++;}\nif(safeStart>=pts.length-1){return pts.length-1;}\nvar chainQuad=jsts.geomgraph.Quadrant.quadrant(pts[safeStart],pts[safeStart+1]);var last=start+1;while(last<pts.length){if(!pts[last-1].equals2D(pts[last])){var quad=jsts.geomgraph.Quadrant.quadrant(pts[last-1],pts[last]);if(quad!==chainQuad)\nbreak;}\nlast++;}\nreturn last-1;};jsts.algorithm.LineIntersector=function(){this.inputLines=[[],[]];this.intPt=[null,null];this.pa=this.intPt[0];this.pb=this.intPt[1];this.result=jsts.algorithm.LineIntersector.NO_INTERSECTION;};jsts.algorithm.LineIntersector.NO_INTERSECTION=0;jsts.algorithm.LineIntersector.POINT_INTERSECTION=1;jsts.algorithm.LineIntersector.COLLINEAR_INTERSECTION=2;jsts.algorithm.LineIntersector.prototype.setPrecisionModel=function(precisionModel){this.precisionModel=precisionModel;};jsts.algorithm.LineIntersector.prototype.getEndpoint=function(segmentIndex,ptIndex){return this.inputLines[segmentIndex][ptIndex];};jsts.algorithm.LineIntersector.computeEdgeDistance=function(p,p0,p1){var dx=Math.abs(p1.x-p0.x);var dy=Math.abs(p1.y-p0.y);var dist=-1.0;if(p.equals(p0)){dist=0.0;}else if(p.equals(p1)){if(dx>dy){dist=dx;}else{dist=dy;}}else{var pdx=Math.abs(p.x-p0.x);var pdy=Math.abs(p.y-p0.y);if(dx>dy){dist=pdx;}else{dist=pdy;}\nif(dist===0.0&&!p.equals(p0)){dist=Math.max(pdx,pdy);}}\nif(dist===0.0&&!p.equals(p0)){throw new jsts.error.IllegalArgumentError('Bad distance calculation');}\nreturn dist;};jsts.algorithm.LineIntersector.nonRobustComputeEdgeDistance=function(p,p1,p2){var dx=p.x-p1.x;var dy=p.y-p1.y;var dist=Math.sqrt(dx*dx+dy*dy);if(!(dist===0.0&&!p.equals(p1))){throw new jsts.error.IllegalArgumentError('Invalid distance calculation');}\nreturn dist;};jsts.algorithm.LineIntersector.prototype.result=null;jsts.algorithm.LineIntersector.prototype.inputLines=null;jsts.algorithm.LineIntersector.prototype.intPt=null;jsts.algorithm.LineIntersector.prototype.intLineIndex=null;jsts.algorithm.LineIntersector.prototype._isProper=null;jsts.algorithm.LineIntersector.prototype.pa=null;jsts.algorithm.LineIntersector.prototype.pb=null;jsts.algorithm.LineIntersector.prototype.precisionModel=null;jsts.algorithm.LineIntersector.prototype.computeIntersection=function(p,p1,p2){throw new jsts.error.AbstractMethodInvocationError();};jsts.algorithm.LineIntersector.prototype.isCollinear=function(){return this.result===jsts.algorithm.LineIntersector.COLLINEAR_INTERSECTION;};jsts.algorithm.LineIntersector.prototype.computeIntersection=function(p1,p2,p3,p4){this.inputLines[0][0]=p1;this.inputLines[0][1]=p2;this.inputLines[1][0]=p3;this.inputLines[1][1]=p4;this.result=this.computeIntersect(p1,p2,p3,p4);};jsts.algorithm.LineIntersector.prototype.computeIntersect=function(p1,p2,q1,q2){throw new jsts.error.AbstractMethodInvocationError();};jsts.algorithm.LineIntersector.prototype.isEndPoint=function(){return this.hasIntersection()&&!this._isProper;};jsts.algorithm.LineIntersector.prototype.hasIntersection=function(){return this.result!==jsts.algorithm.LineIntersector.NO_INTERSECTION;};jsts.algorithm.LineIntersector.prototype.getIntersectionNum=function(){return this.result;};jsts.algorithm.LineIntersector.prototype.getIntersection=function(intIndex){return this.intPt[intIndex];};jsts.algorithm.LineIntersector.prototype.computeIntLineIndex=function(){if(this.intLineIndex===null){this.intLineIndex=[[],[]];this.computeIntLineIndex(0);this.computeIntLineIndex(1);}};jsts.algorithm.LineIntersector.prototype.isIntersection=function(pt){var i;for(i=0;i<this.result;i++){if(this.intPt[i].equals2D(pt)){return true;}}\nreturn false;};jsts.algorithm.LineIntersector.prototype.isInteriorIntersection=function(){if(arguments.length===1){return this.isInteriorIntersection2.apply(this,arguments);}\nif(this.isInteriorIntersection(0)){return true;}\nif(this.isInteriorIntersection(1)){return true;}\nreturn false;};jsts.algorithm.LineIntersector.prototype.isInteriorIntersection2=function(inputLineIndex){var i;for(i=0;i<this.result;i++){if(!(this.intPt[i].equals2D(this.inputLines[inputLineIndex][0])||this.intPt[i].equals2D(this.inputLines[inputLineIndex][1]))){return true;}}\nreturn false;};jsts.algorithm.LineIntersector.prototype.isProper=function(){return this.hasIntersection()&&this._isProper;};jsts.algorithm.LineIntersector.prototype.getIntersectionAlongSegment=function(segmentIndex,intIndex){this.computeIntLineIndex();return this.intPt[intLineIndex[segmentIndex][intIndex]];};jsts.algorithm.LineIntersector.prototype.getIndexAlongSegment=function(segmentIndex,intIndex){this.computeIntLineIndex();return this.intLineIndex[segmentIndex][intIndex];};jsts.algorithm.LineIntersector.prototype.computeIntLineIndex=function(segmentIndex){var dist0=this.getEdgeDistance(segmentIndex,0);var dist1=this.getEdgeDistance(segmentIndex,1);if(dist0>dist1){this.intLineIndex[segmentIndex][0]=0;this.intLineIndex[segmentIndex][1]=1;}else{this.intLineIndex[segmentIndex][0]=1;this.intLineIndex[segmentIndex][1]=0;}};jsts.algorithm.LineIntersector.prototype.getEdgeDistance=function(segmentIndex,intIndex){var dist=jsts.algorithm.LineIntersector.computeEdgeDistance(this.intPt[intIndex],this.inputLines[segmentIndex][0],this.inputLines[segmentIndex][1]);return dist;};jsts.algorithm.RobustLineIntersector=function(){jsts.algorithm.RobustLineIntersector.prototype.constructor.call(this);};jsts.algorithm.RobustLineIntersector.prototype=new jsts.algorithm.LineIntersector();jsts.algorithm.RobustLineIntersector.prototype.computeIntersection=function(p,p1,p2){if(arguments.length===4){jsts.algorithm.LineIntersector.prototype.computeIntersection.apply(this,arguments);return;}\nthis._isProper=false;if(jsts.geom.Envelope.intersects(p1,p2,p)){if((jsts.algorithm.CGAlgorithms.orientationIndex(p1,p2,p)===0)&&(jsts.algorithm.CGAlgorithms.orientationIndex(p2,p1,p)===0)){this._isProper=true;if(p.equals(p1)||p.equals(p2)){this._isProper=false;}\nthis.result=jsts.algorithm.LineIntersector.POINT_INTERSECTION;return;}}\nthis.result=jsts.algorithm.LineIntersector.NO_INTERSECTION;};jsts.algorithm.RobustLineIntersector.prototype.computeIntersect=function(p1,p2,q1,q2){this._isProper=false;if(!jsts.geom.Envelope.intersects(p1,p2,q1,q2)){return jsts.algorithm.LineIntersector.NO_INTERSECTION;}\nvar Pq1=jsts.algorithm.CGAlgorithms.orientationIndex(p1,p2,q1);var Pq2=jsts.algorithm.CGAlgorithms.orientationIndex(p1,p2,q2);if((Pq1>0&&Pq2>0)||(Pq1<0&&Pq2<0)){return jsts.algorithm.LineIntersector.NO_INTERSECTION;}\nvar Qp1=jsts.algorithm.CGAlgorithms.orientationIndex(q1,q2,p1);var Qp2=jsts.algorithm.CGAlgorithms.orientationIndex(q1,q2,p2);if((Qp1>0&&Qp2>0)||(Qp1<0&&Qp2<0)){return jsts.algorithm.LineIntersector.NO_INTERSECTION;}\nvar collinear=Pq1===0&&Pq2===0&&Qp1===0&&Qp2===0;if(collinear){return this.computeCollinearIntersection(p1,p2,q1,q2);}\nif(Pq1===0||Pq2===0||Qp1===0||Qp2===0){this._isProper=false;if(p1.equals2D(q1)||p1.equals2D(q2)){this.intPt[0]=p1;}else if(p2.equals2D(q1)||p2.equals2D(q2)){this.intPt[0]=p2;}\nelse if(Pq1===0){this.intPt[0]=new jsts.geom.Coordinate(q1);}else if(Pq2===0){this.intPt[0]=new jsts.geom.Coordinate(q2);}else if(Qp1===0){this.intPt[0]=new jsts.geom.Coordinate(p1);}else if(Qp2===0){this.intPt[0]=new jsts.geom.Coordinate(p2);}}else{this._isProper=true;this.intPt[0]=this.intersection(p1,p2,q1,q2);}\nreturn jsts.algorithm.LineIntersector.POINT_INTERSECTION;};jsts.algorithm.RobustLineIntersector.prototype.computeCollinearIntersection=function(p1,p2,q1,q2){var p1q1p2=jsts.geom.Envelope.intersects(p1,p2,q1);var p1q2p2=jsts.geom.Envelope.intersects(p1,p2,q2);var q1p1q2=jsts.geom.Envelope.intersects(q1,q2,p1);var q1p2q2=jsts.geom.Envelope.intersects(q1,q2,p2);if(p1q1p2&&p1q2p2){this.intPt[0]=q1;this.intPt[1]=q2;return jsts.algorithm.LineIntersector.COLLINEAR_INTERSECTION;}\nif(q1p1q2&&q1p2q2){this.intPt[0]=p1;this.intPt[1]=p2;return jsts.algorithm.LineIntersector.COLLINEAR_INTERSECTION;}\nif(p1q1p2&&q1p1q2){this.intPt[0]=q1;this.intPt[1]=p1;return q1.equals(p1)&&!p1q2p2&&!q1p2q2?jsts.algorithm.LineIntersector.POINT_INTERSECTION:jsts.algorithm.LineIntersector.COLLINEAR_INTERSECTION;}\nif(p1q1p2&&q1p2q2){this.intPt[0]=q1;this.intPt[1]=p2;return q1.equals(p2)&&!p1q2p2&&!q1p1q2?jsts.algorithm.LineIntersector.POINT_INTERSECTION:jsts.algorithm.LineIntersector.COLLINEAR_INTERSECTION;}\nif(p1q2p2&&q1p1q2){this.intPt[0]=q2;this.intPt[1]=p1;return q2.equals(p1)&&!p1q1p2&&!q1p2q2?jsts.algorithm.LineIntersector.POINT_INTERSECTION:jsts.algorithm.LineIntersector.COLLINEAR_INTERSECTION;}\nif(p1q2p2&&q1p2q2){this.intPt[0]=q2;this.intPt[1]=p2;return q2.equals(p2)&&!p1q1p2&&!q1p1q2?jsts.algorithm.LineIntersector.POINT_INTERSECTION:jsts.algorithm.LineIntersector.COLLINEAR_INTERSECTION;}\nreturn jsts.algorithm.LineIntersector.NO_INTERSECTION;};jsts.algorithm.RobustLineIntersector.prototype.intersection=function(p1,p2,q1,q2){var intPt=this.intersectionWithNormalization(p1,p2,q1,q2);if(!this.isInSegmentEnvelopes(intPt)){intPt=jsts.algorithm.CentralEndpointIntersector.getIntersection(p1,p2,q1,q2);}\nif(this.precisionModel!==null){this.precisionModel.makePrecise(intPt);}\nreturn intPt;};jsts.algorithm.RobustLineIntersector.prototype.intersectionWithNormalization=function(p1,p2,q1,q2){var n1=new jsts.geom.Coordinate(p1);var n2=new jsts.geom.Coordinate(p2);var n3=new jsts.geom.Coordinate(q1);var n4=new jsts.geom.Coordinate(q2);var normPt=new jsts.geom.Coordinate();this.normalizeToEnvCentre(n1,n2,n3,n4,normPt);var intPt=this.safeHCoordinateIntersection(n1,n2,n3,n4);intPt.x+=normPt.x;intPt.y+=normPt.y;return intPt;};jsts.algorithm.RobustLineIntersector.prototype.safeHCoordinateIntersection=function(p1,p2,q1,q2){var intPt=null;try{intPt=jsts.algorithm.HCoordinate.intersection(p1,p2,q1,q2);}catch(e){if(e instanceof jsts.error.NotRepresentableError){intPt=jsts.algorithm.CentralEndpointIntersector.getIntersection(p1,p2,q1,q2);}else{throw e;}}\nreturn intPt;};jsts.algorithm.RobustLineIntersector.prototype.normalizeToMinimum=function(n1,n2,n3,n4,normPt){normPt.x=this.smallestInAbsValue(n1.x,n2.x,n3.x,n4.x);normPt.y=this.smallestInAbsValue(n1.y,n2.y,n3.y,n4.y);n1.x-=normPt.x;n1.y-=normPt.y;n2.x-=normPt.x;n2.y-=normPt.y;n3.x-=normPt.x;n3.y-=normPt.y;n4.x-=normPt.x;n4.y-=normPt.y;};jsts.algorithm.RobustLineIntersector.prototype.normalizeToEnvCentre=function(n00,n01,n10,n11,normPt){var minX0=n00.x<n01.x?n00.x:n01.x;var minY0=n00.y<n01.y?n00.y:n01.y;var maxX0=n00.x>n01.x?n00.x:n01.x;var maxY0=n00.y>n01.y?n00.y:n01.y;var minX1=n10.x<n11.x?n10.x:n11.x;var minY1=n10.y<n11.y?n10.y:n11.y;var maxX1=n10.x>n11.x?n10.x:n11.x;var maxY1=n10.y>n11.y?n10.y:n11.y;var intMinX=minX0>minX1?minX0:minX1;var intMaxX=maxX0<maxX1?maxX0:maxX1;var intMinY=minY0>minY1?minY0:minY1;var intMaxY=maxY0<maxY1?maxY0:maxY1;var intMidX=(intMinX+intMaxX)/2.0;var intMidY=(intMinY+intMaxY)/2.0;normPt.x=intMidX;normPt.y=intMidY;n00.x-=normPt.x;n00.y-=normPt.y;n01.x-=normPt.x;n01.y-=normPt.y;n10.x-=normPt.x;n10.y-=normPt.y;n11.x-=normPt.x;n11.y-=normPt.y;};jsts.algorithm.RobustLineIntersector.prototype.smallestInAbsValue=function(x1,x2,x3,x4){var x=x1;var xabs=Math.abs(x);if(Math.abs(x2)<xabs){x=x2;xabs=Math.abs(x2);}\nif(Math.abs(x3)<xabs){x=x3;xabs=Math.abs(x3);}\nif(Math.abs(x4)<xabs){x=x4;}\nreturn x;};jsts.algorithm.RobustLineIntersector.prototype.isInSegmentEnvelopes=function(intPt){var env0=new jsts.geom.Envelope(this.inputLines[0][0],this.inputLines[0][1]);var env1=new jsts.geom.Envelope(this.inputLines[1][0],this.inputLines[1][1]);return env0.contains(intPt)&&env1.contains(intPt);};jsts.algorithm.HCoordinate=function(){this.x=0.0;this.y=0.0;this.w=1.0;if(arguments.length===1){this.initFrom1Coordinate(arguments[0]);}else if(arguments.length===2&&arguments[0]instanceof jsts.geom.Coordinate){this.initFrom2Coordinates(arguments[0],arguments[1]);}else if(arguments.length===2&&arguments[0]instanceof jsts.algorithm.HCoordinate){this.initFrom2HCoordinates(arguments[0],arguments[1]);}else if(arguments.length===2){this.initFromXY(arguments[0],arguments[1]);}else if(arguments.length===3){this.initFromXYW(arguments[0],arguments[1],arguments[2]);}else if(arguments.length===4){this.initFromXYW(arguments[0],arguments[1],arguments[2],arguments[3]);}};jsts.algorithm.HCoordinate.intersection=function(p1,p2,q1,q2){var px,py,pw,qx,qy,qw,x,y,w,xInt,yInt;px=p1.y-p2.y;py=p2.x-p1.x;pw=p1.x*p2.y-p2.x*p1.y;qx=q1.y-q2.y;qy=q2.x-q1.x;qw=q1.x*q2.y-q2.x*q1.y;x=py*qw-qy*pw;y=qx*pw-px*qw;w=px*qy-qx*py;xInt=x/w;yInt=y/w;if(!isFinite(xInt)||!isFinite(yInt)){throw new jsts.error.NotRepresentableError();}\nreturn new jsts.geom.Coordinate(xInt,yInt);};jsts.algorithm.HCoordinate.prototype.initFrom1Coordinate=function(p){this.x=p.x;this.y=p.y;this.w=1.0;};jsts.algorithm.HCoordinate.prototype.initFrom2Coordinates=function(p1,p2){this.x=p1.y-p2.y;this.y=p2.x-p1.x;this.w=p1.x*p2.y-p2.x*p1.y;};jsts.algorithm.HCoordinate.prototype.initFrom2HCoordinates=function(p1,p2){this.x=p1.y*p2.w-p2.y*p1.w;this.y=p2.x*p1.w-p1.x*p2.w;this.w=p1.x*p2.y-p2.x*p1.y;};jsts.algorithm.HCoordinate.prototype.initFromXYW=function(x,y,w){this.x=x;this.y=y;this.w=w;};jsts.algorithm.HCoordinate.prototype.initFromXY=function(x,y){this.x=x;this.y=y;this.w=1.0;};jsts.algorithm.HCoordinate.prototype.initFrom4Coordinates=function(p1,p2,q1,q2){var px,py,pw,qx,qy,qw;px=p1.y-p2.y;py=p2.x-p1.x;pw=p1.x*p2.y-p2.x*p1.y;qx=q1.y-q2.y;qy=q2.x-q1.x;qw=q1.x*q2.y-q2.x*q1.y;this.x=py*qw-qy*pw;this.y=qx*pw-px*qw;this.w=px*qy-qx*py;};jsts.algorithm.HCoordinate.prototype.getX=function(){var a=this.x/this.w;if(!isFinite(a)){throw new jsts.error.NotRepresentableError();}\nreturn a;};jsts.algorithm.HCoordinate.prototype.getY=function(){var a=this.y/this.w;if(!isFinite(a)){throw new jsts.error.NotRepresentableError();}\nreturn a;};jsts.algorithm.HCoordinate.prototype.getCoordinate=function(){var p=new jsts.geom.Coordinate();p.x=this.getX();p.y=this.getY();return p;};jsts.geom.LineSegment=function(){if(arguments.length===0){this.p0=new jsts.geom.Coordinate();this.p1=new jsts.geom.Coordinate();}else if(arguments.length===1){this.p0=arguments[0].p0;this.p1=arguments[0].p1;}else if(arguments.length===2){this.p0=arguments[0];this.p1=arguments[1];}else if(arguments.length===4){this.p0=new jsts.geom.Coordinate(arguments[0],arguments[1]);this.p1=new jsts.geom.Coordinate(arguments[2],arguments[3]);}};jsts.geom.LineSegment.prototype.p0=null;jsts.geom.LineSegment.prototype.p1=null;jsts.geom.LineSegment.midPoint=function(p0,p1){return new jsts.geom.Coordinate((p0.x+p1.x)/2,(p0.y+p1.y)/2);};jsts.geom.LineSegment.prototype.getCoordinate=function(i){if(i===0)return this.p0;return this.p1;};jsts.geom.LineSegment.prototype.getLength=function(){return this.p0.distance(this.p1);};jsts.geom.LineSegment.prototype.isHorizontal=function(){return this.p0.y===this.p1.y;};jsts.geom.LineSegment.prototype.isVertical=function(){return this.p0.x===this.p1.x;};jsts.geom.LineSegment.prototype.orientationIndex=function(arg){if(arg instanceof jsts.geom.LineSegment){return this.orientationIndex1(arg);}else if(arg instanceof jsts.geom.Coordinate){return this.orientationIndex2(arg);}};jsts.geom.LineSegment.prototype.orientationIndex1=function(seg){var orient0=jsts.algorithm.CGAlgorithms.orientationIndex(this.p0,this.p1,seg.p0);var orient1=jsts.algorithm.CGAlgorithms.orientationIndex(this.p0,this.p1,seg.p1);if(orient0>=0&&orient1>=0){return Math.max(orient0,orient1);}\nif(orient0<=0&&orient1<=0){return Math.max(orient0,orient1);}\nreturn 0;};jsts.geom.LineSegment.prototype.orientationIndex2=function(p){return jsts.algorithm.CGAlgorithms.orientationIndex(this.p0,this.p1,p);};jsts.geom.LineSegment.prototype.reverse=function(){var temp=this.p0;this.p0=this.p1;this.p1=temp;};jsts.geom.LineSegment.prototype.normalize=function(){if(this.p1.compareTo(this.p0)<0)this.reverse();};jsts.geom.LineSegment.prototype.angle=function(){return Math.atan2(this.p1.y-this.p0.y,this.p1.x-this.p0.x);};jsts.geom.LineSegment.prototype.midPoint=function(){return jsts.geom.LineSegment.midPoint(this.p0,this.p1);};jsts.geom.LineSegment.prototype.distance=function(arg){if(arg instanceof jsts.geom.LineSegment){return this.distance1(arg);}else if(arg instanceof jsts.geom.Coordinate){return this.distance2(arg);}};jsts.geom.LineSegment.prototype.distance1=function(ls){return jsts.algorithm.CGAlgorithms.distanceLineLine(this.p0,this.p1,ls.p0,ls.p1);};jsts.geom.LineSegment.prototype.distance2=function(p){return jsts.algorithm.CGAlgorithms.distancePointLine(p,this.p0,this.p1);};jsts.geom.LineSegment.prototype.pointAlong=function(segmentLengthFraction){var coord=new jsts.geom.Coordinate();coord.x=this.p0.x+segmentLengthFraction*(this.p1.x-this.p0.x);coord.y=this.p0.y+segmentLengthFraction*(this.p1.y-this.p0.y);return coord;};jsts.geom.LineSegment.prototype.pointAlongOffset=function(segmentLengthFraction,offsetDistance){var segx=this.p0.x+segmentLengthFraction*(this.p1.x-this.p0.x);var segy=this.p0.y+segmentLengthFraction*(this.p1.y-this.p0.y);var dx=this.p1.x-this.p0.x;var dy=this.p1.y-this.p0.y;var len=Math.sqrt(dx*dx+dy*dy);var ux=0;var uy=0;if(offsetDistance!==0){if(len<=0){throw\"Cannot compute offset from zero-length line segment\";}\nux=offsetDistance*dx/len;uy=offsetDistance*dy/len;}\nvar offsetx=segx-uy;var offsety=segy+ux;var coord=new jsts.geom.Coordinate(offsetx,offsety);return coord;};jsts.geom.LineSegment.prototype.projectionFactor=function(p){if(p.equals(this.p0))\nreturn 0.0;if(p.equals(this.p1))\nreturn 1.0;var dx=this.p1.x-this.p0.x;var dy=this.p1.y-this.p0.y;var len2=dx*dx+dy*dy;var r=((p.x-this.p0.x)*dx+(p.y-this.p0.y)*dy)/len2;return r;};jsts.geom.LineSegment.prototype.segmentFraction=function(inputPt){var segFrac=this.projectionFactor(inputPt);if(segFrac<0){segFrac=0;}else if(segFrac>1||isNaN(segFrac)){segFrac=1;}\nreturn segFrac;};jsts.geom.LineSegment.prototype.project=function(arg){if(arg instanceof jsts.geom.Coordinate){return this.project1(arg);}else if(arg instanceof jsts.geom.LineSegment){return this.project2(arg);}};jsts.geom.LineSegment.prototype.project1=function(p){if(p.equals(this.p0)||p.equals(this.p1)){return new jsts.geom.Coordinate(p);}\nvar r=this.projectionFactor(p);var coord=new jsts.geom.Coordinate();coord.x=this.p0.x+r*(this.p1.x-this.p0.x);coord.y=this.p0.y+r*(this.p1.y-this.p0.y);return coord;};jsts.geom.LineSegment.prototype.project2=function(seg){var pf0=this.projectionFactor(seg.p0);var pf1=this.projectionFactor(seg.p1);if(pf0>=1&&pf1>=1)return null;if(pf0<=0&&pf1<=0)return null;var newp0=this.project(seg.p0);if(pf0<0)newp0=p0;if(pf0>1)newp0=p1;var newp1=this.project(seg.p1);if(pf1<0.0)newp1=p0;if(pf1>1.0)newp1=p1;return new jsts.geom.LineSegment(newp0,newp1);};jsts.geom.LineSegment.prototype.closestPoint=function(p){var factor=this.projectionFactor(p);if(factor>0&&factor<1){return this.project(p);}\nvar dist0=this.p0.distance(p);var dist1=this.p1.distance(p);if(dist0<dist1)\nreturn this.p0;return this.p1;};jsts.geom.LineSegment.prototype.closestPoints=function(line){var intPt=this.intersection(line);if(intPt!==null){return[intPt,intPt];}\nvar closestPt=[];var minDistance=Number.MAX_VALUE;var dist;var close00=this.closestPoint(line.p0);minDistance=close00.distance(line.p0);closestPt[0]=close00;closestPt[1]=line.p0;var close01=this.closestPoint(line.p1);dist=close01.distance(line.p1);if(dist<minDistance){minDistance=dist;closestPt[0]=close01;closestPt[1]=line.p1;}\nvar close10=line.closestPoint(this.p0);dist=close10.distance(this.p0);if(dist<minDistance){minDistance=dist;closestPt[0]=this.p0;closestPt[1]=close10;}\nvar close11=line.closestPoint(this.p1);dist=close11.distance(this.p1);if(dist<minDistance){minDistance=dist;closestPt[0]=this.p1;closestPt[1]=close11;}\nreturn closestPt;};jsts.geom.LineSegment.prototype.intersection=function(line){var li=new jsts.algorithm.RobustLineIntersector();li.computeIntersection(this.p0,this.p1,line.p0,line.p1);if(li.hasIntersection())\nreturn li.getIntersection(0);return null;};jsts.geom.LineSegment.prototype.setCoordinates=function(ls){if(ls instanceof jsts.geom.Coordinate){this.setCoordinates2.apply(this,arguments);return;}\nthis.setCoordinates2(ls.p0,ls.p1);};jsts.geom.LineSegment.prototype.setCoordinates2=function(p0,p1){this.p0.x=p0.x;this.p0.y=p0.y;this.p1.x=p1.x;this.p1.y=p1.y;};jsts.geom.LineSegment.prototype.distancePerpendicular=function(p){return jsts.algorithm.CGAlgorithms.distancePointLinePerpendicular(p,this.p0,this.p1);};jsts.geom.LineSegment.prototype.lineIntersection=function(line){try{var intPt=jsts.algorithm.HCoordinate.intersection(this.p0,this.p1,line.p0,line.p1);return intPt;}catch(ex){}\nreturn null;};jsts.geom.LineSegment.prototype.toGeometry=function(geomFactory){return geomFactory.createLineString([this.p0,this.p1]);};jsts.geom.LineSegment.prototype.equals=function(o){if(!(o instanceof jsts.geom.LineSegment)){return false;}\nreturn this.p0.equals(o.p0)&&this.p1.equals(o.p1);};jsts.geom.LineSegment.prototype.compareTo=function(o){var comp0=this.p0.compareTo(o.p0);if(comp0!==0)return comp0;return this.p1.compareTo(o.p1);};jsts.geom.LineSegment.prototype.equalsTopo=function(other){return this.p0.equals(other.p0)&&this.p1.equals(other.p1)||this.p0.equals(other.p1)&&this.p1.equals(other.p0);};jsts.geom.LineSegment.prototype.toString=function(){return\"LINESTRING(\"+\nthis.p0.x+\" \"+this.p0.y\n+\", \"+\nthis.p1.x+\" \"+this.p1.y+\")\";};jsts.index.chain.MonotoneChainOverlapAction=function(){this.tempEnv1=new jsts.geom.Envelope();this.tempEnv2=new jsts.geom.Envelope();this.overlapSeg1=new jsts.geom.LineSegment();this.overlapSeg2=new jsts.geom.LineSegment();};jsts.index.chain.MonotoneChainOverlapAction.prototype.tempEnv1=null;jsts.index.chain.MonotoneChainOverlapAction.prototype.tempEnv2=null;jsts.index.chain.MonotoneChainOverlapAction.prototype.overlapSeg1=null;jsts.index.chain.MonotoneChainOverlapAction.prototype.overlapSeg2=null;jsts.index.chain.MonotoneChainOverlapAction.prototype.overlap=function(mc1,start1,mc2,start2){this.mc1.getLineSegment(start1,this.overlapSeg1);this.mc2.getLineSegment(start2,this.overlapSeg2);this.overlap2(this.overlapSeg1,this.overlapSeg2);};jsts.index.chain.MonotoneChainOverlapAction.prototype.overlap2=function(seg1,seg2){};(function(){var MonotoneChainOverlapAction=jsts.index.chain.MonotoneChainOverlapAction;var SinglePassNoder=jsts.noding.SinglePassNoder;var STRtree=jsts.index.strtree.STRtree;var NodedSegmentString=jsts.noding.NodedSegmentString;var MonotoneChainBuilder=jsts.index.chain.MonotoneChainBuilder;var SegmentOverlapAction=function(si){this.si=si;};SegmentOverlapAction.prototype=new MonotoneChainOverlapAction();SegmentOverlapAction.constructor=SegmentOverlapAction;SegmentOverlapAction.prototype.si=null;SegmentOverlapAction.prototype.overlap=function(mc1,start1,mc2,start2){var ss1=mc1.getContext();var ss2=mc2.getContext();this.si.processIntersections(ss1,start1,ss2,start2);};jsts.noding.MCIndexNoder=function(){this.monoChains=[];this.index=new STRtree();};jsts.noding.MCIndexNoder.prototype=new SinglePassNoder();jsts.noding.MCIndexNoder.constructor=jsts.noding.MCIndexNoder;jsts.noding.MCIndexNoder.prototype.monoChains=null;jsts.noding.MCIndexNoder.prototype.index=null;jsts.noding.MCIndexNoder.prototype.idCounter=0;jsts.noding.MCIndexNoder.prototype.nodedSegStrings=null;jsts.noding.MCIndexNoder.prototype.nOverlaps=0;jsts.noding.MCIndexNoder.prototype.getMonotoneChains=function(){return this.monoChains;};jsts.noding.MCIndexNoder.prototype.getIndex=function(){return this.index;};jsts.noding.MCIndexNoder.prototype.getNodedSubstrings=function(){return NodedSegmentString.getNodedSubstrings(this.nodedSegStrings);};jsts.noding.MCIndexNoder.prototype.computeNodes=function(inputSegStrings){this.nodedSegStrings=inputSegStrings;for(var i=inputSegStrings.iterator();i.hasNext();){this.add(i.next());}\nthis.intersectChains();};jsts.noding.MCIndexNoder.prototype.intersectChains=function(){var overlapAction=new SegmentOverlapAction(this.segInt);for(var i=0;i<this.monoChains.length;i++){var queryChain=this.monoChains[i];var overlapChains=this.index.query(queryChain.getEnvelope());for(var j=0;j<overlapChains.length;j++){var testChain=overlapChains[j];if(testChain.getId()>queryChain.getId()){queryChain.computeOverlaps(testChain,overlapAction);this.nOverlaps++;}\nif(this.segInt.isDone())\nreturn;}}};jsts.noding.MCIndexNoder.prototype.add=function(segStr){var segChains=MonotoneChainBuilder.getChains(segStr.getCoordinates(),segStr);for(var i=0;i<segChains.length;i++){var mc=segChains[i];mc.setId(this.idCounter++);this.index.insert(mc.getEnvelope(),mc);this.monoChains.push(mc);}};})();jsts.simplify.LineSegmentIndex=function(){this.index=new jsts.index.quadtree.Quadtree();};jsts.simplify.LineSegmentIndex.prototype.index=null;jsts.simplify.LineSegmentIndex.prototype.add=function(line){if(line instanceof jsts.geom.LineSegment){this.add2(line);return;}\nvar segs=line.getSegments();for(var i=0;i<segs.length;i++){var seg=segs[i];this.add2(seg);}};jsts.simplify.LineSegmentIndex.prototype.add2=function(seg){this.index.insert(new jsts.geom.Envelope(seg.p0,seg.p1),seg);};jsts.simplify.LineSegmentIndex.prototype.remove=function(seg){this.index.remove(new jsts.geom.Envelope(seg.p0,seg.p1),seg);};jsts.simplify.LineSegmentIndex.prototype.query=function(querySeg){var env=new jsts.geom.Envelope(querySeg.p0,querySeg.p1);var visitor=new jsts.simplify.LineSegmentIndex.LineSegmentVisitor(querySeg);this.index.query(env,visitor);var itemsFound=visitor.getItems();return itemsFound;};jsts.simplify.LineSegmentIndex.LineSegmentVisitor=function(querySeg){this.items=[];this.querySeg=querySeg;};jsts.simplify.LineSegmentIndex.LineSegmentVisitor.prototype=new jsts.index.ItemVisitor();jsts.simplify.LineSegmentIndex.LineSegmentVisitor.prototype.querySeg=null;jsts.simplify.LineSegmentIndex.LineSegmentVisitor.prototype.items=null;jsts.simplify.LineSegmentIndex.LineSegmentVisitor.prototype.visitItem=function(item){var seg=item;if(jsts.geom.Envelope.intersects(seg.p0,seg.p1,this.querySeg.p0,this.querySeg.p1))\nthis.items.push(item);};jsts.simplify.LineSegmentIndex.LineSegmentVisitor.prototype.getItems=function(){return this.items;};jsts.geomgraph.EdgeEndStar=function(){this.edgeMap=new javascript.util.TreeMap();this.edgeList=null;this.ptInAreaLocation=[jsts.geom.Location.NONE,jsts.geom.Location.NONE];};jsts.geomgraph.EdgeEndStar.prototype.edgeMap=null;jsts.geomgraph.EdgeEndStar.prototype.edgeList=null;jsts.geomgraph.EdgeEndStar.prototype.ptInAreaLocation=null;jsts.geomgraph.EdgeEndStar.prototype.insert=function(e){throw new jsts.error.AbstractMethodInvocationError();};jsts.geomgraph.EdgeEndStar.prototype.insertEdgeEnd=function(e,obj){this.edgeMap.put(e,obj);this.edgeList=null;};jsts.geomgraph.EdgeEndStar.prototype.getCoordinate=function(){var it=this.iterator();if(!it.hasNext())\nreturn null;var e=it.next();return e.getCoordinate();};jsts.geomgraph.EdgeEndStar.prototype.getDegree=function(){return this.edgeMap.size();};jsts.geomgraph.EdgeEndStar.prototype.iterator=function(){return this.getEdges().iterator();};jsts.geomgraph.EdgeEndStar.prototype.getEdges=function(){if(this.edgeList===null){this.edgeList=new javascript.util.ArrayList(this.edgeMap.values());}\nreturn this.edgeList;};jsts.geomgraph.EdgeEndStar.prototype.getNextCW=function(ee){this.getEdges();var i=this.edgeList.indexOf(ee);var iNextCW=i-1;if(i===0)\niNextCW=this.edgeList.length-1;return this.edgeList[iNextCW];};jsts.geomgraph.EdgeEndStar.prototype.computeLabelling=function(geomGraph){this.computeEdgeEndLabels(geomGraph[0].getBoundaryNodeRule());this.propagateSideLabels(0);this.propagateSideLabels(1);var hasDimensionalCollapseEdge=[false,false];for(var it=this.iterator();it.hasNext();){var e=it.next();var label=e.getLabel();for(var geomi=0;geomi<2;geomi++){if(label.isLine(geomi)&&label.getLocation(geomi)===jsts.geom.Location.BOUNDARY)\nhasDimensionalCollapseEdge[geomi]=true;}}\nfor(var it=this.iterator();it.hasNext();){var e=it.next();var label=e.getLabel();for(var geomi=0;geomi<2;geomi++){if(label.isAnyNull(geomi)){var loc=jsts.geom.Location.NONE;if(hasDimensionalCollapseEdge[geomi]){loc=jsts.geom.Location.EXTERIOR;}else{var p=e.getCoordinate();loc=this.getLocation(geomi,p,geomGraph);}\nlabel.setAllLocationsIfNull(geomi,loc);}}}};jsts.geomgraph.EdgeEndStar.prototype.computeEdgeEndLabels=function(boundaryNodeRule){for(var it=this.iterator();it.hasNext();){var ee=it.next();ee.computeLabel(boundaryNodeRule);}};jsts.geomgraph.EdgeEndStar.prototype.getLocation=function(geomIndex,p,geom){if(this.ptInAreaLocation[geomIndex]===jsts.geom.Location.NONE){this.ptInAreaLocation[geomIndex]=jsts.algorithm.locate.SimplePointInAreaLocator.locate(p,geom[geomIndex].getGeometry());}\nreturn this.ptInAreaLocation[geomIndex];};jsts.geomgraph.EdgeEndStar.prototype.isAreaLabelsConsistent=function(geomGraph){this.computeEdgeEndLabels(geomGraph.getBoundaryNodeRule());return this.checkAreaLabelsConsistent(0);};jsts.geomgraph.EdgeEndStar.prototype.checkAreaLabelsConsistent=function(geomIndex){var edges=this.getEdges();if(edges.size()<=0)\nreturn true;var lastEdgeIndex=edges.size()-1;var startLabel=edges.get(lastEdgeIndex).getLabel();var startLoc=startLabel.getLocation(geomIndex,jsts.geomgraph.Position.LEFT);jsts.util.Assert.isTrue(startLoc!=jsts.geom.Location.NONE,'Found unlabelled area edge');var currLoc=startLoc;for(var it=this.iterator();it.hasNext();){var e=it.next();var label=e.getLabel();jsts.util.Assert.isTrue(label.isArea(geomIndex),'Found non-area edge');var leftLoc=label.getLocation(geomIndex,jsts.geomgraph.Position.LEFT);var rightLoc=label.getLocation(geomIndex,jsts.geomgraph.Position.RIGHT);if(leftLoc===rightLoc){return false;}\nif(rightLoc!==currLoc){return false;}\ncurrLoc=leftLoc;}\nreturn true;};jsts.geomgraph.EdgeEndStar.prototype.propagateSideLabels=function(geomIndex){var startLoc=jsts.geom.Location.NONE;for(var it=this.iterator();it.hasNext();){var e=it.next();var label=e.getLabel();if(label.isArea(geomIndex)&&label.getLocation(geomIndex,jsts.geomgraph.Position.LEFT)!==jsts.geom.Location.NONE)\nstartLoc=label.getLocation(geomIndex,jsts.geomgraph.Position.LEFT);}\nif(startLoc===jsts.geom.Location.NONE)\nreturn;var currLoc=startLoc;for(var it=this.iterator();it.hasNext();){var e=it.next();var label=e.getLabel();if(label.getLocation(geomIndex,jsts.geomgraph.Position.ON)===jsts.geom.Location.NONE)\nlabel.setLocation(geomIndex,jsts.geomgraph.Position.ON,currLoc);if(label.isArea(geomIndex)){var leftLoc=label.getLocation(geomIndex,jsts.geomgraph.Position.LEFT);var rightLoc=label.getLocation(geomIndex,jsts.geomgraph.Position.RIGHT);if(rightLoc!==jsts.geom.Location.NONE){if(rightLoc!==currLoc)\nthrow new jsts.error.TopologyError('side location conflict',e.getCoordinate());if(leftLoc===jsts.geom.Location.NONE){jsts.util.Assert.shouldNeverReachHere('found single null side (at '+\ne.getCoordinate()+')');}\ncurrLoc=leftLoc;}else{jsts.util.Assert.isTrue(label.getLocation(geomIndex,jsts.geomgraph.Position.LEFT)===jsts.geom.Location.NONE,'found single null side');label.setLocation(geomIndex,jsts.geomgraph.Position.RIGHT,currLoc);label.setLocation(geomIndex,jsts.geomgraph.Position.LEFT,currLoc);}}}};jsts.geomgraph.EdgeEndStar.prototype.findIndex=function(eSearch){this.iterator();for(var i=0;i<this.edgeList.size();i++){var e=this.edgeList.get(i);if(e===eSearch)\nreturn i;}\nreturn-1;};jsts.operation.relate.EdgeEndBundleStar=function(){jsts.geomgraph.EdgeEndStar.apply(this,arguments);};jsts.operation.relate.EdgeEndBundleStar.prototype=new jsts.geomgraph.EdgeEndStar();jsts.operation.relate.EdgeEndBundleStar.prototype.insert=function(e){var eb=this.edgeMap.get(e);if(eb===null){eb=new jsts.operation.relate.EdgeEndBundle(e);this.insertEdgeEnd(e,eb);}\nelse{eb.insert(e);}};jsts.operation.relate.EdgeEndBundleStar.prototype.updateIM=function(im){for(var it=this.iterator();it.hasNext();){var esb=it.next();esb.updateIM(im);}};jsts.index.ArrayListVisitor=function(){this.items=[];};jsts.index.ArrayListVisitor.prototype.visitItem=function(item){this.items.push(item);};jsts.index.ArrayListVisitor.prototype.getItems=function(){return this.items;};jsts.algorithm.distance.DistanceToPoint=function(){};jsts.algorithm.distance.DistanceToPoint.computeDistance=function(geom,pt,ptDist){if(geom instanceof jsts.geom.LineString){jsts.algorithm.distance.DistanceToPoint.computeDistance2(geom,pt,ptDist);}else if(geom instanceof jsts.geom.Polygon){jsts.algorithm.distance.DistanceToPoint.computeDistance4(geom,pt,ptDist);}else if(geom instanceof jsts.geom.GeometryCollection){var gc=geom;for(var i=0;i<gc.getNumGeometries();i++){var g=gc.getGeometryN(i);jsts.algorithm.distance.DistanceToPoint.computeDistance(g,pt,ptDist);}}else{ptDist.setMinimum(geom.getCoordinate(),pt);}};jsts.algorithm.distance.DistanceToPoint.computeDistance2=function(line,pt,ptDist){var tempSegment=new jsts.geom.LineSegment();var coords=line.getCoordinates();for(var i=0;i<coords.length-1;i++){tempSegment.setCoordinates(coords[i],coords[i+1]);var closestPt=tempSegment.closestPoint(pt);ptDist.setMinimum(closestPt,pt);}};jsts.algorithm.distance.DistanceToPoint.computeDistance3=function(segment,pt,ptDist){var closestPt=segment.closestPoint(pt);ptDist.setMinimum(closestPt,pt);};jsts.algorithm.distance.DistanceToPoint.computeDistance4=function(poly,pt,ptDist){jsts.algorithm.distance.DistanceToPoint.computeDistance2(poly.getExteriorRing(),pt,ptDist);for(var i=0;i<poly.getNumInteriorRing();i++){jsts.algorithm.distance.DistanceToPoint.computeDistance2(poly.getInteriorRingN(i),pt,ptDist);}};jsts.index.strtree.ItemBoundable=function(bounds,item){this.bounds=bounds;this.item=item;};jsts.index.strtree.ItemBoundable.prototype=new jsts.index.strtree.Boundable();jsts.index.strtree.ItemBoundable.constructor=jsts.index.strtree.ItemBoundable;jsts.index.strtree.ItemBoundable.prototype.bounds=null;jsts.index.strtree.ItemBoundable.prototype.item=null;jsts.index.strtree.ItemBoundable.prototype.getBounds=function(){return this.bounds;};jsts.index.strtree.ItemBoundable.prototype.getItem=function(){return this.item;};(function(){var ArrayList=javascript.util.ArrayList;var TreeMap=javascript.util.TreeMap;jsts.geomgraph.EdgeList=function(){this.edges=new ArrayList();this.ocaMap=new TreeMap();};jsts.geomgraph.EdgeList.prototype.edges=null;jsts.geomgraph.EdgeList.prototype.ocaMap=null;jsts.geomgraph.EdgeList.prototype.add=function(e){this.edges.add(e);var oca=new jsts.noding.OrientedCoordinateArray(e.getCoordinates());this.ocaMap.put(oca,e);};jsts.geomgraph.EdgeList.prototype.addAll=function(edgeColl){for(var i=edgeColl.iterator();i.hasNext();){this.add(i.next());}};jsts.geomgraph.EdgeList.prototype.getEdges=function(){return this.edges;};jsts.geomgraph.EdgeList.prototype.findEqualEdge=function(e){var oca=new jsts.noding.OrientedCoordinateArray(e.getCoordinates());var matchEdge=this.ocaMap.get(oca);return matchEdge;};jsts.geomgraph.EdgeList.prototype.getEdges=function(){return this.edges;};jsts.geomgraph.EdgeList.prototype.iterator=function(){return this.edges.iterator();};jsts.geomgraph.EdgeList.prototype.get=function(i){return this.edges.get(i);};jsts.geomgraph.EdgeList.prototype.findEdgeIndex=function(e){for(var i=0;i<this.edges.size();i++){if(this.edges.get(i).equals(e))\nreturn i;}\nreturn-1;};})();jsts.operation.IsSimpleOp=function(geom){this.geom=geom;};jsts.operation.IsSimpleOp.prototype.geom=null;jsts.operation.IsSimpleOp.prototype.isClosedEndpointsInInterior=true;jsts.operation.IsSimpleOp.prototype.nonSimpleLocation=null;jsts.operation.IsSimpleOp.prototype.IsSimpleOp=function(geom){this.geom=geom;};jsts.operation.IsSimpleOp.prototype.isSimple=function(){this.nonSimpleLocation=null;if(this.geom instanceof jsts.geom.LineString){return this.isSimpleLinearGeometry(this.geom);}\nif(this.geom instanceof jsts.geom.MultiLineString){return this.isSimpleLinearGeometry(this.geom);}\nif(this.geom instanceof jsts.geom.MultiPoint){return this.isSimpleMultiPoint(this.geom);}\nreturn true;};jsts.operation.IsSimpleOp.prototype.isSimpleMultiPoint=function(mp){if(mp.isEmpty())\nreturn true;var points=[];for(var i=0;i<mp.getNumGeometries();i++){var pt=mp.getGeometryN(i);var p=pt.getCoordinate();for(var j=0;j<points.length;j++){var point=points[j];if(p.equals2D(point)){this.nonSimpleLocation=p;return false;}}\npoints.push(p);}\nreturn true;};jsts.operation.IsSimpleOp.prototype.isSimpleLinearGeometry=function(geom){if(geom.isEmpty())\nreturn true;var graph=new jsts.geomgraph.GeometryGraph(0,geom);var li=new jsts.algorithm.RobustLineIntersector();var si=graph.computeSelfNodes(li,true);if(!si.hasIntersection())\nreturn true;if(si.hasProperIntersection()){this.nonSimpleLocation=si.getProperIntersectionPoint();return false;}\nif(this.hasNonEndpointIntersection(graph))\nreturn false;if(this.isClosedEndpointsInInterior){if(this.hasClosedEndpointIntersection(graph))\nreturn false;}\nreturn true;};jsts.operation.IsSimpleOp.prototype.hasNonEndpointIntersection=function(graph){for(var i=graph.getEdgeIterator();i.hasNext();){var e=i.next();var maxSegmentIndex=e.getMaximumSegmentIndex();for(var eiIt=e.getEdgeIntersectionList().iterator();eiIt.hasNext();){var ei=eiIt.next();if(!ei.isEndPoint(maxSegmentIndex)){this.nonSimpleLocation=ei.getCoordinate();return true;}}}\nreturn false;};jsts.operation.IsSimpleOp.prototype.hasClosedEndpointIntersection=function(graph){var endPoints=new javascript.util.TreeMap();for(var i=graph.getEdgeIterator();i.hasNext();){var e=i.next();var maxSegmentIndex=e.getMaximumSegmentIndex();var isClosed=e.isClosed();var p0=e.getCoordinate(0);this.addEndpoint(endPoints,p0,isClosed);var p1=e.getCoordinate(e.getNumPoints()-1);this.addEndpoint(endPoints,p1,isClosed);}\nfor(var i=endPoints.values().iterator();i.hasNext();){var eiInfo=i.next();if(eiInfo.isClosed&&eiInfo.degree!=2){this.nonSimpleLocation=eiInfo.getCoordinate();return true;}}\nreturn false;};jsts.operation.IsSimpleOp.EndpointInfo=function(pt){this.pt=pt;this.isClosed=false;this.degree=0;};jsts.operation.IsSimpleOp.EndpointInfo.prototype.pt=null;jsts.operation.IsSimpleOp.EndpointInfo.prototype.isClosed=null;jsts.operation.IsSimpleOp.EndpointInfo.prototype.degree=null;jsts.operation.IsSimpleOp.EndpointInfo.prototype.getCoordinate=function(){return this.pt;};jsts.operation.IsSimpleOp.EndpointInfo.prototype.addEndpoint=function(isClosed){this.degree++;this.isClosed=this.isClosed||isClosed;};jsts.operation.IsSimpleOp.prototype.addEndpoint=function(endPoints,p,isClosed){var eiInfo=endPoints.get(p);if(eiInfo===null){eiInfo=new jsts.operation.IsSimpleOp.EndpointInfo(p);endPoints.put(p,eiInfo);}\neiInfo.addEndpoint(isClosed);};(function(){var LineStringSnapper=function(){this.snapTolerance=0.0;this.seg=new jsts.geom.LineSegment();this.allowSnappingToSourceVertices=false;this.isClosed=false;this.srcPts=[];if(arguments[0]instanceof jsts.geom.LineString){this.initFromLine.apply(this,arguments);}else{this.initFromPoints.apply(this,arguments);}};LineStringSnapper.prototype.initFromLine=function(srcLine,snapTolerance){this.initFromPoints(srcLine.getCoordinates(),snapTolerance);};LineStringSnapper.prototype.initFromPoints=function(srcPts,snapTolerance){this.srcPts=srcPts;this.isClosed=this.calcIsClosed(srcPts);this.snapTolerance=snapTolerance;};LineStringSnapper.prototype.setAllowSnappingToSourceVertices=function(allowSnappingToSourceVertices){this.allowSnappingToSourceVertices=allowSnappingToSourceVertices;};LineStringSnapper.prototype.calcIsClosed=function(pts){if(pts.length<=1){return false;}\nreturn pts[0].equals(pts[pts.length-1]);};LineStringSnapper.prototype.snapTo=function(snapPts){var coordList=new jsts.geom.CoordinateList(this.srcPts);this.snapVertices(coordList,snapPts);this.snapSegments(coordList,snapPts);return coordList.toCoordinateArray();};LineStringSnapper.prototype.snapVertices=function(srcCoords,snapPts){var end=this.isClosed?srcCoords.size()-1:srcCoords.size(),i=0,srcPt,snapVert;for(i;i<end;i++){srcPt=srcCoords.get(i);snapVert=this.findSnapForVertex(srcPt,snapPts);if(snapVert!==null){srcCoords.set(i,new jsts.geom.Coordinate(snapVert));if(i===0&&this.isClosed)\nsrcCoords.set(srcCoords.size()-1,new jsts.geom.Coordinate(snapVert));}}};LineStringSnapper.prototype.findSnapForVertex=function(pt,snapPts){var i=0,il=snapPts.length;for(i=0;i<il;i++){if(pt.equals(snapPts[i])){return null;}\nif(pt.distance(snapPts[i])<this.snapTolerance){return snapPts[i];}}\nreturn null;};LineStringSnapper.prototype.snapSegments=function(srcCoords,snapPts){if(snapPts.length===0){return;}\nvar distinctPtCount=snapPts.length,i,snapPt,index;if(snapPts.length>1&&snapPts[0].equals2D(snapPts[snapPts.length-1])){distinctPtCount=snapPts.length-1;}\ni=0;for(i;i<distinctPtCount;i++){snapPt=snapPts[i];index=this.findSegmentIndexToSnap(snapPt,srcCoords);if(index>=0){srcCoords.add(index+1,new jsts.geom.Coordinate(snapPt),false);}}};LineStringSnapper.prototype.findSegmentIndexToSnap=function(snapPt,srcCoords){var minDist=Number.MAX_VALUE,snapIndex=-1,i=0,dist;for(i;i<srcCoords.size()-1;i++){this.seg.p0=srcCoords.get(i);this.seg.p1=srcCoords.get(i+1);if(this.seg.p0.equals(snapPt)||this.seg.p1.equals(snapPt)){if(this.allowSnappingToSourceVertices){continue;}else{return-1;}}\ndist=this.seg.distance(snapPt);if(dist<this.snapTolerance&&dist<minDist){minDist=dist;snapIndex=i;}}\nreturn snapIndex;};jsts.operation.overlay.snap.LineStringSnapper=LineStringSnapper;})();(function(){var ArrayList=javascript.util.ArrayList;var GeometryComponentFilter=jsts.geom.GeometryComponentFilter;var LineString=jsts.geom.LineString;var EdgeRing=jsts.operation.polygonize.EdgeRing;var PolygonizeGraph=jsts.operation.polygonize.PolygonizeGraph;var Polygonizer=function(){var that=this;var LineStringAdder=function(){};LineStringAdder.prototype=new GeometryComponentFilter();LineStringAdder.prototype.filter=function(g){if(g instanceof LineString)\nthat.add(g);};this.lineStringAdder=new LineStringAdder();this.dangles=new ArrayList();this.cutEdges=new ArrayList();this.invalidRingLines=new ArrayList();};Polygonizer.prototype.lineStringAdder=null;Polygonizer.prototype.graph=null;Polygonizer.prototype.dangles=null;Polygonizer.prototype.cutEdges=null;Polygonizer.prototype.invalidRingLines=null;Polygonizer.prototype.holeList=null;Polygonizer.prototype.shellList=null;Polygonizer.prototype.polyList=null;Polygonizer.prototype.add=function(geomList){if(geomList instanceof jsts.geom.LineString){return this.add3(geomList);}else if(geomList instanceof jsts.geom.Geometry){return this.add2(geomList);}\nfor(var i=geomList.iterator();i.hasNext();){var geometry=i.next();this.add2(geometry);}};Polygonizer.prototype.add2=function(g){g.apply(this.lineStringAdder);};Polygonizer.prototype.add3=function(line){if(this.graph==null)\nthis.graph=new PolygonizeGraph(line.getFactory());this.graph.addEdge(line);};Polygonizer.prototype.getPolygons=function(){this.polygonize();return this.polyList;};Polygonizer.prototype.getDangles=function(){this.polygonize();return this.dangles;};Polygonizer.prototype.getCutEdges=function(){this.polygonize();return this.cutEdges;};Polygonizer.prototype.getInvalidRingLines=function(){this.polygonize();return this.invalidRingLines;};Polygonizer.prototype.polygonize=function(){if(this.polyList!=null)\nreturn;this.polyList=new ArrayList();if(this.graph==null)\nreturn;this.dangles=this.graph.deleteDangles();this.cutEdges=this.graph.deleteCutEdges();var edgeRingList=this.graph.getEdgeRings();var validEdgeRingList=new ArrayList();this.invalidRingLines=new ArrayList();this.findValidRings(edgeRingList,validEdgeRingList,this.invalidRingLines);this.findShellsAndHoles(validEdgeRingList);Polygonizer.assignHolesToShells(this.holeList,this.shellList);this.polyList=new ArrayList();for(var i=this.shellList.iterator();i.hasNext();){var er=i.next();this.polyList.add(er.getPolygon());}};Polygonizer.prototype.findValidRings=function(edgeRingList,validEdgeRingList,invalidRingList){for(var i=edgeRingList.iterator();i.hasNext();){var er=i.next();if(er.isValid())\nvalidEdgeRingList.add(er);else\ninvalidRingList.add(er.getLineString());}};Polygonizer.prototype.findShellsAndHoles=function(edgeRingList){this.holeList=new ArrayList();this.shellList=new ArrayList();for(var i=edgeRingList.iterator();i.hasNext();){var er=i.next();if(er.isHole())\nthis.holeList.add(er);else\nthis.shellList.add(er);}};Polygonizer.assignHolesToShells=function(holeList,shellList){for(var i=holeList.iterator();i.hasNext();){var holeER=i.next();Polygonizer.assignHoleToShell(holeER,shellList);}};Polygonizer.assignHoleToShell=function(holeER,shellList){var shell=EdgeRing.findEdgeRingContaining(holeER,shellList);if(shell!=null)\nshell.addHole(holeER.getRing());};jsts.operation.polygonize.Polygonizer=Polygonizer;})();(function(){var ArrayList=javascript.util.ArrayList;var GeometryTransformer=function(){};GeometryTransformer.prototype.inputGeom=null;GeometryTransformer.prototype.factory=null;GeometryTransformer.prototype.pruneEmptyGeometry=true;GeometryTransformer.prototype.preserveGeometryCollectionType=true;GeometryTransformer.prototype.preserveCollections=false;GeometryTransformer.prototype.reserveType=false;GeometryTransformer.prototype.getInputGeometry=function(){return this.inputGeom;};GeometryTransformer.prototype.transform=function(inputGeom){this.inputGeom=inputGeom;this.factory=inputGeom.getFactory();if(inputGeom instanceof jsts.geom.Point)\nreturn this.transformPoint(inputGeom,null);if(inputGeom instanceof jsts.geom.MultiPoint)\nreturn this.transformMultiPoint(inputGeom,null);if(inputGeom instanceof jsts.geom.LinearRing)\nreturn this.transformLinearRing(inputGeom,null);if(inputGeom instanceof jsts.geom.LineString)\nreturn this.transformLineString(inputGeom,null);if(inputGeom instanceof jsts.geom.MultiLineString)\nreturn this.transformMultiLineString(inputGeom,null);if(inputGeom instanceof jsts.geom.Polygon)\nreturn this.transformPolygon(inputGeom,null);if(inputGeom instanceof jsts.geom.MultiPolygon)\nreturn this.transformMultiPolygon(inputGeom,null);if(inputGeom instanceof jsts.geom.GeometryCollection)\nreturn this.transformGeometryCollection(inputGeom,null);throw new jsts.error.IllegalArgumentException('Unknown Geometry subtype: '+\ninputGeom.getClass().getName());};GeometryTransformer.prototype.createCoordinateSequence=function(coords){return this.factory.getCoordinateSequenceFactory().create(coords);};GeometryTransformer.prototype.copy=function(seq){return seq.clone();};GeometryTransformer.prototype.transformCoordinates=function(coords,parent){return this.copy(coords);};GeometryTransformer.prototype.transformPoint=function(geom,parent){return this.factory.createPoint(this.transformCoordinates(geom.getCoordinateSequence(),geom));};GeometryTransformer.prototype.transformMultiPoint=function(geom,parent){var transGeomList=new ArrayList();for(var i=0;i<geom.getNumGeometries();i++){var transformGeom=this.transformPoint(geom.getGeometryN(i),geom);if(transformGeom==null)\ncontinue;if(transformGeom.isEmpty())\ncontinue;transGeomList.add(transformGeom);}\nreturn this.factory.buildGeometry(transGeomList);};GeometryTransformer.prototype.transformLinearRing=function(geom,parent){var seq=this.transformCoordinates(geom.getCoordinateSequence(),geom);var seqSize=seq.length;if(seqSize>0&&seqSize<4&&!this.preserveType)\nreturn this.factory.createLineString(seq);return this.factory.createLinearRing(seq);};GeometryTransformer.prototype.transformLineString=function(geom,parent){return this.factory.createLineString(this.transformCoordinates(geom.getCoordinateSequence(),geom));};GeometryTransformer.prototype.transformMultiLineString=function(geom,parent){var transGeomList=new ArrayList();for(var i=0;i<geom.getNumGeometries();i++){var transformGeom=this.transformLineString(geom.getGeometryN(i),geom);if(transformGeom==null)\ncontinue;if(transformGeom.isEmpty())\ncontinue;transGeomList.add(transformGeom);}\nreturn this.factory.buildGeometry(transGeomList);};GeometryTransformer.prototype.transformPolygon=function(geom,parent){var isAllValidLinearRings=true;var shell=this.transformLinearRing(geom.getExteriorRing(),geom);if(shell==null||!(shell instanceof jsts.geom.LinearRing)||shell.isEmpty())\nisAllValidLinearRings=false;var holes=new ArrayList();for(var i=0;i<geom.getNumInteriorRing();i++){var hole=this.transformLinearRing(geom.getInteriorRingN(i),geom);if(hole==null||hole.isEmpty()){continue;}\nif(!(hole instanceof jsts.geom.LinearRing))\nisAllValidLinearRings=false;holes.add(hole);}\nif(isAllValidLinearRings)\nreturn this.factory.createPolygon(shell,holes.toArray());else{var components=new ArrayList();if(shell!=null)\ncomponents.add(shell);components.addAll(holes);return this.factory.buildGeometry(components);}};GeometryTransformer.prototype.transformMultiPolygon=function(geom,parent){var transGeomList=new ArrayList();for(var i=0;i<geom.getNumGeometries();i++){var transformGeom=this.transformPolygon(geom.getGeometryN(i),geom);if(transformGeom==null)\ncontinue;if(transformGeom.isEmpty())\ncontinue;transGeomList.add(transformGeom);}\nreturn this.factory.buildGeometry(transGeomList);};GeometryTransformer.prototype.transformGeometryCollection=function(geom,parent){var transGeomList=new ArrayList();for(var i=0;i<geom.getNumGeometries();i++){var transformGeom=this.transform(geom.getGeometryN(i));if(transformGeom==null)\ncontinue;if(this.pruneEmptyGeometry&&transformGeom.isEmpty())\ncontinue;transGeomList.add(transformGeom);}\nif(this.preserveGeometryCollectionType)\nreturn this.factory.createGeometryCollection(GeometryFactory.toGeometryArray(transGeomList));return this.factory.buildGeometry(transGeomList);};jsts.geom.util.GeometryTransformer=GeometryTransformer;})();(function(){var LineStringSnapper=jsts.operation.overlay.snap.LineStringSnapper;var PrecisionModel=jsts.geom.PrecisionModel;var TreeSet=javascript.util.TreeSet;var SnapTransformer=function(snapTolerance,snapPts,isSelfSnap){this.snapTolerance=snapTolerance;this.snapPts=snapPts;this.isSelfSnap=isSelfSnap||false;};SnapTransformer.prototype=new jsts.geom.util.GeometryTransformer();SnapTransformer.prototype.snapTolerance=null;SnapTransformer.prototype.snapPts=null;SnapTransformer.prototype.isSelfSnap=false;SnapTransformer.prototype.transformCoordinates=function(coords,parent){var srcPts=coords;var newPts=this.snapLine(srcPts,this.snapPts);return newPts;};SnapTransformer.prototype.snapLine=function(srcPts,snapPts){var snapper=new LineStringSnapper(srcPts,this.snapTolerance);snapper.setAllowSnappingToSourceVertices(this.isSelfSnap);return snapper.snapTo(snapPts);};var GeometrySnapper=function(srcGeom){this.srcGeom=srcGeom;};GeometrySnapper.SNAP_PRECISION_FACTOR=1e-9;GeometrySnapper.computeOverlaySnapTolerance=function(g){if(arguments.length===2){return GeometrySnapper.computeOverlaySnapTolerance2.apply(this,arguments);}\nvar snapTolerance=this.computeSizeBasedSnapTolerance(g);var pm=g.getPrecisionModel();if(pm.getType()==PrecisionModel.FIXED){var fixedSnapTol=(1/pm.getScale())*2/1.415;if(fixedSnapTol>snapTolerance)\nsnapTolerance=fixedSnapTol;}\nreturn snapTolerance;};GeometrySnapper.computeSizeBasedSnapTolerance=function(g){var env=g.getEnvelopeInternal();var minDimension=Math.min(env.getHeight(),env.getWidth());var snapTol=minDimension*GeometrySnapper.SNAP_PRECISION_FACTOR;return snapTol;};GeometrySnapper.computeOverlaySnapTolerance2=function(g0,g1){return Math.min(this.computeOverlaySnapTolerance(g0),this.computeOverlaySnapTolerance(g1));};GeometrySnapper.snap=function(g0,g1,snapTolerance){var snapGeom=[];var snapper0=new GeometrySnapper(g0);snapGeom[0]=snapper0.snapTo(g1,snapTolerance);var snapper1=new GeometrySnapper(g1);snapGeom[1]=snapper1.snapTo(snapGeom[0],snapTolerance);return snapGeom;};GeometrySnapper.snapToSelf=function(g0,snapTolerance,cleanResult){var snapper0=new GeometrySnapper(g0);return snapper0.snapToSelf(snapTolerance,cleanResult);};GeometrySnapper.prototype.srcGeom=null;GeometrySnapper.prototype.snapTo=function(snapGeom,snapTolerance){var snapPts=this.extractTargetCoordinates(snapGeom);var snapTrans=new SnapTransformer(snapTolerance,snapPts);return snapTrans.transform(this.srcGeom);};GeometrySnapper.prototype.snapToSelf=function(snapTolerance,cleanResult){var snapPts=this.extractTargetCoordinates(srcGeom);var snapTrans=new SnapTransformer(snapTolerance,snapPts,true);var snappedGeom=snapTrans.transform(srcGeom);var result=snappedGeom;if(cleanResult&&result instanceof Polygonal){result=snappedGeom.buffer(0);}\nreturn result;};GeometrySnapper.prototype.extractTargetCoordinates=function(g){var ptSet=new TreeSet();var pts=g.getCoordinates();for(var i=0;i<pts.length;i++){ptSet.add(pts[i]);}\nreturn ptSet.toArray();};GeometrySnapper.prototype.computeSnapTolerance=function(ringPts){var minSegLen=this.computeMinimumSegmentLength(ringPts);var snapTol=minSegLen/10;return snapTol;};GeometrySnapper.prototype.computeMinimumSegmentLength=function(pts){var minSegLen=Number.MAX_VALUE;for(var i=0;i<pts.length-1;i++){var segLen=pts[i].distance(pts[i+1]);if(segLen<minSegLen)\nminSegLen=segLen;}\nreturn minSegLen;};jsts.operation.overlay.snap.GeometrySnapper=GeometrySnapper;})();jsts.algorithm.PointLocator=function(boundaryRule){this.boundaryRule=boundaryRule?boundaryRule:jsts.algorithm.BoundaryNodeRule.OGC_SFS_BOUNDARY_RULE;};jsts.algorithm.PointLocator.prototype.boundaryRule=null;jsts.algorithm.PointLocator.prototype.isIn=null;jsts.algorithm.PointLocator.prototype.numBoundaries=null;jsts.algorithm.PointLocator.prototype.intersects=function(p,geom){return this.locate(p,geom)!==jsts.geom.Location.EXTERIOR;};jsts.algorithm.PointLocator.prototype.locate=function(p,geom){if(geom.isEmpty())\nreturn jsts.geom.Location.EXTERIOR;if(geom instanceof jsts.geom.Point){return this.locate2(p,geom);}else if(geom instanceof jsts.geom.LineString){return this.locate3(p,geom);}else if(geom instanceof jsts.geom.Polygon){return this.locate4(p,geom);}\nthis.isIn=false;this.numBoundaries=0;this.computeLocation(p,geom);if(this.boundaryRule.isInBoundary(this.numBoundaries))\nreturn jsts.geom.Location.BOUNDARY;if(this.numBoundaries>0||this.isIn)\nreturn jsts.geom.Location.INTERIOR;return jsts.geom.Location.EXTERIOR;};jsts.algorithm.PointLocator.prototype.computeLocation=function(p,geom){if(geom instanceof jsts.geom.Point||geom instanceof jsts.geom.LineString||geom instanceof jsts.geom.Polygon){this.updateLocationInfo(this.locate(p,geom));}else if(geom instanceof jsts.geom.MultiLineString){var ml=geom;for(var i=0;i<ml.getNumGeometries();i++){var l=ml.getGeometryN(i);this.updateLocationInfo(this.locate(p,l));}}else if(geom instanceof jsts.geom.MultiPolygon){var mpoly=geom;for(var i=0;i<mpoly.getNumGeometries();i++){var poly=mpoly.getGeometryN(i);this.updateLocationInfo(this.locate(p,poly));}}else if(geom instanceof jsts.geom.MultiPoint||geom instanceof jsts.geom.GeometryCollection){for(var i=0;i<geom.getNumGeometries();i++){var part=geom.getGeometryN(i);if(part!==geom){this.computeLocation(p,part);}}}};jsts.algorithm.PointLocator.prototype.updateLocationInfo=function(loc){if(loc===jsts.geom.Location.INTERIOR)\nthis.isIn=true;if(loc===jsts.geom.Location.BOUNDARY)\nthis.numBoundaries++;};jsts.algorithm.PointLocator.prototype.locate2=function(p,pt){var ptCoord=pt.getCoordinate();if(ptCoord.equals2D(p))\nreturn jsts.geom.Location.INTERIOR;return jsts.geom.Location.EXTERIOR;};jsts.algorithm.PointLocator.prototype.locate3=function(p,l){if(!l.getEnvelopeInternal().intersects(p))\nreturn jsts.geom.Location.EXTERIOR;var pt=l.getCoordinates();if(!l.isClosed()){if(p.equals(pt[0])||p.equals(pt[pt.length-1])){return jsts.geom.Location.BOUNDARY;}}\nif(jsts.algorithm.CGAlgorithms.isOnLine(p,pt))\nreturn jsts.geom.Location.INTERIOR;return jsts.geom.Location.EXTERIOR;};jsts.algorithm.PointLocator.prototype.locateInPolygonRing=function(p,ring){if(!ring.getEnvelopeInternal().intersects(p))\nreturn jsts.geom.Location.EXTERIOR;return jsts.algorithm.CGAlgorithms.locatePointInRing(p,ring.getCoordinates());};jsts.algorithm.PointLocator.prototype.locate4=function(p,poly){if(poly.isEmpty())\nreturn jsts.geom.Location.EXTERIOR;var shell=poly.getExteriorRing();var shellLoc=this.locateInPolygonRing(p,shell);if(shellLoc===jsts.geom.Location.EXTERIOR)\nreturn jsts.geom.Location.EXTERIOR;if(shellLoc===jsts.geom.Location.BOUNDARY)\nreturn jsts.geom.Location.BOUNDARY;for(var i=0;i<poly.getNumInteriorRing();i++){var hole=poly.getInteriorRingN(i);var holeLoc=this.locateInPolygonRing(p,hole);if(holeLoc===jsts.geom.Location.INTERIOR)\nreturn jsts.geom.Location.EXTERIOR;if(holeLoc===jsts.geom.Location.BOUNDARY)\nreturn jsts.geom.Location.BOUNDARY;}\nreturn jsts.geom.Location.INTERIOR;};(function(){var Location=jsts.geom.Location;var ArrayList=javascript.util.ArrayList;var TreeMap=javascript.util.TreeMap;jsts.geomgraph.NodeMap=function(nodeFactory){this.nodeMap=new TreeMap();this.nodeFact=nodeFactory;};jsts.geomgraph.NodeMap.prototype.nodeMap=null;jsts.geomgraph.NodeMap.prototype.nodeFact=null;jsts.geomgraph.NodeMap.prototype.addNode=function(arg){var node,coord;if(arg instanceof jsts.geom.Coordinate){coord=arg;node=this.nodeMap.get(coord);if(node===null){node=this.nodeFact.createNode(coord);this.nodeMap.put(coord,node);}\nreturn node;}else if(arg instanceof jsts.geomgraph.Node){var n=arg;coord=n.getCoordinate();node=this.nodeMap.get(coord);if(node===null){this.nodeMap.put(coord,n);return n;}\nnode.mergeLabel(n);return node;}};jsts.geomgraph.NodeMap.prototype.add=function(e){var p=e.getCoordinate();var n=this.addNode(p);n.add(e);};jsts.geomgraph.NodeMap.prototype.find=function(coord){return this.nodeMap.get(coord);};jsts.geomgraph.NodeMap.prototype.values=function(){return this.nodeMap.values();};jsts.geomgraph.NodeMap.prototype.iterator=function(){return this.values().iterator();};jsts.geomgraph.NodeMap.prototype.getBoundaryNodes=function(geomIndex){var bdyNodes=new ArrayList();for(var i=this.iterator();i.hasNext();){var node=i.next();if(node.getLabel().getLocation(geomIndex)===Location.BOUNDARY){bdyNodes.add(node);}}\nreturn bdyNodes;};})();(function(){var ArrayList=javascript.util.ArrayList;jsts.geomgraph.PlanarGraph=function(nodeFactory){this.edges=new ArrayList();this.edgeEndList=new ArrayList();this.nodes=new jsts.geomgraph.NodeMap(nodeFactory||new jsts.geomgraph.NodeFactory());};jsts.geomgraph.PlanarGraph.prototype.edges=null;jsts.geomgraph.PlanarGraph.prototype.nodes=null;jsts.geomgraph.PlanarGraph.prototype.edgeEndList=null;jsts.geomgraph.PlanarGraph.linkResultDirectedEdges=function(nodes){for(var nodeit=nodes.iterator();nodeit.hasNext();){var node=nodeit.next();node.getEdges().linkResultDirectedEdges();}};jsts.geomgraph.PlanarGraph.prototype.getEdgeIterator=function(){return this.edges.iterator();};jsts.geomgraph.PlanarGraph.prototype.getEdgeEnds=function(){return this.edgeEndList;};jsts.geomgraph.PlanarGraph.prototype.isBoundaryNode=function(geomIndex,coord){var node=this.nodes.find(coord);if(node===null)\nreturn false;var label=node.getLabel();if(label!==null&&label.getLocation(geomIndex)===jsts.geom.Location.BOUNDARY)\nreturn true;return false;};jsts.geomgraph.PlanarGraph.prototype.insertEdge=function(e){this.edges.add(e);};jsts.geomgraph.PlanarGraph.prototype.add=function(e){this.nodes.add(e);this.edgeEndList.add(e);};jsts.geomgraph.PlanarGraph.prototype.getNodeIterator=function(){return this.nodes.iterator();};jsts.geomgraph.PlanarGraph.prototype.getNodes=function(){return this.nodes.values();};jsts.geomgraph.PlanarGraph.prototype.addNode=function(node){return this.nodes.addNode(node);};jsts.geomgraph.PlanarGraph.prototype.addEdges=function(edgesToAdd){for(var it=edgesToAdd.iterator();it.hasNext();){var e=it.next();this.edges.add(e);var de1=new jsts.geomgraph.DirectedEdge(e,true);var de2=new jsts.geomgraph.DirectedEdge(e,false);de1.setSym(de2);de2.setSym(de1);this.add(de1);this.add(de2);}};jsts.geomgraph.PlanarGraph.prototype.linkResultDirectedEdges=function(){for(var nodeit=this.nodes.iterator();nodeit.hasNext();){var node=nodeit.next();node.getEdges().linkResultDirectedEdges();}};jsts.geomgraph.PlanarGraph.prototype.findEdgeInSameDirection=function(p0,p1){var i=0,il=this.edges.size(),e,eCoord;for(i;i<il;i++){e=this.edges.get(i);eCoord=e.getCoordinates();if(this.matchInSameDirection(p0,p1,eCoord[0],eCoord[1])){return e;}\nif(this.matchInSameDirection(p0,p1,eCoord[eCoord.length-1],eCoord[eCoord.length-2])){return e;}}\nreturn null;};jsts.geomgraph.PlanarGraph.prototype.matchInSameDirection=function(p0,p1,ep0,ep1){if(!p0.equals(ep0)){return false;}\nif(jsts.algorithm.CGAlgorithms.computeOrientation(p0,p1,ep1)===jsts.algorithm.CGAlgorithms.COLLINEAR&&jsts.geomgraph.Quadrant.quadrant(p0,p1)===jsts.geomgraph.Quadrant.quadrant(ep0,ep1)){return true;}\nreturn false;};jsts.geomgraph.PlanarGraph.prototype.findEdgeEnd=function(e){for(var i=this.getEdgeEnds().iterator();i.hasNext();){var ee=i.next();if(ee.getEdge()===e){return ee;}}\nreturn null;};})();jsts.noding.SegmentIntersector=function(){};jsts.noding.SegmentIntersector.prototype.processIntersections=jsts.abstractFunc;jsts.noding.SegmentIntersector.prototype.isDone=jsts.abstractFunc;(function(){var SegmentIntersector=jsts.noding.SegmentIntersector;var ArrayList=javascript.util.ArrayList;jsts.noding.InteriorIntersectionFinder=function(li){this.li=li;this.intersections=new ArrayList();this.interiorIntersection=null;};jsts.noding.InteriorIntersectionFinder.prototype=new SegmentIntersector();jsts.noding.InteriorIntersectionFinder.constructor=jsts.noding.InteriorIntersectionFinder;jsts.noding.InteriorIntersectionFinder.prototype.findAllIntersections=false;jsts.noding.InteriorIntersectionFinder.prototype.isCheckEndSegmentsOnly=false;jsts.noding.InteriorIntersectionFinder.prototype.li=null;jsts.noding.InteriorIntersectionFinder.prototype.interiorIntersection=null;jsts.noding.InteriorIntersectionFinder.prototype.intSegments=null;jsts.noding.InteriorIntersectionFinder.prototype.intersections=null;jsts.noding.InteriorIntersectionFinder.prototype.setFindAllIntersections=function(findAllIntersections){this.findAllIntersections=findAllIntersections;};jsts.noding.InteriorIntersectionFinder.prototype.getIntersections=function(){return intersections;};jsts.noding.InteriorIntersectionFinder.prototype.setCheckEndSegmentsOnly=function(isCheckEndSegmentsOnly){this.isCheckEndSegmentsOnly=isCheckEndSegmentsOnly;}\njsts.noding.InteriorIntersectionFinder.prototype.hasIntersection=function(){return this.interiorIntersection!=null;};jsts.noding.InteriorIntersectionFinder.prototype.getInteriorIntersection=function(){return this.interiorIntersection;};jsts.noding.InteriorIntersectionFinder.prototype.getIntersectionSegments=function(){return this.intSegments;};jsts.noding.InteriorIntersectionFinder.prototype.processIntersections=function(e0,segIndex0,e1,segIndex1){if(this.hasIntersection())\nreturn;if(e0==e1&&segIndex0==segIndex1)\nreturn;if(this.isCheckEndSegmentsOnly){var isEndSegPresent=this.isEndSegment(e0,segIndex0)||isEndSegment(e1,segIndex1);if(!isEndSegPresent)\nreturn;}\nvar p00=e0.getCoordinates()[segIndex0];var p01=e0.getCoordinates()[segIndex0+1];var p10=e1.getCoordinates()[segIndex1];var p11=e1.getCoordinates()[segIndex1+1];this.li.computeIntersection(p00,p01,p10,p11);if(this.li.hasIntersection()){if(this.li.isInteriorIntersection()){this.intSegments=[];this.intSegments[0]=p00;this.intSegments[1]=p01;this.intSegments[2]=p10;this.intSegments[3]=p11;this.interiorIntersection=this.li.getIntersection(0);this.intersections.add(this.interiorIntersection);}}};jsts.noding.InteriorIntersectionFinder.prototype.isEndSegment=function(segStr,index){if(index==0)\nreturn true;if(index>=segStr.size()-2)\nreturn true;return false;};jsts.noding.InteriorIntersectionFinder.prototype.isDone=function(){if(this.findAllIntersections)\nreturn false;return this.interiorIntersection!=null;};})();(function(){var RobustLineIntersector=jsts.algorithm.RobustLineIntersector;var InteriorIntersectionFinder=jsts.noding.InteriorIntersectionFinder;var MCIndexNoder=jsts.noding.MCIndexNoder;jsts.noding.FastNodingValidator=function(segStrings){this.li=new RobustLineIntersector();this.segStrings=segStrings;};jsts.noding.FastNodingValidator.prototype.li=null;jsts.noding.FastNodingValidator.prototype.segStrings=null;jsts.noding.FastNodingValidator.prototype.findAllIntersections=false;jsts.noding.FastNodingValidator.prototype.segInt=null;jsts.noding.FastNodingValidator.prototype._isValid=true;jsts.noding.FastNodingValidator.prototype.setFindAllIntersections=function(findAllIntersections){this.findAllIntersections=findAllIntersections;};jsts.noding.FastNodingValidator.prototype.getIntersections=function(){return segInt.getIntersections();};jsts.noding.FastNodingValidator.prototype.isValid=function(){this.execute();return this._isValid;};jsts.noding.FastNodingValidator.prototype.getErrorMessage=function(){if(this._isValid)\nreturn'no intersections found';var intSegs=this.segInt.getIntersectionSegments();return'found non-noded intersection between '+\njsts.io.WKTWriter.toLineString(intSegs[0],intSegs[1])+' and '+\njsts.io.WKTWriter.toLineString(intSegs[2],intSegs[3]);};jsts.noding.FastNodingValidator.prototype.checkValid=function(){this.execute();if(!this._isValid)\nthrow new jsts.error.TopologyError(this.getErrorMessage(),this.segInt.getInteriorIntersection());};jsts.noding.FastNodingValidator.prototype.execute=function(){if(this.segInt!=null)\nreturn;this.checkInteriorIntersections();};jsts.noding.FastNodingValidator.prototype.checkInteriorIntersections=function(){this._isValid=true;this.segInt=new InteriorIntersectionFinder(this.li);this.segInt.setFindAllIntersections(this.findAllIntersections);var noder=new MCIndexNoder();noder.setSegmentIntersector(this.segInt);noder.computeNodes(this.segStrings);if(this.segInt.hasIntersection()){this._isValid=false;return;}};})();(function(){jsts.noding.BasicSegmentString=function(pts,data){this.pts=pts;this.data=data;};jsts.noding.BasicSegmentString.prototype=new jsts.noding.SegmentString();jsts.noding.BasicSegmentString.prototype.pts=null;jsts.noding.BasicSegmentString.prototype.data=null;jsts.noding.BasicSegmentString.prototype.getData=function(){return this.data;}\njsts.noding.BasicSegmentString.prototype.setData=function(data){this.data=data;};jsts.noding.BasicSegmentString.prototype.size=function(){return this.pts.length;};jsts.noding.BasicSegmentString.prototype.getCoordinate=function(i){return this.pts[i];};jsts.noding.BasicSegmentString.prototype.getCoordinates=function(){return this.pts;};jsts.noding.BasicSegmentString.prototype.isClosed=function(){return this.pts[0].equals(this.pts[this.pts.length-1]);};jsts.noding.BasicSegmentString.prototype.getSegmentOctant=function(index){if(index==this.pts.length-1)\nreturn-1;return jsts.noding.Octant.octant(this.getCoordinate(index),this.getCoordinate(index+1));};})();(function(){var FastNodingValidator=jsts.noding.FastNodingValidator;var BasicSegmentString=jsts.noding.BasicSegmentString;var ArrayList=javascript.util.ArrayList;jsts.geomgraph.EdgeNodingValidator=function(edges){this.nv=new FastNodingValidator(jsts.geomgraph.EdgeNodingValidator.toSegmentStrings(edges));};jsts.geomgraph.EdgeNodingValidator.checkValid=function(edges){var validator=new jsts.geomgraph.EdgeNodingValidator(edges);validator.checkValid();};jsts.geomgraph.EdgeNodingValidator.toSegmentStrings=function(edges){var segStrings=new ArrayList();for(var i=edges.iterator();i.hasNext();){var e=i.next();segStrings.add(new BasicSegmentString(e.getCoordinates(),e));}\nreturn segStrings;};jsts.geomgraph.EdgeNodingValidator.prototype.nv=null;jsts.geomgraph.EdgeNodingValidator.prototype.checkValid=function(){this.nv.checkValid();};})();jsts.operation.GeometryGraphOperation=function(g0,g1,boundaryNodeRule){this.li=new jsts.algorithm.RobustLineIntersector();this.arg=[];if(g0===undefined){return;}\nif(g1===undefined){this.setComputationPrecision(g0.getPrecisionModel());this.arg[0]=new jsts.geomgraph.GeometryGraph(0,g0);return;}\nboundaryNodeRule=boundaryNodeRule||jsts.algorithm.BoundaryNodeRule.OGC_SFS_BOUNDARY_RULE;if(g0.getPrecisionModel().compareTo(g1.getPrecisionModel())>=0)\nthis.setComputationPrecision(g0.getPrecisionModel());else\nthis.setComputationPrecision(g1.getPrecisionModel());this.arg[0]=new jsts.geomgraph.GeometryGraph(0,g0,boundaryNodeRule);this.arg[1]=new jsts.geomgraph.GeometryGraph(1,g1,boundaryNodeRule);};jsts.operation.GeometryGraphOperation.prototype.li=null;jsts.operation.GeometryGraphOperation.prototype.resultPrecisionModel=null;jsts.operation.GeometryGraphOperation.prototype.arg=null;jsts.operation.GeometryGraphOperation.prototype.getArgGeometry=function(i){return arg[i].getGeometry();};jsts.operation.GeometryGraphOperation.prototype.setComputationPrecision=function(pm){this.resultPrecisionModel=pm;this.li.setPrecisionModel(this.resultPrecisionModel);};jsts.operation.overlay.OverlayNodeFactory=function(){};jsts.operation.overlay.OverlayNodeFactory.prototype=new jsts.geomgraph.NodeFactory();jsts.operation.overlay.OverlayNodeFactory.constructor=jsts.operation.overlay.OverlayNodeFactory;jsts.operation.overlay.OverlayNodeFactory.prototype.createNode=function(coord){return new jsts.geomgraph.Node(coord,new jsts.geomgraph.DirectedEdgeStar());};jsts.operation.overlay.PolygonBuilder=function(geometryFactory){this.shellList=[];this.geometryFactory=geometryFactory;};jsts.operation.overlay.PolygonBuilder.prototype.geometryFactory=null;jsts.operation.overlay.PolygonBuilder.prototype.shellList=null;jsts.operation.overlay.PolygonBuilder.prototype.add=function(graph){if(arguments.length===2){this.add2.apply(this,arguments);return;}\nthis.add2(graph.getEdgeEnds(),graph.getNodes());};jsts.operation.overlay.PolygonBuilder.prototype.add2=function(dirEdges,nodes){jsts.geomgraph.PlanarGraph.linkResultDirectedEdges(nodes);var maxEdgeRings=this.buildMaximalEdgeRings(dirEdges);var freeHoleList=[];var edgeRings=this.buildMinimalEdgeRings(maxEdgeRings,this.shellList,freeHoleList);this.sortShellsAndHoles(edgeRings,this.shellList,freeHoleList);this.placeFreeHoles(this.shellList,freeHoleList);};jsts.operation.overlay.PolygonBuilder.prototype.getPolygons=function(){var resultPolyList=this.computePolygons(this.shellList);return resultPolyList;};jsts.operation.overlay.PolygonBuilder.prototype.buildMaximalEdgeRings=function(dirEdges){var maxEdgeRings=[];for(var it=dirEdges.iterator();it.hasNext();){var de=it.next();if(de.isInResult()&&de.getLabel().isArea()){if(de.getEdgeRing()==null){var er=new jsts.operation.overlay.MaximalEdgeRing(de,this.geometryFactory);maxEdgeRings.push(er);er.setInResult();}}}\nreturn maxEdgeRings;};jsts.operation.overlay.PolygonBuilder.prototype.buildMinimalEdgeRings=function(maxEdgeRings,shellList,freeHoleList){var edgeRings=[];for(var i=0;i<maxEdgeRings.length;i++){var er=maxEdgeRings[i];if(er.getMaxNodeDegree()>2){er.linkDirectedEdgesForMinimalEdgeRings();var minEdgeRings=er.buildMinimalRings();var shell=this.findShell(minEdgeRings);if(shell!==null){this.placePolygonHoles(shell,minEdgeRings);shellList.push(shell);}else{freeHoleList=freeHoleList.concat(minEdgeRings);}}else{edgeRings.push(er);}}\nreturn edgeRings;};jsts.operation.overlay.PolygonBuilder.prototype.findShell=function(minEdgeRings){var shellCount=0;var shell=null;for(var i=0;i<minEdgeRings.length;i++){var er=minEdgeRings[i];if(!er.isHole()){shell=er;shellCount++;}}\njsts.util.Assert.isTrue(shellCount<=1,'found two shells in MinimalEdgeRing list');return shell;};jsts.operation.overlay.PolygonBuilder.prototype.placePolygonHoles=function(shell,minEdgeRings){for(var i=0;i<minEdgeRings.length;i++){var er=minEdgeRings[i];if(er.isHole()){er.setShell(shell);}}};jsts.operation.overlay.PolygonBuilder.prototype.sortShellsAndHoles=function(edgeRings,shellList,freeHoleList){for(var i=0;i<edgeRings.length;i++){var er=edgeRings[i];if(er.isHole()){freeHoleList.push(er);}else{shellList.push(er);}}};jsts.operation.overlay.PolygonBuilder.prototype.placeFreeHoles=function(shellList,freeHoleList){for(var i=0;i<freeHoleList.length;i++){var hole=freeHoleList[i];if(hole.getShell()==null){var shell=this.findEdgeRingContaining(hole,shellList);if(shell===null)\nthrow new jsts.error.TopologyError('unable to assign hole to a shell',hole.getCoordinate(0));hole.setShell(shell);}}};jsts.operation.overlay.PolygonBuilder.prototype.findEdgeRingContaining=function(testEr,shellList){var testRing=testEr.getLinearRing();var testEnv=testRing.getEnvelopeInternal();var testPt=testRing.getCoordinateN(0);var minShell=null;var minEnv=null;for(var i=0;i<shellList.length;i++){var tryShell=shellList[i];var tryRing=tryShell.getLinearRing();var tryEnv=tryRing.getEnvelopeInternal();if(minShell!==null)\nminEnv=minShell.getLinearRing().getEnvelopeInternal();var isContained=false;if(tryEnv.contains(testEnv)&&jsts.algorithm.CGAlgorithms.isPointInRing(testPt,tryRing.getCoordinates()))\nisContained=true;if(isContained){if(minShell==null||minEnv.contains(tryEnv)){minShell=tryShell;}}}\nreturn minShell;};jsts.operation.overlay.PolygonBuilder.prototype.computePolygons=function(shellList){var resultPolyList=new javascript.util.ArrayList();for(var i=0;i<shellList.length;i++){var er=shellList[i];var poly=er.toPolygon(this.geometryFactory);resultPolyList.add(poly);}\nreturn resultPolyList;};jsts.operation.overlay.PolygonBuilder.prototype.containsPoint=function(p){for(var i=0;i<this.shellList.length;i++){var er=this.shellList[i];if(er.containsPoint(p))\nreturn true;}\nreturn false;};(function(){var Assert=jsts.util.Assert;var ArrayList=javascript.util.ArrayList;var LineBuilder=function(op,geometryFactory,ptLocator){this.lineEdgesList=new ArrayList();this.resultLineList=new ArrayList();this.op=op;this.geometryFactory=geometryFactory;this.ptLocator=ptLocator;};LineBuilder.prototype.op=null;LineBuilder.prototype.geometryFactory=null;LineBuilder.prototype.ptLocator=null;LineBuilder.prototype.lineEdgesList=null;LineBuilder.prototype.resultLineList=null;LineBuilder.prototype.build=function(opCode){this.findCoveredLineEdges();this.collectLines(opCode);this.buildLines(opCode);return this.resultLineList;};LineBuilder.prototype.findCoveredLineEdges=function(){for(var nodeit=this.op.getGraph().getNodes().iterator();nodeit.hasNext();){var node=nodeit.next();node.getEdges().findCoveredLineEdges();}\nfor(var it=this.op.getGraph().getEdgeEnds().iterator();it.hasNext();){var de=it.next();var e=de.getEdge();if(de.isLineEdge()&&!e.isCoveredSet()){var isCovered=this.op.isCoveredByA(de.getCoordinate());e.setCovered(isCovered);}}};LineBuilder.prototype.collectLines=function(opCode){for(var it=this.op.getGraph().getEdgeEnds().iterator();it.hasNext();){var de=it.next();this.collectLineEdge(de,opCode,this.lineEdgesList);this.collectBoundaryTouchEdge(de,opCode,this.lineEdgesList);}};LineBuilder.prototype.collectLineEdge=function(de,opCode,edges){var label=de.getLabel();var e=de.getEdge();if(de.isLineEdge()){if(!de.isVisited()&&jsts.operation.overlay.OverlayOp.isResultOfOp(label,opCode)&&!e.isCovered()){edges.add(e);de.setVisitedEdge(true);}}};LineBuilder.prototype.collectBoundaryTouchEdge=function(de,opCode,edges){var label=de.getLabel();if(de.isLineEdge())\nreturn;if(de.isVisited())\nreturn;if(de.isInteriorAreaEdge())\nreturn;if(de.getEdge().isInResult())\nreturn;Assert.isTrue(!(de.isInResult()||de.getSym().isInResult())||!de.getEdge().isInResult());if(jsts.operation.overlay.OverlayOp.isResultOfOp(label,opCode)&&opCode===jsts.operation.overlay.OverlayOp.INTERSECTION){edges.add(de.getEdge());de.setVisitedEdge(true);}};LineBuilder.prototype.buildLines=function(opCode){for(var it=this.lineEdgesList.iterator();it.hasNext();){var e=it.next();var label=e.getLabel();var line=this.geometryFactory.createLineString(e.getCoordinates());this.resultLineList.add(line);e.setInResult(true);}};LineBuilder.prototype.labelIsolatedLines=function(edgesList){for(var it=edgesList.iterator();it.hasNext();){var e=it.next();var label=e.getLabel();if(e.isIsolated()){if(label.isNull(0))\nthis.labelIsolatedLine(e,0);else\nthis.labelIsolatedLine(e,1);}}};LineBuilder.prototype.labelIsolatedLine=function(e,targetIndex){var loc=ptLocator.locate(e.getCoordinate(),op.getArgGeometry(targetIndex));e.getLabel().setLocation(targetIndex,loc);};jsts.operation.overlay.LineBuilder=LineBuilder;})();(function(){var ArrayList=javascript.util.ArrayList;var PointBuilder=function(op,geometryFactory,ptLocator){this.resultPointList=new ArrayList();this.op=op;this.geometryFactory=geometryFactory;};PointBuilder.prototype.op=null;PointBuilder.prototype.geometryFactory=null;PointBuilder.prototype.resultPointList=null;PointBuilder.prototype.build=function(opCode){this.extractNonCoveredResultNodes(opCode);return this.resultPointList;};PointBuilder.prototype.extractNonCoveredResultNodes=function(opCode){for(var nodeit=this.op.getGraph().getNodes().iterator();nodeit.hasNext();){var n=nodeit.next();if(n.isInResult())\ncontinue;if(n.isIncidentEdgeInResult())\ncontinue;if(n.getEdges().getDegree()===0||opCode===jsts.operation.overlay.OverlayOp.INTERSECTION){var label=n.getLabel();if(jsts.operation.overlay.OverlayOp.isResultOfOp(label,opCode)){this.filterCoveredNodeToPoint(n);}}}};PointBuilder.prototype.filterCoveredNodeToPoint=function(n){var coord=n.getCoordinate();if(!this.op.isCoveredByLA(coord)){var pt=this.geometryFactory.createPoint(coord);this.resultPointList.add(pt);}};jsts.operation.overlay.PointBuilder=PointBuilder;})();(function(){var PointLocator=jsts.algorithm.PointLocator;var Location=jsts.geom.Location;var EdgeList=jsts.geomgraph.EdgeList;var Label=jsts.geomgraph.Label;var PlanarGraph=jsts.geomgraph.PlanarGraph;var Position=jsts.geomgraph.Position;var EdgeNodingValidator=jsts.geomgraph.EdgeNodingValidator;var GeometryGraphOperation=jsts.operation.GeometryGraphOperation;var OverlayNodeFactory=jsts.operation.overlay.OverlayNodeFactory;var PolygonBuilder=jsts.operation.overlay.PolygonBuilder;var LineBuilder=jsts.operation.overlay.LineBuilder;var PointBuilder=jsts.operation.overlay.PointBuilder;var Assert=jsts.util.Assert;var ArrayList=javascript.util.ArrayList;jsts.operation.overlay.OverlayOp=function(g0,g1){this.ptLocator=new PointLocator();this.edgeList=new EdgeList();this.resultPolyList=new ArrayList();this.resultLineList=new ArrayList();this.resultPointList=new ArrayList();GeometryGraphOperation.call(this,g0,g1);this.graph=new PlanarGraph(new OverlayNodeFactory());this.geomFact=g0.getFactory();};jsts.operation.overlay.OverlayOp.prototype=new GeometryGraphOperation();jsts.operation.overlay.OverlayOp.constructor=jsts.operation.overlay.OverlayOp;jsts.operation.overlay.OverlayOp.INTERSECTION=1;jsts.operation.overlay.OverlayOp.UNION=2;jsts.operation.overlay.OverlayOp.DIFFERENCE=3;jsts.operation.overlay.OverlayOp.SYMDIFFERENCE=4;jsts.operation.overlay.OverlayOp.overlayOp=function(geom0,geom1,opCode){var gov=new jsts.operation.overlay.OverlayOp(geom0,geom1);var geomOv=gov.getResultGeometry(opCode);return geomOv;}\njsts.operation.overlay.OverlayOp.isResultOfOp=function(label,opCode){if(arguments.length===3){return jsts.operation.overlay.OverlayOp.isResultOfOp2.apply(this,arguments);}\nvar loc0=label.getLocation(0);var loc1=label.getLocation(1);return jsts.operation.overlay.OverlayOp.isResultOfOp2(loc0,loc1,opCode);}\njsts.operation.overlay.OverlayOp.isResultOfOp2=function(loc0,loc1,opCode){if(loc0==Location.BOUNDARY)\nloc0=Location.INTERIOR;if(loc1==Location.BOUNDARY)\nloc1=Location.INTERIOR;switch(opCode){case jsts.operation.overlay.OverlayOp.INTERSECTION:return loc0==Location.INTERIOR&&loc1==Location.INTERIOR;case jsts.operation.overlay.OverlayOp.UNION:return loc0==Location.INTERIOR||loc1==Location.INTERIOR;case jsts.operation.overlay.OverlayOp.DIFFERENCE:return loc0==Location.INTERIOR&&loc1!=Location.INTERIOR;case jsts.operation.overlay.OverlayOp.SYMDIFFERENCE:return(loc0==Location.INTERIOR&&loc1!=Location.INTERIOR)||(loc0!=Location.INTERIOR&&loc1==Location.INTERIOR);}\nreturn false;}\njsts.operation.overlay.OverlayOp.prototype.ptLocator=null;jsts.operation.overlay.OverlayOp.prototype.geomFact=null;jsts.operation.overlay.OverlayOp.prototype.resultGeom=null;jsts.operation.overlay.OverlayOp.prototype.graph=null;jsts.operation.overlay.OverlayOp.prototype.edgeList=null;jsts.operation.overlay.OverlayOp.prototype.resultPolyList=null;jsts.operation.overlay.OverlayOp.prototype.resultLineList=null;jsts.operation.overlay.OverlayOp.prototype.resultPointList=null;jsts.operation.overlay.OverlayOp.prototype.getResultGeometry=function(funcCode){this.computeOverlay(funcCode);return this.resultGeom;}\njsts.operation.overlay.OverlayOp.prototype.getGraph=function(){return this.graph;}\njsts.operation.overlay.OverlayOp.prototype.computeOverlay=function(opCode){this.copyPoints(0);this.copyPoints(1);this.arg[0].computeSelfNodes(this.li,false);this.arg[1].computeSelfNodes(this.li,false);this.arg[0].computeEdgeIntersections(this.arg[1],this.li,true);var baseSplitEdges=new ArrayList();this.arg[0].computeSplitEdges(baseSplitEdges);this.arg[1].computeSplitEdges(baseSplitEdges);var splitEdges=baseSplitEdges;this.insertUniqueEdges(baseSplitEdges);this.computeLabelsFromDepths();this.replaceCollapsedEdges();EdgeNodingValidator.checkValid(this.edgeList.getEdges());this.graph.addEdges(this.edgeList.getEdges());this.computeLabelling();this.labelIncompleteNodes();this.findResultAreaEdges(opCode);this.cancelDuplicateResultEdges();var polyBuilder=new PolygonBuilder(this.geomFact);polyBuilder.add(this.graph);this.resultPolyList=polyBuilder.getPolygons();var lineBuilder=new LineBuilder(this,this.geomFact,this.ptLocator);this.resultLineList=lineBuilder.build(opCode);var pointBuilder=new PointBuilder(this,this.geomFact,this.ptLocator);this.resultPointList=pointBuilder.build(opCode);this.resultGeom=this.computeGeometry(this.resultPointList,this.resultLineList,this.resultPolyList,opCode);}\njsts.operation.overlay.OverlayOp.prototype.insertUniqueEdges=function(edges){for(var i=edges.iterator();i.hasNext();){var e=i.next();this.insertUniqueEdge(e);}}\njsts.operation.overlay.OverlayOp.prototype.insertUniqueEdge=function(e){var existingEdge=this.edgeList.findEqualEdge(e);if(existingEdge!==null){var existingLabel=existingEdge.getLabel();var labelToMerge=e.getLabel();if(!existingEdge.isPointwiseEqual(e)){labelToMerge=new Label(e.getLabel());labelToMerge.flip();}\nvar depth=existingEdge.getDepth();if(depth.isNull()){depth.add(existingLabel);}\ndepth.add(labelToMerge);existingLabel.merge(labelToMerge);}else{this.edgeList.add(e);}};jsts.operation.overlay.OverlayOp.prototype.computeLabelsFromDepths=function(){for(var it=this.edgeList.iterator();it.hasNext();){var e=it.next();var lbl=e.getLabel();var depth=e.getDepth();if(!depth.isNull()){depth.normalize();for(var i=0;i<2;i++){if(!lbl.isNull(i)&&lbl.isArea()&&!depth.isNull(i)){if(depth.getDelta(i)==0){lbl.toLine(i);}else{Assert.isTrue(!depth.isNull(i,Position.LEFT),'depth of LEFT side has not been initialized');lbl.setLocation(i,Position.LEFT,depth.getLocation(i,Position.LEFT));Assert.isTrue(!depth.isNull(i,Position.RIGHT),'depth of RIGHT side has not been initialized');lbl.setLocation(i,Position.RIGHT,depth.getLocation(i,Position.RIGHT));}}}}}}\njsts.operation.overlay.OverlayOp.prototype.replaceCollapsedEdges=function(){var newEdges=new ArrayList();for(var it=this.edgeList.iterator();it.hasNext();){var e=it.next();if(e.isCollapsed()){it.remove();newEdges.add(e.getCollapsedEdge());}}\nthis.edgeList.addAll(newEdges);}\njsts.operation.overlay.OverlayOp.prototype.copyPoints=function(argIndex){for(var i=this.arg[argIndex].getNodeIterator();i.hasNext();){var graphNode=i.next();var newNode=this.graph.addNode(graphNode.getCoordinate());newNode.setLabel(argIndex,graphNode.getLabel().getLocation(argIndex));}}\njsts.operation.overlay.OverlayOp.prototype.computeLabelling=function(){for(var nodeit=this.graph.getNodes().iterator();nodeit.hasNext();){var node=nodeit.next();node.getEdges().computeLabelling(this.arg);}\nthis.mergeSymLabels();this.updateNodeLabelling();}\njsts.operation.overlay.OverlayOp.prototype.mergeSymLabels=function(){for(var nodeit=this.graph.getNodes().iterator();nodeit.hasNext();){var node=nodeit.next();node.getEdges().mergeSymLabels();}}\njsts.operation.overlay.OverlayOp.prototype.updateNodeLabelling=function(){for(var nodeit=this.graph.getNodes().iterator();nodeit.hasNext();){var node=nodeit.next();var lbl=node.getEdges().getLabel();node.getLabel().merge(lbl);}}\njsts.operation.overlay.OverlayOp.prototype.labelIncompleteNodes=function(){var nodeCount=0;for(var ni=this.graph.getNodes().iterator();ni.hasNext();){var n=ni.next();var label=n.getLabel();if(n.isIsolated()){nodeCount++;if(label.isNull(0))\nthis.labelIncompleteNode(n,0);else\nthis.labelIncompleteNode(n,1);}\nn.getEdges().updateLabelling(label);}};jsts.operation.overlay.OverlayOp.prototype.labelIncompleteNode=function(n,targetIndex){var loc=this.ptLocator.locate(n.getCoordinate(),this.arg[targetIndex].getGeometry());n.getLabel().setLocation(targetIndex,loc);};jsts.operation.overlay.OverlayOp.prototype.findResultAreaEdges=function(opCode){for(var it=this.graph.getEdgeEnds().iterator();it.hasNext();){var de=it.next();var label=de.getLabel();if(label.isArea()&&!de.isInteriorAreaEdge()&&jsts.operation.overlay.OverlayOp.isResultOfOp(label.getLocation(0,Position.RIGHT),label.getLocation(1,Position.RIGHT),opCode)){de.setInResult(true);}}};jsts.operation.overlay.OverlayOp.prototype.cancelDuplicateResultEdges=function(){for(var it=this.graph.getEdgeEnds().iterator();it.hasNext();){var de=it.next();var sym=de.getSym();if(de.isInResult()&&sym.isInResult()){de.setInResult(false);sym.setInResult(false);}}};jsts.operation.overlay.OverlayOp.prototype.isCoveredByLA=function(coord){if(this.isCovered(coord,this.resultLineList))\nreturn true;if(this.isCovered(coord,this.resultPolyList))\nreturn true;return false;};jsts.operation.overlay.OverlayOp.prototype.isCoveredByA=function(coord){if(this.isCovered(coord,this.resultPolyList))\nreturn true;return false;};jsts.operation.overlay.OverlayOp.prototype.isCovered=function(coord,geomList){for(var it=geomList.iterator();it.hasNext();){var geom=it.next();var loc=this.ptLocator.locate(coord,geom);if(loc!=Location.EXTERIOR)\nreturn true;}\nreturn false;};jsts.operation.overlay.OverlayOp.prototype.computeGeometry=function(resultPointList,resultLineList,resultPolyList,opcode){var geomList=new ArrayList();geomList.addAll(resultPointList);geomList.addAll(resultLineList);geomList.addAll(resultPolyList);return this.geomFact.buildGeometry(geomList);};jsts.operation.overlay.OverlayOp.prototype.createEmptyResult=function(opCode){var result=null;switch(resultDimension(opCode,this.arg[0].getGeometry(),this.arg[1].getGeometry())){case-1:result=geomFact.createGeometryCollection();break;case 0:result=geomFact.createPoint(null);break;case 1:result=geomFact.createLineString(null);break;case 2:result=geomFact.createPolygon(null,null);break;}\nreturn result;};jsts.operation.overlay.OverlayOp.prototype.resultDimension=function(opCode,g0,g1){var dim0=g0.getDimension();var dim1=g1.getDimension();var resultDimension=-1;switch(opCode){case jsts.operation.overlay.OverlayOp.INTERSECTION:resultDimension=Math.min(dim0,dim1);break;case jsts.operation.overlay.OverlayOp.UNION:resultDimension=Math.max(dim0,dim1);break;case jsts.operation.overlay.OverlayOp.DIFFERENCE:resultDimension=dim0;break;case jsts.operation.overlay.OverlayOp.SYMDIFFERENCE:resultDimension=Math.max(dim0,dim1);break;}\nreturn resultDimension;};})();(function(){var OverlayOp=jsts.operation.overlay.OverlayOp;var GeometrySnapper=jsts.operation.overlay.snap.GeometrySnapper;var SnapOverlayOp=function(g1,g2){this.geom=[];this.geom[0]=g1;this.geom[1]=g2;this.computeSnapTolerance();};SnapOverlayOp.overlayOp=function(g0,g1,opCode){var op=new SnapOverlayOp(g0,g1);return op.getResultGeometry(opCode);};SnapOverlayOp.intersection=function(g0,g1){return this.overlayOp(g0,g1,OverlayOp.INTERSECTION);};SnapOverlayOp.union=function(g0,g1){return this.overlayOp(g0,g1,OverlayOp.UNION);};SnapOverlayOp.difference=function(g0,g1){return overlayOp(g0,g1,OverlayOp.DIFFERENCE);};SnapOverlayOp.symDifference=function(g0,g1){return overlayOp(g0,g1,OverlayOp.SYMDIFFERENCE);};SnapOverlayOp.prototype.geom=null;SnapOverlayOp.prototype.snapTolerance=null;SnapOverlayOp.prototype.computeSnapTolerance=function(){this.snapTolerance=GeometrySnapper.computeOverlaySnapTolerance(this.geom[0],this.geom[1]);};SnapOverlayOp.prototype.getResultGeometry=function(opCode){var prepGeom=this.snap(this.geom);var result=OverlayOp.overlayOp(prepGeom[0],prepGeom[1],opCode);return this.prepareResult(result);};SnapOverlayOp.prototype.selfSnap=function(geom){var snapper0=new GeometrySnapper(geom);var snapGeom=snapper0.snapTo(geom,this.snapTolerance);return snapGeom;};SnapOverlayOp.prototype.snap=function(geom){var remGeom=geom;var snapGeom=GeometrySnapper.snap(remGeom[0],remGeom[1],this.snapTolerance);return snapGeom;};SnapOverlayOp.prototype.prepareResult=function(geom){return geom;};SnapOverlayOp.prototype.cbr=null;SnapOverlayOp.prototype.removeCommonBits=function(geom){this.cbr=new jsts.precision.CommonBitsRemover();this.cbr.add(this.geom[0]);this.cbr.add(this.geom[1]);var remGeom=[];remGeom[0]=cbr.removeCommonBits(this.geom[0].clone());remGeom[1]=cbr.removeCommonBits(this.geom[1].clone());return remGeom;};jsts.operation.overlay.snap.SnapOverlayOp=SnapOverlayOp;})();jsts.geomgraph.index.EdgeSetIntersector=function(){};jsts.geomgraph.index.EdgeSetIntersector.prototype.computeIntersections=function(edges,si,testAllSegments){throw new jsts.error.AbstractMethodInvocationError();};jsts.geomgraph.index.EdgeSetIntersector.prototype.computeIntersections2=function(edges0,edges1,si){throw new jsts.error.AbstractMethodInvocationError();};jsts.geomgraph.index.SimpleMCSweepLineIntersector=function(){this.events=[];};jsts.geomgraph.index.SimpleMCSweepLineIntersector.prototype=new jsts.geomgraph.index.EdgeSetIntersector();jsts.geomgraph.index.SimpleMCSweepLineIntersector.prototype.events=null;jsts.geomgraph.index.SimpleMCSweepLineIntersector.prototype.nOverlaps=0;jsts.geomgraph.index.SimpleMCSweepLineIntersector.prototype.computeIntersections=function(edges,si,testAllSegments){if(si instanceof javascript.util.List){this.computeIntersections2.apply(this,arguments);return;}\nif(testAllSegments){this.addList2(edges,null);}else{this.addList(edges);}\nthis.computeIntersections3(si);};jsts.geomgraph.index.SimpleMCSweepLineIntersector.prototype.computeIntersections2=function(edges0,edges1,si){this.addList2(edges0,edges0);this.addList2(edges1,edges1);this.computeIntersections3(si);};jsts.geomgraph.index.SimpleMCSweepLineIntersector.prototype.add=function(edge,edgeSet){if(edge instanceof javascript.util.List){this.addList.apply(this,arguments);return;}\nvar mce=edge.getMonotoneChainEdge();var startIndex=mce.getStartIndexes();for(var i=0;i<startIndex.length-1;i++){var mc=new jsts.geomgraph.index.MonotoneChain(mce,i);var insertEvent=new jsts.geomgraph.index.SweepLineEvent(mce.getMinX(i),mc,edgeSet);this.events.push(insertEvent);this.events.push(new jsts.geomgraph.index.SweepLineEvent(mce.getMaxX(i),insertEvent));}};jsts.geomgraph.index.SimpleMCSweepLineIntersector.prototype.addList=function(edges){for(var i=edges.iterator();i.hasNext();){var edge=i.next();this.add(edge,edge);}};jsts.geomgraph.index.SimpleMCSweepLineIntersector.prototype.addList2=function(edges,edgeSet){for(var i=edges.iterator();i.hasNext();){var edge=i.next();this.add(edge,edgeSet);}};jsts.geomgraph.index.SimpleMCSweepLineIntersector.prototype.prepareEvents=function(){this.events.sort(function(a,b){return a.compareTo(b);});for(var i=0;i<this.events.length;i++){var ev=this.events[i];if(ev.isDelete()){ev.getInsertEvent().setDeleteEventIndex(i);}}};jsts.geomgraph.index.SimpleMCSweepLineIntersector.prototype.computeIntersections3=function(si){this.nOverlaps=0;this.prepareEvents();for(var i=0;i<this.events.length;i++){var ev=this.events[i];if(ev.isInsert()){this.processOverlaps(i,ev.getDeleteEventIndex(),ev,si);}}};jsts.geomgraph.index.SimpleMCSweepLineIntersector.prototype.processOverlaps=function(start,end,ev0,si){var mc0=ev0.getObject();for(var i=start;i<end;i++){var ev1=this.events[i];if(ev1.isInsert()){var mc1=ev1.getObject();if(!ev0.isSameLabel(ev1)){mc0.computeIntersections(mc1,si);this.nOverlaps++;}}}};jsts.algorithm.locate.SimplePointInAreaLocator=function(geom){this.geom=geom;};jsts.algorithm.locate.SimplePointInAreaLocator.locate=function(p,geom){if(geom.isEmpty())\nreturn jsts.geom.Location.EXTERIOR;if(jsts.algorithm.locate.SimplePointInAreaLocator.containsPoint(p,geom))\nreturn jsts.geom.Location.INTERIOR;return jsts.geom.Location.EXTERIOR;};jsts.algorithm.locate.SimplePointInAreaLocator.containsPoint=function(p,geom){if(geom instanceof jsts.geom.Polygon){return jsts.algorithm.locate.SimplePointInAreaLocator.containsPointInPolygon(p,geom);}else if(geom instanceof jsts.geom.GeometryCollection||geom instanceof jsts.geom.MultiPoint||geom instanceof jsts.geom.MultiLineString||geom instanceof jsts.geom.MultiPolygon){for(var i=0;i<geom.geometries.length;i++){var g2=geom.geometries[i];if(g2!==geom)\nif(jsts.algorithm.locate.SimplePointInAreaLocator.containsPoint(p,g2))\nreturn true;}}\nreturn false;};jsts.algorithm.locate.SimplePointInAreaLocator.containsPointInPolygon=function(p,poly){if(poly.isEmpty())\nreturn false;var shell=poly.getExteriorRing();if(!jsts.algorithm.locate.SimplePointInAreaLocator.isPointInRing(p,shell))\nreturn false;for(var i=0;i<poly.getNumInteriorRing();i++){var hole=poly.getInteriorRingN(i);if(jsts.algorithm.locate.SimplePointInAreaLocator.isPointInRing(p,hole))\nreturn false;}\nreturn true;};jsts.algorithm.locate.SimplePointInAreaLocator.isPointInRing=function(p,ring){if(!ring.getEnvelopeInternal().intersects(p))\nreturn false;return jsts.algorithm.CGAlgorithms.isPointInRing(p,ring.getCoordinates());};jsts.algorithm.locate.SimplePointInAreaLocator.prototype.geom=null;jsts.algorithm.locate.SimplePointInAreaLocator.prototype.locate=function(p){return jsts.algorithm.locate.SimplePointInAreaLocator.locate(p,geom);};(function(){var Location=jsts.geom.Location;var Position=jsts.geomgraph.Position;var EdgeEndStar=jsts.geomgraph.EdgeEndStar;var Assert=jsts.util.Assert;jsts.geomgraph.DirectedEdgeStar=function(){jsts.geomgraph.EdgeEndStar.call(this);};jsts.geomgraph.DirectedEdgeStar.prototype=new EdgeEndStar();jsts.geomgraph.DirectedEdgeStar.constructor=jsts.geomgraph.DirectedEdgeStar;jsts.geomgraph.DirectedEdgeStar.prototype.resultAreaEdgeList=null;jsts.geomgraph.DirectedEdgeStar.prototype.label=null;jsts.geomgraph.DirectedEdgeStar.prototype.insert=function(ee){var de=ee;this.insertEdgeEnd(de,de);};jsts.geomgraph.DirectedEdgeStar.prototype.getLabel=function(){return this.label;};jsts.geomgraph.DirectedEdgeStar.prototype.getOutgoingDegree=function(){var degree=0;for(var it=this.iterator();it.hasNext();){var de=it.next();if(de.isInResult())\ndegree++;}\nreturn degree;};jsts.geomgraph.DirectedEdgeStar.prototype.getOutgoingDegree=function(er){var degree=0;for(var it=this.iterator();it.hasNext();){var de=it.next();if(de.getEdgeRing()===er)\ndegree++;}\nreturn degree;};jsts.geomgraph.DirectedEdgeStar.prototype.getRightmostEdge=function(){var edges=this.getEdges();var size=edges.size();if(size<1)\nreturn null;var de0=edges.get(0);if(size==1)\nreturn de0;var deLast=edges.get(size-1);var quad0=de0.getQuadrant();var quad1=deLast.getQuadrant();if(jsts.geomgraph.Quadrant.isNorthern(quad0)&&jsts.geomgraph.Quadrant.isNorthern(quad1))\nreturn de0;else if(!jsts.geomgraph.Quadrant.isNorthern(quad0)&&!jsts.geomgraph.Quadrant.isNorthern(quad1))\nreturn deLast;else{var nonHorizontalEdge=null;if(de0.getDy()!=0)\nreturn de0;else if(deLast.getDy()!=0)\nreturn deLast;}\nAssert.shouldNeverReachHere('found two horizontal edges incident on node');return null;};jsts.geomgraph.DirectedEdgeStar.prototype.computeLabelling=function(geom){EdgeEndStar.prototype.computeLabelling.call(this,geom);this.label=new jsts.geomgraph.Label(Location.NONE);for(var it=this.iterator();it.hasNext();){var ee=it.next();var e=ee.getEdge();var eLabel=e.getLabel();for(var i=0;i<2;i++){var eLoc=eLabel.getLocation(i);if(eLoc===Location.INTERIOR||eLoc===Location.BOUNDARY)\nthis.label.setLocation(i,Location.INTERIOR);}}};jsts.geomgraph.DirectedEdgeStar.prototype.mergeSymLabels=function(){for(var it=this.iterator();it.hasNext();){var de=it.next();var label=de.getLabel();label.merge(de.getSym().getLabel());}};jsts.geomgraph.DirectedEdgeStar.prototype.updateLabelling=function(nodeLabel){for(var it=this.iterator();it.hasNext();){var de=it.next();var label=de.getLabel();label.setAllLocationsIfNull(0,nodeLabel.getLocation(0));label.setAllLocationsIfNull(1,nodeLabel.getLocation(1));}};jsts.geomgraph.DirectedEdgeStar.prototype.getResultAreaEdges=function(){if(this.resultAreaEdgeList!==null)\nreturn this.resultAreaEdgeList;this.resultAreaEdgeList=new javascript.util.ArrayList();for(var it=this.iterator();it.hasNext();){var de=it.next();if(de.isInResult()||de.getSym().isInResult())\nthis.resultAreaEdgeList.add(de);}\nreturn this.resultAreaEdgeList;};jsts.geomgraph.DirectedEdgeStar.prototype.SCANNING_FOR_INCOMING=1;jsts.geomgraph.DirectedEdgeStar.prototype.LINKING_TO_OUTGOING=2;jsts.geomgraph.DirectedEdgeStar.prototype.linkResultDirectedEdges=function(){this.getResultAreaEdges();var firstOut=null;var incoming=null;var state=this.SCANNING_FOR_INCOMING;for(var i=0;i<this.resultAreaEdgeList.size();i++){var nextOut=this.resultAreaEdgeList.get(i);var nextIn=nextOut.getSym();if(!nextOut.getLabel().isArea())\ncontinue;if(firstOut===null&&nextOut.isInResult())\nfirstOut=nextOut;switch(state){case this.SCANNING_FOR_INCOMING:if(!nextIn.isInResult())\ncontinue;incoming=nextIn;state=this.LINKING_TO_OUTGOING;break;case this.LINKING_TO_OUTGOING:if(!nextOut.isInResult())\ncontinue;incoming.setNext(nextOut);state=this.SCANNING_FOR_INCOMING;break;}}\nif(state===this.LINKING_TO_OUTGOING){if(firstOut===null)\nthrow new jsts.error.TopologyError('no outgoing dirEdge found',this.getCoordinate());Assert.isTrue(firstOut.isInResult(),'unable to link last incoming dirEdge');incoming.setNext(firstOut);}};jsts.geomgraph.DirectedEdgeStar.prototype.linkMinimalDirectedEdges=function(er){var firstOut=null;var incoming=null;var state=this.SCANNING_FOR_INCOMING;for(var i=this.resultAreaEdgeList.size()-1;i>=0;i--){var nextOut=this.resultAreaEdgeList.get(i);var nextIn=nextOut.getSym();if(firstOut===null&&nextOut.getEdgeRing()===er)\nfirstOut=nextOut;switch(state){case this.SCANNING_FOR_INCOMING:if(nextIn.getEdgeRing()!=er)\ncontinue;incoming=nextIn;state=this.LINKING_TO_OUTGOING;break;case this.LINKING_TO_OUTGOING:if(nextOut.getEdgeRing()!==er)\ncontinue;incoming.setNextMin(nextOut);state=this.SCANNING_FOR_INCOMING;break;}}\nif(state===this.LINKING_TO_OUTGOING){Assert.isTrue(firstOut!==null,'found null for first outgoing dirEdge');Assert.isTrue(firstOut.getEdgeRing()===er,'unable to link last incoming dirEdge');incoming.setNextMin(firstOut);}};jsts.geomgraph.DirectedEdgeStar.prototype.linkAllDirectedEdges=function(){this.getEdges();var prevOut=null;var firstIn=null;for(var i=this.edgeList.size()-1;i>=0;i--){var nextOut=this.edgeList.get(i);var nextIn=nextOut.getSym();if(firstIn===null)\nfirstIn=nextIn;if(prevOut!==null)\nnextIn.setNext(prevOut);prevOut=nextOut;}\nfirstIn.setNext(prevOut);};jsts.geomgraph.DirectedEdgeStar.prototype.findCoveredLineEdges=function(){var startLoc=Location.NONE;for(var it=this.iterator();it.hasNext();){var nextOut=it.next();var nextIn=nextOut.getSym();if(!nextOut.isLineEdge()){if(nextOut.isInResult()){startLoc=Location.INTERIOR;break;}\nif(nextIn.isInResult()){startLoc=Location.EXTERIOR;break;}}}\nif(startLoc===Location.NONE)\nreturn;var currLoc=startLoc;for(var it=this.iterator();it.hasNext();){var nextOut=it.next();var nextIn=nextOut.getSym();if(nextOut.isLineEdge()){nextOut.getEdge().setCovered(currLoc===Location.INTERIOR);}else{if(nextOut.isInResult())\ncurrLoc=Location.EXTERIOR;if(nextIn.isInResult())\ncurrLoc=Location.INTERIOR;}}};jsts.geomgraph.DirectedEdgeStar.prototype.computeDepths=function(de){if(arguments.length===2){this.computeDepths2.apply(this,arguments);return;}\nvar edgeIndex=this.findIndex(de);var label=de.getLabel();var startDepth=de.getDepth(Position.LEFT);var targetLastDepth=de.getDepth(Position.RIGHT);var nextDepth=this.computeDepths2(edgeIndex+1,this.edgeList.size(),startDepth);var lastDepth=this.computeDepths2(0,edgeIndex,nextDepth);if(lastDepth!=targetLastDepth)\nthrow new jsts.error.TopologyError('depth mismatch at '+\nde.getCoordinate());};jsts.geomgraph.DirectedEdgeStar.prototype.computeDepths2=function(startIndex,endIndex,startDepth){var currDepth=startDepth;for(var i=startIndex;i<endIndex;i++){var nextDe=this.edgeList.get(i);var label=nextDe.getLabel();nextDe.setEdgeDepths(Position.RIGHT,currDepth);currDepth=nextDe.getDepth(Position.LEFT);}\nreturn currDepth;};})();jsts.algorithm.CentroidLine=function(){this.centSum=new jsts.geom.Coordinate();};jsts.algorithm.CentroidLine.prototype.centSum=null;jsts.algorithm.CentroidLine.prototype.totalLength=0.0;jsts.algorithm.CentroidLine.prototype.add=function(geom){if(geom instanceof Array){this.add2.apply(this,arguments);return;}\nif(geom instanceof jsts.geom.LineString){this.add(geom.getCoordinates());}else if(geom instanceof jsts.geom.Polygon){var poly=geom;this.add(poly.getExteriorRing().getCoordinates());for(var i=0;i<poly.getNumInteriorRing();i++){this.add(poly.getInteriorRingN(i).getCoordinates());}}else if(geom instanceof jsts.geom.GeometryCollection||geom instanceof jsts.geom.MultiPoint||geom instanceof jsts.geom.MultiLineString||geom instanceof jsts.geom.MultiPolygon){var gc=geom;for(var i=0;i<gc.getNumGeometries();i++){this.add(gc.getGeometryN(i));}}};jsts.algorithm.CentroidLine.prototype.getCentroid=function(){var cent=new jsts.geom.Coordinate();cent.x=this.centSum.x/this.totalLength;cent.y=this.centSum.y/this.totalLength;return cent;};jsts.algorithm.CentroidLine.prototype.add2=function(pts){for(var i=0;i<pts.length-1;i++){var segmentLen=pts[i].distance(pts[i+1]);this.totalLength+=segmentLen;var midx=(pts[i].x+pts[i+1].x)/2;this.centSum.x+=segmentLen*midx;var midy=(pts[i].y+pts[i+1].y)/2;this.centSum.y+=segmentLen*midy;}};jsts.index.IntervalSize=function(){};jsts.index.IntervalSize.MIN_BINARY_EXPONENT=-50;jsts.index.IntervalSize.isZeroWidth=function(min,max){var width=max-min;if(width===0.0){return true;}\nvar maxAbs,scaledInterval,level;maxAbs=Math.max(Math.abs(min),Math.abs(max));scaledInterval=width/maxAbs;level=jsts.index.DoubleBits.exponent(scaledInterval);return level<=jsts.index.IntervalSize.MIN_BINARY_EXPONENT;};jsts.geomgraph.index.SimpleEdgeSetIntersector=function(){};jsts.geomgraph.index.SimpleEdgeSetIntersector.prototype=new jsts.geomgraph.index.EdgeSetIntersector();jsts.geomgraph.index.SimpleEdgeSetIntersector.prototype.nOverlaps=0;jsts.geomgraph.index.SimpleEdgeSetIntersector.prototype.computeIntersections=function(edges,si,testAllSegments){if(si instanceof javascript.util.List){this.computeIntersections2.apply(this,arguments);return;}\nthis.nOverlaps=0;for(var i0=edges.iterator();i0.hasNext();){var edge0=i0.next();for(var i1=edges.iterator();i1.hasNext();){var edge1=i1.next();if(testAllSegments||edge0!=edge1)\nthis.computeIntersects(edge0,edge1,si);}}};jsts.geomgraph.index.SimpleEdgeSetIntersector.prototype.computeIntersections2=function(edges0,edges1,si){this.nOverlaps=0;for(var i0=edges0.iterator();i0.hasNext();){var edge0=i0.next();for(var i1=edges1.iterator();i1.hasNext();){var edge1=i1.next();this.computeIntersects(edge0,edge1,si);}}};jsts.geomgraph.index.SimpleEdgeSetIntersector.prototype.computeIntersects=function(e0,e1,si){var pts0=e0.getCoordinates();var pts1=e1.getCoordinates();var i0,i1;for(i0=0;i0<pts0.length-1;i0++){for(i1=0;i1<pts1.length-1;i1++){si.addIntersections(e0,i0,e1,i1);}}};jsts.geomgraph.Edge=function(pts,label){this.pts=pts;this.label=label;this.eiList=new jsts.geomgraph.EdgeIntersectionList(this);this.depth=new jsts.geomgraph.Depth();};jsts.geomgraph.Edge.prototype=new jsts.geomgraph.GraphComponent();jsts.geomgraph.Edge.constructor=jsts.geomgraph.Edge;jsts.geomgraph.Edge.updateIM=function(label,im){im.setAtLeastIfValid(label.getLocation(0,jsts.geomgraph.Position.ON),label.getLocation(1,jsts.geomgraph.Position.ON),1);if(label.isArea()){im.setAtLeastIfValid(label.getLocation(0,jsts.geomgraph.Position.LEFT),label.getLocation(1,jsts.geomgraph.Position.LEFT),2);im.setAtLeastIfValid(label.getLocation(0,jsts.geomgraph.Position.RIGHT),label.getLocation(1,jsts.geomgraph.Position.RIGHT),2);}};jsts.geomgraph.Edge.prototype.pts=null;jsts.geomgraph.Edge.prototype.env=null;jsts.geomgraph.Edge.prototype.name=null;jsts.geomgraph.Edge.prototype.mce=null;jsts.geomgraph.Edge.prototype._isIsolated=true;jsts.geomgraph.Edge.prototype.depth=null;jsts.geomgraph.Edge.prototype.depthDelta=0;jsts.geomgraph.Edge.prototype.eiList=null;jsts.geomgraph.Edge.prototype.getNumPoints=function(){return this.pts.length;};jsts.geomgraph.Edge.prototype.getEnvelope=function(){if(this.env===null){this.env=new jsts.geom.Envelope();for(var i=0;i<this.pts.length;i++){this.env.expandToInclude(pts[i]);}}\nreturn env;};jsts.geomgraph.Edge.prototype.getDepth=function(){return this.depth;};jsts.geomgraph.Edge.prototype.getDepthDelta=function(){return this.depthDelta;};jsts.geomgraph.Edge.prototype.setDepthDelta=function(depthDelta){this.depthDelta=depthDelta;};jsts.geomgraph.Edge.prototype.getCoordinates=function(){return this.pts;};jsts.geomgraph.Edge.prototype.getCoordinate=function(i){if(i===undefined){if(this.pts.length>0){return this.pts[0];}else{return null;}}\nreturn this.pts[i];};jsts.geomgraph.Edge.prototype.isClosed=function(){return this.pts[0].equals(this.pts[this.pts.length-1]);};jsts.geomgraph.Edge.prototype.setIsolated=function(isIsolated){this._isIsolated=isIsolated;};jsts.geomgraph.Edge.prototype.isIsolated=function(){return this._isIsolated;};jsts.geomgraph.Edge.prototype.addIntersections=function(li,segmentIndex,geomIndex){for(var i=0;i<li.getIntersectionNum();i++){this.addIntersection(li,segmentIndex,geomIndex,i);}};jsts.geomgraph.Edge.prototype.addIntersection=function(li,segmentIndex,geomIndex,intIndex){var intPt=new jsts.geom.Coordinate(li.getIntersection(intIndex));var normalizedSegmentIndex=segmentIndex;var dist=li.getEdgeDistance(geomIndex,intIndex);var nextSegIndex=normalizedSegmentIndex+1;if(nextSegIndex<this.pts.length){var nextPt=this.pts[nextSegIndex];if(intPt.equals2D(nextPt)){normalizedSegmentIndex=nextSegIndex;dist=0.0;}}\nvar ei=this.eiList.add(intPt,normalizedSegmentIndex,dist);};jsts.geomgraph.Edge.prototype.getMaximumSegmentIndex=function(){return this.pts.length-1;};jsts.geomgraph.Edge.prototype.getEdgeIntersectionList=function(){return this.eiList;};jsts.geomgraph.Edge.prototype.getMonotoneChainEdge=function(){if(this.mce==null){this.mce=new jsts.geomgraph.index.MonotoneChainEdge(this);}\nreturn this.mce;};jsts.geomgraph.Edge.prototype.isClosed=function()\n{return this.pts[0].equals(this.pts[this.pts.length-1]);};jsts.geomgraph.Edge.prototype.isCollapsed=function()\n{if(!this.label.isArea())return false;if(this.pts.length!=3)return false;if(this.pts[0].equals(this.pts[2]))return true;return false;};jsts.geomgraph.Edge.prototype.getCollapsedEdge=function()\n{var newPts=[];newPts[0]=this.pts[0];newPts[1]=this.pts[1];var newe=new jsts.geomgraph.Edge(newPts,jsts.geomgraph.Label.toLineLabel(this.label));return newe;};jsts.geomgraph.Edge.prototype.computeIM=function(im){jsts.geomgraph.Edge.updateIM(this.label,im);};jsts.geomgraph.Edge.prototype.isPointwiseEqual=function(e)\n{if(this.pts.length!=e.pts.length)return false;for(var i=0;i<this.pts.length;i++){if(!this.pts[i].equals2D(e.pts[i])){return false;}}\nreturn true;};jsts.noding.Octant=function(){throw jsts.error.AbstractMethodInvocationError();};jsts.noding.Octant.octant=function(dx,dy){if(dx instanceof jsts.geom.Coordinate){return jsts.noding.Octant.octant2.apply(this,arguments);}\nif(dx===0.0&&dy===0.0)\nthrow new jsts.error.IllegalArgumentError('Cannot compute the octant for point ( '+dx+', '+dy+' )');var adx=Math.abs(dx);var ady=Math.abs(dy);if(dx>=0){if(dy>=0){if(adx>=ady)\nreturn 0;else\nreturn 1;}\nelse{if(adx>=ady)\nreturn 7;else\nreturn 6;}}\nelse{if(dy>=0){if(adx>=ady)\nreturn 3;else\nreturn 2;}\nelse{if(adx>=ady)\nreturn 4;else\nreturn 5;}}};jsts.noding.Octant.octant2=function(p0,p1){var dx=p1.x-p0.x;var dy=p1.y-p0.y;if(dx===0.0&&dy===0.0)\nthrow new jsts.error.IllegalArgumentError('Cannot compute the octant for two identical points '+p0);return jsts.noding.Octant.octant(dx,dy);};jsts.operation.union.UnionInteracting=function(g0,g1){this.g0=g0;this.g1=g1;this.geomFactory=g0.getFactory();this.interacts0=[];this.interacts1=[];};jsts.operation.union.UnionInteracting.union=function(g0,g1){var uue=new jsts.operation.union.UnionInteracting(g0,g1);return uue.union();};jsts.operation.union.UnionInteracting.prototype.geomFactory=null;jsts.operation.union.UnionInteracting.prototype.g0=null;jsts.operation.union.UnionInteracting.prototype.g1=null;jsts.operation.union.UnionInteracting.prototype.interacts0=null;jsts.operation.union.UnionInteracting.prototype.interacts1=null;jsts.operation.union.UnionInteracting.prototype.union=function(){this.computeInteracting();var int0=this.extractElements(this.g0,this.interacts0,true);var int1=this.extractElements(this.g1,this.interacts1,true);if(int0.isEmpty()||int1.isEmpty()){}\nvar union=in0.union(int1);var disjoint0=this.extractElements(this.g0,this.interacts0,false);var disjoint1=this.extractElements(this.g1,this.interacts1,false);var overallUnion=jsts.geom.util.GeometryCombiner.combine(union,disjoint0,disjoint1);return overallUnion;};jsts.operation.union.UnionInteracting.prototype.bufferUnion=function(g0,g1){var factory=g0.getFactory();var gColl=factory.createGeometryCollection([g0,g1]);var unionAll=gColl.buffer(0.0);return unionAll;};jsts.operation.union.UnionInteracting.prototype.computeInteracting=function(elem0){if(!elem0){for(var i=0,l=this.g0.getNumGeometries();i<l;i++){var elem=this.g0.getGeometryN(i);this.interacts0[i]=this.computeInteracting(elem);}}\nelse{var interactsWithAny=false;for(var i=0,l=g1.getNumGeometries();i<l;i++){var elem1=this.g1.getGeometryN(i);var interacts=elem1.getEnvelopeInternal().intersects(elem0.getEnvelopeInternal());if(interacts){this.interacts1[i]=true;interactsWithAny=true;}}\nreturn interactsWithAny;}};jsts.operation.union.UnionInteracting.prototype.extractElements=function(geom,interacts,isInteracting){var extractedGeoms=[];for(var i=0,l=geom.getNumGeometries();i<l;i++){var elem=geom.getGeometryN(i);if(interacts[i]===isInteracting){extractedGeoms.push(elem);}}\nreturn this.geomFactory.buildGeometry(extractedGeoms);};jsts.triangulate.quadedge.TrianglePredicate=function(){};jsts.triangulate.quadedge.TrianglePredicate.isInCircleNonRobust=function(a,b,c,p){var isInCircle=(a.x*a.x+a.y*a.y)*jsts.triangulate.quadedge.TrianglePredicate.triArea(b,c,p)-\n(b.x*b.x+b.y*b.y)*jsts.triangulate.quadedge.TrianglePredicate.triArea(a,c,p)+\n(c.x*c.x+c.y*c.y)*jsts.triangulate.quadedge.TrianglePredicate.triArea(a,b,p)-\n(p.x*p.x+p.y*p.y)*jsts.triangulate.quadedge.TrianglePredicate.triArea(a,b,c)>0;return isInCircle;};jsts.triangulate.quadedge.TrianglePredicate.isInCircleNormalized=function(a,b,c,p){var adx,ady,bdx,bdy,cdx,cdy,abdet,bcdet,cadet,alift,blift,clift,disc;adx=a.x-p.x;ady=a.y-p.y;bdx=b.x-p.x;bdy=b.y-p.y;cdx=c.x-p.x;cdy=c.y-p.y;abdet=adx*bdy-bdx*ady;bcdet=bdx*cdy-cdx*bdy;cadet=cdx*ady-adx*cdy;alift=adx*adx+ady*ady;blift=bdx*bdx+bdy*bdy;clift=cdx*cdx+cdy*cdy;disc=alift*bcdet+blift*cadet+clift*abdet;return disc>0;};jsts.triangulate.quadedge.TrianglePredicate.triArea=function(a,b,c){return(b.x-a.x)*(c.y-a.y)-(b.y-a.y)*(c.x-a.x);};jsts.triangulate.quadedge.TrianglePredicate.isInCircleRobust=function(a,b,c,p){return jsts.triangulate.quadedge.TrianglePredicate.isInCircleNormalized(a,b,c,p);};jsts.triangulate.quadedge.TrianglePredicate.isInCircleDDSlow=function(a,b,c,p){var px,py,ax,ay,bx,by,cx,cy,aTerm,bTerm,cTerm,pTerm,sum,isInCircle;px=jsts.math.DD.valueOf(p.x);py=jsts.math.DD.valueOf(p.y);ax=jsts.math.DD.valueOf(a.x);ay=jsts.math.DD.valueOf(a.y);bx=jsts.math.DD.valueOf(b.x);by=jsts.math.DD.valueOf(b.y);cx=jsts.math.DD.valueOf(c.x);cy=jsts.math.DD.valueOf(c.y);aTerm=(ax.multiply(ax).add(ay.multiply(ay))).multiply(jsts.triangulate.quadedge.TrianglePredicate.triAreaDDSlow(bx,by,cx,cy,px,py));bTerm=(bx.multiply(bx).add(by.multiply(by))).multiply(jsts.triangulate.quadedge.TrianglePredicate.triAreaDDSlow(ax,ay,cx,cy,px,py));cTerm=(cx.multiply(cx).add(cy.multiply(cy))).multiply(jsts.triangulate.quadedge.TrianglePredicate.triAreaDDSlow(ax,ay,bx,by,px,py));pTerm=(px.multiply(px).add(py.multiply(py))).multiply(jsts.triangulate.quadedge.TrianglePredicate.triAreaDDSlow(ax,ay,bx,by,cx,cy));sum=aTerm.subtract(bTerm).add(cTerm).subtract(pTerm);isInCircle=sum.doubleValue()>0;return isInCircle;};jsts.triangulate.quadedge.TrianglePredicate.triAreaDDSlow=function(ax,ay,bx,by,cx,cy){return(bx.subtract(ax).multiply(cy.subtract(ay)).subtract(by.subtract(ay).multiply(cx.subtract(ax))));};jsts.triangulate.quadedge.TrianglePredicate.isInCircleDDFast=function(a,b,c,p){var aTerm,bTerm,cTerm,pTerm,sum,isInCircle;aTerm=(jsts.math.DD.sqr(a.x).selfAdd(jsts.math.DD.sqr(a.y))).selfMultiply(jsts.triangulate.quadedge.TrianglePredicate.triAreaDDFast(b,c,p));bTerm=(jsts.math.DD.sqr(b.x).selfAdd(jsts.math.DD.sqr(b.y))).selfMultiply(jsts.triangulate.quadedge.TrianglePredicate.triAreaDDFast(a,c,p));cTerm=(jsts.math.DD.sqr(c.x).selfAdd(jsts.math.DD.sqr(c.y))).selfMultiply(jsts.triangulate.quadedge.TrianglePredicate.triAreaDDFast(a,b,p));pTerm=(jsts.math.DD.sqr(p.x).selfAdd(jsts.math.DD.sqr(p.y))).selfMultiply(jsts.triangulate.quadedge.TrianglePredicate.triAreaDDFast(a,b,c));sum=aTerm.selfSubtract(bTerm).selfAdd(cTerm).selfSubtract(pTerm);isInCircle=sum.doubleValue()>0;return isInCircle;};jsts.triangulate.quadedge.TrianglePredicate.triAreaDDFast=function(a,b,c){var t1,t2;t1=jsts.math.DD.valueOf(b.x).selfSubtract(a.x).selfMultiply(jsts.math.DD.valueOf(c.y).selfSubtract(a.y));t2=jsts.math.DD.valueOf(b.y).selSubtract(a.y).selfMultiply(jsts.math.DD.valueOf(c.x).selfSubtract(a.x));return t1.selfSubtract(t2);};jsts.triangulate.quadedge.TrianglePredicate.isInCircleDDNormalized=function(a,b,c,p){var adx,ady,bdx,bdy,cdx,cdy,abdet,bcdet,cadet,alift,blift,clift,sum,isInCircle;adx=jsts.math.DD.valueOf(a.x).selfSubtract(p.x);ady=jsts.math.DD.valueOf(a.y).selfSubtract(p.y);bdx=jsts.math.DD.valueOf(b.x).selfSubtract(p.x);bdx=jsts.math.DD.valueOf(b.y).selfSubtract(p.y);cdx=jsts.math.DD.valueOf(c.x).selfSubtract(p.x);cdx=jsts.math.DD.valueOf(c.y).selfSubtract(p.y);abdet=adx.multiply(bdy).selfSubtract(bdx.multiply(ady));bcdet=bdx.multiply(cdy).selfSubtract(cdx.multiply(bdy));cadet=cdx.multiply(ady).selfSubtract(adx.multiply(cdy));alift=adx.multiply(adx).selfAdd(ady.multiply(ady));blift=bdx.multiply(bdx).selfAdd(bdy.multiply(bdy));clift=cdx.multiply(cdx).selfAdd(cdy.multiply(cdy));sum=alift.selfMultiply(bcdet).selfAdd(blift.selfMultiply(cadet)).selfAdd(clift.selfMultiply(abdet));isInCircle=sum.doubleValue()>0;return isInCircle;};jsts.triangulate.quadedge.TrianglePredicate.isInCircleCC=function(a,b,c,p){var cc,ccRadius,pRadiusDiff;cc=jsts.geom.Triangle.circumcentre(a,b,c);ccRadius=a.distance(cc);pRadiusDiff=p.distance(cc)-ccRadius;return pRadiusDiff<=0;};jsts.operation.union.PointGeometryUnion=function(pointGeom,otherGeom){this.pointGeom=pointGeom;this.otherGeom=otherGeom;this.geomFact=otherGeom.getFactory();};jsts.operation.union.PointGeometryUnion.union=function(pointGeom,otherGeom){var unioner=new jsts.operation.union.PointGeometryUnion(pointGeom,otherGeom);return unioner.union();};jsts.operation.union.PointGeometryUnion.prototype.pointGeom=null;jsts.operation.union.PointGeometryUnion.prototype.otherGeom=null;jsts.operation.union.PointGeometryUnion.prototype.geomFact=null;jsts.operation.union.PointGeometryUnion.prototype.union=function(){var locator=new jsts.algorithm.PointLocator();var exteriorCoords=[];for(var i=0,l=this.pointGeom.getNumGeometries();i<l;i++){var point=this.pointGeom.getGeometryN(i);var coord=point.getCoordinate();var loc=locator.locate(coord,this.otherGeom);if(loc===jsts.geom.Location.EXTERIOR){var include=true;for(var j=exteriorCoords.length;i--;){if(exteriorCoords[j].equals(coord)){include=false;break;}}\nif(include){exteriorCoords.push(coord);}}}\nexteriorCoords.sort(function(x,y){return x.compareTo(y);});if(exteriorCoords.length===0){return this.otherGeom;}\nvar ptComp=null;var coords=jsts.geom.CoordinateArrays.toCoordinateArray(exteriorCoords);if(coords.length===1){ptComp=this.geomFact.createPoint(coords[0]);}\nelse{ptComp=this.geomFact.createMultiPoint(coords);}\nreturn jsts.geom.util.GeometryCombiner.combine(ptComp,this.otherGeom);};jsts.noding.IntersectionFinderAdder=function(li){this.li=li;this.interiorIntersections=new javascript.util.ArrayList();};jsts.noding.IntersectionFinderAdder.prototype=new jsts.noding.SegmentIntersector();jsts.noding.IntersectionFinderAdder.constructor=jsts.noding.IntersectionFinderAdder;jsts.noding.IntersectionFinderAdder.prototype.li=null;jsts.noding.IntersectionFinderAdder.prototype.interiorIntersections=null;jsts.noding.IntersectionFinderAdder.prototype.getInteriorIntersections=function(){return this.interiorIntersections;};jsts.noding.IntersectionFinderAdder.prototype.processIntersections=function(e0,segIndex0,e1,segIndex1){if(e0===e1&&segIndex0===segIndex1)\nreturn;var p00=e0.getCoordinates()[segIndex0];var p01=e0.getCoordinates()[segIndex0+1];var p10=e1.getCoordinates()[segIndex1];var p11=e1.getCoordinates()[segIndex1+1];this.li.computeIntersection(p00,p01,p10,p11);if(this.li.hasIntersection()){if(this.li.isInteriorIntersection()){for(var intIndex=0;intIndex<this.li.getIntersectionNum();intIndex++){this.interiorIntersections.add(this.li.getIntersection(intIndex));}\ne0.addIntersections(this.li,segIndex0,0);e1.addIntersections(this.li,segIndex1,1);}}};jsts.noding.IntersectionFinderAdder.prototype.isDone=function(){return false;};jsts.noding.snapround.MCIndexSnapRounder=function(pm){this.pm=pm;this.li=new jsts.algorithm.RobustLineIntersector();this.li.setPrecisionModel(pm);this.scaleFactor=pm.getScale();};jsts.noding.snapround.MCIndexSnapRounder.prototype=new jsts.noding.Noder();jsts.noding.snapround.MCIndexSnapRounder.constructor=jsts.noding.snapround.MCIndexSnapRounder;jsts.noding.snapround.MCIndexSnapRounder.prototype.pm=null;jsts.noding.snapround.MCIndexSnapRounder.prototype.li=null;jsts.noding.snapround.MCIndexSnapRounder.prototype.scaleFactor=null;jsts.noding.snapround.MCIndexSnapRounder.prototype.noder=null;jsts.noding.snapround.MCIndexSnapRounder.prototype.pointSnapper=null;jsts.noding.snapround.MCIndexSnapRounder.prototype.nodedSegStrings=null;jsts.noding.snapround.MCIndexSnapRounder.prototype.getNodedSubstrings=function(){return jsts.noding.NodedSegmentString.getNodedSubstrings(this.nodedSegStrings);};jsts.noding.snapround.MCIndexSnapRounder.prototype.computeNodes=function(inputSegmentStrings){this.nodedSegStrings=inputSegmentStrings;this.noder=new jsts.noding.MCIndexNoder();this.pointSnapper=new jsts.noding.snapround.MCIndexPointSnapper(this.noder.getIndex());this.snapRound(inputSegmentStrings,this.li);};jsts.noding.snapround.MCIndexSnapRounder.prototype.snapRound=function(segStrings,li){var intersections=this.findInteriorIntersections(segStrings,li);this.computeIntersectionSnaps(intersections);this.computeVertexSnaps(segStrings);};jsts.noding.snapround.MCIndexSnapRounder.prototype.findInteriorIntersections=function(segStrings,li){var intFinderAdder=new jsts.noding.IntersectionFinderAdder(li);this.noder.setSegmentIntersector(intFinderAdder);this.noder.computeNodes(segStrings);return intFinderAdder.getInteriorIntersections();};jsts.noding.snapround.MCIndexSnapRounder.prototype.computeIntersectionSnaps=function(snapPts){for(var it=snapPts.iterator();it.hasNext();){var snapPt=it.next();var hotPixel=new jsts.noding.snapround.HotPixel(snapPt,this.scaleFactor,this.li);this.pointSnapper.snap(hotPixel);}};jsts.noding.snapround.MCIndexSnapRounder.prototype.computeVertexSnaps=function(edges){if(edges instanceof jsts.noding.NodedSegmentString){this.computeVertexSnaps2.apply(this,arguments);return;}\nfor(var i0=edges.iterator();i0.hasNext();){var edge0=i0.next();this.computeVertexSnaps(edge0);}};jsts.noding.snapround.MCIndexSnapRounder.prototype.computeVertexSnaps2=function(e){var pts0=e.getCoordinates();for(var i=0;i<pts0.length-1;i++){var hotPixel=new jsts.noding.snapround.HotPixel(pts0[i],this.scaleFactor,this.li);var isNodeAdded=this.pointSnapper.snap(hotPixel,e,i);if(isNodeAdded){e.addIntersection(pts0[i],i);}}};jsts.operation.valid.ConnectedInteriorTester=function(geomGraph){this.geomGraph=geomGraph;this.geometryFactory=new jsts.geom.GeometryFactory();this.disconnectedRingcoord=null;};jsts.operation.valid.ConnectedInteriorTester.findDifferentPoint=function(coord,pt){var i=0,il=coord.length;for(i;i<il;i++){if(!coord[i].equals(pt))\nreturn coord[i];}\nreturn null;};jsts.operation.valid.ConnectedInteriorTester.prototype.getCoordinate=function(){return this.disconnectedRingcoord;};jsts.operation.valid.ConnectedInteriorTester.prototype.isInteriorsConnected=function(){var splitEdges=new javascript.util.ArrayList();this.geomGraph.computeSplitEdges(splitEdges);var graph=new jsts.geomgraph.PlanarGraph(new jsts.operation.overlay.OverlayNodeFactory());graph.addEdges(splitEdges);this.setInteriorEdgesInResult(graph);graph.linkResultDirectedEdges();var edgeRings=this.buildEdgeRings(graph.getEdgeEnds());this.visitShellInteriors(this.geomGraph.getGeometry(),graph);return!this.hasUnvisitedShellEdge(edgeRings);};jsts.operation.valid.ConnectedInteriorTester.prototype.setInteriorEdgesInResult=function(graph){var it=graph.getEdgeEnds().iterator(),de;while(it.hasNext()){de=it.next();if(de.getLabel().getLocation(0,jsts.geomgraph.Position.RIGHT)==jsts.geom.Location.INTERIOR){de.setInResult(true);}}};jsts.operation.valid.ConnectedInteriorTester.prototype.buildEdgeRings=function(dirEdges){var edgeRings=new javascript.util.ArrayList();for(var it=dirEdges.iterator();it.hasNext();){var de=it.next();if(de.isInResult()&&de.getEdgeRing()==null){var er=new jsts.operation.overlay.MaximalEdgeRing(de,this.geometryFactory);er.linkDirectedEdgesForMinimalEdgeRings();var minEdgeRings=er.buildMinimalRings();var i=0,il=minEdgeRings.length;for(i;i<il;i++){edgeRings.add(minEdgeRings[i]);}}}\nreturn edgeRings;};jsts.operation.valid.ConnectedInteriorTester.prototype.visitShellInteriors=function(g,graph){if(g instanceof jsts.geom.Polygon){var p=g;this.visitInteriorRing(p.getExteriorRing(),graph);}\nif(g instanceof jsts.geom.MultiPolygon){var mp=g;for(var i=0;i<mp.getNumGeometries();i++){var p=mp.getGeometryN(i);this.visitInteriorRing(p.getExteriorRing(),graph);}}};jsts.operation.valid.ConnectedInteriorTester.prototype.visitInteriorRing=function(ring,graph){var pts=ring.getCoordinates();var pt0=pts[0];var pt1=jsts.operation.valid.ConnectedInteriorTester.findDifferentPoint(pts,pt0);var e=graph.findEdgeInSameDirection(pt0,pt1);var de=graph.findEdgeEnd(e);var intDe=null;if(de.getLabel().getLocation(0,jsts.geomgraph.Position.RIGHT)==jsts.geom.Location.INTERIOR){intDe=de;}else if(de.getSym().getLabel().getLocation(0,jsts.geomgraph.Position.RIGHT)==jsts.geom.Location.INTERIOR){intDe=de.getSym();}\nthis.visitLinkedDirectedEdges(intDe);};jsts.operation.valid.ConnectedInteriorTester.prototype.visitLinkedDirectedEdges=function(start){var startDe=start;var de=start;do{de.setVisited(true);de=de.getNext();}while(de!=startDe);};jsts.operation.valid.ConnectedInteriorTester.prototype.hasUnvisitedShellEdge=function(edgeRings){for(var i=0;i<edgeRings.size();i++){var er=edgeRings.get(i);if(er.isHole()){continue;}\nvar edges=er.getEdges();var de=edges[0];if(de.getLabel().getLocation(0,jsts.geomgraph.Position.RIGHT)!=jsts.geom.Location.INTERIOR){continue;}\nfor(var j=0;j<edges.length;j++){de=edges[j];if(!de.isVisited()){disconnectedRingcoord=de.getCoordinate();return true;}}}\nreturn false;};jsts.algorithm.InteriorPointLine=function(geometry){this.centroid;this.minDistance=Number.MAX_VALUE;this.interiorPoint=null;this.centroid=geometry.getCentroid().getCoordinate();this.addInterior(geometry);if(this.interiorPoint==null){this.addEndpoints(geometry);}};jsts.algorithm.InteriorPointLine.prototype.getInteriorPoint=function(){return this.interiorPoint;};jsts.algorithm.InteriorPointLine.prototype.addInterior=function(geometry){if(geometry instanceof jsts.geom.LineString){this.addInteriorCoord(geometry.getCoordinates());}else if(geometry instanceof jsts.geom.GeometryCollection){for(var i=0;i<geometry.getNumGeometries();i++){this.addInterior(geometry.getGeometryN(i));}}};jsts.algorithm.InteriorPointLine.prototype.addInteriorCoord=function(pts){for(var i=1;i<pts.length-1;i++){this.add(pts[i]);}};jsts.algorithm.InteriorPointLine.prototype.addEndpoints=function(geometry){if(geometry instanceof jsts.geom.LineString){this.addEndpointsCoord(geometry.getCoordinates());}else if(geometry instanceof jsts.geom.GeometryCollection){for(var i=0;i<geometry.getNumGeometries();i++){this.addEndpoints(geometry.getGeometryN(i));}}};jsts.algorithm.InteriorPointLine.prototype.addEndpointsCoord=function(pts){this.add(pts[0]);this.add(pts[pts.length-1]);};jsts.algorithm.InteriorPointLine.prototype.add=function(point){var dist=point.distance(this.centroid);if(dist<this.minDistance){this.interiorPoint=new jsts.geom.Coordinate(point);this.minDistance=dist;}};jsts.index.chain.MonotoneChainSelectAction=function(){this.tempEnv1=new jsts.geom.Envelope();this.selectedSegment=new jsts.geom.LineSegment();};jsts.index.chain.MonotoneChainSelectAction.prototype.tempEnv1=null;jsts.index.chain.MonotoneChainSelectAction.prototype.selectedSegment=null;jsts.index.chain.MonotoneChainSelectAction.prototype.select=function(mc,start){mc.getLineSegment(start,this.selectedSegment);this.select2(this.selectedSegment);};jsts.index.chain.MonotoneChainSelectAction.prototype.select2=function(seg){};jsts.algorithm.MCPointInRing=function(ring){this.ring=ring;this.tree=null;this.crossings=0;this.interval=new jsts.index.bintree.Interval();this.buildIndex();};jsts.algorithm.MCPointInRing.MCSelecter=function(p,parent){this.parent=parent;this.p=p;};jsts.algorithm.MCPointInRing.MCSelecter.prototype=new jsts.index.chain.MonotoneChainSelectAction;jsts.algorithm.MCPointInRing.MCSelecter.prototype.constructor=jsts.algorithm.MCPointInRing.MCSelecter;jsts.algorithm.MCPointInRing.MCSelecter.prototype.select2=function(ls){this.parent.testLineSegment.apply(this.parent,[this.p,ls]);};jsts.algorithm.MCPointInRing.prototype.buildIndex=function(){this.tree=new jsts.index.bintree.Bintree();var pts=jsts.geom.CoordinateArrays.removeRepeatedPoints(this.ring.getCoordinates());var mcList=jsts.index.chain.MonotoneChainBuilder.getChains(pts);for(var i=0;i<mcList.length;i++){var mc=mcList[i];var mcEnv=mc.getEnvelope();this.interval.min=mcEnv.getMinY();this.interval.max=mcEnv.getMaxY();this.tree.insert(this.interval,mc);}};jsts.algorithm.MCPointInRing.prototype.isInside=function(pt){this.crossings=0;var rayEnv=new jsts.geom.Envelope(-Number.MAX_VALUE,Number.MAX_VALUE,pt.y,pt.y);this.interval.min=pt.y;this.interval.max=pt.y;var segs=this.tree.query(this.interval);var mcSelecter=new jsts.algorithm.MCPointInRing.MCSelecter(pt,this);for(var i=segs.iterator();i.hasNext();){var mc=i.next();this.testMonotoneChain(rayEnv,mcSelecter,mc);}\nif((this.crossings%2)==1){return true;}\nreturn false;};jsts.algorithm.MCPointInRing.prototype.testMonotoneChain=function(rayEnv,mcSelecter,mc){mc.select(rayEnv,mcSelecter);};jsts.algorithm.MCPointInRing.prototype.testLineSegment=function(p,seg){var xInt,x1,y1,x2,y2,p1,p2;p1=seg.p0;p2=seg.p1;x1=p1.x-p.x;y1=p1.y-p.y;x2=p2.x-p.x;y2=p2.y-p.y;if(((y1>0)&&(y2<=0))||((y2>0)&&(y1<=0))){xInt=jsts.algorithm.RobustDeterminant.signOfDet2x2(x1,y1,x2,y2)/(y2-y1);if(0.0<xInt){this.crossings++;}}};jsts.operation.valid.TopologyValidationError=function(errorType,pt){this.errorType=errorType;this.pt=null;if(pt!=null){this.pt=pt.clone();}};jsts.operation.valid.TopologyValidationError.HOLE_OUTSIDE_SHELL=2;jsts.operation.valid.TopologyValidationError.NESTED_HOLES=3;jsts.operation.valid.TopologyValidationError.DISCONNECTED_INTERIOR=4;jsts.operation.valid.TopologyValidationError.SELF_INTERSECTION=5;jsts.operation.valid.TopologyValidationError.RING_SELF_INTERSECTION=6;jsts.operation.valid.TopologyValidationError.NESTED_SHELLS=7;jsts.operation.valid.TopologyValidationError.DUPLICATE_RINGS=8;jsts.operation.valid.TopologyValidationError.TOO_FEW_POINTS=9;jsts.operation.valid.TopologyValidationError.INVALID_COORDINATE=10;jsts.operation.valid.TopologyValidationError.RING_NOT_CLOSED=11;jsts.operation.valid.TopologyValidationError.prototype.errMsg=['Topology Validation Error','Repeated Point','Hole lies outside shell','Holes are nested','Interior is disconnected','Self-intersection','Ring Self-intersection','Nested shells','Duplicate Rings','Too few distinct points in geometry component','Invalid Coordinate','Ring is not closed'];jsts.operation.valid.TopologyValidationError.prototype.getCoordinate=function(){return this.pt;};jsts.operation.valid.TopologyValidationError.prototype.getErrorType=function(){return this.errorType;};jsts.operation.valid.TopologyValidationError.prototype.getMessage=function(){return this.errMsg[this.errorType];};jsts.operation.valid.TopologyValidationError.prototype.toString=function(){var locStr='';if(this.pt!=null){locStr=' at or near point '+this.pt;return this.getMessage()+locStr;}\nreturn locStr;};(function(){jsts.geom.MultiPolygon=function(geometries,factory){this.geometries=geometries||[];this.factory=factory;};jsts.geom.MultiPolygon.prototype=new jsts.geom.GeometryCollection();jsts.geom.MultiPolygon.constructor=jsts.geom.MultiPolygon;jsts.geom.MultiPolygon.prototype.getBoundary=function(){if(this.isEmpty()){return this.getFactory().createMultiLineString(null);}\nvar allRings=[];for(var i=0;i<this.geometries.length;i++){var polygon=this.geometries[i];var rings=polygon.getBoundary();for(var j=0;j<rings.getNumGeometries();j++){allRings.push(rings.getGeometryN(j));}}\nreturn this.getFactory().createMultiLineString(allRings);};jsts.geom.MultiPolygon.prototype.equalsExact=function(other,tolerance){if(!this.isEquivalentClass(other)){return false;}\nreturn jsts.geom.GeometryCollection.prototype.equalsExact.call(this,other,tolerance);};jsts.geom.MultiPolygon.prototype.CLASS_NAME='jsts.geom.MultiPolygon';})();jsts.geom.CoordinateSequenceFilter=function(){};jsts.geom.CoordinateSequenceFilter.prototype.filter=jsts.abstractFunc;jsts.geom.CoordinateSequenceFilter.prototype.isDone=jsts.abstractFunc;jsts.geom.CoordinateSequenceFilter.prototype.isGeometryChanged=jsts.abstractFunc;(function(){var Interval=function(){this.min=0.0;this.max=0.0;if(arguments.length===1){var interval=arguments[0];this.init(interval.min,interval.max);}else if(arguments.length===2){this.init(arguments[0],arguments[1]);}};Interval.prototype.init=function(min,max){this.min=min;this.max=max;if(min>max){this.min=max;this.max=min;}};Interval.prototype.getMin=function(){return this.min;};Interval.prototype.getMax=function(){return this.max;};Interval.prototype.getWidth=function(){return(this.max-this.min);};Interval.prototype.expandToInclude=function(interval){if(interval.max>this.max){this.max=interval.max;}\nif(interval.min<this.min){this.min=interval.min;}};Interval.prototype.overlaps=function(){if(arguments.length===1){return this.overlapsInterval.apply(this,arguments);}else{return this.overlapsMinMax.apply(this,arguments);}};Interval.prototype.overlapsInterval=function(interval){return this.overlaps(interval.min,interval.max);};Interval.prototype.overlapsMinMax=function(min,max){if(this.min>max||this.max<min){return false;}\nreturn true;};Interval.prototype.contains=function(){var interval;if(arguments[0]instanceof jsts.index.bintree.Interval){interval=arguments[0];return this.containsMinMax(interval.min,interval.max);}else if(arguments.length===1){return this.containsPoint(arguments[0]);}else{return this.containsMinMax(arguments[0],arguments[1]);}};Interval.prototype.containsMinMax=function(min,max){return(min>=this.min&&max<=this.max);};Interval.prototype.containsPoint=function(p){return(p>=this.min&&p<=this.max);};jsts.index.bintree.Interval=Interval;})();jsts.index.DoubleBits=function(){};jsts.index.DoubleBits.powerOf2=function(exp){return Math.pow(2,exp);};jsts.index.DoubleBits.exponent=function(d){return jsts.index.DoubleBits.CVTFWD(64,d)-1023;};jsts.index.DoubleBits.CVTFWD=function(NumW,Qty){var Sign,Expo,Mant,Bin,nb01='';var Inf={32:{d:0x7F,c:0x80,b:0,a:0},64:{d:0x7FF0,c:0,b:0,a:0}};var ExW={32:8,64:11}[NumW],MtW=NumW-ExW-1;if(!Bin){Sign=Qty<0||1/Qty<0;if(!isFinite(Qty)){Bin=Inf[NumW];if(Sign){Bin.d+=1<<(NumW/4-1);}\nExpo=Math.pow(2,ExW)-1;Mant=0;}}\nif(!Bin){Expo={32:127,64:1023}[NumW];Mant=Math.abs(Qty);while(Mant>=2){Expo++;Mant/=2;}\nwhile(Mant<1&&Expo>0){Expo--;Mant*=2;}\nif(Expo<=0){Mant/=2;nb01='Zero or Denormal';}\nif(NumW===32&&Expo>254){nb01='Too big for Single';Bin={d:Sign?0xFF:0x7F,c:0x80,b:0,a:0};Expo=Math.pow(2,ExW)-1;Mant=0;}}\nreturn Expo;};(function(){var DoubleBits=jsts.index.DoubleBits;var Interval=jsts.index.bintree.Interval;var Key=function(interval){this.pt=0.0;this.level=0;this.computeKey(interval);};Key.computeLevel=function(interval){var dx=interval.getWidth(),level;level=DoubleBits.exponent(dx)+1;return level;};Key.prototype.getPoint=function(){return this.pt;};Key.prototype.getLevel=function(){return this.level;};Key.prototype.getInterval=function(){return this.interval;};Key.prototype.computeKey=function(itemInterval){this.level=Key.computeLevel(itemInterval);this.interval=new Interval();this.computeInterval(this.level,itemInterval);while(!this.interval.contains(itemInterval)){this.level+=1;this.computeInterval(this.level,itemInterval);}};Key.prototype.computeInterval=function(level,itemInterval){var size=DoubleBits.powerOf2(level);this.pt=Math.floor(itemInterval.getMin()/size)*size;this.interval.init(this.pt,this.pt+size);};jsts.index.bintree.Key=Key;})();jsts.operation.buffer.SubgraphDepthLocater=function(subgraphs){this.subgraphs=[];this.seg=new jsts.geom.LineSegment();this.subgraphs=subgraphs;};jsts.operation.buffer.SubgraphDepthLocater.prototype.subgraphs=null;jsts.operation.buffer.SubgraphDepthLocater.prototype.seg=null;jsts.operation.buffer.SubgraphDepthLocater.prototype.getDepth=function(p){var stabbedSegments=this.findStabbedSegments(p);if(stabbedSegments.length===0)\nreturn 0;stabbedSegments.sort();var ds=stabbedSegments[0];return ds.leftDepth;};jsts.operation.buffer.SubgraphDepthLocater.prototype.findStabbedSegments=function(stabbingRayLeftPt){if(arguments.length===3){this.findStabbedSegments2.apply(this,arguments);return;}\nvar stabbedSegments=[];for(var i=0;i<this.subgraphs.length;i++){var bsg=this.subgraphs[i];var env=bsg.getEnvelope();if(stabbingRayLeftPt.y<env.getMinY()||stabbingRayLeftPt.y>env.getMaxY())\ncontinue;this.findStabbedSegments2(stabbingRayLeftPt,bsg.getDirectedEdges(),stabbedSegments);}\nreturn stabbedSegments;};jsts.operation.buffer.SubgraphDepthLocater.prototype.findStabbedSegments2=function(stabbingRayLeftPt,dirEdges,stabbedSegments){if(arguments[1]instanceof jsts.geomgraph.DirectedEdge){this.findStabbedSegments3(stabbingRayLeftPt,dirEdges,stabbedSegments);return;}\nfor(var i=dirEdges.iterator();i.hasNext();){var de=i.next();if(!de.isForward())\ncontinue;this.findStabbedSegments3(stabbingRayLeftPt,de,stabbedSegments);}};jsts.operation.buffer.SubgraphDepthLocater.prototype.findStabbedSegments3=function(stabbingRayLeftPt,dirEdge,stabbedSegments){var pts=dirEdge.getEdge().getCoordinates();for(var i=0;i<pts.length-1;i++){this.seg.p0=pts[i];this.seg.p1=pts[i+1];if(this.seg.p0.y>this.seg.p1.y)\nthis.seg.reverse();var maxx=Math.max(this.seg.p0.x,this.seg.p1.x);if(maxx<stabbingRayLeftPt.x)\ncontinue;if(this.seg.isHorizontal())\ncontinue;if(stabbingRayLeftPt.y<this.seg.p0.y||stabbingRayLeftPt.y>this.seg.p1.y)\ncontinue;if(jsts.algorithm.CGAlgorithms.computeOrientation(this.seg.p0,this.seg.p1,stabbingRayLeftPt)===jsts.algorithm.CGAlgorithms.RIGHT)\ncontinue;var depth=dirEdge.getDepth(jsts.geomgraph.Position.LEFT);if(!this.seg.p0.equals(pts[i]))\ndepth=dirEdge.getDepth(jsts.geomgraph.Position.RIGHT);var ds=new jsts.operation.buffer.SubgraphDepthLocater.DepthSegment(this.seg,depth);stabbedSegments.push(ds);}};jsts.operation.buffer.SubgraphDepthLocater.DepthSegment=function(seg,depth){this.upwardSeg=new jsts.geom.LineSegment(seg);this.leftDepth=depth;};jsts.operation.buffer.SubgraphDepthLocater.DepthSegment.prototype.upwardSeg=null;jsts.operation.buffer.SubgraphDepthLocater.DepthSegment.prototype.leftDepth=null;jsts.operation.buffer.SubgraphDepthLocater.DepthSegment.prototype.compareTo=function(obj){var other=obj;var orientIndex=this.upwardSeg.orientationIndex(other.upwardSeg);if(orientIndex===0)\norientIndex=-1*other.upwardSeg.orientationIndex(upwardSeg);if(orientIndex!==0)\nreturn orientIndex;return this.compareX(this.upwardSeg,other.upwardSeg);};jsts.operation.buffer.SubgraphDepthLocater.DepthSegment.prototype.compareX=function(seg0,seg1){var compare0=seg0.p0.compareTo(seg1.p0);if(compare0!==0)\nreturn compare0;return seg0.p1.compareTo(seg1.p1);};jsts.noding.snapround.HotPixel=function(pt,scaleFactor,li){this.corner=[];this.originalPt=pt;this.pt=pt;this.scaleFactor=scaleFactor;this.li=li;if(this.scaleFactor!==1.0){this.pt=new jsts.geom.Coordinate(this.scale(pt.x),this.scale(pt.y));this.p0Scaled=new jsts.geom.Coordinate();this.p1Scaled=new jsts.geom.Coordinate();}\nthis.initCorners(this.pt);};jsts.noding.snapround.HotPixel.prototype.li=null;jsts.noding.snapround.HotPixel.prototype.pt=null;jsts.noding.snapround.HotPixel.prototype.originalPt=null;jsts.noding.snapround.HotPixel.prototype.ptScaled=null;jsts.noding.snapround.HotPixel.prototype.p0Scaled=null;jsts.noding.snapround.HotPixel.prototype.p1Scaled=null;jsts.noding.snapround.HotPixel.prototype.scaleFactor=undefined;jsts.noding.snapround.HotPixel.prototype.minx=undefined;jsts.noding.snapround.HotPixel.prototype.maxx=undefined;jsts.noding.snapround.HotPixel.prototype.miny=undefined;jsts.noding.snapround.HotPixel.prototype.maxy=undefined;jsts.noding.snapround.HotPixel.prototype.corner=null;jsts.noding.snapround.HotPixel.prototype.safeEnv=null;jsts.noding.snapround.HotPixel.prototype.getCoordinate=function(){return this.originalPt;};jsts.noding.snapround.HotPixel.SAFE_ENV_EXPANSION_FACTOR=0.75;jsts.noding.snapround.HotPixel.prototype.getSafeEnvelope=function(){if(this.safeEnv===null){var safeTolerance=jsts.noding.snapround.HotPixel.SAFE_ENV_EXPANSION_FACTOR/this.scaleFactor;this.safeEnv=new jsts.geom.Envelope(this.originalPt.x-safeTolerance,this.originalPt.x+safeTolerance,this.originalPt.y-safeTolerance,this.originalPt.y+safeTolerance);}\nreturn this.safeEnv;};jsts.noding.snapround.HotPixel.prototype.initCorners=function(pt){var tolerance=0.5;this.minx=pt.x-tolerance;this.maxx=pt.x+tolerance;this.miny=pt.y-tolerance;this.maxy=pt.y+tolerance;this.corner[0]=new jsts.geom.Coordinate(this.maxx,this.maxy);this.corner[1]=new jsts.geom.Coordinate(this.minx,this.maxy);this.corner[2]=new jsts.geom.Coordinate(this.minx,this.miny);this.corner[3]=new jsts.geom.Coordinate(this.maxx,this.miny);};jsts.noding.snapround.HotPixel.prototype.scale=function(val){return Math.round(val*this.scaleFactor);};jsts.noding.snapround.HotPixel.prototype.intersects=function(p0,p1){if(this.scaleFactor===1.0)\nreturn this.intersectsScaled(p0,p1);this.copyScaled(p0,this.p0Scaled);this.copyScaled(p1,this.p1Scaled);return this.intersectsScaled(this.p0Scaled,this.p1Scaled);};jsts.noding.snapround.HotPixel.prototype.copyScaled=function(p,pScaled){pScaled.x=this.scale(p.x);pScaled.y=this.scale(p.y);};jsts.noding.snapround.HotPixel.prototype.intersectsScaled=function(p0,p1){var segMinx=Math.min(p0.x,p1.x);var segMaxx=Math.max(p0.x,p1.x);var segMiny=Math.min(p0.y,p1.y);var segMaxy=Math.max(p0.y,p1.y);var isOutsidePixelEnv=this.maxx<segMinx||this.minx>segMaxx||this.maxy<segMiny||this.miny>segMaxy;if(isOutsidePixelEnv)\nreturn false;var intersects=this.intersectsToleranceSquare(p0,p1);jsts.util.Assert.isTrue(!(isOutsidePixelEnv&&intersects),'Found bad envelope test');return intersects;};jsts.noding.snapround.HotPixel.prototype.intersectsToleranceSquare=function(p0,p1){var intersectsLeft=false;var intersectsBottom=false;this.li.computeIntersection(p0,p1,this.corner[0],this.corner[1]);if(this.li.isProper())\nreturn true;this.li.computeIntersection(p0,p1,this.corner[1],this.corner[2]);if(this.li.isProper())\nreturn true;if(this.li.hasIntersection())\nintersectsLeft=true;this.li.computeIntersection(p0,p1,this.corner[2],this.corner[3]);if(this.li.isProper())\nreturn true;if(this.li.hasIntersection())\nintersectsBottom=true;this.li.computeIntersection(p0,p1,this.corner[3],this.corner[0]);if(this.li.isProper())\nreturn true;if(intersectsLeft&&intersectsBottom)\nreturn true;if(p0.equals(this.pt))\nreturn true;if(p1.equals(this.pt))\nreturn true;return false;};jsts.noding.snapround.HotPixel.prototype.intersectsPixelClosure=function(p0,p1){this.li.computeIntersection(p0,p1,this.corner[0],this.corner[1]);if(this.li.hasIntersection())\nreturn true;this.li.computeIntersection(p0,p1,this.corner[1],this.corner[2]);if(this.li.hasIntersection())\nreturn true;this.li.computeIntersection(p0,p1,this.corner[2],this.corner[3]);if(this.li.hasIntersection())\nreturn true;this.li.computeIntersection(p0,p1,this.corner[3],this.corner[0]);if(this.li.hasIntersection())\nreturn true;return false;};jsts.noding.snapround.HotPixel.prototype.addSnappedNode=function(segStr,segIndex){var p0=segStr.getCoordinate(segIndex);var p1=segStr.getCoordinate(segIndex+1);if(this.intersects(p0,p1)){segStr.addIntersection(this.getCoordinate(),segIndex);return true;}\nreturn false;};jsts.operation.buffer.BufferInputLineSimplifier=function(inputLine){this.inputLine=inputLine;};jsts.operation.buffer.BufferInputLineSimplifier.simplify=function(inputLine,distanceTol){var simp=new jsts.operation.buffer.BufferInputLineSimplifier(inputLine);return simp.simplify(distanceTol);};jsts.operation.buffer.BufferInputLineSimplifier.INIT=0;jsts.operation.buffer.BufferInputLineSimplifier.DELETE=1;jsts.operation.buffer.BufferInputLineSimplifier.KEEP=1;jsts.operation.buffer.BufferInputLineSimplifier.prototype.inputLine=null;jsts.operation.buffer.BufferInputLineSimplifier.prototype.distanceTol=null;jsts.operation.buffer.BufferInputLineSimplifier.prototype.isDeleted=null;jsts.operation.buffer.BufferInputLineSimplifier.prototype.angleOrientation=jsts.algorithm.CGAlgorithms.COUNTERCLOCKWISE;jsts.operation.buffer.BufferInputLineSimplifier.prototype.simplify=function(distanceTol){this.distanceTol=Math.abs(distanceTol);if(distanceTol<0)\nthis.angleOrientation=jsts.algorithm.CGAlgorithms.CLOCKWISE;this.isDeleted=[];this.isDeleted.length=this.inputLine.length;var isChanged=false;do{isChanged=this.deleteShallowConcavities();}while(isChanged);return this.collapseLine();};jsts.operation.buffer.BufferInputLineSimplifier.prototype.deleteShallowConcavities=function(){var index=1;var maxIndex=this.inputLine.length-1;var midIndex=this.findNextNonDeletedIndex(index);var lastIndex=this.findNextNonDeletedIndex(midIndex);var isChanged=false;while(lastIndex<this.inputLine.length){var isMiddleVertexDeleted=false;if(this.isDeletable(index,midIndex,lastIndex,this.distanceTol)){this.isDeleted[midIndex]=jsts.operation.buffer.BufferInputLineSimplifier.DELETE;isMiddleVertexDeleted=true;isChanged=true;}\nif(isMiddleVertexDeleted)\nindex=lastIndex;else\nindex=midIndex;midIndex=this.findNextNonDeletedIndex(index);lastIndex=this.findNextNonDeletedIndex(midIndex);}\nreturn isChanged;};jsts.operation.buffer.BufferInputLineSimplifier.prototype.findNextNonDeletedIndex=function(index){var next=index+1;while(next<this.inputLine.length&&this.isDeleted[next]===jsts.operation.buffer.BufferInputLineSimplifier.DELETE)\nnext++;return next;};jsts.operation.buffer.BufferInputLineSimplifier.prototype.collapseLine=function(){var coordList=[];for(var i=0;i<this.inputLine.length;i++){if(this.isDeleted[i]!==jsts.operation.buffer.BufferInputLineSimplifier.DELETE)\ncoordList.push(this.inputLine[i]);}\nreturn coordList;};jsts.operation.buffer.BufferInputLineSimplifier.prototype.isDeletable=function(i0,i1,i2,distanceTol){var p0=this.inputLine[i0];var p1=this.inputLine[i1];var p2=this.inputLine[i2];if(!this.isConcave(p0,p1,p2))\nreturn false;if(!this.isShallow(p0,p1,p2,distanceTol))\nreturn false;return this.isShallowSampled(p0,p1,i0,i2,distanceTol);};jsts.operation.buffer.BufferInputLineSimplifier.prototype.isShallowConcavity=function(p0,p1,p2,distanceTol){var orientation=jsts.algorithm.CGAlgorithms.computeOrientation(p0,p1,p2);var isAngleToSimplify=(orientation===this.angleOrientation);if(!isAngleToSimplify)\nreturn false;var dist=jsts.algorithm.CGAlgorithms.distancePointLine(p1,p0,p2);return dist<distanceTol;};jsts.operation.buffer.BufferInputLineSimplifier.NUM_PTS_TO_CHECK=10;jsts.operation.buffer.BufferInputLineSimplifier.prototype.isShallowSampled=function(p0,p2,i0,i2,distanceTol){var inc=parseInt((i2-i0)/jsts.operation.buffer.BufferInputLineSimplifier.NUM_PTS_TO_CHECK);if(inc<=0)\ninc=1;for(var i=i0;i<i2;i+=inc){if(!this.isShallow(p0,p2,this.inputLine[i],distanceTol))\nreturn false;}\nreturn true;};jsts.operation.buffer.BufferInputLineSimplifier.prototype.isShallow=function(p0,p1,p2,distanceTol){var dist=jsts.algorithm.CGAlgorithms.distancePointLine(p1,p0,p2);return dist<distanceTol;};jsts.operation.buffer.BufferInputLineSimplifier.prototype.isConcave=function(p0,p1,p2){var orientation=jsts.algorithm.CGAlgorithms.computeOrientation(p0,p1,p2);var isConcave=(orientation===this.angleOrientation);return isConcave;};jsts.geomgraph.index.SweepLineEvent=function(x,obj,label){if(!(obj instanceof jsts.geomgraph.index.SweepLineEvent)){this.eventType=jsts.geomgraph.index.SweepLineEvent.INSERT;this.label=label;this.xValue=x;this.obj=obj;return;}\nthis.eventType=jsts.geomgraph.index.SweepLineEvent.DELETE;this.xValue=x;this.insertEvent=obj;};jsts.geomgraph.index.SweepLineEvent.INSERT=1;jsts.geomgraph.index.SweepLineEvent.DELETE=2;jsts.geomgraph.index.SweepLineEvent.prototype.label=null;jsts.geomgraph.index.SweepLineEvent.prototype.xValue=null;jsts.geomgraph.index.SweepLineEvent.prototype.eventType=null;jsts.geomgraph.index.SweepLineEvent.prototype.insertEvent=null;jsts.geomgraph.index.SweepLineEvent.prototype.deleteEventIndex=null;jsts.geomgraph.index.SweepLineEvent.prototype.obj=null;jsts.geomgraph.index.SweepLineEvent.prototype.isInsert=function(){return this.eventType==jsts.geomgraph.index.SweepLineEvent.INSERT;};jsts.geomgraph.index.SweepLineEvent.prototype.isDelete=function(){return this.eventType==jsts.geomgraph.index.SweepLineEvent.DELETE;};jsts.geomgraph.index.SweepLineEvent.prototype.getInsertEvent=function(){return this.insertEvent;};jsts.geomgraph.index.SweepLineEvent.prototype.getDeleteEventIndex=function(){return this.deleteEventIndex;};jsts.geomgraph.index.SweepLineEvent.prototype.setDeleteEventIndex=function(deleteEventIndex){this.deleteEventIndex=deleteEventIndex;};jsts.geomgraph.index.SweepLineEvent.prototype.getObject=function(){return this.obj;};jsts.geomgraph.index.SweepLineEvent.prototype.isSameLabel=function(ev){if(this.label==null){return false;}\nreturn this.label==ev.label;};jsts.geomgraph.index.SweepLineEvent.prototype.compareTo=function(pe){if(this.xValue<pe.xValue){return-1;}\nif(this.xValue>pe.xValue){return 1;}\nif(this.eventType<pe.eventType){return-1;}\nif(this.eventType>pe.eventType){return 1;}\nreturn 0;};jsts.geom.CoordinateList=function(coord,allowRepeated){this.array=[];allowRepeated=(allowRepeated===undefined)?true:allowRepeated;if(coord!==undefined){this.add(coord,allowRepeated);}};jsts.geom.CoordinateList.prototype=new javascript.util.ArrayList();jsts.geom.CoordinateList.prototype.iterator=null;jsts.geom.CoordinateList.prototype.remove=null;jsts.geom.CoordinateList.prototype.get=function(i){return this.array[i];};jsts.geom.CoordinateList.prototype.set=function(i,e){var o=this.array[i];this.array[i]=e;return o;};jsts.geom.CoordinateList.prototype.size=function(){return this.array.length;};jsts.geom.CoordinateList.prototype.add=function(){if(arguments.length>1){return this.addCoordinates.apply(this,arguments);}else{return this.array.push(arguments[0]);}};jsts.geom.CoordinateList.prototype.addCoordinates=function(coord,allowRepeated,direction){if(coord instanceof jsts.geom.Coordinate){return this.addCoordinate.apply(this,arguments);}else if(typeof coord==='number'){return this.insertCoordinate.apply(this,arguments);}\ndirection=direction||true;if(direction){for(var i=0;i<coord.length;i++){this.addCoordinate(coord[i],allowRepeated);}}else{for(var i=coord.length-1;i>=0;i--){this.addCoordinate(coord[i],allowRepeated);}}\nreturn true;};jsts.geom.CoordinateList.prototype.addCoordinate=function(coord,allowRepeated){if(!allowRepeated){if(this.size()>=1){var last=this.get(this.size()-1);if(last.equals2D(coord))return;}}\nthis.add(coord);};jsts.geom.CoordinateList.prototype.insertCoordinate=function(index,coord,allowRepeated){if(!allowRepeated){var before=index>0?index-1:-1;if(before!==-1&&this.get(before).equals2D(coord)){return;}\nvar after=index<this.size()-1?index+1:-1;if(after!==-1&&this.get(after).equals2D(coord)){return;}}\nthis.array.splice(index,0,coord);};jsts.geom.CoordinateList.prototype.closeRing=function(){if(this.size()>0){this.addCoordinate(new jsts.geom.Coordinate(this.get(0)),false);}};jsts.geom.CoordinateList.prototype.toArray=function(){return this.array;};jsts.geom.CoordinateList.prototype.toCoordinateArray=function(){return this.array;};jsts.operation.buffer.OffsetSegmentGenerator=function(precisionModel,bufParams,distance){this.seg0=new jsts.geom.LineSegment();this.seg1=new jsts.geom.LineSegment();this.offset0=new jsts.geom.LineSegment();this.offset1=new jsts.geom.LineSegment();this.precisionModel=precisionModel;this.bufParams=bufParams;this.li=new jsts.algorithm.RobustLineIntersector();this.filletAngleQuantum=Math.PI/2.0/bufParams.getQuadrantSegments();if(this.bufParams.getQuadrantSegments()>=8&&this.bufParams.getJoinStyle()===jsts.operation.buffer.BufferParameters.JOIN_ROUND){this.closingSegLengthFactor=jsts.operation.buffer.OffsetSegmentGenerator.MAX_CLOSING_SEG_LEN_FACTOR;}\nthis.init(distance);};jsts.operation.buffer.OffsetSegmentGenerator.OFFSET_SEGMENT_SEPARATION_FACTOR=1.0E-3;jsts.operation.buffer.OffsetSegmentGenerator.INSIDE_TURN_VERTEX_SNAP_DISTANCE_FACTOR=1.0E-3;jsts.operation.buffer.OffsetSegmentGenerator.CURVE_VERTEX_SNAP_DISTANCE_FACTOR=1.0E-6;jsts.operation.buffer.OffsetSegmentGenerator.MAX_CLOSING_SEG_LEN_FACTOR=80;jsts.operation.buffer.OffsetSegmentGenerator.prototype.maxCurveSegmentError=0.0;jsts.operation.buffer.OffsetSegmentGenerator.prototype.filletAngleQuantum=null;jsts.operation.buffer.OffsetSegmentGenerator.prototype.closingSegLengthFactor=1;jsts.operation.buffer.OffsetSegmentGenerator.prototype.segList=null;jsts.operation.buffer.OffsetSegmentGenerator.prototype.distance=0.0;jsts.operation.buffer.OffsetSegmentGenerator.prototype.precisionModel=null;jsts.operation.buffer.OffsetSegmentGenerator.prototype.bufParams=null;jsts.operation.buffer.OffsetSegmentGenerator.prototype.li=null;jsts.operation.buffer.OffsetSegmentGenerator.prototype.s0=null;jsts.operation.buffer.OffsetSegmentGenerator.prototype.s1=null;jsts.operation.buffer.OffsetSegmentGenerator.prototype.s2=null;jsts.operation.buffer.OffsetSegmentGenerator.prototype.seg0=null;jsts.operation.buffer.OffsetSegmentGenerator.prototype.seg1=null;jsts.operation.buffer.OffsetSegmentGenerator.prototype.offset0=null;jsts.operation.buffer.OffsetSegmentGenerator.prototype.offset1=null;jsts.operation.buffer.OffsetSegmentGenerator.prototype.side=0;jsts.operation.buffer.OffsetSegmentGenerator.prototype.hasNarrowConcaveAngle=false;jsts.operation.buffer.OffsetSegmentGenerator.prototype.hasNarrowConcaveAngle=function(){return this.hasNarrowConcaveAngle;};jsts.operation.buffer.OffsetSegmentGenerator.prototype.init=function(distance){this.distance=distance;this.maxCurveSegmentError=this.distance*(1-Math.cos(this.filletAngleQuantum/2.0));this.segList=new jsts.operation.buffer.OffsetSegmentString();this.segList.setPrecisionModel(this.precisionModel);this.segList.setMinimumVertexDistance(this.distance*jsts.operation.buffer.OffsetSegmentGenerator.CURVE_VERTEX_SNAP_DISTANCE_FACTOR);};jsts.operation.buffer.OffsetSegmentGenerator.prototype.initSideSegments=function(s1,s2,side){this.s1=s1;this.s2=s2;this.side=side;this.seg1.setCoordinates(this.s1,this.s2);this.computeOffsetSegment(this.seg1,this.side,this.distance,this.offset1);};jsts.operation.buffer.OffsetSegmentGenerator.prototype.getCoordinates=function(){return this.segList.getCoordinates();};jsts.operation.buffer.OffsetSegmentGenerator.prototype.closeRing=function(){this.segList.closeRing();};jsts.operation.buffer.OffsetSegmentGenerator.prototype.addSegments=function(pt,isForward){this.segList.addPts(pt,isForward);};jsts.operation.buffer.OffsetSegmentGenerator.prototype.addFirstSegment=function(){this.segList.addPt(this.offset1.p0);};jsts.operation.buffer.OffsetSegmentGenerator.prototype.addLastSegment=function(){this.segList.addPt(this.offset1.p1);};jsts.operation.buffer.OffsetSegmentGenerator.prototype.addNextSegment=function(p,addStartPoint){this.s0=this.s1;this.s1=this.s2;this.s2=p;this.seg0.setCoordinates(this.s0,this.s1);this.computeOffsetSegment(this.seg0,this.side,this.distance,this.offset0);this.seg1.setCoordinates(this.s1,this.s2);this.computeOffsetSegment(this.seg1,this.side,this.distance,this.offset1);if(this.s1.equals(this.s2))\nreturn;var orientation=jsts.algorithm.CGAlgorithms.computeOrientation(this.s0,this.s1,this.s2);var outsideTurn=(orientation===jsts.algorithm.CGAlgorithms.CLOCKWISE&&this.side===jsts.geomgraph.Position.LEFT)||(orientation===jsts.algorithm.CGAlgorithms.COUNTERCLOCKWISE&&this.side===jsts.geomgraph.Position.RIGHT);if(orientation==0){this.addCollinear(addStartPoint);}else if(outsideTurn){this.addOutsideTurn(orientation,addStartPoint);}else{this.addInsideTurn(orientation,addStartPoint);}};jsts.operation.buffer.OffsetSegmentGenerator.prototype.addCollinear=function(addStartPoint){this.li.computeIntersection(this.s0,this.s1,this.s1,this.s2);var numInt=this.li.getIntersectionNum();if(numInt>=2){if(this.bufParams.getJoinStyle()===jsts.operation.buffer.BufferParameters.JOIN_BEVEL||this.bufParams.getJoinStyle()===jsts.operation.buffer.BufferParameters.JOIN_MITRE){if(addStartPoint)\nthis.segList.addPt(this.offset0.p1);this.segList.addPt(this.offset1.p0);}else{this.addFillet(this.s1,this.offset0.p1,this.offset1.p0,jsts.algorithm.CGAlgorithms.CLOCKWISE,this.distance);}}};jsts.operation.buffer.OffsetSegmentGenerator.prototype.addOutsideTurn=function(orientation,addStartPoint){if(this.offset0.p1.distance(this.offset1.p0)<this.distance*jsts.operation.buffer.OffsetSegmentGenerator.OFFSET_SEGMENT_SEPARATION_FACTOR){this.segList.addPt(this.offset0.p1);return;}\nif(this.bufParams.getJoinStyle()===jsts.operation.buffer.BufferParameters.JOIN_MITRE){this.addMitreJoin(this.s1,this.offset0,this.offset1,this.distance);}else if(this.bufParams.getJoinStyle()===jsts.operation.buffer.BufferParameters.JOIN_BEVEL){this.addBevelJoin(this.offset0,this.offset1);}else{if(addStartPoint)\nthis.segList.addPt(this.offset0.p1);this.addFillet(this.s1,this.offset0.p1,this.offset1.p0,orientation,this.distance);this.segList.addPt(this.offset1.p0);}};jsts.operation.buffer.OffsetSegmentGenerator.prototype.addInsideTurn=function(orientation,addStartPoint){this.li.computeIntersection(this.offset0.p0,this.offset0.p1,this.offset1.p0,this.offset1.p1);if(this.li.hasIntersection()){this.segList.addPt(this.li.getIntersection(0));}else{this.hasNarrowConcaveAngle=true;if(this.offset0.p1.distance(this.offset1.p0)<this.distance*jsts.operation.buffer.OffsetSegmentGenerator.INSIDE_TURN_VERTEX_SNAP_DISTANCE_FACTOR){this.segList.addPt(this.offset0.p1);}else{this.segList.addPt(this.offset0.p1);if(this.closingSegLengthFactor>0){var mid0=new jsts.geom.Coordinate((this.closingSegLengthFactor*this.offset0.p1.x+this.s1.x)/(this.closingSegLengthFactor+1),(this.closingSegLengthFactor*this.offset0.p1.y+this.s1.y)/(this.closingSegLengthFactor+1));this.segList.addPt(mid0);var mid1=new jsts.geom.Coordinate((this.closingSegLengthFactor*this.offset1.p0.x+this.s1.x)/(this.closingSegLengthFactor+1),(this.closingSegLengthFactor*this.offset1.p0.y+this.s1.y)/(this.closingSegLengthFactor+1));this.segList.addPt(mid1);}else{this.segList.addPt(this.s1);}\nthis.segList.addPt(this.offset1.p0);}}};jsts.operation.buffer.OffsetSegmentGenerator.prototype.computeOffsetSegment=function(seg,side,distance,offset){var sideSign=side===jsts.geomgraph.Position.LEFT?1:-1;var dx=seg.p1.x-seg.p0.x;var dy=seg.p1.y-seg.p0.y;var len=Math.sqrt(dx*dx+dy*dy);var ux=sideSign*distance*dx/len;var uy=sideSign*distance*dy/len;offset.p0.x=seg.p0.x-uy;offset.p0.y=seg.p0.y+ux;offset.p1.x=seg.p1.x-uy;offset.p1.y=seg.p1.y+ux;};jsts.operation.buffer.OffsetSegmentGenerator.prototype.addLineEndCap=function(p0,p1){var seg=new jsts.geom.LineSegment(p0,p1);var offsetL=new jsts.geom.LineSegment();this.computeOffsetSegment(seg,jsts.geomgraph.Position.LEFT,this.distance,offsetL);var offsetR=new jsts.geom.LineSegment();this.computeOffsetSegment(seg,jsts.geomgraph.Position.RIGHT,this.distance,offsetR);var dx=p1.x-p0.x;var dy=p1.y-p0.y;var angle=Math.atan2(dy,dx);switch(this.bufParams.getEndCapStyle()){case jsts.operation.buffer.BufferParameters.CAP_ROUND:this.segList.addPt(offsetL.p1);this.addFillet(p1,angle+Math.PI/2,angle-Math.PI/2,jsts.algorithm.CGAlgorithms.CLOCKWISE,this.distance);this.segList.addPt(offsetR.p1);break;case jsts.operation.buffer.BufferParameters.CAP_FLAT:this.segList.addPt(offsetL.p1);this.segList.addPt(offsetR.p1);break;case jsts.operation.buffer.BufferParameters.CAP_SQUARE:var squareCapSideOffset=new jsts.geom.Coordinate();squareCapSideOffset.x=Math.abs(this.distance)*Math.cos(angle);squareCapSideOffset.y=Math.abs(this.distance)*Math.sin(angle);var squareCapLOffset=new jsts.geom.Coordinate(offsetL.p1.x+\nsquareCapSideOffset.x,offsetL.p1.y+squareCapSideOffset.y);var squareCapROffset=new jsts.geom.Coordinate(offsetR.p1.x+\nsquareCapSideOffset.x,offsetR.p1.y+squareCapSideOffset.y);this.segList.addPt(squareCapLOffset);this.segList.addPt(squareCapROffset);break;}};jsts.operation.buffer.OffsetSegmentGenerator.prototype.addMitreJoin=function(p,offset0,offset1,distance){var isMitreWithinLimit=true;var intPt=null;try{intPt=jsts.algorithm.HCoordinate.intersection(offset0.p0,offset0.p1,offset1.p0,offset1.p1);var mitreRatio=distance<=0.0?1.0:intPt.distance(p)/Math.abs(distance);if(mitreRatio>this.bufParams.getMitreLimit())\nthis.isMitreWithinLimit=false;}catch(e){if(e instanceof jsts.error.NotRepresentableError){intPt=new jsts.geom.Coordinate(0,0);this.isMitreWithinLimit=false;}}\nif(isMitreWithinLimit){this.segList.addPt(intPt);}else{this.addLimitedMitreJoin(offset0,offset1,distance,bufParams.getMitreLimit());}};jsts.operation.buffer.OffsetSegmentGenerator.prototype.addLimitedMitreJoin=function(offset0,offset1,distance,mitreLimit){var basePt=this.seg0.p1;var ang0=jsts.algorithm.Angle.angle(basePt,this.seg0.p0);var ang1=jsts.algorithm.Angle.angle(basePt,this.seg1.p1);var angDiff=jsts.algorithm.Angle.angleBetweenOriented(this.seg0.p0,basePt,this.seg1.p1);var angDiffHalf=angDiff/2;var midAng=jsts.algorithm.Angle.normalize(ang0+angDiffHalf);var mitreMidAng=jsts.algorithm.Angle.normalize(midAng+Math.PI);var mitreDist=mitreLimit*distance;var bevelDelta=mitreDist*Math.abs(Math.sin(angDiffHalf));var bevelHalfLen=distance-bevelDelta;var bevelMidX=basePt.x+mitreDist*Math.cos(mitreMidAng);var bevelMidY=basePt.y+mitreDist*Math.sin(mitreMidAng);var bevelMidPt=new jsts.geom.Coordinate(bevelMidX,bevelMidY);var mitreMidLine=new jsts.geom.LineSegment(basePt,bevelMidPt);var bevelEndLeft=mitreMidLine.pointAlongOffset(1.0,bevelHalfLen);var bevelEndRight=mitreMidLine.pointAlongOffset(1.0,-bevelHalfLen);if(this.side==jsts.geomgraph.Position.LEFT){this.segList.addPt(bevelEndLeft);this.segList.addPt(bevelEndRight);}else{this.segList.addPt(bevelEndRight);this.segList.addPt(bevelEndLeft);}};jsts.operation.buffer.OffsetSegmentGenerator.prototype.addBevelJoin=function(offset0,offset1){this.segList.addPt(offset0.p1);this.segList.addPt(offset1.p0);};jsts.operation.buffer.OffsetSegmentGenerator.prototype.addFillet=function(p,p0,p1,direction,radius){if(!(p1 instanceof jsts.geom.Coordinate)){this.addFillet2.apply(this,arguments);return;}\nvar dx0=p0.x-p.x;var dy0=p0.y-p.y;var startAngle=Math.atan2(dy0,dx0);var dx1=p1.x-p.x;var dy1=p1.y-p.y;var endAngle=Math.atan2(dy1,dx1);if(direction===jsts.algorithm.CGAlgorithms.CLOCKWISE){if(startAngle<=endAngle)\nstartAngle+=2.0*Math.PI;}else{if(startAngle>=endAngle)\nstartAngle-=2.0*Math.PI;}\nthis.segList.addPt(p0);this.addFillet(p,startAngle,endAngle,direction,radius);this.segList.addPt(p1);};jsts.operation.buffer.OffsetSegmentGenerator.prototype.addFillet2=function(p,startAngle,endAngle,direction,radius){var directionFactor=direction===jsts.algorithm.CGAlgorithms.CLOCKWISE?-1:1;var totalAngle=Math.abs(startAngle-endAngle);var nSegs=parseInt((totalAngle/this.filletAngleQuantum+0.5));if(nSegs<1)\nreturn;var initAngle,currAngleInc;initAngle=0.0;currAngleInc=totalAngle/nSegs;var currAngle=initAngle;var pt=new jsts.geom.Coordinate();while(currAngle<totalAngle){var angle=startAngle+directionFactor*currAngle;pt.x=p.x+radius*Math.cos(angle);pt.y=p.y+radius*Math.sin(angle);this.segList.addPt(pt);currAngle+=currAngleInc;}};jsts.operation.buffer.OffsetSegmentGenerator.prototype.createCircle=function(p){var pt=new jsts.geom.Coordinate(p.x+this.distance,p.y);this.segList.addPt(pt);this.addFillet(p,0.0,2.0*Math.PI,-1,this.distance);this.segList.closeRing();};jsts.operation.buffer.OffsetSegmentGenerator.prototype.createSquare=function(p){this.segList.addPt(new jsts.geom.Coordinate(p.x+distance,p.y+distance));this.segList.addPt(new jsts.geom.Coordinate(p.x+distance,p.y-distance));this.segList.addPt(new jsts.geom.Coordinate(p.x-distance,p.y-distance));this.segList.addPt(new jsts.geom.Coordinate(p.x-distance,p.y+distance));this.segList.closeRing();};jsts.operation.overlay.MaximalEdgeRing=function(start,geometryFactory){jsts.geomgraph.EdgeRing.call(this,start,geometryFactory);};jsts.operation.overlay.MaximalEdgeRing.prototype=new jsts.geomgraph.EdgeRing();jsts.operation.overlay.MaximalEdgeRing.constructor=jsts.operation.overlay.MaximalEdgeRing;jsts.operation.overlay.MaximalEdgeRing.prototype.getNext=function(de)\n{return de.getNext();};jsts.operation.overlay.MaximalEdgeRing.prototype.setEdgeRing=function(de,er)\n{de.setEdgeRing(er);};jsts.operation.overlay.MaximalEdgeRing.prototype.linkDirectedEdgesForMinimalEdgeRings=function()\n{var de=this.startDe;do{var node=de.getNode();node.getEdges().linkMinimalDirectedEdges(this);de=de.getNext();}while(de!=this.startDe);};jsts.operation.overlay.MaximalEdgeRing.prototype.buildMinimalRings=function()\n{var minEdgeRings=[];var de=this.startDe;do{if(de.getMinEdgeRing()===null){var minEr=new jsts.operation.overlay.MinimalEdgeRing(de,this.geometryFactory);minEdgeRings.push(minEr);}\nde=de.getNext();}while(de!=this.startDe);return minEdgeRings;};jsts.algorithm.CentroidPoint=function(){this.centSum=new jsts.geom.Coordinate();};jsts.algorithm.CentroidPoint.prototype.ptCount=0;jsts.algorithm.CentroidPoint.prototype.centSum=null;jsts.algorithm.CentroidPoint.prototype.add=function(geom){if(geom instanceof jsts.geom.Point){this.add2(geom.getCoordinate());}else if(geom instanceof jsts.geom.GeometryCollection||geom instanceof jsts.geom.MultiPoint||geom instanceof jsts.geom.MultiLineString||geom instanceof jsts.geom.MultiPolygon){var gc=geom;for(var i=0;i<gc.getNumGeometries();i++){this.add(gc.getGeometryN(i));}}};jsts.algorithm.CentroidPoint.prototype.add2=function(pt){this.ptCount+=1;this.centSum.x+=pt.x;this.centSum.y+=pt.y;};jsts.algorithm.CentroidPoint.prototype.getCentroid=function(){var cent=new jsts.geom.Coordinate();cent.x=this.centSum.x/this.ptCount;cent.y=this.centSum.y/this.ptCount;return cent;};jsts.operation.distance.ConnectedElementLocationFilter=function(locations){this.locations=locations;};jsts.operation.distance.ConnectedElementLocationFilter.prototype=new jsts.geom.GeometryFilter();jsts.operation.distance.ConnectedElementLocationFilter.prototype.locations=null;jsts.operation.distance.ConnectedElementLocationFilter.getLocations=function(geom){var locations=[];geom.apply(new jsts.operation.distance.ConnectedElementLocationFilter(locations));return locations;};jsts.operation.distance.ConnectedElementLocationFilter.prototype.filter=function(geom){if(geom instanceof jsts.geom.Point||geom instanceof jsts.geom.LineString||geom instanceof jsts.geom.Polygon)\nthis.locations.push(new jsts.operation.distance.GeometryLocation(geom,0,geom.getCoordinate()));};jsts.geomgraph.index.MonotoneChainEdge=function(e){this.e=e;this.pts=e.getCoordinates();var mcb=new jsts.geomgraph.index.MonotoneChainIndexer();this.startIndex=mcb.getChainStartIndices(this.pts);};jsts.geomgraph.index.MonotoneChainEdge.prototype.e=null;jsts.geomgraph.index.MonotoneChainEdge.prototype.pts=null;jsts.geomgraph.index.MonotoneChainEdge.prototype.startIndex=null;jsts.geomgraph.index.MonotoneChainEdge.prototype.env1=new jsts.geom.Envelope();jsts.geomgraph.index.MonotoneChainEdge.prototype.env2=new jsts.geom.Envelope();jsts.geomgraph.index.MonotoneChainEdge.prototype.getCoordinates=function(){return this.pts;};jsts.geomgraph.index.MonotoneChainEdge.prototype.getStartIndexes=function(){return this.startIndex;};jsts.geomgraph.index.MonotoneChainEdge.prototype.getMinX=function(chainIndex){var x1=this.pts[this.startIndex[chainIndex]].x;var x2=this.pts[this.startIndex[chainIndex+1]].x;if(x1<x2){return x1;}\nreturn x2;};jsts.geomgraph.index.MonotoneChainEdge.prototype.getMaxX=function(chainIndex){var x1=this.pts[this.startIndex[chainIndex]].x;var x2=this.pts[this.startIndex[chainIndex+1]].x;if(x1>x2){return x1;}\nreturn x2;};jsts.geomgraph.index.MonotoneChainEdge.prototype.computeIntersects=function(mce,si){for(var i=0;i<this.startIndex.length-1;i++){for(var j=0;j<mce.startIndex.length-1;j++){this.computeIntersectsForChain(i,mce,j,si);}}};jsts.geomgraph.index.MonotoneChainEdge.prototype.computeIntersectsForChain=function(chainIndex0,mce,chainIndex1,si){this.computeIntersectsForChain2(this.startIndex[chainIndex0],this.startIndex[chainIndex0+1],mce,mce.startIndex[chainIndex1],mce.startIndex[chainIndex1+1],si);};jsts.geomgraph.index.MonotoneChainEdge.prototype.computeIntersectsForChain2=function(start0,end0,mce,start1,end1,ei){var p00=this.pts[start0];var p01=this.pts[end0];var p10=mce.pts[start1];var p11=mce.pts[end1];if(end0-start0==1&&end1-start1==1){ei.addIntersections(this.e,start0,mce.e,start1);return;}\nthis.env1.init(p00,p01);this.env2.init(p10,p11);if(!this.env1.intersects(this.env2)){return;}\nvar mid0=Math.floor((start0+end0)/2);var mid1=Math.floor((start1+end1)/2);if(start0<mid0){if(start1<mid1){this.computeIntersectsForChain2(start0,mid0,mce,start1,mid1,ei);}\nif(mid1<end1){this.computeIntersectsForChain2(start0,mid0,mce,mid1,end1,ei);}}\nif(mid0<end0){if(start1<mid1){this.computeIntersectsForChain2(mid0,end0,mce,start1,mid1,ei);}\nif(mid1<end1){this.computeIntersectsForChain2(mid0,end0,mce,mid1,end1,ei);}}};(function(){var ArrayList=javascript.util.ArrayList;jsts.operation.relate.EdgeEndBuilder=function(){};jsts.operation.relate.EdgeEndBuilder.prototype.computeEdgeEnds=function(edges){if(arguments.length==2){this.computeEdgeEnds2.apply(this,arguments);return;}\nvar l=new ArrayList();for(var i=edges;i.hasNext();){var e=i.next();this.computeEdgeEnds2(e,l);}\nreturn l;};jsts.operation.relate.EdgeEndBuilder.prototype.computeEdgeEnds2=function(edge,l){var eiList=edge.getEdgeIntersectionList();eiList.addEndpoints();var it=eiList.iterator();var eiPrev=null;var eiCurr=null;if(!it.hasNext())\nreturn;var eiNext=it.next();do{eiPrev=eiCurr;eiCurr=eiNext;eiNext=null;if(it.hasNext())\neiNext=it.next();if(eiCurr!==null){this.createEdgeEndForPrev(edge,l,eiCurr,eiPrev);this.createEdgeEndForNext(edge,l,eiCurr,eiNext);}}while(eiCurr!==null);};jsts.operation.relate.EdgeEndBuilder.prototype.createEdgeEndForPrev=function(edge,l,eiCurr,eiPrev){var iPrev=eiCurr.segmentIndex;if(eiCurr.dist===0.0){if(iPrev===0)\nreturn;iPrev--;}\nvar pPrev=edge.getCoordinate(iPrev);if(eiPrev!==null&&eiPrev.segmentIndex>=iPrev)\npPrev=eiPrev.coord;var label=new jsts.geomgraph.Label(edge.getLabel());label.flip();var e=new jsts.geomgraph.EdgeEnd(edge,eiCurr.coord,pPrev,label);l.add(e);};jsts.operation.relate.EdgeEndBuilder.prototype.createEdgeEndForNext=function(edge,l,eiCurr,eiNext){var iNext=eiCurr.segmentIndex+1;if(iNext>=edge.getNumPoints()&&eiNext===null)\nreturn;var pNext=edge.getCoordinate(iNext);if(eiNext!==null&&eiNext.segmentIndex===eiCurr.segmentIndex)\npNext=eiNext.coord;var e=new jsts.geomgraph.EdgeEnd(edge,eiCurr.coord,pNext,new jsts.geomgraph.Label(edge.getLabel()));l.add(e);};})();(function(){var ArrayList=javascript.util.ArrayList;var TreeSet=javascript.util.TreeSet;var CoordinateFilter=jsts.geom.CoordinateFilter;jsts.util.UniqueCoordinateArrayFilter=function(){this.treeSet=new TreeSet();this.list=new ArrayList();};jsts.util.UniqueCoordinateArrayFilter.prototype=new CoordinateFilter();jsts.util.UniqueCoordinateArrayFilter.prototype.treeSet=null;jsts.util.UniqueCoordinateArrayFilter.prototype.list=null;jsts.util.UniqueCoordinateArrayFilter.prototype.getCoordinates=function(){return this.list.toArray();};jsts.util.UniqueCoordinateArrayFilter.prototype.filter=function(coord){if(!this.treeSet.contains(coord)){this.list.add(coord);this.treeSet.add(coord);}};})();(function(){var CGAlgorithms=jsts.algorithm.CGAlgorithms;var UniqueCoordinateArrayFilter=jsts.util.UniqueCoordinateArrayFilter;var Assert=jsts.util.Assert;var Stack=javascript.util.Stack;var ArrayList=javascript.util.ArrayList;var Arrays=javascript.util.Arrays;var RadialComparator=function(origin){this.origin=origin;};RadialComparator.prototype.origin=null;RadialComparator.prototype.compare=function(o1,o2){var p1=o1;var p2=o2;return RadialComparator.polarCompare(this.origin,p1,p2);};RadialComparator.polarCompare=function(o,p,q){var dxp=p.x-o.x;var dyp=p.y-o.y;var dxq=q.x-o.x;var dyq=q.y-o.y;var orient=CGAlgorithms.computeOrientation(o,p,q);if(orient==CGAlgorithms.COUNTERCLOCKWISE)\nreturn 1;if(orient==CGAlgorithms.CLOCKWISE)\nreturn-1;var op=dxp*dxp+dyp*dyp;var oq=dxq*dxq+dyq*dyq;if(op<oq){return-1;}\nif(op>oq){return 1;}\nreturn 0;};jsts.algorithm.ConvexHull=function(){if(arguments.length===1){var geometry=arguments[0];this.inputPts=jsts.algorithm.ConvexHull.extractCoordinates(geometry);this.geomFactory=geometry.getFactory();}else{this.pts=arguments[0];this.geomFactory=arguments[1];}};jsts.algorithm.ConvexHull.prototype.geomFactory=null;jsts.algorithm.ConvexHull.prototype.inputPts=null;jsts.algorithm.ConvexHull.extractCoordinates=function(geom){var filter=new UniqueCoordinateArrayFilter();geom.apply(filter);return filter.getCoordinates();};jsts.algorithm.ConvexHull.prototype.getConvexHull=function(){if(this.inputPts.length==0){return this.geomFactory.createGeometryCollection(null);}\nif(this.inputPts.length==1){return this.geomFactory.createPoint(this.inputPts[0]);}\nif(this.inputPts.length==2){return this.geomFactory.createLineString(this.inputPts);}\nvar reducedPts=this.inputPts;if(this.inputPts.length>50){reducedPts=this.reduce(this.inputPts);}\nvar sortedPts=this.preSort(reducedPts);var cHS=this.grahamScan(sortedPts);var cH=cHS.toArray();return this.lineOrPolygon(cH);};jsts.algorithm.ConvexHull.prototype.reduce=function(inputPts){var polyPts=this.computeOctRing(inputPts);if(polyPts==null)\nreturn this.inputPts;var reducedSet=new javascript.util.TreeSet();for(var i=0;i<polyPts.length;i++){reducedSet.add(polyPts[i]);}\nfor(var i=0;i<inputPts.length;i++){if(!CGAlgorithms.isPointInRing(inputPts[i],polyPts)){reducedSet.add(inputPts[i]);}}\nvar reducedPts=reducedSet.toArray();if(reducedPts.length<3)\nreturn this.padArray3(reducedPts);return reducedPts;};jsts.algorithm.ConvexHull.prototype.padArray3=function(pts){var pad=[];for(var i=0;i<pad.length;i++){if(i<pts.length){pad[i]=pts[i];}else\npad[i]=pts[0];}\nreturn pad;};jsts.algorithm.ConvexHull.prototype.preSort=function(pts){var t;for(var i=1;i<pts.length;i++){if((pts[i].y<pts[0].y)||((pts[i].y==pts[0].y)&&(pts[i].x<pts[0].x))){t=pts[0];pts[0]=pts[i];pts[i]=t;}}\nArrays.sort(pts,1,pts.length,new RadialComparator(pts[0]));return pts;};jsts.algorithm.ConvexHull.prototype.grahamScan=function(c){var p;var ps=new Stack();p=ps.push(c[0]);p=ps.push(c[1]);p=ps.push(c[2]);for(var i=3;i<c.length;i++){p=ps.pop();while(!ps.empty()&&CGAlgorithms.computeOrientation(ps.peek(),p,c[i])>0){p=ps.pop();}\np=ps.push(p);p=ps.push(c[i]);}\np=ps.push(c[0]);return ps;};jsts.algorithm.ConvexHull.prototype.isBetween=function(c1,c2,c3){if(CGAlgorithms.computeOrientation(c1,c2,c3)!==0){return false;}\nif(c1.x!=c3.x){if(c1.x<=c2.x&&c2.x<=c3.x){return true;}\nif(c3.x<=c2.x&&c2.x<=c1.x){return true;}}\nif(c1.y!=c3.y){if(c1.y<=c2.y&&c2.y<=c3.y){return true;}\nif(c3.y<=c2.y&&c2.y<=c1.y){return true;}}\nreturn false;};jsts.algorithm.ConvexHull.prototype.computeOctRing=function(inputPts){var octPts=this.computeOctPts(inputPts);var coordList=new jsts.geom.CoordinateList();coordList.add(octPts,false);if(coordList.size()<3){return null;}\ncoordList.closeRing();return coordList.toCoordinateArray();};jsts.algorithm.ConvexHull.prototype.computeOctPts=function(inputPts){var pts=[];for(var j=0;j<8;j++){pts[j]=inputPts[0];}\nfor(var i=1;i<inputPts.length;i++){if(inputPts[i].x<pts[0].x){pts[0]=inputPts[i];}\nif(inputPts[i].x-inputPts[i].y<pts[1].x-pts[1].y){pts[1]=inputPts[i];}\nif(inputPts[i].y>pts[2].y){pts[2]=inputPts[i];}\nif(inputPts[i].x+inputPts[i].y>pts[3].x+pts[3].y){pts[3]=inputPts[i];}\nif(inputPts[i].x>pts[4].x){pts[4]=inputPts[i];}\nif(inputPts[i].x-inputPts[i].y>pts[5].x-pts[5].y){pts[5]=inputPts[i];}\nif(inputPts[i].y<pts[6].y){pts[6]=inputPts[i];}\nif(inputPts[i].x+inputPts[i].y<pts[7].x+pts[7].y){pts[7]=inputPts[i];}}\nreturn pts;};jsts.algorithm.ConvexHull.prototype.lineOrPolygon=function(coordinates){coordinates=this.cleanRing(coordinates);if(coordinates.length==3){return this.geomFactory.createLineString([coordinates[0],coordinates[1]]);}\nvar linearRing=this.geomFactory.createLinearRing(coordinates);return this.geomFactory.createPolygon(linearRing,null);};jsts.algorithm.ConvexHull.prototype.cleanRing=function(original){Assert.equals(original[0],original[original.length-1]);var cleanedRing=new ArrayList();var previousDistinctCoordinate=null;for(var i=0;i<=original.length-2;i++){var currentCoordinate=original[i];var nextCoordinate=original[i+1];if(currentCoordinate.equals(nextCoordinate)){continue;}\nif(previousDistinctCoordinate!=null&&this.isBetween(previousDistinctCoordinate,currentCoordinate,nextCoordinate)){continue;}\ncleanedRing.add(currentCoordinate);previousDistinctCoordinate=currentCoordinate;}\ncleanedRing.add(original[original.length-1]);var cleanedRingCoordinates=[];return cleanedRing.toArray(cleanedRingCoordinates);};})();jsts.algorithm.MinimumDiameter=function(inputGeom,isConvex){this.convexHullPts=null;this.minBaseSeg=new jsts.geom.LineSegment();this.minWidthPt=null;this.minPtIndex=0;this.minWidth=0;jsts.algorithm.MinimumDiameter.inputGeom=inputGeom;jsts.algorithm.MinimumDiameter.isConvex=isConvex||false;};jsts.algorithm.MinimumDiameter.inputGeom=null;jsts.algorithm.MinimumDiameter.isConvex=false;jsts.algorithm.MinimumDiameter.nextIndex=function(pts,index){index++;if(index>=pts.length){index=0;}\nreturn index;};jsts.algorithm.MinimumDiameter.computeC=function(a,b,p){return a*p.y-b*p.x;};jsts.algorithm.MinimumDiameter.computeSegmentForLine=function(a,b,c){var p0;var p1;if(Math.abs(b)>Math.abs(a)){p0=new jsts.geom.Coordinate(0,c/b);p1=new jsts.geom.Coordinate(1,c/b-a/b);}\nelse{p0=new jsts.geom.Coordinate(c/a,0);p1=new jsts.geom.Coordinate(c/a-b/a,1);}\nreturn new jsts.geom.LineSegment(p0,p1);};jsts.algorithm.MinimumDiameter.prototype.getLength=function(){this.computeMinimumDiameter();return this.minWidth;};jsts.algorithm.MinimumDiameter.prototype.getWidthCoordinate=function(){this.computeMinimumDiameter();return this.minWidthPt;};jsts.algorithm.MinimumDiameter.prototype.getSupportingSegment=function(){this.computeMinimumDiameter();var coord=[this.minBaseSeg.p0,this.minBaseSeg.p1];return jsts.algorithm.MinimumDiameter.inputGeom.getFactory().createLineString(coord);};jsts.algorithm.MinimumDiameter.prototype.getDiameter=function(){this.computeMinimumDiameter();if(this.minWidthPt===null){return jsts.algorithm.MinimumDiameter.inputGeom.getFactory().createLineString(null);}\nvar basePt=this.minBaseSeg.project(this.minWidthPt);return jsts.algorithm.MinimumDiameter.inputGeom.getFactory().createLineString([basePt,this.minWidthPt]);};jsts.algorithm.MinimumDiameter.prototype.computeMinimumDiameter=function(){if(this.minWidthPt!==null){return;}\nif(jsts.algorithm.MinimumDiameter.isConvex)\nthis.computeWidthConvex(jsts.algorithm.MinimumDiameter.inputGeom);else{var convexGeom=new jsts.algorithm.ConvexHull(jsts.algorithm.MinimumDiameter.inputGeom).getConvexHull();this.computeWidthConvex(convexGeom);}};jsts.algorithm.MinimumDiameter.prototype.computeWidthConvex=function(convexGeom){if(convexGeom instanceof jsts.geom.Polygon){this.convexHullPts=convexGeom.getExteriorRing().getCoordinates();}else{this.convexHullPts=convexGeom.getCoordinates();}\nif(this.convexHullPts.length===0){this.minWidth=0;this.minWidthPt=null;this.minBaseSeg=null;}else if(this.convexHullPts.length===1){this.minWidth=0;this.minWidthPt=this.convexHullPts[0];this.minBaseSeg.p0=this.convexHullPts[0];this.minBaseSeg.p1=this.convexHullPts[0];}else if(this.convexHullPts.length===2||this.convexHullPts.length===3){this.minWidth=0;this.minWidthPt=this.convexHullPts[0];this.minBaseSeg.p0=this.convexHullPts[0];this.minBaseSeg.p1=this.convexHullPts[1];}else{this.computeConvexRingMinDiameter(this.convexHullPts);}};jsts.algorithm.MinimumDiameter.prototype.computeConvexRingMinDiameter=function(pts){this.minWidth=Number.MAX_VALUE;var currMaxIndex=1;var seg=new jsts.geom.LineSegment();for(var i=0;i<pts.length-1;i++){seg.p0=pts[i];seg.p1=pts[i+1];currMaxIndex=this.findMaxPerpDistance(pts,seg,currMaxIndex);}};jsts.algorithm.MinimumDiameter.prototype.findMaxPerpDistance=function(pts,seg,startIndex){var maxPerpDistance=seg.distancePerpendicular(pts[startIndex]);var nextPerpDistance=maxPerpDistance;var maxIndex=startIndex;var nextIndex=maxIndex;while(nextPerpDistance>=maxPerpDistance){maxPerpDistance=nextPerpDistance;maxIndex=nextIndex;nextIndex=jsts.algorithm.MinimumDiameter.nextIndex(pts,maxIndex);nextPerpDistance=seg.distancePerpendicular(pts[nextIndex]);}\nif(maxPerpDistance<this.minWidth){this.minPtIndex=maxIndex;this.minWidth=maxPerpDistance;this.minWidthPt=pts[this.minPtIndex];this.minBaseSeg=new jsts.geom.LineSegment(seg);}\nreturn maxIndex;};jsts.algorithm.MinimumDiameter.prototype.getMinimumRectangle=function(){this.computeMinimumDiameter();if(this.minWidth===0){if(this.minBaseSeg.p0.equals2D(this.minBaseSeg.p1)){return jsts.algorithm.MinimumDiameter.inputGeom.getFactory().createPoint(this.minBaseSeg.p0);}\nreturn this.minBaseSeg.toGeometry(jsts.algorithm.MinimumDiameter.inputGeom.getFactory());}\nvar dx=this.minBaseSeg.p1.x-this.minBaseSeg.p0.x;var dy=this.minBaseSeg.p1.y-this.minBaseSeg.p0.y;var minPara=Number.MAX_VALUE;var maxPara=-Number.MAX_VALUE;var minPerp=Number.MAX_VALUE;var maxPerp=-Number.MAX_VALUE;for(var i=0;i<this.convexHullPts.length;i++){var paraC=jsts.algorithm.MinimumDiameter.computeC(dx,dy,this.convexHullPts[i]);if(paraC>maxPara)maxPara=paraC;if(paraC<minPara)minPara=paraC;var perpC=jsts.algorithm.MinimumDiameter.computeC(-dy,dx,this.convexHullPts[i]);if(perpC>maxPerp)maxPerp=perpC;if(perpC<minPerp)minPerp=perpC;}\nvar maxPerpLine=jsts.algorithm.MinimumDiameter.computeSegmentForLine(-dx,-dy,maxPerp);var minPerpLine=jsts.algorithm.MinimumDiameter.computeSegmentForLine(-dx,-dy,minPerp);var maxParaLine=jsts.algorithm.MinimumDiameter.computeSegmentForLine(-dy,dx,maxPara);var minParaLine=jsts.algorithm.MinimumDiameter.computeSegmentForLine(-dy,dx,minPara);var p0=maxParaLine.lineIntersection(maxPerpLine);var p1=minParaLine.lineIntersection(maxPerpLine);var p2=minParaLine.lineIntersection(minPerpLine);var p3=maxParaLine.lineIntersection(minPerpLine);var shell=jsts.algorithm.MinimumDiameter.inputGeom.getFactory().createLinearRing([p0,p1,p2,p3,p0]);return jsts.algorithm.MinimumDiameter.inputGeom.getFactory().createPolygon(shell,null);};(function(){jsts.io.GeoJSONParser=function(geometryFactory){this.geometryFactory=geometryFactory||new jsts.geom.GeometryFactory();this.geometryTypes=['Point','MultiPoint','LineString','MultiLineString','Polygon','MultiPolygon'];};jsts.io.GeoJSONParser.prototype.read=function(json){var obj;if(typeof json==='string'){obj=JSON.parse(json);}else{obj=json;}\nvar type=obj.type;if(!this.parse[type]){throw new Error('Unknown GeoJSON type: '+obj.type);}\nif(this.geometryTypes.indexOf(type)!=-1){return this.parse[type].apply(this,[obj.coordinates]);}else if(type==='GeometryCollection'){return this.parse[type].apply(this,[obj.geometries]);}\nreturn this.parse[type].apply(this,[obj]);};jsts.io.GeoJSONParser.prototype.parse={'Feature':function(obj){var feature={};for(var key in obj){feature[key]=obj[key];}\nif(obj.geometry){var type=obj.geometry.type;if(!this.parse[type]){throw new Error('Unknown GeoJSON type: '+obj.type);}\nfeature.geometry=this.read(obj.geometry);}\nif(obj.bbox){feature.bbox=this.parse.bbox.apply(this,[obj.bbox]);}\nreturn feature;},'FeatureCollection':function(obj){var featureCollection={};if(obj.features){featureCollection.features=[];for(var i=0;i<obj.features.length;++i){featureCollection.features.push(this.read(obj.features[i]));}}\nif(obj.bbox){featureCollection.bbox=this.parse.bbox.apply(this,[obj.bbox]);}\nreturn featureCollection;},'coordinates':function(array){var coordinates=[];for(var i=0;i<array.length;++i){var sub=array[i];coordinates.push(new jsts.geom.Coordinate(sub[0],sub[1]));}\nreturn coordinates;},'bbox':function(array){return this.geometryFactory.createLinearRing([new jsts.geom.Coordinate(array[0],array[1]),new jsts.geom.Coordinate(array[2],array[1]),new jsts.geom.Coordinate(array[2],array[3]),new jsts.geom.Coordinate(array[0],array[3]),new jsts.geom.Coordinate(array[0],array[1])]);},'Point':function(array){var coordinate=new jsts.geom.Coordinate(array[0],array[1]);return this.geometryFactory.createPoint(coordinate);},'MultiPoint':function(array){var points=[];for(var i=0;i<array.length;++i){points.push(this.parse.Point.apply(this,[array[i]]));}\nreturn this.geometryFactory.createMultiPoint(points);},'LineString':function(array){var coordinates=this.parse.coordinates.apply(this,[array]);return this.geometryFactory.createLineString(coordinates);},'MultiLineString':function(array){var lineStrings=[];for(var i=0;i<array.length;++i){lineStrings.push(this.parse.LineString.apply(this,[array[i]]));}\nreturn this.geometryFactory.createMultiLineString(lineStrings);},'Polygon':function(array){var shellCoordinates=this.parse.coordinates.apply(this,[array[0]]);var shell=this.geometryFactory.createLinearRing(shellCoordinates);var holes=[];for(var i=1;i<array.length;++i){var hole=array[i];var coordinates=this.parse.coordinates.apply(this,[hole]);var linearRing=this.geometryFactory.createLinearRing(coordinates);holes.push(linearRing);}\nreturn this.geometryFactory.createPolygon(shell,holes);},'MultiPolygon':function(array){var polygons=[];for(var i=0;i<array.length;++i){var polygon=array[i];polygons.push(this.parse.Polygon.apply(this,[polygon]));}\nreturn this.geometryFactory.createMultiPolygon(polygons);},'GeometryCollection':function(array){var geometries=[];for(var i=0;i<array.length;++i){var geometry=array[i];geometries.push(this.read(geometry));}\nreturn this.geometryFactory.createGeometryCollection(geometries);}};jsts.io.GeoJSONParser.prototype.write=function(geometry){var type=geometry.CLASS_NAME.slice(10);if(!this.extract[type]){throw new Error('Geometry is not supported');}\nreturn this.extract[type].apply(this,[geometry]);};jsts.io.GeoJSONParser.prototype.extract={'coordinate':function(coordinate){return[coordinate.x,coordinate.y];},'Point':function(point){var array=this.extract.coordinate.apply(this,[point.coordinate]);return{type:'Point',coordinates:array};},'MultiPoint':function(multipoint){var array=[];for(var i=0;i<multipoint.geometries.length;++i){var point=multipoint.geometries[i];var geoJson=this.extract.Point.apply(this,[point]);array.push(geoJson.coordinates);}\nreturn{type:'MultiPoint',coordinates:array};},'LineString':function(linestring){var array=[];for(var i=0;i<linestring.points.length;++i){var coordinate=linestring.points[i];array.push(this.extract.coordinate.apply(this,[coordinate]));}\nreturn{type:'LineString',coordinates:array};},'MultiLineString':function(multilinestring){var array=[];for(var i=0;i<multilinestring.geometries.length;++i){var linestring=multilinestring.geometries[i];var geoJson=this.extract.LineString.apply(this,[linestring]);array.push(geoJson.coordinates);}\nreturn{type:'MultiLineString',coordinates:array};},'Polygon':function(polygon){var array=[];var shellGeoJson=this.extract.LineString.apply(this,[polygon.shell]);array.push(shellGeoJson.coordinates);for(var i=0;i<polygon.holes.length;++i){var hole=polygon.holes[i];var holeGeoJson=this.extract.LineString.apply(this,[hole]);array.push(holeGeoJson.coordinates);}\nreturn{type:'Polygon',coordinates:array};},'MultiPolygon':function(multipolygon){var array=[];for(var i=0;i<multipolygon.geometries.length;++i){var polygon=multipolygon.geometries[i];var geoJson=this.extract.Polygon.apply(this,[polygon]);array.push(geoJson.coordinates);}\nreturn{type:'MultiPolygon',coordinates:array};},'GeometryCollection':function(collection){var array=[];for(var i=0;i<collection.geometries.length;++i){var geometry=collection.geometries[i];var type=geometry.CLASS_NAME.slice(10);array.push(this.extract[type].apply(this,[geometry]));}\nreturn{type:'GeometryCollection',geometries:array};}};})();jsts.triangulate.quadedge.Vertex=function(){if(arguments.length===1){this.initFromCoordinate(arguments[0]);}else{this.initFromXY(arguments[0],arguments[1]);}};jsts.triangulate.quadedge.Vertex.LEFT=0;jsts.triangulate.quadedge.Vertex.RIGHT=1;jsts.triangulate.quadedge.Vertex.BEYOND=2;jsts.triangulate.quadedge.Vertex.BEHIND=3;jsts.triangulate.quadedge.Vertex.BETWEEN=4;jsts.triangulate.quadedge.Vertex.ORIGIN=5;jsts.triangulate.quadedge.Vertex.DESTINATION=6;jsts.triangulate.quadedge.Vertex.prototype.initFromXY=function(x,y){this.p=new jsts.geom.Coordinate(x,y);};jsts.triangulate.quadedge.Vertex.prototype.initFromCoordinate=function(_p){this.p=new jsts.geom.Coordinate(_p);};jsts.triangulate.quadedge.Vertex.prototype.getX=function(){return this.p.x;};jsts.triangulate.quadedge.Vertex.prototype.getY=function(){return this.p.y;};jsts.triangulate.quadedge.Vertex.prototype.getZ=function(){return this.p.z;};jsts.triangulate.quadedge.Vertex.prototype.setZ=function(z){this.p.z=z;};jsts.triangulate.quadedge.Vertex.prototype.getCoordinate=function(){return this.p;};jsts.triangulate.quadedge.Vertex.prototype.toString=function(){return'POINT ('+this.p.x+' '+this.p.y+')';};jsts.triangulate.quadedge.Vertex.prototype.equals=function(){if(arguments.length===1){return this.equalsExact(arguments[0]);}else{return this.equalsWithTolerance(arguments[0],arguments[1]);}};jsts.triangulate.quadedge.Vertex.prototype.equalsExact=function(other){return(this.p.x===other.getX()&&this.p.y===other.getY());};jsts.triangulate.quadedge.Vertex.prototype.equalsWithTolerance=function(other,tolerance){return(this.p.distance(other.getCoordinate())<tolerance);};jsts.triangulate.quadedge.Vertex.prototype.classify=function(p0,p1){var p2,a,b,sa;p2=this;a=p1.sub(p0);b=p2.sub(p0);sa=a.crossProduct(b);if(sa>0.0){return jsts.triangulate.quadedge.Vertex.LEFT;}\nif(sa<0.0){return jsts.triangulate.quadedge.Vertex.RIGHT;}\nif((a.getX()*b.getX()<0.0)||(a.getY()*b.getY()<0.0)){return jsts.triangulate.quadedge.Vertex.BEHIND;}\nif(a.magn()<b.magn()){return jsts.triangulate.quadedge.Vertex.BEYOND;}\nif(p0.equals(p2)){return jsts.triangulate.quadedge.Vertex.ORIGIN;}\nif(p1.equals(p2)){return jsts.triangulate.quadedge.Vertex.DESTINATION;}\nreturn jsts.triangulate.quadedge.Vertex.BETWEEN;};jsts.triangulate.quadedge.Vertex.prototype.crossProduct=function(v){return((this.p.x*v.getY())-(this.p.y*v.getX()));};jsts.triangulate.quadedge.Vertex.prototype.dot=function(v){return((this.p.x*v.getX())+(this.p.y*v.getY()));};jsts.triangulate.quadedge.Vertex.prototype.times=function(c){return new jsts.triangulate.quadedge.Vertex(c*this.p.x,c*this.p.y);};jsts.triangulate.quadedge.Vertex.prototype.sum=function(v){return new jsts.triangulate.quadedge.Vertex(this.p.x+v.getX(),this.p.y+\nv.getY());};jsts.triangulate.quadedge.Vertex.prototype.sub=function(v){return new jsts.triangulate.quadedge.Vertex(this.p.x-v.getX(),this.p.y-\nv.getY());};jsts.triangulate.quadedge.Vertex.prototype.magn=function(){return(Math.sqrt((this.p.x*this.p.x)+(this.p.y*this.p.y)));};jsts.triangulate.quadedge.Vertex.prototype.cross=function(){return new Vertex(this.p.y,-this.p.x);};jsts.triangulate.quadedge.Vertex.prototype.isInCircle=function(a,b,c){return jsts.triangulate.quadedge.TrianglePredicate.isInCircleRobust(a.p,b.p,c.p,this.p);};jsts.triangulate.quadedge.Vertex.prototype.isCCW=function(b,c){return((b.p.x-this.p.x)*(c.p.y-this.p.y)-(b.p.y-this.p.y)*(c.p.x-this.p.x)>0);};jsts.triangulate.quadedge.Vertex.prototype.rightOf=function(e){return this.isCCW(e.dest(),e.orig());};jsts.triangulate.quadedge.Vertex.prototype.leftOf=function(e){return this.isCCW(e.orig(),e.dest());};jsts.triangulate.quadedge.Vertex.prototype.bisector=function(a,b){var dx,dy,l1,l2;dx=b.getX()-a.getX();dy=b.getY()-a.getY();l1=new jsts.algorithm.HCoordinate(a.getX()+(dx/2.0),a.getY()+\n(dy/2.0),1.0);l2=new jsts.algorithm.HCoordinate(a.getX()-dy+(dx/2.0),a.getY()+\ndx+(dy/2.0),1.0);return new jsts.algorithm.HCoordinate(l1,l2);};jsts.triangulate.quadedge.Vertex.prototype.distance=function(v1,v2){return v1.p.distance(v2.p);};jsts.triangulate.quadedge.Vertex.prototype.circumRadiusRatio=function(b,c){var x,radius,edgeLength,el;x=this.circleCenter(b,c);radius=this.distance(x,b);edgeLength=this.distance(this,b);el=this.distance(b,c);if(el<edgeLength){edgeLength=el;}\nel=this.distance(c,this);if(el<edgeLength){edgeLength=el;}\nreturn radius/edgeLength;};jsts.triangulate.quadedge.Vertex.prototype.midPoint=function(a){var xm,ym;xm=(this.p.x+a.getX())/2.0;ym=(this.p.y+a.getY())/2.0;return new jsts.triangulate.quadedge.Vertex(xm,ym);};jsts.triangulate.quadedge.Vertex.prototype.circleCenter=function(b,c){var a,cab,cbc,hcc,cc;a=new jsts.triangulate.quadedge.Vertex(this.getX(),this.getY());cab=this.bisector(a,b);cbc=this.bisector(b,c);hcc=new jsts.algorithm.HCoordinate(cab,cbc);cc=null;try{cc=new jsts.triangulate.quadedge.Vertex(hcc.getX(),hcc.getY());}catch(err){}\nreturn cc;};jsts.operation.valid.IsValidOp=function(parentGeometry){this.parentGeometry=parentGeometry;this.isSelfTouchingRingFormingHoleValid=false;this.validErr=null;};jsts.operation.valid.IsValidOp.isValid=function(arg){if(arguments[0]instanceof jsts.geom.Coordinate){if(isNaN(arg.x)){return false;}\nif(!isFinite(arg.x)&&!isNaN(arg.x)){return false;}\nif(isNaN(arg.y)){return false;}\nif(!isFinite(arg.y)&&!isNaN(arg.y)){return false;}\nreturn true;}else{var isValidOp=new jsts.operation.valid.IsValidOp(arg);return isValidOp.isValid();}};jsts.operation.valid.IsValidOp.findPtNotNode=function(testCoords,searchRing,graph){var searchEdge=graph.findEdge(searchRing);var eiList=searchEdge.getEdgeIntersectionList();for(var i=0;i<testCoords.length;i++){var pt=testCoords[i];if(!eiList.isIntersection(pt)){return pt;}}\nreturn null;};jsts.operation.valid.IsValidOp.prototype.setSelfTouchingRingFormingHoleValid=function(isValid){this.isSelfTouchingRingFormingHoleValid=isValid;};jsts.operation.valid.IsValidOp.prototype.isValid=function(){this.checkValid(this.parentGeometry);return this.validErr==null;};jsts.operation.valid.IsValidOp.prototype.getValidationError=function(){this.checkValid(this.parentGeometry);return this.validErr;};jsts.operation.valid.IsValidOp.prototype.checkValid=function(g){this.validErr=null;if(g.isEmpty()){return;}\nif(g instanceof jsts.geom.Point){this.checkValidPoint(g);}else if(g instanceof jsts.geom.MultiPoint){this.checkValidMultiPoint(g);}else if(g instanceof jsts.geom.LinearRing){this.checkValidLinearRing(g);}else if(g instanceof jsts.geom.LineString){this.checkValidLineString(g);}else if(g instanceof jsts.geom.Polygon){this.checkValidPolygon(g);}else if(g instanceof jsts.geom.MultiPolygon){this.checkValidMultiPolygon(g);}else if(g instanceof jsts.geom.GeometryCollection){this.checkValidGeometryCollection(g);}else{throw g.constructor;}};jsts.operation.valid.IsValidOp.prototype.checkValidPoint=function(g){this.checkInvalidCoordinates(g.getCoordinates());};jsts.operation.valid.IsValidOp.prototype.checkValidMultiPoint=function(g){this.checkInvalidCoordinates(g.getCoordinates());};jsts.operation.valid.IsValidOp.prototype.checkValidLineString=function(g){this.checkInvalidCoordinates(g.getCoordinates());if(this.validErr!=null){return;}\nvar graph=new jsts.geomgraph.GeometryGraph(0,g);this.checkTooFewPoints(graph);};jsts.operation.valid.IsValidOp.prototype.checkValidLinearRing=function(g){this.checkInvalidCoordinates(g.getCoordinates());if(this.validErr!=null){return;}\nthis.checkClosedRing(g);if(this.validErr!=null){return;}\nvar graph=new jsts.geomgraph.GeometryGraph(0,g);this.checkTooFewPoints(graph);if(this.validErr!=null){return;}\nvar li=new jsts.algorithm.RobustLineIntersector();graph.computeSelfNodes(li,true);this.checkNoSelfIntersectingRings(graph);};jsts.operation.valid.IsValidOp.prototype.checkValidPolygon=function(g){this.checkInvalidCoordinates(g);if(this.validErr!=null){return;}\nthis.checkClosedRings(g);if(this.validErr!=null){return;}\nvar graph=new jsts.geomgraph.GeometryGraph(0,g);this.checkTooFewPoints(graph);if(this.validErr!=null){return;}\nthis.checkConsistentArea(graph);if(this.validErr!=null){return;}\nif(!this.isSelfTouchingRingFormingHoleValid){this.checkNoSelfIntersectingRings(graph);if(this.validErr!=null){return;}}\nthis.checkHolesInShell(g,graph);if(this.validErr!=null){return;}\nthis.checkHolesNotNested(g,graph);if(this.validErr!=null){return;}\nthis.checkConnectedInteriors(graph);};jsts.operation.valid.IsValidOp.prototype.checkValidMultiPolygon=function(g){var il=g.getNumGeometries();for(var i=0;i<il;i++){var p=g.getGeometryN(i);this.checkInvalidCoordinates(p);if(this.validErr!=null){return;}\nthis.checkClosedRings(p);if(this.validErr!=null){return;}}\nvar graph=new jsts.geomgraph.GeometryGraph(0,g);this.checkTooFewPoints(graph);if(this.validErr!=null){return;}\nthis.checkConsistentArea(graph);if(this.validErr!=null){return;}\nif(!this.isSelfTouchingRingFormingHoleValid){this.checkNoSelfIntersectingRings(graph);if(this.validErr!=null){return;}}\nfor(var i=0;i<g.getNumGeometries();i++){var p=g.getGeometryN(i);this.checkHolesInShell(p,graph);if(this.validErr!=null){return;}}\nfor(var i=0;i<g.getNumGeometries();i++){var p=g.getGeometryN(i);this.checkHolesNotNested(p,graph);if(this.validErr!=null){return;}}\nthis.checkShellsNotNested(g,graph);if(this.validErr!=null){return;}\nthis.checkConnectedInteriors(graph);};jsts.operation.valid.IsValidOp.prototype.checkValidGeometryCollection=function(gc){for(var i=0;i<gc.getNumGeometries();i++){var g=gc.getGeometryN(i);this.checkValid(g);if(this.validErr!=null){return;}}};jsts.operation.valid.IsValidOp.prototype.checkInvalidCoordinates=function(arg){if(arg instanceof jsts.geom.Polygon){var poly=arg;this.checkInvalidCoordinates(poly.getExteriorRing().getCoordinates());if(this.validErr!=null){return;}\nfor(var i=0;i<poly.getNumInteriorRing();i++){this.checkInvalidCoordinates(poly.getInteriorRingN(i).getCoordinates());if(this.validErr!=null){return;}}}else{var coords=arg;for(var i=0;i<coords.length;i++){if(!jsts.operation.valid.IsValidOp.isValid(coords[i])){this.validErr=new jsts.operation.valid.TopologyValidationError(jsts.operation.valid.TopologyValidationError.INVALID_COORDINATE,coords[i]);return;}}}};jsts.operation.valid.IsValidOp.prototype.checkClosedRings=function(poly){this.checkClosedRing(poly.getExteriorRing());if(this.validErr!=null){return;}\nfor(var i=0;i<poly.getNumInteriorRing();i++){this.checkClosedRing(poly.getInteriorRingN(i));if(this.validErr!=null){return;}}};jsts.operation.valid.IsValidOp.prototype.checkClosedRing=function(ring){if(!ring.isClosed()){var pt=null;if(ring.getNumPoints()>=1){pt=ring.getCoordinateN(0);}\nthis.validErr=new jsts.operation.valid.TopologyValidationError(jsts.operation.valid.TopologyValidationError.RING_NOT_CLOSED,pt);}};jsts.operation.valid.IsValidOp.prototype.checkTooFewPoints=function(graph){if(graph.hasTooFewPoints){this.validErr=new jsts.operation.valid.TopologyValidationError(jsts.operation.valid.TopologyValidationError.TOO_FEW_POINTS,graph.getInvalidPoint());return;}};jsts.operation.valid.IsValidOp.prototype.checkConsistentArea=function(graph){var cat=new jsts.operation.valid.ConsistentAreaTester(graph);var isValidArea=cat.isNodeConsistentArea();if(!isValidArea){this.validErr=new jsts.operation.valid.TopologyValidationError(jsts.operation.valid.TopologyValidationError.SELF_INTERSECTION,cat.getInvalidPoint());return;}\nif(cat.hasDuplicateRings()){this.validErr=new jsts.operation.valid.TopologyValidationError(jsts.operation.valid.TopologyValidationError.DUPLICATE_RINGS,cat.getInvalidPoint());}};jsts.operation.valid.IsValidOp.prototype.checkNoSelfIntersectingRings=function(graph){for(var i=graph.getEdgeIterator();i.hasNext();){var e=i.next();this.checkNoSelfIntersectingRing(e.getEdgeIntersectionList());if(this.validErr!=null){return;}}};jsts.operation.valid.IsValidOp.prototype.checkNoSelfIntersectingRing=function(eiList){var nodeSet=[];var isFirst=true;for(var i=eiList.iterator();i.hasNext();){var ei=i.next();if(isFirst){isFirst=false;continue;}\nif(nodeSet.indexOf(ei.coord)>=0){this.validErr=new jsts.operation.valid.TopologyValidationError(jsts.operation.valid.TopologyValidationError.RING_SELF_INTERSECTION,ei.coord);return;}else{nodeSet.push(ei.coord);}}};jsts.operation.valid.IsValidOp.prototype.checkHolesInShell=function(p,graph){var shell=p.getExteriorRing();var pir=new jsts.algorithm.MCPointInRing(shell);for(var i=0;i<p.getNumInteriorRing();i++){var hole=p.getInteriorRingN(i);var holePt=jsts.operation.valid.IsValidOp.findPtNotNode(hole.getCoordinates(),shell,graph);if(holePt==null){return;}\nvar outside=!pir.isInside(holePt);if(outside){this.validErr=new jsts.operation.valid.TopologyValidationError(jsts.operation.valid.TopologyValidationError.HOLE_OUTSIDE_SHELL,holePt);return;}}};jsts.operation.valid.IsValidOp.prototype.checkHolesNotNested=function(p,graph){var nestedTester=new jsts.operation.valid.IndexedNestedRingTester(graph);for(var i=0;i<p.getNumInteriorRing();i++){var innerHole=p.getInteriorRingN(i);nestedTester.add(innerHole);}\nvar isNonNested=nestedTester.isNonNested();if(!isNonNested){this.validErr=new jsts.operation.valid.TopologyValidationError(jsts.operation.valid.TopologyValidationError.NESTED_HOLES,nestedTester.getNestedPoint());}};jsts.operation.valid.IsValidOp.prototype.checkShellsNotNested=function(mp,graph){for(var i=0;i<mp.getNumGeometries();i++){var p=mp.getGeometryN(i);var shell=p.getExteriorRing();for(var j=0;j<mp.getNumGeometries();j++){if(i==j){continue;}\nvar p2=mp.getGeometryN(j);this.checkShellNotNested(shell,p2,graph);if(this.validErr!=null){return;}}}};jsts.operation.valid.IsValidOp.prototype.checkShellNotNested=function(shell,p,graph){var shellPts=shell.getCoordinates();var polyShell=p.getExteriorRing();var polyPts=polyShell.getCoordinates();var shellPt=jsts.operation.valid.IsValidOp.findPtNotNode(shellPts,polyShell,graph);if(shellPt==null){return;}\nvar insidePolyShell=jsts.algorithm.CGAlgorithms.isPointInRing(shellPt,polyPts);if(!insidePolyShell){return;}\nif(p.getNumInteriorRing()<=0){this.validErr=new jsts.operation.valid.TopologyValidationError(jsts.operation.valid.TopologyValidationError.NESTED_SHELLS,shellPt);return;}\nvar badNestedPt=null;for(var i=0;i<p.getNumInteriorRing();i++){var hole=p.getInteriorRingN(i);badNestedPt=this.checkShellInsideHole(shell,hole,graph);if(badNestedPt==null){return;}}\nthis.validErr=new jsts.operation.valid.TopologyValidationError(jsts.operation.valid.TopologyValidationError.NESTED_SHELLS,badNestedPt);};jsts.operation.valid.IsValidOp.prototype.checkShellInsideHole=function(shell,hole,graph){var shellPts=shell.getCoordinates();var holePts=hole.getCoordinates();var shellPt=jsts.operation.valid.IsValidOp.findPtNotNode(shellPts,hole,graph);if(shellPt!=null){var insideHole=jsts.algorithm.CGAlgorithms.isPointInRing(shellPt,holePts);if(!insideHole){return shellPt;}}\nvar holePt=jsts.operation.valid.IsValidOp.findPtNotNode(holePts,shell,graph);if(holePt!=null){var insideShell=jsts.algorithm.CGAlgorithms.isPointInRing(holePt,shellPts);if(insideShell){return holePt;}\nreturn null;}\njsts.util.Assert.shouldNeverReachHere('points in shell and hole appear to be equal');return null;};jsts.operation.valid.IsValidOp.prototype.checkConnectedInteriors=function(graph){var cit=new jsts.operation.valid.ConnectedInteriorTester(graph);if(!cit.isInteriorsConnected()){this.validErr=new jsts.operation.valid.TopologyValidationError(jsts.operation.valid.TopologyValidationError.DISCONNECTED_INTERIOR,cit.getCoordinate());}};jsts.algorithm.RobustDeterminant=function(){};jsts.algorithm.RobustDeterminant.signOfDet2x2=function(x1,y1,x2,y2){var sign,swap,k,count;count=0;sign=1;if((x1===0.0)||(y2===0.0)){if((y1===0.0)||(x2===0.0)){return 0;}\nelse if(y1>0){if(x2>0){return-sign;}\nelse{return sign;}}\nelse{if(x2>0){return sign;}\nelse{return-sign;}}}\nif((y1===0.0)||(x2===0.0)){if(y2>0){if(x1>0){return sign;}\nelse{return-sign;}}\nelse{if(x1>0){return-sign;}\nelse{return sign;}}}\nif(0.0<y1){if(0.0<y2){if(y1>y2){sign=-sign;swap=x1;x1=x2;x2=swap;swap=y1;y1=y2;y2=swap;}}\nelse{if(y1<=-y2){sign=-sign;x2=-x2;y2=-y2;}\nelse{swap=x1;x1=-x2;x2=swap;swap=y1;y1=-y2;y2=swap;}}}\nelse{if(0.0<y2){if(-y1<=y2){sign=-sign;x1=-x1;y1=-y1;}\nelse{swap=-x1;x1=x2;x2=swap;swap=-y1;y1=y2;y2=swap;}}\nelse{if(y1>=y2){x1=-x1;y1=-y1;x2=-x2;y2=-y2;}\nelse{sign=-sign;swap=-x1;x1=-x2;x2=swap;swap=-y1;y1=-y2;y2=swap;}}}\nif(0.0<x1){if(0.0<x2){if(x1>x2){return sign;}}\nelse{return sign;}}\nelse{if(0.0<x2){return-sign;}\nelse{if(x1>=x2){sign=-sign;x1=-x1;x2=-x2;}\nelse{return-sign;}}}\nwhile(true){count=count+1;k=Math.floor(x2/x1);x2=x2-k*x1;y2=y2-k*y1;if(y2<0.0){return-sign;}\nif(y2>y1){return sign;}\nif(x1>x2+x2){if(y1<y2+y2){return sign;}}\nelse{if(y1>y2+y2){return-sign;}\nelse{x2=x1-x2;y2=y1-y2;sign=-sign;}}\nif(y2===0.0){if(x2===0.0){return 0;}\nelse{return-sign;}}\nif(x2===0.0){return sign;}\nk=Math.floor(x1/x2);x1=x1-k*x2;y1=y1-k*y2;if(y1<0.0){return sign;}\nif(y1>y2){return-sign;}\nif(x2>x1+x1){if(y2<y1+y1){return-sign;}}\nelse{if(y2>y1+y1){return sign;}\nelse{x1=x2-x1;y1=y2-y1;sign=-sign;}}\nif(y1===0.0){if(x1===0.0){return 0;}\nelse{return sign;}}\nif(x1===0.0){return-sign;}}};jsts.algorithm.RobustDeterminant.orientationIndex=function(p1,p2,q){var dx1=p2.x-p1.x;var dy1=p2.y-p1.y;var dx2=q.x-p2.x;var dy2=q.y-p2.y;return jsts.algorithm.RobustDeterminant.signOfDet2x2(dx1,dy1,dx2,dy2);};jsts.index.quadtree.NodeBase=function(){this.subnode=new Array(4);this.subnode[0]=null;this.subnode[1]=null;this.subnode[2]=null;this.subnode[3]=null;this.items=[];};jsts.index.quadtree.NodeBase.prototype.getSubnodeIndex=function(env,centre){var subnodeIndex=-1;if(env.getMinX()>=centre.x){if(env.getMinY()>=centre.y){subnodeIndex=3;}\nif(env.getMaxY()<=centre.y){subnodeIndex=1;}}\nif(env.getMaxX()<=centre.x){if(env.getMinY()>=centre.y){subnodeIndex=2;}\nif(env.getMaxY()<=centre.y){subnodeIndex=0;}}\nreturn subnodeIndex;};jsts.index.quadtree.NodeBase.prototype.getItems=function(){return this.items;};jsts.index.quadtree.NodeBase.prototype.hasItems=function(){return(this.items.length>0);};jsts.index.quadtree.NodeBase.prototype.add=function(item){this.items.push(item);};jsts.index.quadtree.NodeBase.prototype.remove=function(itemEnv,item){if(!this.isSearchMatch(itemEnv)){return false;}\nvar found=false,i=0;for(i;i<4;i++){if(this.subnode[i]!==null){found=this.subnode[i].remove(itemEnv,item);if(found){if(this.subnode[i].isPrunable()){this.subnode[i]=null;}\nbreak;}}}\nif(found){return found;}\nif(this.items.indexOf(item)!==-1){for(var i=this.items.length-1;i>=0;i--){if(this.items[i]===item){this.items.splice(i,1);}}\nfound=true;}\nreturn found;};jsts.index.quadtree.NodeBase.prototype.isPrunable=function(){return!(this.hasChildren()||this.hasItems());};jsts.index.quadtree.NodeBase.prototype.hasChildren=function(){var i=0;for(i;i<4;i++){if(this.subnode[i]!==null){return true;}}\nreturn false;};jsts.index.quadtree.NodeBase.prototype.isEmpty=function(){var isEmpty=true;if(this.items.length>0){isEmpty=false;}\nvar i=0;for(i;i<4;i++){if(this.subnode[i]!==null){if(!this.subnode[i].isEmpty()){isEmpty=false;}}}\nreturn isEmpty;};jsts.index.quadtree.NodeBase.prototype.addAllItems=function(resultItems){resultItems=resultItems.concat(this.items);var i=0;for(i;i<4;i++){if(this.subnode[i]!==null){resultItems=this.subnode[i].addAllItems(resultItems);}}\nreturn resultItems;};jsts.index.quadtree.NodeBase.prototype.addAllItemsFromOverlapping=function(searchEnv,resultItems){if(!this.isSearchMatch(searchEnv)){return;}\nresultItems=resultItems.concat(this.items);var i=0;for(i;i<4;i++){if(this.subnode[i]!==null){resultItems=this.subnode[i].addAllItemsFromOverlapping(searchEnv,resultItems);}}};jsts.index.quadtree.NodeBase.prototype.visit=function(searchEnv,visitor){if(!this.isSearchMatch(searchEnv)){return;}\nthis.visitItems(searchEnv,visitor);var i=0;for(i;i<4;i++){if(this.subnode[i]!==null){this.subnode[i].visit(searchEnv,visitor);}}};jsts.index.quadtree.NodeBase.prototype.visitItems=function(env,visitor){var i=0,il=this.items.length;for(i;i<il;i++){visitor.visitItem(this.items[i]);}};jsts.index.quadtree.NodeBase.prototype.depth=function(){var maxSubDepth=0,i=0,sqd;for(i;i<4;i++){if(this.subnode[i]!==null){sqd=this.subnode[i].depth();if(sqd>maxSubDepth){maxSubDepth=sqd;}}}\nreturn maxSubDepth+1;};jsts.index.quadtree.NodeBase.prototype.size=function(){var subSize=0,i=0;for(i;i<4;i++){if(this.subnode[i]!==null){subSize+=this.subnode[i].size();}}\nreturn subSize+this.items.length;};jsts.index.quadtree.NodeBase.prototype.getNodeCount=function(){var subSize=0,i=0;for(i;i<4;i++){if(this.subnode[i]!==null){subSize+=this.subnode[i].size();}}\nreturn subSize+1;};jsts.index.quadtree.Node=function(env,level){jsts.index.quadtree.NodeBase.prototype.constructor.apply(this,arguments);this.env=env;this.level=level;this.centre=new jsts.geom.Coordinate();this.centre.x=(env.getMinX()+env.getMaxX())/2;this.centre.y=(env.getMinY()+env.getMaxY())/2;};jsts.index.quadtree.Node.prototype=new jsts.index.quadtree.NodeBase();jsts.index.quadtree.Node.createNode=function(env){var key,node;key=new jsts.index.quadtree.Key(env);node=new jsts.index.quadtree.Node(key.getEnvelope(),key.getLevel());return node;};jsts.index.quadtree.Node.createExpanded=function(node,addEnv){var expandEnv=new jsts.geom.Envelope(addEnv),largerNode;if(node!==null){expandEnv.expandToInclude(node.env);}\nlargerNode=jsts.index.quadtree.Node.createNode(expandEnv);if(node!==null){largerNode.insertNode(node);}\nreturn largerNode;};jsts.index.quadtree.Node.prototype.getEnvelope=function(){return this.env;};jsts.index.quadtree.Node.prototype.isSearchMatch=function(searchEnv){return this.env.intersects(searchEnv);};jsts.index.quadtree.Node.prototype.getNode=function(searchEnv){var subnodeIndex=this.getSubnodeIndex(searchEnv,this.centre),node;if(subnodeIndex!==-1){node=this.getSubnode(subnodeIndex);return node.getNode(searchEnv);}else{return this;}};jsts.index.quadtree.Node.prototype.find=function(searchEnv){var subnodeIndex=this.getSubnodeIndex(searchEnv,this.centre),node;if(subnodeIndex===-1){return this;}\nif(this.subnode[subnodeIndex]!==null){node=this.subnode[subnodeIndex];return node.find(searchEnv);}\nreturn this;};jsts.index.quadtree.Node.prototype.insertNode=function(node){var index=this.getSubnodeIndex(node.env,this.centre),childNode;if(node.level===this.level-1){this.subnode[index]=node;}else{childNode=this.createSubnode(index);childNode.insertNode(node);this.subnode[index]=childNode;}};jsts.index.quadtree.Node.prototype.getSubnode=function(index){if(this.subnode[index]===null){this.subnode[index]=this.createSubnode(index);}\nreturn this.subnode[index];};jsts.index.quadtree.Node.prototype.createSubnode=function(index){var minx=0.0,maxx=0.0,miny=0.0,maxy=0.0,sqEnv,node;switch(index){case 0:minx=this.env.getMinX();maxx=this.centre.x;miny=this.env.getMinY();maxy=this.centre.y;break;case 1:minx=this.centre.x;maxx=this.env.getMaxX();miny=this.env.getMinY();maxy=this.centre.y;break;case 2:minx=this.env.getMinX();maxx=this.centre.x;miny=this.centre.y;maxy=this.env.getMaxY();break;case 3:minx=this.centre.x;maxx=this.env.getMaxX();miny=this.centre.y;maxy=this.env.getMaxY();break;}\nsqEnv=new jsts.geom.Envelope(minx,maxx,miny,maxy);node=new jsts.index.quadtree.Node(sqEnv,this.level-1);return node;};(function(){jsts.triangulate.quadedge.QuadEdge=function(){this.rot=null;this.vertex=null;this.next=null;this.data=null;};var QuadEdge=jsts.triangulate.quadedge.QuadEdge;jsts.triangulate.quadedge.QuadEdge.makeEdge=function(o,d){var q0,q1,q2,q3,base;q0=new QuadEdge();q1=new QuadEdge();q2=new QuadEdge();q3=new QuadEdge();q0.rot=q1;q1.rot=q2;q2.rot=q3;q3.rot=q0;q0.setNext(q0);q1.setNext(q3);q2.setNext(q2);q3.setNext(q1);base=q0;base.setOrig(o);base.setDest(d);return base;};jsts.triangulate.quadedge.QuadEdge.connect=function(a,b){var e=QuadEdge.makeEdge(a.dest(),b.orig());QuadEdge.splice(e,a.lNext());QuadEdge.splice(e.sym(),b);return e;};jsts.triangulate.quadedge.QuadEdge.splice=function(a,b){var alpha,beta,t1,t2,t3,t4;alpha=a.oNext().rot;beta=b.oNext().rot;t1=b.oNext();t2=a.oNext();t3=beta.oNext();t4=alpha.oNext();a.setNext(t1);b.setNext(t2);alpha.setNext(t3);beta.setNext(t4);};jsts.triangulate.quadedge.QuadEdge.swap=function(e){var a,b;a=e.oPrev();b=e.sym().oPrev();QuadEdge.splice(e,a);QuadEdge.splice(e.sym(),b);QuadEdge.splice(e,a.lNext());QuadEdge.splice(e.sym(),b.lNext());e.setOrig(a.dest());e.setDest(b.dest());};jsts.triangulate.quadedge.QuadEdge.prototype.getPrimary=function(){if(this.orig().getCoordinate().compareTo(this.dest().getCoordinate())<=0){return this;}\nelse{return this.sym();}};jsts.triangulate.quadedge.QuadEdge.prototype.setData=function(data){this.data=data;};jsts.triangulate.quadedge.QuadEdge.prototype.getData=function(){return this.data;};jsts.triangulate.quadedge.QuadEdge.prototype.delete_jsts=function(){this.rot=null;};jsts.triangulate.quadedge.QuadEdge.prototype.isLive=function(){return this.rot!==null;};jsts.triangulate.quadedge.QuadEdge.prototype.setNext=function(next){this.next=next;};jsts.triangulate.quadedge.QuadEdge.prototype.invRot=function(){return this.rot.sym();};jsts.triangulate.quadedge.QuadEdge.prototype.sym=function(){return this.rot.rot;};jsts.triangulate.quadedge.QuadEdge.prototype.oNext=function(){return this.next;};jsts.triangulate.quadedge.QuadEdge.prototype.oPrev=function(){return this.rot.next.rot;};jsts.triangulate.quadedge.QuadEdge.prototype.dNext=function(){return this.sym().oNext().sym();};jsts.triangulate.quadedge.QuadEdge.prototype.dPrev=function(){return this.invRot().oNext().invRot();};jsts.triangulate.quadedge.QuadEdge.prototype.lNext=function(){return this.invRot().oNext().rot;};jsts.triangulate.quadedge.QuadEdge.prototype.lPrev=function(){return this.next.sym();};jsts.triangulate.quadedge.QuadEdge.prototype.rNext=function(){return this.rot.next.invRot();};jsts.triangulate.quadedge.QuadEdge.prototype.rPrev=function(){return this.sym().oNext();};jsts.triangulate.quadedge.QuadEdge.prototype.setOrig=function(o){this.vertex=o;};jsts.triangulate.quadedge.QuadEdge.prototype.setDest=function(d){this.sym().setOrig(d);};jsts.triangulate.quadedge.QuadEdge.prototype.orig=function(){return this.vertex;};jsts.triangulate.quadedge.QuadEdge.prototype.dest=function(){return this.sym().orig();};jsts.triangulate.quadedge.QuadEdge.prototype.getLength=function(){return this.orig().getCoordinate().distance(dest().getCoordinate());};jsts.triangulate.quadedge.QuadEdge.prototype.equalsNonOriented=function(qe){if(this.equalsOriented(qe)){return true;}\nif(this.equalsOriented(qe.sym())){return true;}\nreturn false;};jsts.triangulate.quadedge.QuadEdge.prototype.equalsOriented=function(qe){if(this.orig().getCoordinate().equals2D(qe.orig().getCoordinate())&&this.dest().getCoordinate().equals2D(qe.dest().getCoordinate())){return true;}\nreturn false;};jsts.triangulate.quadedge.QuadEdge.prototype.toLineSegment=function()\n{return new jsts.geom.LineSegment(this.vertex.getCoordinate(),this.dest().getCoordinate());};jsts.triangulate.quadedge.QuadEdge.prototype.toString=function(){var p0,p1;p0=this.vertex.getCoordinate();p1=this.dest().getCoordinate();return jsts.io.WKTWriter.toLineString(p0,p1);};})();(function(){var Assert=jsts.util.Assert;jsts.geomgraph.EdgeEnd=function(edge,p0,p1,label){this.edge=edge;if(p0&&p1){this.init(p0,p1);}\nif(label){this.label=label||null;}};jsts.geomgraph.EdgeEnd.prototype.edge=null;jsts.geomgraph.EdgeEnd.prototype.label=null;jsts.geomgraph.EdgeEnd.prototype.node=null;jsts.geomgraph.EdgeEnd.prototype.p0=null;jsts.geomgraph.EdgeEnd.prototype.p1=null;jsts.geomgraph.EdgeEnd.prototype.dx=null;jsts.geomgraph.EdgeEnd.prototype.dy=null;jsts.geomgraph.EdgeEnd.prototype.quadrant=null;jsts.geomgraph.EdgeEnd.prototype.init=function(p0,p1){this.p0=p0;this.p1=p1;this.dx=p1.x-p0.x;this.dy=p1.y-p0.y;this.quadrant=jsts.geomgraph.Quadrant.quadrant(this.dx,this.dy);Assert.isTrue(!(this.dx===0&&this.dy===0),'EdgeEnd with identical endpoints found');};jsts.geomgraph.EdgeEnd.prototype.getEdge=function(){return this.edge;};jsts.geomgraph.EdgeEnd.prototype.getLabel=function(){return this.label;};jsts.geomgraph.EdgeEnd.prototype.getCoordinate=function(){return this.p0;};jsts.geomgraph.EdgeEnd.prototype.getDirectedCoordinate=function(){return this.p1;};jsts.geomgraph.EdgeEnd.prototype.getQuadrant=function(){return this.quadrant;};jsts.geomgraph.EdgeEnd.prototype.getDx=function(){return this.dx;};jsts.geomgraph.EdgeEnd.prototype.getDy=function(){return this.dy;};jsts.geomgraph.EdgeEnd.prototype.setNode=function(node){this.node=node;};jsts.geomgraph.EdgeEnd.prototype.getNode=function(){return this.node;};jsts.geomgraph.EdgeEnd.prototype.compareTo=function(e){return this.compareDirection(e);};jsts.geomgraph.EdgeEnd.prototype.compareDirection=function(e){if(this.dx===e.dx&&this.dy===e.dy)\nreturn 0;if(this.quadrant>e.quadrant)\nreturn 1;if(this.quadrant<e.quadrant)\nreturn-1;return jsts.algorithm.CGAlgorithms.computeOrientation(e.p0,e.p1,this.p1);};jsts.geomgraph.EdgeEnd.prototype.computeLabel=function(boundaryNodeRule){};})();jsts.operation.buffer.RightmostEdgeFinder=function(){};jsts.operation.buffer.RightmostEdgeFinder.prototype.minIndex=-1;jsts.operation.buffer.RightmostEdgeFinder.prototype.minCoord=null;jsts.operation.buffer.RightmostEdgeFinder.prototype.minDe=null;jsts.operation.buffer.RightmostEdgeFinder.prototype.orientedDe=null;jsts.operation.buffer.RightmostEdgeFinder.prototype.getEdge=function(){return this.orientedDe;};jsts.operation.buffer.RightmostEdgeFinder.prototype.getCoordinate=function(){return this.minCoord;};jsts.operation.buffer.RightmostEdgeFinder.prototype.findEdge=function(dirEdgeList){for(var i=dirEdgeList.iterator();i.hasNext();){var de=i.next();if(!de.isForward())\ncontinue;this.checkForRightmostCoordinate(de);}\njsts.util.Assert.isTrue(this.minIndex!==0||this.minCoord.equals(this.minDe.getCoordinate()),'inconsistency in rightmost processing');if(this.minIndex===0){this.findRightmostEdgeAtNode();}else{this.findRightmostEdgeAtVertex();}\nthis.orientedDe=this.minDe;var rightmostSide=this.getRightmostSide(this.minDe,this.minIndex);if(rightmostSide==jsts.geomgraph.Position.LEFT){this.orientedDe=this.minDe.getSym();}};jsts.operation.buffer.RightmostEdgeFinder.prototype.findRightmostEdgeAtNode=function(){var node=this.minDe.getNode();var star=node.getEdges();this.minDe=star.getRightmostEdge();if(!this.minDe.isForward()){this.minDe=this.minDe.getSym();this.minIndex=this.minDe.getEdge().getCoordinates().length-1;}};jsts.operation.buffer.RightmostEdgeFinder.prototype.findRightmostEdgeAtVertex=function(){var pts=this.minDe.getEdge().getCoordinates();jsts.util.Assert.isTrue(this.minIndex>0&&this.minIndex<pts.length,'rightmost point expected to be interior vertex of edge');var pPrev=pts[this.minIndex-1];var pNext=pts[this.minIndex+1];var orientation=jsts.algorithm.CGAlgorithms.computeOrientation(this.minCoord,pNext,pPrev);var usePrev=false;if(pPrev.y<this.minCoord.y&&pNext.y<this.minCoord.y&&orientation===jsts.algorithm.CGAlgorithms.COUNTERCLOCKWISE){usePrev=true;}else if(pPrev.y>this.minCoord.y&&pNext.y>this.minCoord.y&&orientation===jsts.algorithm.CGAlgorithms.CLOCKWISE){usePrev=true;}\nif(usePrev){this.minIndex=this.minIndex-1;}};jsts.operation.buffer.RightmostEdgeFinder.prototype.checkForRightmostCoordinate=function(de){var coord=de.getEdge().getCoordinates();for(var i=0;i<coord.length-1;i++){if(this.minCoord===null||coord[i].x>this.minCoord.x){this.minDe=de;this.minIndex=i;this.minCoord=coord[i];}}};jsts.operation.buffer.RightmostEdgeFinder.prototype.getRightmostSide=function(de,index){var side=this.getRightmostSideOfSegment(de,index);if(side<0)\nside=this.getRightmostSideOfSegment(de,index-1);if(side<0){this.minCoord=null;this.checkForRightmostCoordinate(de);}\nreturn side;};jsts.operation.buffer.RightmostEdgeFinder.prototype.getRightmostSideOfSegment=function(de,i){var e=de.getEdge();var coord=e.getCoordinates();if(i<0||i+1>=coord.length)\nreturn-1;if(coord[i].y==coord[i+1].y)\nreturn-1;var pos=jsts.geomgraph.Position.LEFT;if(coord[i].y<coord[i+1].y)\npos=jsts.geomgraph.Position.RIGHT;return pos;};(function(){jsts.triangulate.IncrementalDelaunayTriangulator=function(subdiv){this.subdiv=subdiv;this.isUsingTolerance=subdiv.getTolerance()>0.0;};jsts.triangulate.IncrementalDelaunayTriangulator.prototype.insertSites=function(vertices){var i=0,il=vertices.length,v;for(i;i<il;i++){v=vertices[i];this.insertSite(v);}};jsts.triangulate.IncrementalDelaunayTriangulator.prototype.insertSite=function(v){var e,base,startEdge,t;e=this.subdiv.locate(v);if(this.subdiv.isVertexOfEdge(e,v)){return e;}\nelse if(this.subdiv.isOnEdge(e,v.getCoordinate())){e=e.oPrev();this.subdiv.delete_jsts(e.oNext());}\nbase=this.subdiv.makeEdge(e.orig(),v);jsts.triangulate.quadedge.QuadEdge.splice(base,e);startEdge=base;do{base=this.subdiv.connect(e,base.sym());e=base.oPrev();}while(e.lNext()!=startEdge);do{t=e.oPrev();if(t.dest().rightOf(e)&&v.isInCircle(e.orig(),t.dest(),e.dest())){jsts.triangulate.quadedge.QuadEdge.swap(e);e=e.oPrev();}else if(e.oNext()==startEdge){return base;}else{e=e.oNext().lPrev();}}while(true);};}());jsts.algorithm.CentroidArea=function(){this.basePt=null;this.triangleCent3=new jsts.geom.Coordinate();this.centSum=new jsts.geom.Coordinate();this.cg3=new jsts.geom.Coordinate();};jsts.algorithm.CentroidArea.prototype.basePt=null;jsts.algorithm.CentroidArea.prototype.triangleCent3=null;jsts.algorithm.CentroidArea.prototype.areasum2=0;jsts.algorithm.CentroidArea.prototype.cg3=null;jsts.algorithm.CentroidArea.prototype.centSum=null;jsts.algorithm.CentroidArea.prototype.totalLength=0.0;jsts.algorithm.CentroidArea.prototype.add=function(geom){if(geom instanceof jsts.geom.Polygon){var poly=geom;this.setBasePoint(poly.getExteriorRing().getCoordinateN(0));this.add3(poly);}else if(geom instanceof jsts.geom.GeometryCollection||geom instanceof jsts.geom.MultiPolygon){var gc=geom;for(var i=0;i<gc.getNumGeometries();i++){this.add(gc.getGeometryN(i));}}else if(geom instanceof Array){this.add2(geom);}};jsts.algorithm.CentroidArea.prototype.add2=function(ring){this.setBasePoint(ring[0]);this.addShell(ring);};jsts.algorithm.CentroidArea.prototype.getCentroid=function(){var cent=new jsts.geom.Coordinate();if(Math.abs(this.areasum2)>0.0){cent.x=this.cg3.x/3/this.areasum2;cent.y=this.cg3.y/3/this.areasum2;}else{cent.x=this.centSum.x/this.totalLength;cent.y=this.centSum.y/this.totalLength;}\nreturn cent;};jsts.algorithm.CentroidArea.prototype.setBasePoint=function(basePt){if(this.basePt==null)\nthis.basePt=basePt;};jsts.algorithm.CentroidArea.prototype.add3=function(poly){this.addShell(poly.getExteriorRing().getCoordinates());for(var i=0;i<poly.getNumInteriorRing();i++){this.addHole(poly.getInteriorRingN(i).getCoordinates());}};jsts.algorithm.CentroidArea.prototype.addShell=function(pts){var isPositiveArea=!jsts.algorithm.CGAlgorithms.isCCW(pts);for(var i=0;i<pts.length-1;i++){this.addTriangle(this.basePt,pts[i],pts[i+1],isPositiveArea);}\nthis.addLinearSegments(pts);};jsts.algorithm.CentroidArea.prototype.addHole=function(pts){var isPositiveArea=jsts.algorithm.CGAlgorithms.isCCW(pts);for(var i=0;i<pts.length-1;i++){this.addTriangle(this.basePt,pts[i],pts[i+1],isPositiveArea);}\nthis.addLinearSegments(pts);};jsts.algorithm.CentroidArea.prototype.addTriangle=function(p0,p1,p2,isPositiveArea){var sign=(isPositiveArea)?1.0:-1.0;jsts.algorithm.CentroidArea.centroid3(p0,p1,p2,this.triangleCent3);var area2=jsts.algorithm.CentroidArea.area2(p0,p1,p2);this.cg3.x+=sign*area2*this.triangleCent3.x;this.cg3.y+=sign*area2*this.triangleCent3.y;this.areasum2+=sign*area2;};jsts.algorithm.CentroidArea.centroid3=function(p1,p2,p3,c){c.x=p1.x+p2.x+p3.x;c.y=p1.y+p2.y+p3.y;return;};jsts.algorithm.CentroidArea.area2=function(p1,p2,p3){return(p2.x-p1.x)*(p3.y-p1.y)-(p3.x-p1.x)*(p2.y-p1.y);};jsts.algorithm.CentroidArea.prototype.addLinearSegments=function(pts){for(var i=0;i<pts.length-1;i++){var segmentLen=pts[i].distance(pts[i+1]);this.totalLength+=segmentLen;var midx=(pts[i].x+pts[i+1].x)/2;this.centSum.x+=segmentLen*midx;var midy=(pts[i].y+pts[i+1].y)/2;this.centSum.y+=segmentLen*midy;}};jsts.geomgraph.index.SweepLineSegment=function(edge,ptIndex){this.edge=edge;this.ptIndex=ptIndex;this.pts=edge.getCoordinates();};jsts.geomgraph.index.SweepLineSegment.prototype.edge=null;jsts.geomgraph.index.SweepLineSegment.prototype.pts=null;jsts.geomgraph.index.SweepLineSegment.prototype.ptIndex=null;jsts.geomgraph.index.SweepLineSegment.prototype.getMinX=function(){var x1=this.pts[this.ptIndex].x;var x2=this.pts[this.ptIndex+1].x;if(x1<x2){return x1;}\nreturn x2;};jsts.geomgraph.index.SweepLineSegment.prototype.getMaxX=function(){var x1=this.pts[this.ptIndex].x;var x2=this.pts[this.ptIndex+1].x;if(x1>x2){return x1;}\nreturn x2;};jsts.geomgraph.index.SweepLineSegment.prototype.computeIntersections=function(ss,si){si.addIntersections(this.edge,this.ptIndex,ss.edge,ss.ptIndex);};jsts.index.quadtree.Root=function(){jsts.index.quadtree.NodeBase.prototype.constructor.apply(this,arguments);this.origin=new jsts.geom.Coordinate(0.0,0.0);};jsts.index.quadtree.Root.prototype=new jsts.index.quadtree.NodeBase();jsts.index.quadtree.Root.prototype.insert=function(itemEnv,item){var index=this.getSubnodeIndex(itemEnv,this.origin);if(index===-1){this.add(item);return;}\nvar node=this.subnode[index];if(node===null||!node.getEnvelope().contains(itemEnv)){var largerNode=jsts.index.quadtree.Node.createExpanded(node,itemEnv);this.subnode[index]=largerNode;}\nthis.insertContained(this.subnode[index],itemEnv,item);};jsts.index.quadtree.Root.prototype.insertContained=function(tree,itemEnv,item){var isZeroX,isZeroY,node;isZeroX=jsts.index.IntervalSize.isZeroWidth(itemEnv.getMinX(),itemEnv.getMaxX());isZeroY=jsts.index.IntervalSize.isZeroWidth(itemEnv.getMinY(),itemEnv.getMaxY());if(isZeroX||isZeroY){node=tree.find(itemEnv);}else{node=tree.getNode(itemEnv);}\nnode.add(item);};jsts.index.quadtree.Root.prototype.isSearchMatch=function(searchEnv){return true;};jsts.geomgraph.index.MonotoneChainIndexer=function(){};jsts.geomgraph.index.MonotoneChainIndexer.toIntArray=function(list){var array=[];for(var i=list.iterator();i.hasNext();){var element=i.next();array.push(element);}\nreturn array;};jsts.geomgraph.index.MonotoneChainIndexer.prototype.getChainStartIndices=function(pts){var start=0;var startIndexList=new javascript.util.ArrayList();startIndexList.add(start);do{var last=this.findChainEnd(pts,start);startIndexList.add(last);start=last;}while(start<pts.length-1);var startIndex=jsts.geomgraph.index.MonotoneChainIndexer.toIntArray(startIndexList);return startIndex;};jsts.geomgraph.index.MonotoneChainIndexer.prototype.findChainEnd=function(pts,start){var chainQuad=jsts.geomgraph.Quadrant.quadrant(pts[start],pts[start+1]);var last=start+1;while(last<pts.length){var quad=jsts.geomgraph.Quadrant.quadrant(pts[last-1],pts[last]);if(quad!=chainQuad){break;}\nlast++;}\nreturn last-1;};jsts.noding.IntersectionAdder=function(li){this.li=li;};jsts.noding.IntersectionAdder.prototype=new jsts.noding.SegmentIntersector();jsts.noding.IntersectionAdder.constructor=jsts.noding.IntersectionAdder;jsts.noding.IntersectionAdder.isAdjacentSegments=function(i1,i2){return Math.abs(i1-i2)===1;};jsts.noding.IntersectionAdder.prototype._hasIntersection=false;jsts.noding.IntersectionAdder.prototype.hasProper=false;jsts.noding.IntersectionAdder.prototype.hasProperInterior=false;jsts.noding.IntersectionAdder.prototype.hasInterior=false;jsts.noding.IntersectionAdder.prototype.properIntersectionPoint=null;jsts.noding.IntersectionAdder.prototype.li=null;jsts.noding.IntersectionAdder.prototype.isSelfIntersection=null;jsts.noding.IntersectionAdder.prototype.numIntersections=0;jsts.noding.IntersectionAdder.prototype.numInteriorIntersections=0;jsts.noding.IntersectionAdder.prototype.numProperIntersections=0;jsts.noding.IntersectionAdder.prototype.numTests=0;jsts.noding.IntersectionAdder.prototype.getLineIntersector=function(){return this.li;};jsts.noding.IntersectionAdder.prototype.getProperIntersectionPoint=function(){return this.properIntersectionPoint;};jsts.noding.IntersectionAdder.prototype.hasIntersection=function(){return this._hasIntersection;};jsts.noding.IntersectionAdder.prototype.hasProperIntersection=function(){return this.hasProper;};jsts.noding.IntersectionAdder.prototype.hasProperInteriorIntersection=function(){return this.hasProperInterior;};jsts.noding.IntersectionAdder.prototype.hasInteriorIntersection=function(){return this.hasInterior;};jsts.noding.IntersectionAdder.prototype.isTrivialIntersection=function(e0,segIndex0,e1,segIndex1){if(e0==e1){if(this.li.getIntersectionNum()==1){if(jsts.noding.IntersectionAdder.isAdjacentSegments(segIndex0,segIndex1))\nreturn true;if(e0.isClosed()){var maxSegIndex=e0.size()-1;if((segIndex0===0&&segIndex1===maxSegIndex)||(segIndex1===0&&segIndex0===maxSegIndex)){return true;}}}}\nreturn false;};jsts.noding.IntersectionAdder.prototype.processIntersections=function(e0,segIndex0,e1,segIndex1){if(e0===e1&&segIndex0===segIndex1)\nreturn;this.numTests++;var p00=e0.getCoordinates()[segIndex0];var p01=e0.getCoordinates()[segIndex0+1];var p10=e1.getCoordinates()[segIndex1];var p11=e1.getCoordinates()[segIndex1+1];this.li.computeIntersection(p00,p01,p10,p11);if(this.li.hasIntersection()){this.numIntersections++;if(this.li.isInteriorIntersection()){this.numInteriorIntersections++;this.hasInterior=true;}\nif(!this.isTrivialIntersection(e0,segIndex0,e1,segIndex1)){this._hasIntersection=true;e0.addIntersections(this.li,segIndex0,0);e1.addIntersections(this.li,segIndex1,1);if(this.li.isProper()){this.numProperIntersections++;this.hasProper=true;this.hasProperInterior=true;}}}};jsts.noding.IntersectionAdder.prototype.isDone=function(){return false;};jsts.operation.union.CascadedPolygonUnion=function(polys){this.inputPolys=polys;};jsts.operation.union.CascadedPolygonUnion.union=function(polys){var op=new jsts.operation.union.CascadedPolygonUnion(polys);return op.union();};jsts.operation.union.CascadedPolygonUnion.prototype.inputPolys;jsts.operation.union.CascadedPolygonUnion.prototype.geomFactory=null;jsts.operation.union.CascadedPolygonUnion.prototype.STRTREE_NODE_CAPACITY=4;jsts.operation.union.CascadedPolygonUnion.prototype.union=function(){if(this.inputPolys.length===0){return null;}\nthis.geomFactory=this.inputPolys[0].getFactory();var index=new jsts.index.strtree.STRtree(this.STRTREE_NODE_CAPACITY);for(var i=0,l=this.inputPolys.length;i<l;i++){var item=this.inputPolys[i];index.insert(item.getEnvelopeInternal(),item);}\nvar itemTree=index.itemsTree();var unionAll=this.unionTree(itemTree);return unionAll;};jsts.operation.union.CascadedPolygonUnion.prototype.unionTree=function(geomTree){var geoms=this.reduceToGeometries(geomTree);var union=this.binaryUnion(geoms);return union;};jsts.operation.union.CascadedPolygonUnion.prototype.binaryUnion=function(geoms,start,end){start=start||0;end=end||geoms.length;if(end-start<=1){var g0=this.getGeometry(geoms,start);return this.unionSafe(g0,null);}\nelse if(end-start===2){return this.unionSafe(this.getGeometry(geoms,start),this.getGeometry(geoms,start+1));}\nelse{var mid=parseInt((end+start)/2);var g0=this.binaryUnion(geoms,start,mid);var g1=this.binaryUnion(geoms,mid,end);return this.unionSafe(g0,g1);}};jsts.operation.union.CascadedPolygonUnion.prototype.getGeometry=function(list,index){if(index>=list.length){return null;}\nreturn list[index];};jsts.operation.union.CascadedPolygonUnion.prototype.reduceToGeometries=function(geomTree){var geoms=[];for(var i=0,l=geomTree.length;i<l;i++){var o=geomTree[i],geom=null;if(o instanceof Array){geom=this.unionTree(o);}\nelse if(o instanceof jsts.geom.Geometry){geom=o;}\ngeoms.push(geom);}\nreturn geoms;};jsts.operation.union.CascadedPolygonUnion.prototype.unionSafe=function(g0,g1){if(g0===null&&g1===null){return null;}\nif(g0===null){return g1.clone();}\nif(g1===null){return g0.clone();}\nreturn this.unionOptimized(g0,g1);};jsts.operation.union.CascadedPolygonUnion.prototype.unionOptimized=function(g0,g1){var g0Env=g0.getEnvelopeInternal(),g1Env=g1.getEnvelopeInternal();if(!g0Env.intersects(g1Env)){var combo=jsts.geom.util.GeometryCombiner.combine(g0,g1);return combo;}\nif(g0.getNumGeometries<=1&&g1.getNumGeometries<=1){return this.unionActual(g0,g1);}\nvar commonEnv=g0Env.intersection(g1Env);return this.unionUsingEnvelopeIntersection(g0,g1,commonEnv);};jsts.operation.union.CascadedPolygonUnion.prototype.unionUsingEnvelopeIntersection=function(g0,g1,common){var disjointPolys=new javascript.util.ArrayList();var g0Int=this.extractByEnvelope(common,g0,disjointPolys);var g1Int=this.extractByEnvelope(common,g1,disjointPolys);var union=this.unionActual(g0Int,g1Int);disjointPolys.add(union);var overallUnion=jsts.geom.util.GeometryCombiner.combine(disjointPolys);return overallUnion;};jsts.operation.union.CascadedPolygonUnion.prototype.extractByEnvelope=function(env,geom,disjointGeoms){var intersectingGeoms=new javascript.util.ArrayList();for(var i=0;i<geom.getNumGeometries();i++){var elem=geom.getGeometryN(i);if(elem.getEnvelopeInternal().intersects(env)){intersectingGeoms.add(elem);}\nelse{disjointGeoms.add(elem);}}\nreturn this.geomFactory.buildGeometry(intersectingGeoms);};jsts.operation.union.CascadedPolygonUnion.prototype.unionActual=function(g0,g1){return g0.union(g1);};(function(){jsts.geom.MultiPoint=function(points,factory){this.geometries=points||[];this.factory=factory;};jsts.geom.MultiPoint.prototype=new jsts.geom.GeometryCollection();jsts.geom.MultiPoint.constructor=jsts.geom.MultiPoint;jsts.geom.MultiPoint.prototype.getBoundary=function(){return this.getFactory().createGeometryCollection(null);};jsts.geom.MultiPoint.prototype.getGeometryN=function(n){return this.geometries[n];};jsts.geom.MultiPoint.prototype.equalsExact=function(other,tolerance){if(!this.isEquivalentClass(other)){return false;}\nreturn jsts.geom.GeometryCollection.prototype.equalsExact.call(this,other,tolerance);};jsts.geom.MultiPoint.prototype.CLASS_NAME='jsts.geom.MultiPoint';})();jsts.operation.buffer.OffsetCurveBuilder=function(precisionModel,bufParams){this.precisionModel=precisionModel;this.bufParams=bufParams;};jsts.operation.buffer.OffsetCurveBuilder.prototype.distance=0.0;jsts.operation.buffer.OffsetCurveBuilder.prototype.precisionModel=null;jsts.operation.buffer.OffsetCurveBuilder.prototype.bufParams=null;jsts.operation.buffer.OffsetCurveBuilder.prototype.getBufferParameters=function(){return this.bufParams;};jsts.operation.buffer.OffsetCurveBuilder.prototype.getLineCurve=function(inputPts,distance){this.distance=distance;if(this.distance<0.0&&!this.bufParams.isSingleSided())\nreturn null;if(this.distance==0.0)\nreturn null;var posDistance=Math.abs(this.distance);var segGen=this.getSegGen(posDistance);if(inputPts.length<=1){this.computePointCurve(inputPts[0],segGen);}else{if(this.bufParams.isSingleSided()){var isRightSide=distance<0.0;this.computeSingleSidedBufferCurve(inputPts,isRightSide,segGen);}else\nthis.computeLineBufferCurve(inputPts,segGen);}\nvar lineCoord=segGen.getCoordinates();return lineCoord;};jsts.operation.buffer.OffsetCurveBuilder.prototype.getRingCurve=function(inputPts,side,distance){this.distance=distance;if(inputPts.length<=2)\nreturn this.getLineCurve(inputPts,distance);if(this.distance==0.0){return jsts.operation.buffer.OffsetCurveBuilder.copyCoordinates(inputPts);}\nvar segGen=this.getSegGen(this.distance);this.computeRingBufferCurve(inputPts,side,segGen);return segGen.getCoordinates();};jsts.operation.buffer.OffsetCurveBuilder.prototype.getOffsetCurve=function(inputPts,distance){this.distance=distance;if(this.distance===0.0)\nreturn null;var isRightSide=this.distance<0.0;var posDistance=Math.abs(this.distance);var segGen=this.getSegGen(posDistance);if(inputPts.length<=1){this.computePointCurve(inputPts[0],segGen);}else{this.computeOffsetCurve(inputPts,isRightSide,segGen);}\nvar curvePts=segGen.getCoordinates();if(isRightSide)\ncurvePts.reverse();return curvePts;};jsts.operation.buffer.OffsetCurveBuilder.copyCoordinates=function(pts){var copy=[];for(var i=0;i<pts.length;i++){copy.push(pts[i].clone());}\nreturn copy;};jsts.operation.buffer.OffsetCurveBuilder.prototype.getSegGen=function(distance){return new jsts.operation.buffer.OffsetSegmentGenerator(this.precisionModel,this.bufParams,distance);};jsts.operation.buffer.OffsetCurveBuilder.SIMPLIFY_FACTOR=100.0;jsts.operation.buffer.OffsetCurveBuilder.simplifyTolerance=function(bufDistance){return bufDistance/jsts.operation.buffer.OffsetCurveBuilder.SIMPLIFY_FACTOR;};jsts.operation.buffer.OffsetCurveBuilder.prototype.computePointCurve=function(pt,segGen){switch(this.bufParams.getEndCapStyle()){case jsts.operation.buffer.BufferParameters.CAP_ROUND:segGen.createCircle(pt);break;case jsts.operation.buffer.BufferParameters.CAP_SQUARE:segGen.createSquare(pt);break;}};jsts.operation.buffer.OffsetCurveBuilder.prototype.computeLineBufferCurve=function(inputPts,segGen){var distTol=jsts.operation.buffer.OffsetCurveBuilder.simplifyTolerance(this.distance);var simp1=jsts.operation.buffer.BufferInputLineSimplifier.simplify(inputPts,distTol);var n1=simp1.length-1;segGen.initSideSegments(simp1[0],simp1[1],jsts.geomgraph.Position.LEFT);for(var i=2;i<=n1;i++){segGen.addNextSegment(simp1[i],true);}\nsegGen.addLastSegment();segGen.addLineEndCap(simp1[n1-1],simp1[n1]);var simp2=jsts.operation.buffer.BufferInputLineSimplifier.simplify(inputPts,-distTol);var n2=simp2.length-1;segGen.initSideSegments(simp2[n2],simp2[n2-1],jsts.geomgraph.Position.LEFT);for(var i=n2-2;i>=0;i--){segGen.addNextSegment(simp2[i],true);}\nsegGen.addLastSegment();segGen.addLineEndCap(simp2[1],simp2[0]);segGen.closeRing();};jsts.operation.buffer.OffsetCurveBuilder.prototype.computeSingleSidedBufferCurve=function(inputPts,isRightSide,segGen){var distTol=jsts.operation.buffer.OffsetCurveBuilder.simplifyTolerance(this.distance);if(isRightSide){segGen.addSegments(inputPts,true);var simp2=jsts.operation.buffer.BufferInputLineSimplifier.simplify(inputPts,-distTol);var n2=simp2.length-1;segGen.initSideSegments(simp2[n2],simp2[n2-1],jsts.geomgraph.Position.LEFT);segGen.addFirstSegment();for(var i=n2-2;i>=0;i--){segGen.addNextSegment(simp2[i],true);}}else{segGen.addSegments(inputPts,false);var simp1=jsts.operation.buffer.BufferInputLineSimplifier.simplify(inputPts,distTol);var n1=simp1.length-1;segGen.initSideSegments(simp1[0],simp1[1],jsts.geomgraph.Position.LEFT);segGen.addFirstSegment();for(var i=2;i<=n1;i++){segGen.addNextSegment(simp1[i],true);}}\nsegGen.addLastSegment();segGen.closeRing();};jsts.operation.buffer.OffsetCurveBuilder.prototype.computeOffsetCurve=function(inputPts,isRightSide,segGen){var distTol=jsts.operation.buffer.OffsetCurveBuilder.simplifyTolerance(this.distance);if(isRightSide){var simp2=jsts.operation.buffer.BufferInputLineSimplifier.simplify(inputPts,-distTol);var n2=simp2.length-1;segGen.initSideSegments(simp2[n2],simp2[n2-1],jsts.geomgraph.Position.LEFT);segGen.addFirstSegment();for(var i=n2-2;i>=0;i--){segGen.addNextSegment(simp2[i],true);}}else{var simp1=jsts.operation.buffer.BufferInputLineSimplifier.simplify(inputPts,distTol);var n1=simp1.length-1;segGen.initSideSegments(simp1[0],simp1[1],jsts.geomgraph.Position.LEFT);segGen.addFirstSegment();for(var i=2;i<=n1;i++){segGen.addNextSegment(simp1[i],true);}}\nsegGen.addLastSegment();};jsts.operation.buffer.OffsetCurveBuilder.prototype.computeRingBufferCurve=function(inputPts,side,segGen){var distTol=jsts.operation.buffer.OffsetCurveBuilder.simplifyTolerance(this.distance);if(side===jsts.geomgraph.Position.RIGHT)\ndistTol=-distTol;var simp=jsts.operation.buffer.BufferInputLineSimplifier.simplify(inputPts,distTol);var n=simp.length-1;segGen.initSideSegments(simp[n-1],simp[0],side);for(var i=1;i<=n;i++){var addStartPoint=i!==1;segGen.addNextSegment(simp[i],addStartPoint);}\nsegGen.closeRing();};(function(){var HotPixelSnapAction=function(hotPixel,parentEdge,vertexIndex){this.hotPixel=hotPixel;this.parentEdge=parentEdge;this.vertexIndex=vertexIndex;};HotPixelSnapAction.prototype=new jsts.index.chain.MonotoneChainSelectAction();HotPixelSnapAction.constructor=HotPixelSnapAction;HotPixelSnapAction.prototype.hotPixel=null;HotPixelSnapAction.prototype.parentEdge=null;HotPixelSnapAction.prototype.vertexIndex=null;HotPixelSnapAction.prototype._isNodeAdded=false;HotPixelSnapAction.prototype.isNodeAdded=function(){return this._isNodeAdded;};HotPixelSnapAction.prototype.select=function(mc,startIndex){var ss=mc.getContext();if(this.parentEdge!==null){if(ss===this.parentEdge&&startIndex===this.vertexIndex)\nreturn;}\nthis._isNodeAdded=this.hotPixel.addSnappedNode(ss,startIndex);};jsts.noding.snapround.MCIndexPointSnapper=function(index){this.index=index;};jsts.noding.snapround.MCIndexPointSnapper.prototype.index=null;jsts.noding.snapround.MCIndexPointSnapper.prototype.snap=function(hotPixel,parentEdge,vertexIndex){if(arguments.length===1){this.snap2.apply(this,arguments);return;}\nvar pixelEnv=hotPixel.getSafeEnvelope();var hotPixelSnapAction=new HotPixelSnapAction(hotPixel,parentEdge,vertexIndex);this.index.query(pixelEnv,{visitItem:function(testChain){testChain.select(pixelEnv,hotPixelSnapAction);}});return hotPixelSnapAction.isNodeAdded();};jsts.noding.snapround.MCIndexPointSnapper.prototype.snap2=function(hotPixel){return this.snap(hotPixel,null,-1);};})();(function(){var NodeBase=function(){this.items=new javascript.util.ArrayList();this.subnode=[null,null];};NodeBase.getSubnodeIndex=function(interval,centre){var subnodeIndex=-1;if(interval.min>=centre){subnodeIndex=1;}\nif(interval.max<=centre){subnodeIndex=0;}\nreturn subnodeIndex;};NodeBase.prototype.getItems=function(){return this.items;};NodeBase.prototype.add=function(item){this.items.add(item);};NodeBase.prototype.addAllItems=function(items){items.addAll(this.items);var i=0,il=2;for(i;i<il;i++){if(this.subnode[i]!==null){this.subnode[i].addAllItems(items);}}\nreturn items;};NodeBase.prototype.addAllItemsFromOverlapping=function(interval,resultItems){if(interval!==null&&!this.isSearchMatch(interval)){return;}\nresultItems.addAll(this.items);if(this.subnode[0]!==null){this.subnode[0].addAllItemsFromOverlapping(interval,resultItems);}\nif(this.subnode[1]!==null){this.subnode[1].addAllItemsFromOverlapping(interval,resultItems);}};NodeBase.prototype.remove=function(itemInterval,item){if(!this.isSearchMatch(itemInterval)){return false;}\nvar found=false,i=0,il=2;for(i;i<il;i++){if(this.subnode[i]!==null){found=this.subnode[i].remove(itemInterval,item);if(found){if(this.subnode[i].isPrunable()){this.subnode[i]=null;}\nbreak;}}}\nif(found){return found;}\nfound=this.items.remove(item);return found;};NodeBase.prototype.isPrunable=function(){return!(this.hasChildren()||this.hasItems());};NodeBase.prototype.hasChildren=function(){var i=0,il=2;for(i;i<il;i++){if(this.subnode[i]!==null){return true;}}\nreturn false;};NodeBase.prototype.hasItems=function(){return!this.items.isEmpty();};NodeBase.prototype.depth=function(){var maxSubDepth=0,i=0,il=2,sqd;for(i;i<il;i++){if(this.subnode[i]!==null){sqd=this.subnode[i].depth();if(sqd>maxSubDepth){maxSubDepth=sqd;}}}\nreturn maxSubDepth+1;};NodeBase.prototype.size=function(){var subSize=0,i=0,il=2;for(i;i<il;i++){if(this.subnode[i]!==null){subSize+=this.subnode[i].size();}}\nreturn subSize+this.items.size();};NodeBase.prototype.nodeSize=function(){var subSize=0,i=0,il=2;for(i;i<il;i++){if(this.subnode[i]!==null){subSize+=this.subnode[i].nodeSize();}}\nreturn subSize+1;};jsts.index.bintree.NodeBase=NodeBase;})();(function(){var NodeBase=jsts.index.bintree.NodeBase;var Key=jsts.index.bintree.Key;var Interval=jsts.index.bintree.Interval;var Node=function(interval,level){this.items=new javascript.util.ArrayList();this.subnode=[null,null];this.interval=interval;this.level=level;this.centre=(interval.getMin()+interval.getMax())/2;};Node.prototype=new NodeBase();Node.constructor=Node;Node.createNode=function(itemInterval){var key,node;key=new Key(itemInterval);node=new Node(key.getInterval(),key.getLevel());return node;};Node.createExpanded=function(node,addInterval){var expandInt,largerNode;expandInt=new Interval(addInterval);if(node!==null){expandInt.expandToInclude(node.interval);}\nlargerNode=Node.createNode(expandInt);if(node!==null){largerNode.insert(node);}\nreturn largerNode;};Node.prototype.getInterval=function(){return this.interval;};Node.prototype.isSearchMatch=function(itemInterval){return itemInterval.overlaps(this.interval);};Node.prototype.getNode=function(searchInterval){var subnodeIndex=NodeBase.getSubnodeIndex(searchInterval,this.centre),node;if(subnodeIndex!=-1){node=this.getSubnode(subnodeIndex);return node.getNode(searchInterval);}else{return this;}};Node.prototype.find=function(searchInterval){var subnodeIndex=NodeBase.getSubnodeIndex(searchInterval,this.centre),node;if(subnodeIndex===-1){return this;}\nif(this.subnode[subnodeIndex]!==null){node=this.subnode[subnodeIndex];return node.find(searchInterval);}\nreturn this;};Node.prototype.insert=function(node){var index=NodeBase.getSubnodeIndex(node.interval,this.centre),childNode;if(node.level===this.level-1){this.subnode[index]=node;}else{childNode=this.createSubnode(index);childNode.insert(node);this.subnode[index]=childNode;}};Node.prototype.getSubnode=function(index){if(this.subnode[index]===null){this.subnode[index]=this.createSubnode(index);}\nreturn this.subnode[index];};Node.prototype.createSubnode=function(index){var min,max,subInt,node;min=0.0;max=0.0;switch(index){case 0:min=this.interval.getMin();max=this.centre;break;case 1:min=this.centre;max=this.interval.getMax();break;}\nsubInt=new Interval(min,max);node=new Node(subInt,this.level-1);return node;};jsts.index.bintree.Node=Node;})();(function(){var Node=jsts.index.bintree.Node;var NodeBase=jsts.index.bintree.NodeBase;var Root=function(){this.subnode=[null,null];this.items=new javascript.util.ArrayList();};Root.prototype=new jsts.index.bintree.NodeBase();Root.constructor=Root;Root.origin=0.0;Root.prototype.insert=function(itemInterval,item){var index=NodeBase.getSubnodeIndex(itemInterval,Root.origin),node,largerNode;if(index===-1){this.add(item);return;}\nnode=this.subnode[index];if(node===null||!node.getInterval().contains(itemInterval)){largerNode=Node.createExpanded(node,itemInterval);this.subnode[index]=largerNode;}\nthis.insertContained(this.subnode[index],itemInterval,item);};Root.prototype.insertContained=function(tree,itemInterval,item){var isZeroArea,node;isZeroArea=jsts.index.IntervalSize.isZeroWidth(itemInterval.getMin(),itemInterval.getMax());node=isZeroArea?tree.find(itemInterval):tree.getNode(itemInterval);node.add(item);};Root.prototype.isSearchMatch=function(interval){return true;};jsts.index.bintree.Root=Root;})();jsts.geomgraph.Quadrant=function(){};jsts.geomgraph.Quadrant.NE=0;jsts.geomgraph.Quadrant.NW=1;jsts.geomgraph.Quadrant.SW=2;jsts.geomgraph.Quadrant.SE=3;jsts.geomgraph.Quadrant.quadrant=function(dx,dy){if(dx instanceof jsts.geom.Coordinate){return jsts.geomgraph.Quadrant.quadrant2.apply(this,arguments);}\nif(dx===0.0&&dy===0.0)\nthrow new jsts.error.IllegalArgumentError('Cannot compute the quadrant for point ( '+dx+', '+dy+' )');if(dx>=0.0){if(dy>=0.0)\nreturn jsts.geomgraph.Quadrant.NE;else\nreturn jsts.geomgraph.Quadrant.SE;}else{if(dy>=0.0)\nreturn jsts.geomgraph.Quadrant.NW;else\nreturn jsts.geomgraph.Quadrant.SW;}};jsts.geomgraph.Quadrant.quadrant2=function(p0,p1){if(p1.x===p0.x&&p1.y===p0.y)\nthrow new jsts.error.IllegalArgumentError('Cannot compute the quadrant for two identical points '+p0);if(p1.x>=p0.x){if(p1.y>=p0.y)\nreturn jsts.geomgraph.Quadrant.NE;else\nreturn jsts.geomgraph.Quadrant.SE;}else{if(p1.y>=p0.y)\nreturn jsts.geomgraph.Quadrant.NW;else\nreturn jsts.geomgraph.Quadrant.SW;}};jsts.geomgraph.Quadrant.isOpposite=function(quad1,quad2){if(quad1===quad2)\nreturn false;var diff=(quad1-quad2+4)%4;if(diff===2)\nreturn true;return false;};jsts.geomgraph.Quadrant.commonHalfPlane=function(quad1,quad2){if(quad1===quad2)\nreturn quad1;var diff=(quad1-quad2+4)%4;if(diff===2)\nreturn-1;var min=(quad1<quad2)?quad1:quad2;var max=(quad1>quad2)?quad1:quad2;if(min===0&&max===3)\nreturn 3;return min;};jsts.geomgraph.Quadrant.isInHalfPlane=function(quad,halfPlane){if(halfPlane===jsts.geomgraph.Quadrant.SE){return quad===jsts.geomgraph.Quadrant.SE||quad===jsts.geomgraph.Quadrant.SW;}\nreturn quad===halfPlane||quad===halfPlane+1;};jsts.geomgraph.Quadrant.isNorthern=function(quad){return quad===jsts.geomgraph.Quadrant.NE||quad===jsts.geomgraph.Quadrant.NW;};jsts.operation.valid.ConsistentAreaTester=function(geomGraph){this.geomGraph=geomGraph;this.li=new jsts.algorithm.RobustLineIntersector();this.nodeGraph=new jsts.operation.relate.RelateNodeGraph();this.invalidPoint=null;};jsts.operation.valid.ConsistentAreaTester.prototype.getInvalidPoint=function(){return this.invalidPoint;};jsts.operation.valid.ConsistentAreaTester.prototype.isNodeConsistentArea=function(){var intersector=this.geomGraph.computeSelfNodes(this.li,true);if(intersector.hasProperIntersection()){this.invalidPoint=intersector.getProperIntersectionPoint();return false;}\nthis.nodeGraph.build(this.geomGraph);return this.isNodeEdgeAreaLabelsConsistent();};jsts.operation.valid.ConsistentAreaTester.prototype.isNodeEdgeAreaLabelsConsistent=function(){for(var nodeIt=this.nodeGraph.getNodeIterator();nodeIt.hasNext();){var node=nodeIt.next();if(!node.getEdges().isAreaLabelsConsistent(this.geomGraph)){this.invalidPoint=node.getCoordinate().clone();return false;}}\nreturn true;};jsts.operation.valid.ConsistentAreaTester.prototype.hasDuplicateRings=function(){for(var nodeIt=this.nodeGraph.getNodeIterator();nodeIt.hasNext();){var node=nodeIt.next();for(var i=node.getEdges().iterator();i.hasNext();){var eeb=i.next();if(eeb.getEdgeEnds().length>1){invalidPoint=eeb.getEdge().getCoordinate(0);return true;}}}\nreturn false;};jsts.operation.relate.RelateNode=function(coord,edges){jsts.geomgraph.Node.apply(this,arguments);};jsts.operation.relate.RelateNode.prototype=new jsts.geomgraph.Node();jsts.operation.relate.RelateNode.prototype.computeIM=function(im){im.setAtLeastIfValid(this.label.getLocation(0),this.label.getLocation(1),0);};jsts.operation.relate.RelateNode.prototype.updateIMFromEdges=function(im){this.edges.updateIM(im);};(function(){var Location=jsts.geom.Location;var Position=jsts.geomgraph.Position;var EdgeEnd=jsts.geomgraph.EdgeEnd;jsts.geomgraph.DirectedEdge=function(edge,isForward){EdgeEnd.call(this,edge);this.depth=[0,-999,-999];this._isForward=isForward;if(isForward){this.init(edge.getCoordinate(0),edge.getCoordinate(1));}else{var n=edge.getNumPoints()-1;this.init(edge.getCoordinate(n),edge.getCoordinate(n-1));}\nthis.computeDirectedLabel();};jsts.geomgraph.DirectedEdge.prototype=new EdgeEnd();jsts.geomgraph.DirectedEdge.constructor=jsts.geomgraph.DirectedEdge;jsts.geomgraph.DirectedEdge.depthFactor=function(currLocation,nextLocation){if(currLocation===Location.EXTERIOR&&nextLocation===Location.INTERIOR)\nreturn 1;else if(currLocation===Location.INTERIOR&&nextLocation===Location.EXTERIOR)\nreturn-1;return 0;};jsts.geomgraph.DirectedEdge.prototype._isForward=null;jsts.geomgraph.DirectedEdge.prototype._isInResult=false;jsts.geomgraph.DirectedEdge.prototype._isVisited=false;jsts.geomgraph.DirectedEdge.prototype.sym=null;jsts.geomgraph.DirectedEdge.prototype.next=null;jsts.geomgraph.DirectedEdge.prototype.nextMin=null;jsts.geomgraph.DirectedEdge.prototype.edgeRing=null;jsts.geomgraph.DirectedEdge.prototype.minEdgeRing=null;jsts.geomgraph.DirectedEdge.prototype.depth=null;jsts.geomgraph.DirectedEdge.prototype.getEdge=function(){return this.edge;};jsts.geomgraph.DirectedEdge.prototype.setInResult=function(isInResult){this._isInResult=isInResult;};jsts.geomgraph.DirectedEdge.prototype.isInResult=function(){return this._isInResult;};jsts.geomgraph.DirectedEdge.prototype.isVisited=function(){return this._isVisited;};jsts.geomgraph.DirectedEdge.prototype.setVisited=function(isVisited){this._isVisited=isVisited;};jsts.geomgraph.DirectedEdge.prototype.setEdgeRing=function(edgeRing){this.edgeRing=edgeRing;};jsts.geomgraph.DirectedEdge.prototype.getEdgeRing=function(){return this.edgeRing;};jsts.geomgraph.DirectedEdge.prototype.setMinEdgeRing=function(minEdgeRing){this.minEdgeRing=minEdgeRing;};jsts.geomgraph.DirectedEdge.prototype.getMinEdgeRing=function(){return this.minEdgeRing;};jsts.geomgraph.DirectedEdge.prototype.getDepth=function(position){return this.depth[position];};jsts.geomgraph.DirectedEdge.prototype.setDepth=function(position,depthVal){if(this.depth[position]!==-999){if(this.depth[position]!==depthVal)\nthrow new jsts.error.TopologyError('assigned depths do not match',this.getCoordinate());}\nthis.depth[position]=depthVal;};jsts.geomgraph.DirectedEdge.prototype.getDepthDelta=function(){var depthDelta=this.edge.getDepthDelta();if(!this._isForward)\ndepthDelta=-depthDelta;return depthDelta;};jsts.geomgraph.DirectedEdge.prototype.setVisitedEdge=function(isVisited){this.setVisited(isVisited);this.sym.setVisited(isVisited);};jsts.geomgraph.DirectedEdge.prototype.getSym=function(){return this.sym;};jsts.geomgraph.DirectedEdge.prototype.isForward=function(){return this._isForward;};jsts.geomgraph.DirectedEdge.prototype.setSym=function(de){this.sym=de;};jsts.geomgraph.DirectedEdge.prototype.getNext=function(){return this.next;};jsts.geomgraph.DirectedEdge.prototype.setNext=function(next){this.next=next;};jsts.geomgraph.DirectedEdge.prototype.getNextMin=function(){return this.nextMin;};jsts.geomgraph.DirectedEdge.prototype.setNextMin=function(nextMin){this.nextMin=nextMin;};jsts.geomgraph.DirectedEdge.prototype.isLineEdge=function(){var isLine=this.label.isLine(0)||this.label.isLine(1);var isExteriorIfArea0=!this.label.isArea(0)||this.label.allPositionsEqual(0,Location.EXTERIOR);var isExteriorIfArea1=!this.label.isArea(1)||this.label.allPositionsEqual(1,Location.EXTERIOR);return isLine&&isExteriorIfArea0&&isExteriorIfArea1;};jsts.geomgraph.DirectedEdge.prototype.isInteriorAreaEdge=function(){var isInteriorAreaEdge=true;for(var i=0;i<2;i++){if(!(this.label.isArea(i)&&this.label.getLocation(i,Position.LEFT)===Location.INTERIOR&&this.label.getLocation(i,Position.RIGHT)===Location.INTERIOR)){isInteriorAreaEdge=false;}}\nreturn isInteriorAreaEdge;};jsts.geomgraph.DirectedEdge.prototype.computeDirectedLabel=function(){this.label=new jsts.geomgraph.Label(this.edge.getLabel());if(!this._isForward)\nthis.label.flip();};jsts.geomgraph.DirectedEdge.prototype.setEdgeDepths=function(position,depth){var depthDelta=this.getEdge().getDepthDelta();if(!this._isForward)\ndepthDelta=-depthDelta;var directionFactor=1;if(position===Position.LEFT)\ndirectionFactor=-1;var oppositePos=Position.opposite(position);var delta=depthDelta*directionFactor;var oppositeDepth=depth+delta;this.setDepth(position,depth);this.setDepth(oppositePos,oppositeDepth);};})();jsts.operation.distance.DistanceOp=function(g0,g1,terminateDistance){this.ptLocator=new jsts.algorithm.PointLocator();this.geom=[];this.geom[0]=g0;this.geom[1]=g1;this.terminateDistance=terminateDistance;};jsts.operation.distance.DistanceOp.prototype.geom=null;jsts.operation.distance.DistanceOp.prototype.terminateDistance=0.0;jsts.operation.distance.DistanceOp.prototype.ptLocator=null;jsts.operation.distance.DistanceOp.prototype.minDistanceLocation=null;jsts.operation.distance.DistanceOp.prototype.minDistance=Number.MAX_VALUE;jsts.operation.distance.DistanceOp.distance=function(g0,g1){var distOp=new jsts.operation.distance.DistanceOp(g0,g1,0.0);return distOp.distance();};jsts.operation.distance.DistanceOp.isWithinDistance=function(g0,g1,distance){var distOp=new jsts.operation.distance.DistanceOp(g0,g1,distance);return distOp.distance()<=distance;};jsts.operation.distance.DistanceOp.nearestPoints=function(g0,g1){var distOp=new jsts.operation.distance.DistanceOp(g0,g1,0.0);return distOp.nearestPoints();};jsts.operation.distance.DistanceOp.prototype.distance=function(){if(this.geom[0]===null||this.geom[1]===null)\nthrow new jsts.error.IllegalArgumentError('null geometries are not supported');if(this.geom[0].isEmpty()||this.geom[1].isEmpty())\nreturn 0.0;this.computeMinDistance();return this.minDistance;};jsts.operation.distance.DistanceOp.prototype.nearestPoints=function(){this.computeMinDistance();var nearestPts=[this.minDistanceLocation[0].getCoordinate(),this.minDistanceLocation[1].getCoordinate()];return nearestPts;};jsts.operation.distance.DistanceOp.prototype.nearestLocations=function(){this.computeMinDistance();return this.minDistanceLocation;};jsts.operation.distance.DistanceOp.prototype.updateMinDistance=function(locGeom,flip){if(locGeom[0]===null)\nreturn;if(flip){this.minDistanceLocation[0]=locGeom[1];this.minDistanceLocation[1]=locGeom[0];}else{this.minDistanceLocation[0]=locGeom[0];this.minDistanceLocation[1]=locGeom[1];}};jsts.operation.distance.DistanceOp.prototype.computeMinDistance=function(){if(arguments.length>0){this.computeMinDistance2.apply(this,arguments);return;}\nif(this.minDistanceLocation!==null)\nreturn;this.minDistanceLocation=[];this.computeContainmentDistance();if(this.minDistance<=this.terminateDistance)\nreturn;this.computeFacetDistance();};jsts.operation.distance.DistanceOp.prototype.computeContainmentDistance=function(){if(arguments.length===2){this.computeContainmentDistance2.apply(this,arguments);return;}else if(arguments.length===3&&(!arguments[0]instanceof jsts.operation.distance.GeometryLocation)){this.computeContainmentDistance3.apply(this,arguments);return;}else if(arguments.length===3){this.computeContainmentDistance4.apply(this,arguments);return;}\nvar locPtPoly=[];this.computeContainmentDistance2(0,locPtPoly);if(this.minDistance<=this.terminateDistance)\nreturn;this.computeContainmentDistance2(1,locPtPoly);};jsts.operation.distance.DistanceOp.prototype.computeContainmentDistance2=function(polyGeomIndex,locPtPoly){var locationsIndex=1-polyGeomIndex;var polys=jsts.geom.util.PolygonExtracter.getPolygons(this.geom[polyGeomIndex]);if(polys.length>0){var insideLocs=jsts.operation.distance.ConnectedElementLocationFilter.getLocations(this.geom[locationsIndex]);this.computeContainmentDistance3(insideLocs,polys,locPtPoly);if(this.minDistance<=this.terminateDistance){this.minDistanceLocation[locationsIndex]=locPtPoly[0];this.minDistanceLocation[polyGeomIndex]=locPtPoly[1];return;}}};jsts.operation.distance.DistanceOp.prototype.computeContainmentDistance3=function(locs,polys,locPtPoly){for(var i=0;i<locs.length;i++){var loc=locs[i];for(var j=0;j<polys.length;j++){this.computeContainmentDistance4(loc,polys[j],locPtPoly);if(this.minDistance<=this.terminateDistance)\nreturn;}}};jsts.operation.distance.DistanceOp.prototype.computeContainmentDistance4=function(ptLoc,poly,locPtPoly){var pt=ptLoc.getCoordinate();if(jsts.geom.Location.EXTERIOR!==this.ptLocator.locate(pt,poly)){this.minDistance=0.0;locPtPoly[0]=ptLoc;locPtPoly[1]=new jsts.operation.distance.GeometryLocation(poly,pt);return;}};jsts.operation.distance.DistanceOp.prototype.computeFacetDistance=function(){var locGeom=[];var lines0=jsts.geom.util.LinearComponentExtracter.getLines(this.geom[0]);var lines1=jsts.geom.util.LinearComponentExtracter.getLines(this.geom[1]);var pts0=jsts.geom.util.PointExtracter.getPoints(this.geom[0]);var pts1=jsts.geom.util.PointExtracter.getPoints(this.geom[1]);this.computeMinDistanceLines(lines0,lines1,locGeom);this.updateMinDistance(locGeom,false);if(this.minDistance<=this.terminateDistance)\nreturn;locGeom[0]=null;locGeom[1]=null;this.computeMinDistanceLinesPoints(lines0,pts1,locGeom);this.updateMinDistance(locGeom,false);if(this.minDistance<=this.terminateDistance)\nreturn;locGeom[0]=null;locGeom[1]=null;this.computeMinDistanceLinesPoints(lines1,pts0,locGeom);this.updateMinDistance(locGeom,true);if(this.minDistance<=this.terminateDistance)\nreturn;locGeom[0]=null;locGeom[1]=null;this.computeMinDistancePoints(pts0,pts1,locGeom);this.updateMinDistance(locGeom,false);};jsts.operation.distance.DistanceOp.prototype.computeMinDistanceLines=function(lines0,lines1,locGeom){for(var i=0;i<lines0.length;i++){var line0=lines0[i];for(var j=0;j<lines1.length;j++){var line1=lines1[j];this.computeMinDistance(line0,line1,locGeom);if(this.minDistance<=this.terminateDistance)\nreturn;}}};jsts.operation.distance.DistanceOp.prototype.computeMinDistancePoints=function(points0,points1,locGeom){for(var i=0;i<points0.length;i++){var pt0=points0[i];for(var j=0;j<points1.length;j++){var pt1=points1[j];var dist=pt0.getCoordinate().distance(pt1.getCoordinate());if(dist<this.minDistance){this.minDistance=dist;locGeom[0]=new jsts.operation.distance.GeometryLocation(pt0,0,pt0.getCoordinate());locGeom[1]=new jsts.operation.distance.GeometryLocation(pt1,0,pt1.getCoordinate());}\nif(this.minDistance<=this.terminateDistance)\nreturn;}}};jsts.operation.distance.DistanceOp.prototype.computeMinDistanceLinesPoints=function(lines,points,locGeom){for(var i=0;i<lines.length;i++){var line=lines[i];for(var j=0;j<points.length;j++){var pt=points[j];this.computeMinDistance(line,pt,locGeom);if(this.minDistance<=this.terminateDistance)\nreturn;}}};jsts.operation.distance.DistanceOp.prototype.computeMinDistance2=function(line0,line1,locGeom){if(line1 instanceof jsts.geom.Point){this.computeMinDistance3(line0,line1,locGeom);return;}\nif(line0.getEnvelopeInternal().distance(line1.getEnvelopeInternal())>this.minDistance){return;}\nvar coord0=line0.getCoordinates();var coord1=line1.getCoordinates();for(var i=0;i<coord0.length-1;i++){for(var j=0;j<coord1.length-1;j++){var dist=jsts.algorithm.CGAlgorithms.distanceLineLine(coord0[i],coord0[i+1],coord1[j],coord1[j+1]);if(dist<this.minDistance){this.minDistance=dist;var seg0=new jsts.geom.LineSegment(coord0[i],coord0[i+1]);var seg1=new jsts.geom.LineSegment(coord1[j],coord1[j+1]);var closestPt=seg0.closestPoints(seg1);locGeom[0]=new jsts.operation.distance.GeometryLocation(line0,i,closestPt[0]);locGeom[1]=new jsts.operation.distance.GeometryLocation(line1,j,closestPt[1]);}\nif(this.minDistance<=this.terminateDistance){return;}}}};jsts.operation.distance.DistanceOp.prototype.computeMinDistance3=function(line,pt,locGeom){if(line.getEnvelopeInternal().distance(pt.getEnvelopeInternal())>this.minDistance){return;}\nvar coord0=line.getCoordinates();var coord=pt.getCoordinate();for(var i=0;i<coord0.length-1;i++){var dist=jsts.algorithm.CGAlgorithms.distancePointLine(coord,coord0[i],coord0[i+1]);if(dist<this.minDistance){this.minDistance=dist;var seg=new jsts.geom.LineSegment(coord0[i],coord0[i+1]);var segClosestPoint=seg.closestPoint(coord);locGeom[0]=new jsts.operation.distance.GeometryLocation(line,i,segClosestPoint);locGeom[1]=new jsts.operation.distance.GeometryLocation(pt,0,coord);}\nif(this.minDistance<=this.terminateDistance){return;}}};jsts.index.strtree.SIRtree=function(nodeCapacity){nodeCapacity=nodeCapacity||10;jsts.index.strtree.AbstractSTRtree.call(this,nodeCapacity);};jsts.index.strtree.SIRtree.prototype=new jsts.index.strtree.AbstractSTRtree();jsts.index.strtree.SIRtree.constructor=jsts.index.strtree.SIRtree;jsts.index.strtree.SIRtree.prototype.comperator={compare:function(o1,o2){return o1.getBounds().getCentre()-o2.getBounds().getCentre();}};jsts.index.strtree.SIRtree.prototype.intersectionOp={intersects:function(aBounds,bBounds){return aBounds.intersects(bBounds);}};jsts.index.strtree.SIRtree.prototype.createNode=function(level){var AbstractNode=function(level){jsts.index.strtree.AbstractNode.apply(this,arguments);};AbstractNode.prototype=new jsts.index.strtree.AbstractNode();AbstractNode.constructor=AbstractNode;AbstractNode.prototype.computeBounds=function(){var bounds=null,childBoundables=this.getChildBoundables(),childBoundable;for(var i=0,l=childBoundables.length;i<l;i++){childBoundable=childBoundables[i];if(bounds===null){bounds=new jsts.index.strtree.Interval(childBoundable.getBounds());}\nelse{bounds.expandToInclude(childBoundable.getBounds());}}\nreturn bounds;};return AbstractNode;};jsts.index.strtree.SIRtree.prototype.insert=function(x1,x2,item){jsts.index.strtree.AbstractSTRtree.prototype.insert(new jsts.index.strtree.Interval(Math.min(x1,x2),Math.max(x1,x2)),item);};jsts.index.strtree.SIRtree.prototype.query=function(x1,x2){x2=x2||x1;jsts.index.strtree.AbstractSTRtree.prototype.query(new jsts.index.strtree.Interval(Math.min(x1,x2),Math.max(x1,x2)));};jsts.index.strtree.SIRtree.prototype.getIntersectsOp=function(){return this.intersectionOp;};jsts.index.strtree.SIRtree.prototype.getComparator=function(){return this.comperator;};jsts.simplify.DouglasPeuckerSimplifier=function(inputGeom){this.inputGeom=inputGeom;this.isEnsureValidTopology=true;};jsts.simplify.DouglasPeuckerSimplifier.prototype.inputGeom=null;jsts.simplify.DouglasPeuckerSimplifier.prototype.distanceTolerance=null;jsts.simplify.DouglasPeuckerSimplifier.prototype.isEnsureValidTopology=null;jsts.simplify.DouglasPeuckerSimplifier.simplify=function(geom,distanceTolerance){var tss=new jsts.simplify.DouglasPeuckerSimplifier(geom);tss.setDistanceTolerance(distanceTolerance);return tss.getResultGeometry();};jsts.simplify.DouglasPeuckerSimplifier.prototype.setDistanceTolerance=function(distanceTolerance){if(distanceTolerance<0.0){throw\"Tolerance must be non-negative\";}\nthis.distanceTolerance=distanceTolerance;};jsts.simplify.DouglasPeuckerSimplifier.prototype.setEnsureValid=function(isEnsureValidTopology){this.isEnsureValidTopology=isEnsureValidTopology;};jsts.simplify.DouglasPeuckerSimplifier.prototype.getResultGeometry=function(){if(this.inputGeom.isEmpty()){return this.inputGeom.clone();}\nreturn(new jsts.simplify.DPTransformer(this.distanceTolerance,this.isEnsureValidTopology)).transform(this.inputGeom);};(function(){jsts.operation.predicate.RectangleContains=function(rectangle){this.rectEnv=rectangle.getEnvelopeInternal();}\njsts.operation.predicate.RectangleContains.contains=function(rectangle,b){var rc=new jsts.operation.predicate.RectangleContains(rectangle);return rc.contains(b);}\njsts.operation.predicate.RectangleContains.prototype.rectEnv=null;jsts.operation.predicate.RectangleContains.prototype.contains=function(geom){if(!this.rectEnv.contains(geom.getEnvelopeInternal()))\nreturn false;if(this.isContainedInBoundary(geom))\nreturn false;return true;}\njsts.operation.predicate.RectangleContains.prototype.isContainedInBoundary=function(geom){if(geom instanceof jsts.geom.Polygon)return false;if(geom instanceof jsts.geom.Point)return this.isPointContainedInBoundary(geom.getCoordinate());if(geom instanceof jsts.geom.LineString)return this.isLineStringContainedInBoundary(geom);for(var i=0;i<geom.getNumGeometries();i++){var comp=geom.getGeometryN(i);if(!this.isContainedInBoundary(comp))\nreturn false;}\nreturn true;}\njsts.operation.predicate.RectangleContains.prototype.isPointContainedInBoundary=function(pt){return pt.x==this.rectEnv.getMinX()||pt.x==this.rectEnv.getMaxX()||pt.y==this.rectEnv.getMinY()||pt.y==this.rectEnv.getMaxY();}\njsts.operation.predicate.RectangleContains.prototype.isLineStringContainedInBoundary=function(line){var seq=line.getCoordinateSequence();for(var i=0;i<seq.length-1;i++){var p0=seq[i];var p1=seq[i+1];if(!this.isLineSegmentContainedInBoundary(p0,p1))\nreturn false;}\nreturn true;}\njsts.operation.predicate.RectangleContains.prototype.isLineSegmentContainedInBoundary=function(p0,p1){if(p0.equals(p1))\nreturn this.isPointContainedInBoundary(p0);if(p0.x==p1.x){if(p0.x==this.rectEnv.getMinX()||p0.x==this.rectEnv.getMaxX())\nreturn true;}\nelse if(p0.y==p1.y){if(p0.y==this.rectEnv.getMinY()||p0.y==this.rectEnv.getMaxY())\nreturn true;}\nreturn false;}})();(function(){var Location=jsts.geom.Location;var Position=jsts.geomgraph.Position;jsts.geomgraph.Depth=function(){this.depth=[[],[]];for(var i=0;i<2;i++){for(var j=0;j<3;j++){this.depth[i][j]=jsts.geomgraph.Depth.NULL_VALUE;}}};jsts.geomgraph.Depth.NULL_VALUE=-1;jsts.geomgraph.Depth.depthAtLocation=function(location){if(location===Location.EXTERIOR)\nreturn 0;if(location===Location.INTERIOR)\nreturn 1;return jsts.geomgraph.Depth.NULL_VALUE;};jsts.geomgraph.Depth.prototype.depth=null;jsts.geomgraph.Depth.prototype.getDepth=function(geomIndex,posIndex){return this.depth[geomIndex][posIndex];};jsts.geomgraph.Depth.prototype.setDepth=function(geomIndex,posIndex,depthValue){this.depth[geomIndex][posIndex]=depthValue;};jsts.geomgraph.Depth.prototype.getLocation=function(geomIndex,posIndex){if(this.depth[geomIndex][posIndex]<=0)\nreturn Location.EXTERIOR;return Location.INTERIOR;};jsts.geomgraph.Depth.prototype.add=function(geomIndex,posIndex,location){if(location===Location.INTERIOR)\nthis.depth[geomIndex][posIndex]++;};jsts.geomgraph.Depth.prototype.isNull=function(){if(arguments.length>0){return this.isNull2.apply(this,arguments);}\nfor(var i=0;i<2;i++){for(var j=0;j<3;j++){if(this.depth[i][j]!==jsts.geomgraph.Depth.NULL_VALUE)\nreturn false;}}\nreturn true;};jsts.geomgraph.Depth.prototype.isNull2=function(geomIndex){if(arguments.length>1){return this.isNull3.apply(this,arguments);}\nreturn this.depth[geomIndex][1]==jsts.geomgraph.Depth.NULL_VALUE;};jsts.geomgraph.Depth.prototype.isNull3=function(geomIndex,posIndex){return this.depth[geomIndex][posIndex]==jsts.geomgraph.Depth.NULL_VALUE;};jsts.geomgraph.Depth.prototype.add=function(lbl){for(var i=0;i<2;i++){for(var j=1;j<3;j++){var loc=lbl.getLocation(i,j);if(loc===Location.EXTERIOR||loc===Location.INTERIOR){if(this.isNull(i,j)){this.depth[i][j]=jsts.geomgraph.Depth.depthAtLocation(loc);}else\nthis.depth[i][j]+=jsts.geomgraph.Depth.depthAtLocation(loc);}}}};jsts.geomgraph.Depth.prototype.getDelta=function(geomIndex){return this.depth[geomIndex][Position.RIGHT]-\nthis.depth[geomIndex][Position.LEFT];};jsts.geomgraph.Depth.prototype.normalize=function(){for(var i=0;i<2;i++){if(!this.isNull(i)){var minDepth=this.depth[i][1];if(this.depth[i][2]<minDepth)\nminDepth=this.depth[i][2];if(minDepth<0)\nminDepth=0;for(var j=1;j<3;j++){var newValue=0;if(this.depth[i][j]>minDepth)\nnewValue=1;this.depth[i][j]=newValue;}}}};jsts.geomgraph.Depth.prototype.toString=function(){return'A: '+this.depth[0][1]+','+this.depth[0][2]+' B: '+\nthis.depth[1][1]+','+this.depth[1][2];};})();jsts.algorithm.BoundaryNodeRule=function(){};jsts.algorithm.BoundaryNodeRule.prototype.isInBoundary=function(boundaryCount){throw new jsts.error.AbstractMethodInvocationError();};jsts.algorithm.Mod2BoundaryNodeRule=function(){};jsts.algorithm.Mod2BoundaryNodeRule.prototype=new jsts.algorithm.BoundaryNodeRule();jsts.algorithm.Mod2BoundaryNodeRule.prototype.isInBoundary=function(boundaryCount){return boundaryCount%2===1;};jsts.algorithm.BoundaryNodeRule.MOD2_BOUNDARY_RULE=new jsts.algorithm.Mod2BoundaryNodeRule();jsts.algorithm.BoundaryNodeRule.OGC_SFS_BOUNDARY_RULE=jsts.algorithm.BoundaryNodeRule.MOD2_BOUNDARY_RULE;jsts.operation.distance.GeometryLocation=function(component,segIndex,pt){this.component=component;this.segIndex=segIndex;this.pt=pt;};jsts.operation.distance.GeometryLocation.INSIDE_AREA=-1;jsts.operation.distance.GeometryLocation.prototype.component=null;jsts.operation.distance.GeometryLocation.prototype.segIndex=null;jsts.operation.distance.GeometryLocation.prototype.pt=null;jsts.operation.distance.GeometryLocation.prototype.getGeometryComponent=function(){return this.component;};jsts.operation.distance.GeometryLocation.prototype.getSegmentIndex=function(){return this.segIndex;};jsts.operation.distance.GeometryLocation.prototype.getCoordinate=function(){return this.pt;};jsts.operation.distance.GeometryLocation.prototype.isInsideArea=function(){return this.segIndex===jsts.operation.distance.GeometryLocation.INSIDE_AREA;};jsts.geom.util.PointExtracter=function(pts){this.pts=pts;};jsts.geom.util.PointExtracter.prototype=new jsts.geom.GeometryFilter();jsts.geom.util.PointExtracter.prototype.pts=null;jsts.geom.util.PointExtracter.getPoints=function(geom,list){if(list===undefined){list=[];}\nif(geom instanceof jsts.geom.Point){list.push(geom);}else if(geom instanceof jsts.geom.GeometryCollection||geom instanceof jsts.geom.MultiPoint||geom instanceof jsts.geom.MultiLineString||geom instanceof jsts.geom.MultiPolygon){geom.apply(new jsts.geom.util.PointExtracter(list));}\nreturn list;};jsts.geom.util.PointExtracter.prototype.filter=function(geom){if(geom instanceof jsts.geom.Point)\nthis.pts.push(geom);};(function(){var Location=jsts.geom.Location;jsts.operation.relate.RelateNodeGraph=function(){this.nodes=new jsts.geomgraph.NodeMap(new jsts.operation.relate.RelateNodeFactory());};jsts.operation.relate.RelateNodeGraph.prototype.nodes=null;jsts.operation.relate.RelateNodeGraph.prototype.build=function(geomGraph){this.computeIntersectionNodes(geomGraph,0);this.copyNodesAndLabels(geomGraph,0);var eeBuilder=new jsts.operation.relate.EdgeEndBuilder();var eeList=eeBuilder.computeEdgeEnds(geomGraph.getEdgeIterator());this.insertEdgeEnds(eeList);};jsts.operation.relate.RelateNodeGraph.prototype.computeIntersectionNodes=function(geomGraph,argIndex){for(var edgeIt=geomGraph.getEdgeIterator();edgeIt.hasNext();){var e=edgeIt.next();var eLoc=e.getLabel().getLocation(argIndex);for(var eiIt=e.getEdgeIntersectionList().iterator();eiIt.hasNext();){var ei=eiIt.next();var n=this.nodes.addNode(ei.coord);if(eLoc===Location.BOUNDARY)\nn.setLabelBoundary(argIndex);else{if(n.getLabel().isNull(argIndex))\nn.setLabel(argIndex,Location.INTERIOR);}}}};jsts.operation.relate.RelateNodeGraph.prototype.copyNodesAndLabels=function(geomGraph,argIndex){for(var nodeIt=geomGraph.getNodeIterator();nodeIt.hasNext();){var graphNode=nodeIt.next();var newNode=this.nodes.addNode(graphNode.getCoordinate());newNode.setLabel(argIndex,graphNode.getLabel().getLocation(argIndex));}};jsts.operation.relate.RelateNodeGraph.prototype.insertEdgeEnds=function(ee){for(var i=ee.iterator();i.hasNext();){var e=i.next();this.nodes.add(e);}};jsts.operation.relate.RelateNodeGraph.prototype.getNodeIterator=function(){return this.nodes.iterator();};})();jsts.geomgraph.index.SimpleSweepLineIntersector=function(){};jsts.geomgraph.index.SimpleSweepLineIntersector.prototype=new jsts.geomgraph.index.EdgeSetIntersector();jsts.geomgraph.index.SimpleSweepLineIntersector.prototype.events=[];jsts.geomgraph.index.SimpleSweepLineIntersector.prototype.nOverlaps=null;jsts.geomgraph.index.SimpleSweepLineIntersector.prototype.computeIntersections=function(edges,si,testAllSegments){if(si instanceof javascript.util.List){this.computeIntersections2.apply(this,arguments);return;}\nif(testAllSegments){this.add(edges,null);}else{this.add(edges);}\nthis.computeIntersections3(si);};jsts.geomgraph.index.SimpleSweepLineIntersector.prototype.computeIntersections2=function(edges0,edges1,si){this.add(edges0,edges0);this.add(edges1,edges1);this.computeIntersections3(si);};jsts.geomgraph.index.SimpleSweepLineIntersector.prototype.add=function(edge,edgeSet){if(edge instanceof javascript.util.List){this.add2.apply(this,arguments);return;}\nvar pts=edge.getCoordinates();for(var i=0;i<pts.length-1;i++){var ss=new jsts.geomgraph.index.SweepLineSegment(edge,i);var insertEvent=new jsts.geomgraph.index.SweepLineEvent(ss.getMinX(),ss,edgeSet);this.events.push(insertEvent);this.events.push(new jsts.geomgraph.index.SweepLineEvent(ss.getMaxX(),insertEvent));}};jsts.geomgraph.index.SimpleSweepLineIntersector.prototype.add2=function(edges,edgeSet){for(var i=edges.iterator();i.hasNext();){var edge=i.next();if(edgeSet){this.add(edge,edgeSet);}else{this.add(edge,edge);}}};jsts.geomgraph.index.SimpleSweepLineIntersector.prototype.prepareEvents=function(){this.events.sort(function(a,b){return a.compareTo(b);});for(var i=0;i<this.events.length;i++){var ev=this.events[i];if(ev.isDelete()){ev.getInsertEvent().setDeleteEventIndex(i);}}};jsts.geomgraph.index.SimpleSweepLineIntersector.prototype.computeIntersections3=function(si){this.nOverlaps=0;this.prepareEvents();for(var i=0;i<this.events.length;i++){var ev=this.events[i];if(ev.isInsert()){this.processOverlaps(i,ev.getDeleteEventIndex(),ev,si);}}};jsts.geomgraph.index.SimpleSweepLineIntersector.prototype.processOverlaps=function(start,end,ev0,si){var ss0=ev0.getObject();for(var i=start;i<end;i++){var ev1=this.events[i];if(ev1.isInsert()){var ss1=ev1.getObject();if(!ev0.isSameLabel(ev1)){ss0.computeIntersections(ss1,si);this.nOverlaps++;}}}}\njsts.triangulate.VoronoiDiagramBuilder=function(){this.siteCoords=null;this.tolerance=0.0;this.subdiv=null;this.clipEnv=null;this.diagramEnv=null;};jsts.triangulate.VoronoiDiagramBuilder.prototype.setSites=function(){var arg=arguments[0];if(arg instanceof jsts.geom.Geometry||arg instanceof jsts.geom.Coordinate||arg instanceof jsts.geom.Point||arg instanceof jsts.geom.MultiPoint||arg instanceof jsts.geom.LineString||arg instanceof jsts.geom.MultiLineString||arg instanceof jsts.geom.LinearRing||arg instanceof jsts.geom.Polygon||arg instanceof jsts.geom.MultiPolygon){this.setSitesByGeometry(arg);}else{this.setSitesByArray(arg);}};jsts.triangulate.VoronoiDiagramBuilder.prototype.setSitesByGeometry=function(geom){this.siteCoords=jsts.triangulate.DelaunayTriangulationBuilder.extractUniqueCoordinates(geom);};jsts.triangulate.VoronoiDiagramBuilder.prototype.setSitesByArray=function(coords){this.siteCoords=jsts.triangulate.DelaunayTriangulationBuilder.unique(coords);};jsts.triangulate.VoronoiDiagramBuilder.prototype.setClipEnvelope=function(clipEnv){this.clipEnv=clipEnv;};jsts.triangulate.VoronoiDiagramBuilder.prototype.setTolerance=function(tolerance)\n{this.tolerance=tolerance;};jsts.triangulate.VoronoiDiagramBuilder.prototype.create=function(){if(this.subdiv!==null){return;}\nvar siteEnv,expandBy,vertices,triangulator;siteEnv=jsts.triangulate.DelaunayTriangulationBuilder.envelope(this.siteCoords);this.diagramEnv=siteEnv;expandBy=Math.max(this.diagramEnv.getWidth(),this.diagramEnv.getHeight());this.diagramEnv.expandBy(expandBy);if(this.clipEnv!==null){this.diagramEnv.expandToInclude(this.clipEnv);}\nvertices=jsts.triangulate.DelaunayTriangulationBuilder.toVertices(this.siteCoords);this.subdiv=new jsts.triangulate.quadedge.QuadEdgeSubdivision(siteEnv,this.tolerance);triangulator=new jsts.triangulate.IncrementalDelaunayTriangulator(this.subdiv);triangulator.insertSites(vertices);};jsts.triangulate.VoronoiDiagramBuilder.prototype.getSubdivision=function(){this.create();return this.subdiv;};jsts.triangulate.VoronoiDiagramBuilder.prototype.getDiagram=function(geomFact){this.create();var polys=this.subdiv.getVoronoiDiagram(geomFact);return this.clipGeometryCollection(polys,this.diagramEnv);};jsts.triangulate.VoronoiDiagramBuilder.prototype.clipGeometryCollection=function(geom,clipEnv){var clipPoly,clipped,i,il,g,result;clipPoly=geom.getFactory().toGeometry(clipEnv);clipped=[];i=0,il=geom.getNumGeometries();for(i;i<il;i++){g=geom.getGeometryN(i);result=null;if(clipEnv.contains(g.getEnvelopeInternal())){result=g;}\nelse if(clipEnv.intersects(g.getEnvelopeInternal())){result=clipPoly.intersection(g);}\nif(result!==null&&!result.isEmpty()){clipped.push(result);}}\nreturn geom.getFactory().createGeometryCollection(clipped);};jsts.operation.valid.IndexedNestedRingTester=function(graph){this.graph=graph;this.rings=new javascript.util.ArrayList();this.totalEnv=new jsts.geom.Envelope();this.index=null;this.nestedPt=null;};jsts.operation.valid.IndexedNestedRingTester.prototype.getNestedPoint=function(){return this.nestedPt;};jsts.operation.valid.IndexedNestedRingTester.prototype.add=function(ring){this.rings.add(ring);this.totalEnv.expandToInclude(ring.getEnvelopeInternal());};jsts.operation.valid.IndexedNestedRingTester.prototype.isNonNested=function(){this.buildIndex();for(var i=0;i<this.rings.size();i++){var innerRing=this.rings.get(i);var innerRingPts=innerRing.getCoordinates();var results=this.index.query(innerRing.getEnvelopeInternal());for(var j=0;j<results.length;j++){var searchRing=results[j];var searchRingPts=searchRing.getCoordinates();if(innerRing==searchRing){continue;}\nif(!innerRing.getEnvelopeInternal().intersects(searchRing.getEnvelopeInternal())){continue;}\nvar innerRingPt=jsts.operation.valid.IsValidOp.findPtNotNode(innerRingPts,searchRing,this.graph);if(innerRingPt==null){continue;}\nvar isInside=jsts.algorithm.CGAlgorithms.isPointInRing(innerRingPt,searchRingPts);if(isInside){this.nestedPt=innerRingPt;return false;}}}\nreturn true;};jsts.operation.valid.IndexedNestedRingTester.prototype.buildIndex=function(){this.index=new jsts.index.strtree.STRtree();for(var i=0;i<this.rings.size();i++){var ring=this.rings.get(i);var env=ring.getEnvelopeInternal();this.index.insert(env,ring);}};jsts.geomgraph.index.MonotoneChain=function(mce,chainIndex){this.mce=mce;this.chainIndex=chainIndex;};jsts.geomgraph.index.MonotoneChain.prototype.mce=null;jsts.geomgraph.index.MonotoneChain.prototype.chainIndex=null;jsts.geomgraph.index.MonotoneChain.prototype.computeIntersections=function(mc,si){this.mce.computeIntersectsForChain(this.chainIndex,mc.mce,mc.chainIndex,si);};jsts.noding.SegmentNode=function(segString,coord,segmentIndex,segmentOctant){this.segString=segString;this.coord=new jsts.geom.Coordinate(coord);this.segmentIndex=segmentIndex;this.segmentOctant=segmentOctant;this._isInterior=!coord.equals2D(segString.getCoordinate(segmentIndex));};jsts.noding.SegmentNode.prototype.segString=null;jsts.noding.SegmentNode.prototype.coord=null;jsts.noding.SegmentNode.prototype.segmentIndex=null;jsts.noding.SegmentNode.prototype.segmentOctant=null;jsts.noding.SegmentNode.prototype._isInterior=null;jsts.noding.SegmentNode.prototype.getCoordinate=function(){return this.coord;};jsts.noding.SegmentNode.prototype.isInterior=function(){return this._isInterior;};jsts.noding.SegmentNode.prototype.isEndPoint=function(maxSegmentIndex){if(this.segmentIndex===0&&!this._isInterior)return true;if(this.segmentIndex===this.maxSegmentIndex)return true;return false;};jsts.noding.SegmentNode.prototype.compareTo=function(obj){var other=obj;if(this.segmentIndex<other.segmentIndex)return-1;if(this.segmentIndex>other.segmentIndex)return 1;if(this.coord.equals2D(other.coord))return 0;return jsts.noding.SegmentPointComparator.compare(this.segmentOctant,this.coord,other.coord);};(function(){jsts.io.GeoJSONWriter=function(){this.parser=new jsts.io.GeoJSONParser(this.geometryFactory);};jsts.io.GeoJSONWriter.prototype.write=function(geometry){var geoJson=this.parser.write(geometry);return geoJson;};})();jsts.io.OpenLayersParser=function(geometryFactory){this.geometryFactory=geometryFactory||new jsts.geom.GeometryFactory();};jsts.io.OpenLayersParser.prototype.read=function(geometry){if(geometry.CLASS_NAME==='OpenLayers.Geometry.Point'){return this.convertFromPoint(geometry);}else if(geometry.CLASS_NAME==='OpenLayers.Geometry.LineString'){return this.convertFromLineString(geometry);}else if(geometry.CLASS_NAME==='OpenLayers.Geometry.LinearRing'){return this.convertFromLinearRing(geometry);}else if(geometry.CLASS_NAME==='OpenLayers.Geometry.Polygon'){return this.convertFromPolygon(geometry);}else if(geometry.CLASS_NAME==='OpenLayers.Geometry.MultiPoint'){return this.convertFromMultiPoint(geometry);}else if(geometry.CLASS_NAME==='OpenLayers.Geometry.MultiLineString'){return this.convertFromMultiLineString(geometry);}else if(geometry.CLASS_NAME==='OpenLayers.Geometry.MultiPolygon'){return this.convertFromMultiPolygon(geometry);}else if(geometry.CLASS_NAME==='OpenLayers.Geometry.Collection'){return this.convertFromCollection(geometry);}};jsts.io.OpenLayersParser.prototype.convertFromPoint=function(point){return this.geometryFactory.createPoint(new jsts.geom.Coordinate(point.x,point.y));};jsts.io.OpenLayersParser.prototype.convertFromLineString=function(lineString){var i;var coordinates=[];for(i=0;i<lineString.components.length;i++){coordinates.push(new jsts.geom.Coordinate(lineString.components[i].x,lineString.components[i].y));}\nreturn this.geometryFactory.createLineString(coordinates);};jsts.io.OpenLayersParser.prototype.convertFromLinearRing=function(linearRing){var i;var coordinates=[];for(i=0;i<linearRing.components.length;i++){coordinates.push(new jsts.geom.Coordinate(linearRing.components[i].x,linearRing.components[i].y));}\nreturn this.geometryFactory.createLinearRing(coordinates);};jsts.io.OpenLayersParser.prototype.convertFromPolygon=function(polygon){var i;var shell=null;var holes=[];for(i=0;i<polygon.components.length;i++){var linearRing=this.convertFromLinearRing(polygon.components[i]);if(i===0){shell=linearRing;}else{holes.push(linearRing);}}\nreturn this.geometryFactory.createPolygon(shell,holes);};jsts.io.OpenLayersParser.prototype.convertFromMultiPoint=function(multiPoint){var i;var points=[];for(i=0;i<multiPoint.components.length;i++){points.push(this.convertFromPoint(multiPoint.components[i]));}\nreturn this.geometryFactory.createMultiPoint(points);};jsts.io.OpenLayersParser.prototype.convertFromMultiLineString=function(multiLineString){var i;var lineStrings=[];for(i=0;i<multiLineString.components.length;i++){lineStrings.push(this.convertFromLineString(multiLineString.components[i]));}\nreturn this.geometryFactory.createMultiLineString(lineStrings);};jsts.io.OpenLayersParser.prototype.convertFromMultiPolygon=function(multiPolygon){var i;var polygons=[];for(i=0;i<multiPolygon.components.length;i++){polygons.push(this.convertFromPolygon(multiPolygon.components[i]));}\nreturn this.geometryFactory.createMultiPolygon(polygons);};jsts.io.OpenLayersParser.prototype.convertFromCollection=function(collection){var i;var geometries=[];for(i=0;i<collection.components.length;i++){geometries.push(this.read(collection.components[i]));}\nreturn this.geometryFactory.createGeometryCollection(geometries);};jsts.io.OpenLayersParser.prototype.write=function(geometry){if(geometry.CLASS_NAME==='jsts.geom.Point'){return this.convertToPoint(geometry.coordinate);}else if(geometry.CLASS_NAME==='jsts.geom.LineString'){return this.convertToLineString(geometry);}else if(geometry.CLASS_NAME==='jsts.geom.LinearRing'){return this.convertToLinearRing(geometry);}else if(geometry.CLASS_NAME==='jsts.geom.Polygon'){return this.convertToPolygon(geometry);}else if(geometry.CLASS_NAME==='jsts.geom.MultiPoint'){return this.convertToMultiPoint(geometry);}else if(geometry.CLASS_NAME==='jsts.geom.MultiLineString'){return this.convertToMultiLineString(geometry);}else if(geometry.CLASS_NAME==='jsts.geom.MultiPolygon'){return this.convertToMultiPolygon(geometry);}else if(geometry.CLASS_NAME==='jsts.geom.GeometryCollection'){return this.convertToCollection(geometry);}};jsts.io.OpenLayersParser.prototype.convertToPoint=function(coordinate){return new OpenLayers.Geometry.Point(coordinate.x,coordinate.y);};jsts.io.OpenLayersParser.prototype.convertToLineString=function(lineString){var i;var points=[];for(i=0;i<lineString.points.length;i++){var coordinate=lineString.points[i];points.push(this.convertToPoint(coordinate));}\nreturn new OpenLayers.Geometry.LineString(points);};jsts.io.OpenLayersParser.prototype.convertToLinearRing=function(linearRing){var i;var points=[];for(i=0;i<linearRing.points.length;i++){var coordinate=linearRing.points[i];points.push(this.convertToPoint(coordinate));}\nreturn new OpenLayers.Geometry.LinearRing(points);};jsts.io.OpenLayersParser.prototype.convertToPolygon=function(polygon){var i;var rings=[];rings.push(this.convertToLinearRing(polygon.shell));for(i=0;i<polygon.holes.length;i++){var ring=polygon.holes[i];rings.push(this.convertToLinearRing(ring));}\nreturn new OpenLayers.Geometry.Polygon(rings);};jsts.io.OpenLayersParser.prototype.convertToMultiPoint=function(multiPoint){var i;var points=[];for(i=0;i<multiPoint.geometries.length;i++){var coordinate=multiPoint.geometries[i].coordinate;points.push(new OpenLayers.Geometry.Point(coordinate.x,coordinate.y));}\nreturn new OpenLayers.Geometry.MultiPoint(points);};jsts.io.OpenLayersParser.prototype.convertToMultiLineString=function(multiLineString){var i;var lineStrings=[];for(i=0;i<multiLineString.geometries.length;i++){lineStrings.push(this.convertToLineString(multiLineString.geometries[i]));}\nreturn new OpenLayers.Geometry.MultiLineString(lineStrings);};jsts.io.OpenLayersParser.prototype.convertToMultiPolygon=function(multiPolygon){var i;var polygons=[];for(i=0;i<multiPolygon.geometries.length;i++){polygons.push(this.convertToPolygon(multiPolygon.geometries[i]));}\nreturn new OpenLayers.Geometry.MultiPolygon(polygons);};jsts.io.OpenLayersParser.prototype.convertToCollection=function(geometryCollection){var i;var geometries=[];for(i=0;i<geometryCollection.geometries.length;i++){var geometry=geometryCollection.geometries[i];var geometryOpenLayers=this.write(geometry);geometries.push(geometryOpenLayers);}\nreturn new OpenLayers.Geometry.Collection(geometries);};jsts.index.quadtree.Quadtree=function(){this.root=new jsts.index.quadtree.Root();this.minExtent=1.0;};jsts.index.quadtree.Quadtree.ensureExtent=function(itemEnv,minExtent){var minx,maxx,miny,maxy;minx=itemEnv.getMinX();maxx=itemEnv.getMaxX();miny=itemEnv.getMinY();maxy=itemEnv.getMaxY();if(minx!==maxx&&miny!==maxy){return itemEnv;}\nif(minx===maxx){minx=minx-(minExtent/2.0);maxx=minx+(minExtent/2.0);}\nif(miny===maxy){miny=miny-(minExtent/2.0);maxy=miny+(minExtent/2.0);}\nreturn new jsts.geom.Envelope(minx,maxx,miny,maxy);};jsts.index.quadtree.Quadtree.prototype.depth=function(){return this.root.depth();};jsts.index.quadtree.Quadtree.prototype.size=function(){return this.root.size();};jsts.index.quadtree.Quadtree.prototype.insert=function(itemEnv,item){this.collectStats(itemEnv);var insertEnv=jsts.index.quadtree.Quadtree.ensureExtent(itemEnv,this.minExtent);this.root.insert(insertEnv,item);};jsts.index.quadtree.Quadtree.prototype.remove=function(itemEnv,item){var posEnv=jsts.index.quadtree.Quadtree.ensureExtent(itemEnv,this.minExtent);return this.root.remove(posEnv,item);};jsts.index.quadtree.Quadtree.prototype.query=function(){if(arguments.length===1){return jsts.index.quadtree.Quadtree.prototype.queryByEnvelope.apply(this,arguments);}else{jsts.index.quadtree.Quadtree.prototype.queryWithVisitor.apply(this,arguments);}};jsts.index.quadtree.Quadtree.prototype.queryByEnvelope=function(searchEnv){var visitor=new jsts.index.ArrayListVisitor();this.query(searchEnv,visitor);return visitor.getItems();};jsts.index.quadtree.Quadtree.prototype.queryWithVisitor=function(searchEnv,visitor){this.root.visit(searchEnv,visitor);};jsts.index.quadtree.Quadtree.prototype.queryAll=function(){var foundItems=[];foundItems=this.root.addAllItems(foundItems);return foundItems;};jsts.index.quadtree.Quadtree.prototype.collectStats=function(itemEnv){var delX=itemEnv.getWidth();if(delX<this.minExtent&&delX>0.0){this.minExtent=delX;}\nvar delY=itemEnv.getHeight();if(delY<this.minExtent&&delY>0.0){this.minExtent=delY;}};jsts.operation.relate.RelateNodeFactory=function(){};jsts.operation.relate.RelateNodeFactory.prototype=new jsts.geomgraph.NodeFactory();jsts.operation.relate.RelateNodeFactory.prototype.createNode=function(coord){return new jsts.operation.relate.RelateNode(coord,new jsts.operation.relate.EdgeEndBundleStar());};jsts.index.quadtree.Key=function(itemEnv){this.pt=new jsts.geom.Coordinate();this.level=0;this.env=null;this.computeKey(itemEnv);};jsts.index.quadtree.Key.computeQuadLevel=function(env){var dx,dy,dMax,level;dx=env.getWidth();dy=env.getHeight();dMax=dx>dy?dx:dy;level=jsts.index.DoubleBits.exponent(dMax)+1;return level;};jsts.index.quadtree.Key.prototype.getPoint=function(){return this.pt;};jsts.index.quadtree.Key.prototype.getLevel=function(){return this.level;};jsts.index.quadtree.Key.prototype.getEnvelope=function(){return this.env;};jsts.index.quadtree.Key.prototype.getCentre=function(){var x,y;x=(this.env.getMinX()+this.env.getMaxX())/2;y=(this.env.getMinY()+this.env.getMaxY())/2;return new jsts.geom.Coordinate(x,y);};jsts.index.quadtree.Key.prototype.computeKey=function(){if(arguments[0]instanceof jsts.geom.Envelope){this.computeKeyFromEnvelope(arguments[0]);}else{this.computeKeyFromLevel(arguments[0],arguments[1]);}};jsts.index.quadtree.Key.prototype.computeKeyFromEnvelope=function(env){this.level=jsts.index.quadtree.Key.computeQuadLevel(env);this.env=new jsts.geom.Envelope();this.computeKey(this.level,env);while(!this.env.contains(env)){this.level+=1;this.computeKey(this.level,env);}};jsts.index.quadtree.Key.prototype.computeKeyFromLevel=function(level,env){var quadSize=jsts.index.DoubleBits.powerOf2(level);this.pt.x=Math.floor(env.getMinX()/quadSize)*quadSize;this.pt.y=Math.floor(env.getMinY()/quadSize)*quadSize;this.env.init(this.pt.x,this.pt.x+quadSize,this.pt.y,this.pt.y+\nquadSize);};jsts.geom.CoordinateArrays=function(){throw new jsts.error.AbstractMethodInvocationError();};jsts.geom.CoordinateArrays.copyDeep=function(){if(arguments.length===1){return jsts.geom.CoordinateArrays.copyDeep1(arguments[0]);}else if(arguments.length===5){jsts.geom.CoordinateArrays.copyDeep2(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4]);}};jsts.geom.CoordinateArrays.copyDeep1=function(coordinates){var copy=[];for(var i=0;i<coordinates.length;i++){copy[i]=new jsts.geom.Coordinate(coordinates[i]);}\nreturn copy;};jsts.geom.CoordinateArrays.copyDeep2=function(src,srcStart,dest,destStart,length){for(var i=0;i<length;i++){dest[destStart+i]=new jsts.geom.Coordinate(src[srcStart+i]);}};jsts.geom.CoordinateArrays.removeRepeatedPoints=function(coord){var coordList;if(!this.hasRepeatedPoints(coord)){return coord;}\ncoordList=new jsts.geom.CoordinateList(coord,false);return coordList.toCoordinateArray();};jsts.geom.CoordinateArrays.hasRepeatedPoints=function(coord){var i;for(i=1;i<coord.length;i++){if(coord[i-1].equals(coord[i])){return true;}}\nreturn false;};jsts.geom.CoordinateArrays.ptNotInList=function(testPts,pts){for(var i=0;i<testPts.length;i++){var testPt=testPts[i];if(jsts.geom.CoordinateArrays.indexOf(testPt,pts)<0)\nreturn testPt;}\nreturn null;};jsts.geom.CoordinateArrays.increasingDirection=function(pts){for(var i=0;i<parseInt(pts.length/2);i++){var j=pts.length-1-i;var comp=pts[i].compareTo(pts[j]);if(comp!=0)\nreturn comp;}\nreturn 1;};jsts.geom.CoordinateArrays.minCoordinate=function(coordinates){var minCoord=null;for(var i=0;i<coordinates.length;i++){if(minCoord===null||minCoord.compareTo(coordinates[i])>0){minCoord=coordinates[i];}}\nreturn minCoord;};jsts.geom.CoordinateArrays.scroll=function(coordinates,firstCoordinate){var i=jsts.geom.CoordinateArrays.indexOf(firstCoordinate,coordinates);if(i<0)\nreturn;var newCoordinates=coordinates.slice(i).concat(coordinates.slice(0,i));for(i=0;i<newCoordinates.length;i++){coordinates[i]=newCoordinates[i];}};jsts.geom.CoordinateArrays.indexOf=function(coordinate,coordinates){for(var i=0;i<coordinates.length;i++){if(coordinate.equals(coordinates[i])){return i;}}\nreturn-1;};jsts.operation.overlay.MinimalEdgeRing=function(start,geometryFactory){jsts.geomgraph.EdgeRing.call(this,start,geometryFactory);};jsts.operation.overlay.MinimalEdgeRing.prototype=new jsts.geomgraph.EdgeRing();jsts.operation.overlay.MinimalEdgeRing.constructor=jsts.operation.overlay.MinimalEdgeRing;jsts.operation.overlay.MinimalEdgeRing.prototype.getNext=function(de){return de.getNextMin();};jsts.operation.overlay.MinimalEdgeRing.prototype.setEdgeRing=function(de,er){de.setMinEdgeRing(er);};jsts.triangulate.DelaunayTriangulationBuilder=function(){this.siteCoords=null;this.tolerance=0.0;this.subdiv=null;};jsts.triangulate.DelaunayTriangulationBuilder.extractUniqueCoordinates=function(geom){if(geom===undefined||geom===null){return new jsts.geom.CoordinateList([],false).toArray();}\nvar coords=geom.getCoordinates();return jsts.triangulate.DelaunayTriangulationBuilder.unique(coords);};jsts.triangulate.DelaunayTriangulationBuilder.unique=function(coords){coords.sort(function(a,b){return a.compareTo(b);});var coordList=new jsts.geom.CoordinateList(coords,false);return coordList.toArray();};jsts.triangulate.DelaunayTriangulationBuilder.toVertices=function(coords){var verts=new Array(coords.length),i=0,il=coords.length,coord;for(i;i<il;i++){coord=coords[i];verts[i]=new jsts.triangulate.quadedge.Vertex(coord);}\nreturn verts;};jsts.triangulate.DelaunayTriangulationBuilder.envelope=function(coords){var env=new jsts.geom.Envelope(),i=0,il=coords.length;for(i;i<il;i++){env.expandToInclude(coords[i]);}\nreturn env;};jsts.triangulate.DelaunayTriangulationBuilder.prototype.setSites=function(){var arg=arguments[0];if(arg instanceof jsts.geom.Geometry||arg instanceof jsts.geom.Coordinate||arg instanceof jsts.geom.Point||arg instanceof jsts.geom.MultiPoint||arg instanceof jsts.geom.LineString||arg instanceof jsts.geom.MultiLineString||arg instanceof jsts.geom.LinearRing||arg instanceof jsts.geom.Polygon||arg instanceof jsts.geom.MultiPolygon){this.setSitesFromGeometry(arg);}else{this.setSitesFromCollection(arg);}};jsts.triangulate.DelaunayTriangulationBuilder.prototype.setSitesFromGeometry=function(geom){this.siteCoords=jsts.triangulate.DelaunayTriangulationBuilder.extractUniqueCoordinates(geom);};jsts.triangulate.DelaunayTriangulationBuilder.prototype.setSitesFromCollection=function(coords){this.siteCoords=jsts.triangulate.DelaunayTriangulationBuilder.unique(coords);};jsts.triangulate.DelaunayTriangulationBuilder.prototype.setTolerance=function(tolerance){this.tolerance=tolerance;};jsts.triangulate.DelaunayTriangulationBuilder.prototype.create=function(){if(this.subdiv===null){var siteEnv,vertices,triangulator;siteEnv=jsts.triangulate.DelaunayTriangulationBuilder.envelope(this.siteCoords);vertices=jsts.triangulate.DelaunayTriangulationBuilder.toVertices(this.siteCoords);this.subdiv=new jsts.triangulate.quadedge.QuadEdgeSubdivision(siteEnv,this.tolerance);triangulator=new jsts.triangulate.IncrementalDelaunayTriangulator(this.subdiv);triangulator.insertSites(vertices);}};jsts.triangulate.DelaunayTriangulationBuilder.prototype.getSubdivision=function(){this.create();return this.subdiv;};jsts.triangulate.DelaunayTriangulationBuilder.prototype.getEdges=function(geomFact){this.create();return this.subdiv.getEdges(geomFact);};jsts.triangulate.DelaunayTriangulationBuilder.prototype.getTriangles=function(geomFact){this.create();return this.subdiv.getTriangles(geomFact);};jsts.algorithm.RayCrossingCounter=function(p){this.p=p;};jsts.algorithm.RayCrossingCounter.locatePointInRing=function(p,ring){var counter=new jsts.algorithm.RayCrossingCounter(p);for(var i=1;i<ring.length;i++){var p1=ring[i];var p2=ring[i-1];counter.countSegment(p1,p2);if(counter.isOnSegment())\nreturn counter.getLocation();}\nreturn counter.getLocation();};jsts.algorithm.RayCrossingCounter.prototype.p=null;jsts.algorithm.RayCrossingCounter.prototype.crossingCount=0;jsts.algorithm.RayCrossingCounter.prototype.isPointOnSegment=false;jsts.algorithm.RayCrossingCounter.prototype.countSegment=function(p1,p2){if(p1.x<this.p.x&&p2.x<this.p.x)\nreturn;if(this.p.x==p2.x&&this.p.y===p2.y){this.isPointOnSegment=true;return;}\nif(p1.y===this.p.y&&p2.y===this.p.y){var minx=p1.x;var maxx=p2.x;if(minx>maxx){minx=p2.x;maxx=p1.x;}\nif(this.p.x>=minx&&this.p.x<=maxx){this.isPointOnSegment=true;}\nreturn;}\nif(((p1.y>this.p.y)&&(p2.y<=this.p.y))||((p2.y>this.p.y)&&(p1.y<=this.p.y))){var x1=p1.x-this.p.x;var y1=p1.y-this.p.y;var x2=p2.x-this.p.x;var y2=p2.y-this.p.y;var xIntSign=jsts.algorithm.RobustDeterminant.signOfDet2x2(x1,y1,x2,y2);if(xIntSign===0.0){this.isPointOnSegment=true;return;}\nif(y2<y1)\nxIntSign=-xIntSign;if(xIntSign>0.0){this.crossingCount++;}}};jsts.algorithm.RayCrossingCounter.prototype.isOnSegment=function(){return jsts.geom.isPointOnSegment;};jsts.algorithm.RayCrossingCounter.prototype.getLocation=function(){if(this.isPointOnSegment)\nreturn jsts.geom.Location.BOUNDARY;if((this.crossingCount%2)===1){return jsts.geom.Location.INTERIOR;}\nreturn jsts.geom.Location.EXTERIOR;};jsts.algorithm.RayCrossingCounter.prototype.isPointInPolygon=function(){return this.getLocation()!==jsts.geom.Location.EXTERIOR;};jsts.operation.BoundaryOp=function(geom,bnRule){this.geom=geom;this.geomFact=geom.getFactory();this.bnRule=bnRule||jsts.algorithm.BoundaryNodeRule.MOD2_BOUNDARY_RULE;};jsts.operation.BoundaryOp.prototype.geom=null;jsts.operation.BoundaryOp.prototype.geomFact=null;jsts.operation.BoundaryOp.prototype.bnRule=null;jsts.operation.BoundaryOp.prototype.getBoundary=function(){if(this.geom instanceof jsts.geom.LineString)return this.boundaryLineString(this.geom);if(this.geom instanceof jsts.geom.MultiLineString)return this.boundaryMultiLineString(this.geom);return this.geom.getBoundary();};jsts.operation.BoundaryOp.prototype.getEmptyMultiPoint=function(){return this.geomFact.createMultiPoint(null);};jsts.operation.BoundaryOp.prototype.boundaryMultiLineString=function(mLine){if(this.geom.isEmpty()){return this.getEmptyMultiPoint();}\nvar bdyPts=this.computeBoundaryCoordinates(mLine);if(bdyPts.length==1){return this.geomFact.createPoint(bdyPts[0]);}\nreturn this.geomFact.createMultiPoint(bdyPts);};jsts.operation.BoundaryOp.prototype.endpoints=null;jsts.operation.BoundaryOp.prototype.computeBoundaryCoordinates=function(mLine){var i,line,endpoint,bdyPts=[];this.endpoints=[];for(i=0;i<mLine.getNumGeometries();i++){line=mLine.getGeometryN(i);if(line.getNumPoints()==0)\ncontinue;this.addEndpoint(line.getCoordinateN(0));this.addEndpoint(line.getCoordinateN(line.getNumPoints()-1));}\nfor(i=0;i<this.endpoints.length;i++){endpoint=this.endpoints[i];if(this.bnRule.isInBoundary(endpoint.count)){bdyPts.push(endpoint.coordinate);}}\nreturn bdyPts;};jsts.operation.BoundaryOp.prototype.addEndpoint=function(pt){var i,endpoint,found=false;for(i=0;i<this.endpoints.length;i++){endpoint=this.endpoints[i];if(endpoint.coordinate.equals(pt)){found=true;break;}}\nif(!found){endpoint={};endpoint.coordinate=pt;endpoint.count=0;this.endpoints.push(endpoint);}\nendpoint.count++;};jsts.operation.BoundaryOp.prototype.boundaryLineString=function(line){if(this.geom.isEmpty()){return this.getEmptyMultiPoint();}\nif(line.isClosed()){var closedEndpointOnBoundary=this.bnRule.isInBoundary(2);if(closedEndpointOnBoundary){return line.getStartPoint();}\nelse{return this.geomFact.createMultiPoint(null);}}\nreturn this.geomFact.createMultiPoint([line.getStartPoint(),line.getEndPoint()]);};jsts.operation.buffer.OffsetCurveSetBuilder=function(inputGeom,distance,curveBuilder){this.inputGeom=inputGeom;this.distance=distance;this.curveBuilder=curveBuilder;this.curveList=new javascript.util.ArrayList();};jsts.operation.buffer.OffsetCurveSetBuilder.prototype.inputGeom=null;jsts.operation.buffer.OffsetCurveSetBuilder.prototype.distance=null;jsts.operation.buffer.OffsetCurveSetBuilder.prototype.curveBuilder=null;jsts.operation.buffer.OffsetCurveSetBuilder.prototype.curveList=null;jsts.operation.buffer.OffsetCurveSetBuilder.prototype.getCurves=function(){this.add(this.inputGeom);return this.curveList;};jsts.operation.buffer.OffsetCurveSetBuilder.prototype.addCurve=function(coord,leftLoc,rightLoc){if(coord==null||coord.length<2)\nreturn;var e=new jsts.noding.NodedSegmentString(coord,new jsts.geomgraph.Label(0,jsts.geom.Location.BOUNDARY,leftLoc,rightLoc));this.curveList.add(e);};jsts.operation.buffer.OffsetCurveSetBuilder.prototype.add=function(g){if(g.isEmpty())\nreturn;if(g instanceof jsts.geom.Polygon)\nthis.addPolygon(g);else if(g instanceof jsts.geom.LineString)\nthis.addLineString(g);else if(g instanceof jsts.geom.Point)\nthis.addPoint(g);else if(g instanceof jsts.geom.MultiPoint)\nthis.addCollection(g);else if(g instanceof jsts.geom.MultiLineString)\nthis.addCollection(g);else if(g instanceof jsts.geom.MultiPolygon)\nthis.addCollection(g);else if(g instanceof jsts.geom.GeometryCollection)\nthis.addCollection(g);else\nthrow new jsts.error.IllegalArgumentError();};jsts.operation.buffer.OffsetCurveSetBuilder.prototype.addCollection=function(gc){for(var i=0;i<gc.getNumGeometries();i++){var g=gc.getGeometryN(i);this.add(g);}};jsts.operation.buffer.OffsetCurveSetBuilder.prototype.addPoint=function(p){if(this.distance<=0.0)\nreturn;var coord=p.getCoordinates();var curve=this.curveBuilder.getLineCurve(coord,this.distance);this.addCurve(curve,jsts.geom.Location.EXTERIOR,jsts.geom.Location.INTERIOR);};jsts.operation.buffer.OffsetCurveSetBuilder.prototype.addLineString=function(line){if(this.distance<=0.0&&!this.curveBuilder.getBufferParameters().isSingleSided())\nreturn;var coord=jsts.geom.CoordinateArrays.removeRepeatedPoints(line.getCoordinates());var curve=this.curveBuilder.getLineCurve(coord,this.distance);this.addCurve(curve,jsts.geom.Location.EXTERIOR,jsts.geom.Location.INTERIOR);};jsts.operation.buffer.OffsetCurveSetBuilder.prototype.addPolygon=function(p){var offsetDistance=this.distance;var offsetSide=jsts.geomgraph.Position.LEFT;if(this.distance<0.0){offsetDistance=-this.distance;offsetSide=jsts.geomgraph.Position.RIGHT;}\nvar shell=p.getExteriorRing();var shellCoord=jsts.geom.CoordinateArrays.removeRepeatedPoints(shell.getCoordinates());if(this.distance<0.0&&this.isErodedCompletely(shell,this.distance))\nreturn;if(this.distance<=0.0&&shellCoord.length<3)\nreturn;this.addPolygonRing(shellCoord,offsetDistance,offsetSide,jsts.geom.Location.EXTERIOR,jsts.geom.Location.INTERIOR);for(var i=0;i<p.getNumInteriorRing();i++){var hole=p.getInteriorRingN(i);var holeCoord=jsts.geom.CoordinateArrays.removeRepeatedPoints(hole.getCoordinates());if(this.distance>0.0&&this.isErodedCompletely(hole,-this.distance))\ncontinue;this.addPolygonRing(holeCoord,offsetDistance,jsts.geomgraph.Position.opposite(offsetSide),jsts.geom.Location.INTERIOR,jsts.geom.Location.EXTERIOR);}};jsts.operation.buffer.OffsetCurveSetBuilder.prototype.addPolygonRing=function(coord,offsetDistance,side,cwLeftLoc,cwRightLoc){if(offsetDistance==0.0&&coord.length<jsts.geom.LinearRing.MINIMUM_VALID_SIZE)\nreturn;var leftLoc=cwLeftLoc;var rightLoc=cwRightLoc;if(coord.length>=jsts.geom.LinearRing.MINIMUM_VALID_SIZE&&jsts.algorithm.CGAlgorithms.isCCW(coord)){leftLoc=cwRightLoc;rightLoc=cwLeftLoc;side=jsts.geomgraph.Position.opposite(side);}\nvar curve=this.curveBuilder.getRingCurve(coord,side,offsetDistance);this.addCurve(curve,leftLoc,rightLoc);};jsts.operation.buffer.OffsetCurveSetBuilder.prototype.isErodedCompletely=function(ring,bufferDistance){var ringCoord=ring.getCoordinates();var minDiam=0.0;if(ringCoord.length<4)\nreturn bufferDistance<0;if(ringCoord.length==4)\nreturn this.isTriangleErodedCompletely(ringCoord,bufferDistance);var env=ring.getEnvelopeInternal();var envMinDimension=Math.min(env.getHeight(),env.getWidth());if(bufferDistance<0.0&&2*Math.abs(bufferDistance)>envMinDimension)\nreturn true;return false;};jsts.operation.buffer.OffsetCurveSetBuilder.prototype.isTriangleErodedCompletely=function(triangleCoord,bufferDistance){var tri=new jsts.geom.Triangle(triangleCoord[0],triangleCoord[1],triangleCoord[2]);var inCentre=tri.inCentre();var distToCentre=jsts.algorithm.CGAlgorithms.distancePointLine(inCentre,tri.p0,tri.p1);return distToCentre<Math.abs(bufferDistance);};jsts.operation.buffer.BufferSubgraph=function(){this.dirEdgeList=new javascript.util.ArrayList();this.nodes=new javascript.util.ArrayList();this.finder=new jsts.operation.buffer.RightmostEdgeFinder();};jsts.operation.buffer.BufferSubgraph.prototype.finder=null;jsts.operation.buffer.BufferSubgraph.prototype.dirEdgeList=null;jsts.operation.buffer.BufferSubgraph.prototype.nodes=null;jsts.operation.buffer.BufferSubgraph.prototype.rightMostCoord=null;jsts.operation.buffer.BufferSubgraph.prototype.env=null;jsts.operation.buffer.BufferSubgraph.prototype.getDirectedEdges=function(){return this.dirEdgeList;};jsts.operation.buffer.BufferSubgraph.prototype.getNodes=function(){return this.nodes;};jsts.operation.buffer.BufferSubgraph.prototype.getEnvelope=function(){if(this.env===null){var edgeEnv=new jsts.geom.Envelope();for(var it=this.dirEdgeList.iterator();it.hasNext();){var dirEdge=it.next();var pts=dirEdge.getEdge().getCoordinates();for(var j=0;j<pts.length-1;j++){edgeEnv.expandToInclude(pts[j]);}}\nthis.env=edgeEnv;}\nreturn this.env;};jsts.operation.buffer.BufferSubgraph.prototype.getRightmostCoordinate=function(){return this.rightMostCoord;};jsts.operation.buffer.BufferSubgraph.prototype.create=function(node){this.addReachable(node);this.finder.findEdge(this.dirEdgeList);this.rightMostCoord=this.finder.getCoordinate();};jsts.operation.buffer.BufferSubgraph.prototype.addReachable=function(startNode){var nodeStack=[];nodeStack.push(startNode);while(nodeStack.length!==0){var node=nodeStack.pop();this.add(node,nodeStack);}};jsts.operation.buffer.BufferSubgraph.prototype.add=function(node,nodeStack){node.setVisited(true);this.nodes.add(node);for(var i=node.getEdges().iterator();i.hasNext();){var de=i.next();this.dirEdgeList.add(de);var sym=de.getSym();var symNode=sym.getNode();if(!symNode.isVisited())\nnodeStack.push(symNode);}};jsts.operation.buffer.BufferSubgraph.prototype.clearVisitedEdges=function(){for(var it=this.dirEdgeList.iterator();it.hasNext();){var de=it.next();de.setVisited(false);}};jsts.operation.buffer.BufferSubgraph.prototype.computeDepth=function(outsideDepth){this.clearVisitedEdges();var de=this.finder.getEdge();var n=de.getNode();var label=de.getLabel();de.setEdgeDepths(jsts.geomgraph.Position.RIGHT,outsideDepth);this.copySymDepths(de);this.computeDepths(de);};jsts.operation.buffer.BufferSubgraph.prototype.computeDepths=function(startEdge){var nodesVisited=[];var nodeQueue=[];var startNode=startEdge.getNode();nodeQueue.push(startNode);nodesVisited.push(startNode);startEdge.setVisited(true);while(nodeQueue.length!==0){var n=nodeQueue.shift();nodesVisited.push(n);this.computeNodeDepth(n);for(var i=n.getEdges().iterator();i.hasNext();){var de=i.next();var sym=de.getSym();if(sym.isVisited())\ncontinue;var adjNode=sym.getNode();if(nodesVisited.indexOf(adjNode)===-1){nodeQueue.push(adjNode);nodesVisited.push(adjNode);}}}};jsts.operation.buffer.BufferSubgraph.prototype.computeNodeDepth=function(n){var startEdge=null;for(var i=n.getEdges().iterator();i.hasNext();){var de=i.next();if(de.isVisited()||de.getSym().isVisited()){startEdge=de;break;}}\nif(startEdge==null)\nthrow new jsts.error.TopologyError('unable to find edge to compute depths at '+n.getCoordinate());n.getEdges().computeDepths(startEdge);for(var i=n.getEdges().iterator();i.hasNext();){var de=i.next();de.setVisited(true);this.copySymDepths(de);}};jsts.operation.buffer.BufferSubgraph.prototype.copySymDepths=function(de){var sym=de.getSym();sym.setDepth(jsts.geomgraph.Position.LEFT,de.getDepth(jsts.geomgraph.Position.RIGHT));sym.setDepth(jsts.geomgraph.Position.RIGHT,de.getDepth(jsts.geomgraph.Position.LEFT));};jsts.operation.buffer.BufferSubgraph.prototype.findResultEdges=function(){for(var it=this.dirEdgeList.iterator();it.hasNext();){var de=it.next();if(de.getDepth(jsts.geomgraph.Position.RIGHT)>=1&&de.getDepth(jsts.geomgraph.Position.LEFT)<=0&&!de.isInteriorAreaEdge()){de.setInResult(true);}}};jsts.operation.buffer.BufferSubgraph.prototype.compareTo=function(o){var graph=o;if(this.rightMostCoord.x<graph.rightMostCoord.x){return-1;}\nif(this.rightMostCoord.x>graph.rightMostCoord.x){return 1;}\nreturn 0;};jsts.simplify.DPTransformer=function(distanceTolerance,isEnsureValidTopology){this.distanceTolerance=distanceTolerance;this.isEnsureValidTopology=isEnsureValidTopology;};jsts.simplify.DPTransformer.prototype=new jsts.geom.util.GeometryTransformer();jsts.simplify.DPTransformer.prototype.distanceTolerance=null;jsts.simplify.DPTransformer.prototype.isEnsureValidTopology=null;jsts.simplify.DPTransformer.prototype.transformCoordinates=function(coords,parent){var inputPts=coords;var newPts=null;if(inputPts.length==0){newPts=[];}else{newPts=jsts.simplify.DouglasPeuckerLineSimplifier.simplify(inputPts,this.distanceTolerance);}\nreturn newPts;};jsts.simplify.DPTransformer.prototype.transformPolygon=function(geom,parent){if(geom.isEmpty()){return null;}\nvar rawGeom=jsts.geom.util.GeometryTransformer.prototype.transformPolygon.apply(this,arguments);if(parent instanceof jsts.geom.MultiPolygon){return rawGeom;}\nreturn this.createValidArea(rawGeom);};jsts.simplify.DPTransformer.prototype.transformLinearRing=function(geom,parent){var removeDegenerateRings=parent instanceof jsts.geom.Polygon;var simpResult=jsts.geom.util.GeometryTransformer.prototype.transformLinearRing.apply(this,arguments);if(removeDegenerateRings&&!(simpResult instanceof jsts.geom.LinearRing)){return null;}\nreturn simpResult;};jsts.simplify.DPTransformer.prototype.transformMultiPolygon=function(geom,parent){var rawGeom=jsts.geom.util.GeometryTransformer.prototype.transformMultiPolygon.apply(this,arguments);return this.createValidArea(rawGeom);};jsts.simplify.DPTransformer.prototype.createValidArea=function(rawAreaGeom){if(this.isEnsureValidTopology){return rawAreaGeom.buffer(0.0);}\nreturn rawAreaGeom;};jsts.geom.util.GeometryExtracter=function(clz,comps){this.clz=clz;this.comps=comps;};jsts.geom.util.GeometryExtracter.prototype=new jsts.geom.GeometryFilter();jsts.geom.util.GeometryExtracter.prototype.clz=null;jsts.geom.util.GeometryExtracter.prototype.comps=null;jsts.geom.util.GeometryExtracter.extract=function(geom,clz,list){list=list||new javascript.util.ArrayList();if(geom instanceof clz){list.add(geom);}\nelse if(geom instanceof jsts.geom.GeometryCollection||geom instanceof jsts.geom.MultiPoint||geom instanceof jsts.geom.MultiLineString||geom instanceof jsts.geom.MultiPolygon){geom.apply(new jsts.geom.util.GeometryExtracter(clz,list));}\nreturn list;};jsts.geom.util.GeometryExtracter.prototype.filter=function(geom){if(this.clz===null||geom instanceof this.clz){this.comps.add(geom);}};(function(){var OverlayOp=jsts.operation.overlay.OverlayOp;var SnapOverlayOp=jsts.operation.overlay.snap.SnapOverlayOp;var SnapIfNeededOverlayOp=function(g1,g2){this.geom=[];this.geom[0]=g1;this.geom[1]=g2;};SnapIfNeededOverlayOp.overlayOp=function(g0,g1,opCode){var op=new SnapIfNeededOverlayOp(g0,g1);return op.getResultGeometry(opCode);};SnapIfNeededOverlayOp.intersection=function(g0,g1){return overlayOp(g0,g1,OverlayOp.INTERSECTION);};SnapIfNeededOverlayOp.union=function(g0,g1){return overlayOp(g0,g1,OverlayOp.UNION);};SnapIfNeededOverlayOp.difference=function(g0,g1){return overlayOp(g0,g1,OverlayOp.DIFFERENCE);};SnapIfNeededOverlayOp.symDifference=function(g0,g1){return overlayOp(g0,g1,OverlayOp.SYMDIFFERENCE);};SnapIfNeededOverlayOp.prototype.geom=null;SnapIfNeededOverlayOp.prototype.getResultGeometry=function(opCode){var result=null;var isSuccess=false;var savedException=null;try{result=OverlayOp.overlayOp(this.geom[0],this.geom[1],opCode);var isValid=true;if(isValid)\nisSuccess=true;}catch(ex){savedException=ex;}\nif(!isSuccess){try{result=SnapOverlayOp.overlayOp(this.geom[0],this.geom[1],opCode);}catch(ex){throw savedException;}}\nreturn result;};jsts.operation.overlay.snap.SnapIfNeededOverlayOp=SnapIfNeededOverlayOp;})();(function(){var GeometryExtracter=jsts.geom.util.GeometryExtracter;var CascadedPolygonUnion=jsts.operation.union.CascadedPolygonUnion;var PointGeometryUnion=jsts.operation.union.PointGeometryUnion;var OverlayOp=jsts.operation.overlay.OverlayOp;var SnapIfNeededOverlayOp=jsts.operation.overlay.snap.SnapIfNeededOverlayOp;var ArrayList=javascript.util.ArrayList;jsts.operation.union.UnaryUnionOp=function(geoms,geomFact){this.polygons=new ArrayList();this.lines=new ArrayList();this.points=new ArrayList();if(geomFact){this.geomFact=geomFact;}\nthis.extract(geoms);};jsts.operation.union.UnaryUnionOp.union=function(geoms,geomFact){var op=new jsts.operation.union.UnaryUnionOp(geoms,geomFact);return op.union();};jsts.operation.union.UnaryUnionOp.prototype.polygons=null;jsts.operation.union.UnaryUnionOp.prototype.lines=null;jsts.operation.union.UnaryUnionOp.prototype.points=null;jsts.operation.union.UnaryUnionOp.prototype.geomFact=null;jsts.operation.union.UnaryUnionOp.prototype.extract=function(geoms){if(geoms instanceof ArrayList){for(var i=geoms.iterator();i.hasNext();){var geom=i.next();this.extract(geom);}}else{if(this.geomFact===null){this.geomFact=geoms.getFactory();}\nGeometryExtracter.extract(geoms,jsts.geom.Polygon,this.polygons);GeometryExtracter.extract(geoms,jsts.geom.LineString,this.lines);GeometryExtracter.extract(geoms,jsts.geom.Point,this.points);}};jsts.operation.union.UnaryUnionOp.prototype.union=function(){if(this.geomFact===null){return null;}\nvar unionPoints=null;if(this.points.size()>0){var ptGeom=this.geomFact.buildGeometry(this.points);unionPoints=this.unionNoOpt(ptGeom);}\nvar unionLines=null;if(this.lines.size()>0){var lineGeom=this.geomFact.buildGeometry(this.lines);unionLines=this.unionNoOpt(lineGeom);}\nvar unionPolygons=null;if(this.polygons.size()>0){unionPolygons=CascadedPolygonUnion.union(this.polygons);}\nvar unionLA=this.unionWithNull(unionLines,unionPolygons);var union=null;if(unionPoints===null){union=unionLA;}else if(unionLA===null){union=unionPoints;}else{union=PointGeometryUnion(unionPoints,unionLA);}\nif(union===null){return this.geomFact.createGeometryCollection(null);}\nreturn union;};jsts.operation.union.UnaryUnionOp.prototype.unionWithNull=function(g0,g1){if(g0===null&&g1===null){return null;}\nif(g1===null){return g0;}\nif(g0===null){return g1;}\nreturn g0.union(g1);};jsts.operation.union.UnaryUnionOp.prototype.unionNoOpt=function(g0){var empty=this.geomFact.createPoint(null);return SnapIfNeededOverlayOp.overlayOp(g0,empty,OverlayOp.UNION);};}());jsts.index.kdtree.KdNode=function(){this.left=null;this.right=null;this.count=1;if(arguments.length===2){this.initializeFromCoordinate.apply(this,arguments[0],arguments[1]);}else if(arguments.length===3){this.initializeFromXY.apply(this,arguments[0],arguments[1],arguments[2]);}};jsts.index.kdtree.KdNode.prototype.initializeFromXY=function(x,y,data){this.p=new jsts.geom.Coordinate(x,y);this.data=data;};jsts.index.kdtree.KdNode.prototype.initializeFromCoordinate=function(p,data){this.p=p;this.data=data;};jsts.index.kdtree.KdNode.prototype.getX=function(){return this.p.x;};jsts.index.kdtree.KdNode.prototype.getY=function(){return this.p.y;};jsts.index.kdtree.KdNode.prototype.getCoordinate=function(){return this.p;};jsts.index.kdtree.KdNode.prototype.getData=function(){return this.data;};jsts.index.kdtree.KdNode.prototype.getLeft=function(){return this.left;};jsts.index.kdtree.KdNode.prototype.getRight=function(){return this.right;};jsts.index.kdtree.KdNode.prototype.increment=function(){this.count+=1;};jsts.index.kdtree.KdNode.prototype.getCount=function(){return this.count;};jsts.index.kdtree.KdNode.prototype.isRepeated=function(){return count>1;};jsts.index.kdtree.KdNode.prototype.setLeft=function(left){this.left=left;};jsts.index.kdtree.KdNode.prototype.setRight=function(right){this.right=right;};jsts.algorithm.InteriorPointPoint=function(geometry){this.minDistance=Number.MAX_VALUE;this.interiorPoint=null;this.centroid=geometry.getCentroid().getCoordinate();this.add(geometry);};jsts.algorithm.InteriorPointPoint.prototype.add=function(geometry){if(geometry instanceof jsts.geom.Point){this.addPoint(geometry.getCoordinate());}else if(geometry instanceof jsts.geom.GeometryCollection){for(var i=0;i<geometry.getNumGeometries();i++){this.add(geometry.getGeometryN(i));}}};jsts.algorithm.InteriorPointPoint.prototype.addPoint=function(point){var dist=point.distance(this.centroid);if(dist<this.minDistance){this.interiorPoint=new jsts.geom.Coordinate(point);this.minDistance=dist;}};jsts.algorithm.InteriorPointPoint.prototype.getInteriorPoint=function(){return this.interiorPoint;};(function(){jsts.geom.MultiLineString=function(geometries,factory){this.geometries=geometries||[];this.factory=factory;};jsts.geom.MultiLineString.prototype=new jsts.geom.GeometryCollection();jsts.geom.MultiLineString.constructor=jsts.geom.MultiLineString;jsts.geom.MultiLineString.prototype.getBoundary=function(){return(new jsts.operation.BoundaryOp(this)).getBoundary();};jsts.geom.MultiLineString.prototype.equalsExact=function(other,tolerance){if(!this.isEquivalentClass(other)){return false;}\nreturn jsts.geom.GeometryCollection.prototype.equalsExact.call(this,other,tolerance);};jsts.geom.MultiLineString.prototype.CLASS_NAME='jsts.geom.MultiLineString';})();(function(){var Interval=jsts.index.bintree.Interval;var Root=jsts.index.bintree.Root;var Bintree=function(){this.root=new Root();this.minExtent=1.0;};Bintree.ensureExtent=function(itemInterval,minExtent){var min,max;min=itemInterval.getMin();max=itemInterval.getMax();if(min!==max){return itemInterval;}\nif(min===max){min=min-(minExtent/2.0);max=min+(minExtent/2.0);}\nreturn new Interval(min,max);};Bintree.prototype.depth=function(){if(this.root!==null){return this.root.depth();}\nreturn 0;};Bintree.prototype.size=function(){if(this.root!==null){return this.root.size();}\nreturn 0;};Bintree.prototype.nodeSize=function(){if(this.root!==null){return this.root.nodeSize();}\nreturn 0;};Bintree.prototype.insert=function(itemInterval,item){this.collectStats(itemInterval);var insertInterval=Bintree.ensureExtent(itemInterval,this.minExtent);this.root.insert(insertInterval,item);};Bintree.prototype.remove=function(itemInterval,item){var insertInterval=Bintree.ensureExtent(itemInterval,this.minExtent);return this.root.remove(insertInterval,item);};Bintree.prototype.iterator=function(){var foundItems=new javascript.util.ArrayList();this.root.addAllItems(foundItems);return foundItems.iterator();};Bintree.prototype.query=function(){if(arguments.length===2){this.queryAndAdd(arguments[0],arguments[1]);}else{var x=arguments[0];if(!x instanceof Interval){x=new Interval(x,x);}\nreturn this.queryInterval(x);}};Bintree.prototype.queryInterval=function(interval){var foundItems=new javascript.util.ArrayList();this.query(interval,foundItems);return foundItems;};Bintree.prototype.queryAndAdd=function(interval,foundItems){this.root.addAllItemsFromOverlapping(interval,foundItems);};Bintree.prototype.collectStats=function(interval){var del=interval.getWidth();if(del<this.minExtent&&del>0.0){this.minExtent=del;}};jsts.index.bintree.Bintree=Bintree;})();jsts.algorithm.InteriorPointArea=function(geometry){this.factory;this.interiorPoint=null;this.maxWidth=0;this.factory=geometry.getFactory();this.add(geometry);};jsts.algorithm.InteriorPointArea.avg=function(a,b){return(a+b)/2;};jsts.algorithm.InteriorPointArea.prototype.getInteriorPoint=function(){return this.interiorPoint;};jsts.algorithm.InteriorPointArea.prototype.add=function(geometry){if(geometry instanceof jsts.geom.Polygon){this.addPolygon(geometry);}else if(geometry instanceof jsts.geom.GeometryCollection){for(var i=0;i<geometry.getNumGeometries();i++){this.add(geometry.getGeometryN(i));}}};jsts.algorithm.InteriorPointArea.prototype.addPolygon=function(geometry){if(geometry.isEmpty()){return;}\nvar intPt;var width=0;var bisector=this.horizontalBisector(geometry);if(bisector.getLength()==0.0){width=0;intPt=bisector.getCoordinate();}else{var intersections=bisector.intersection(geometry);var widestIntersection=this.widestGeometry(intersections);width=widestIntersection.getEnvelopeInternal().getWidth();intPt=this.centre(widestIntersection.getEnvelopeInternal());}\nif(this.interiorPoint==null||width>this.maxWidth){this.interiorPoint=intPt;this.maxWidth=width;}};jsts.algorithm.InteriorPointArea.prototype.widestGeometry=function(obj){if(obj instanceof jsts.geom.GeometryCollection){var gc=obj;if(gc.isEmpty()){return gc;}\nvar widestGeometry=gc.getGeometryN(0);for(var i=1;i<gc.getNumGeometries();i++){if(gc.getGeometryN(i).getEnvelopeInternal().getWidth()>widestGeometry.getEnvelopeInternal().getWidth()){widestGeometry=gc.getGeometryN(i);}}\nreturn widestGeometry;}else if(obj instanceof jsts.geom.Geometry){return obj;}};jsts.algorithm.InteriorPointArea.prototype.horizontalBisector=function(geometry){var envelope=geometry.getEnvelopeInternal();var bisectY=jsts.algorithm.SafeBisectorFinder.getBisectorY(geometry);return this.factory.createLineString([new jsts.geom.Coordinate(envelope.getMinX(),bisectY),new jsts.geom.Coordinate(envelope.getMaxX(),bisectY)]);};jsts.algorithm.InteriorPointArea.prototype.centre=function(envelope){return new jsts.geom.Coordinate(jsts.algorithm.InteriorPointArea.avg(envelope.getMinX(),envelope.getMaxX()),jsts.algorithm.InteriorPointArea.avg(envelope.getMinY(),envelope.getMaxY()));};jsts.algorithm.SafeBisectorFinder=function(poly){this.poly;this.centreY;this.hiY=Number.MAX_VALUE;this.loY=-Number.MAX_VALUE;this.poly=poly;this.hiY=poly.getEnvelopeInternal().getMaxY();this.loY=poly.getEnvelopeInternal().getMinY();this.centreY=jsts.algorithm.InteriorPointArea.avg(this.loY,this.hiY);};jsts.algorithm.SafeBisectorFinder.getBisectorY=function(poly){var finder=new jsts.algorithm.SafeBisectorFinder(poly);return finder.getBisectorY();};jsts.algorithm.SafeBisectorFinder.prototype.getBisectorY=function(){this.process(this.poly.getExteriorRing());for(var i=0;i<this.poly.getNumInteriorRing();i++){this.process(this.poly.getInteriorRingN(i));}\nvar bisectY=jsts.algorithm.InteriorPointArea.avg(this.hiY,this.loY);return bisectY;};jsts.algorithm.SafeBisectorFinder.prototype.process=function(line){var seq=line.getCoordinateSequence();for(var i=0;i<seq.length;i++){var y=seq[i].y;this.updateInterval(y);}};jsts.algorithm.SafeBisectorFinder.prototype.updateInterval=function(y){if(y<=this.centreY){if(y>this.loY){this.loY=y;}}else if(y>this.centreY){if(y<this.hiY){this.hiY=y;}}};jsts.operation.buffer.BufferParameters=function(quadrantSegments,endCapStyle,joinStyle,mitreLimit){if(quadrantSegments)\nthis.setQuadrantSegments(quadrantSegments);if(endCapStyle)\nthis.setEndCapStyle(endCapStyle);if(joinStyle)\nthis.setJoinStyle(joinStyle);if(mitreLimit)\nthis.setMitreLimit(mitreLimit);};jsts.operation.buffer.BufferParameters.CAP_ROUND=1;jsts.operation.buffer.BufferParameters.CAP_FLAT=2;jsts.operation.buffer.BufferParameters.CAP_SQUARE=3;jsts.operation.buffer.BufferParameters.JOIN_ROUND=1;jsts.operation.buffer.BufferParameters.JOIN_MITRE=2;jsts.operation.buffer.BufferParameters.JOIN_BEVEL=3;jsts.operation.buffer.BufferParameters.DEFAULT_QUADRANT_SEGMENTS=8;jsts.operation.buffer.BufferParameters.DEFAULT_MITRE_LIMIT=5.0;jsts.operation.buffer.BufferParameters.prototype.quadrantSegments=jsts.operation.buffer.BufferParameters.DEFAULT_QUADRANT_SEGMENTS;jsts.operation.buffer.BufferParameters.prototype.endCapStyle=jsts.operation.buffer.BufferParameters.CAP_ROUND;jsts.operation.buffer.BufferParameters.prototype.joinStyle=jsts.operation.buffer.BufferParameters.JOIN_ROUND;jsts.operation.buffer.BufferParameters.prototype.mitreLimit=jsts.operation.buffer.BufferParameters.DEFAULT_MITRE_LIMIT;jsts.operation.buffer.BufferParameters.prototype._isSingleSided=false;jsts.operation.buffer.BufferParameters.prototype.getQuadrantSegments=function(){return this.quadrantSegments;};jsts.operation.buffer.BufferParameters.prototype.setQuadrantSegments=function(quadrantSegments){this.quadrantSegments=quadrantSegments;};jsts.operation.buffer.BufferParameters.prototype.setQuadrantSegments=function(quadSegs){this.quadrantSegments=quadSegs;if(this.quadrantSegments===0)\nthis.joinStyle=jsts.operation.buffer.BufferParameters.JOIN_BEVEL;if(this.quadrantSegments<0){this.joinStyle=jsts.operation.buffer.BufferParameters.JOIN_MITRE;this.mitreLimit=Math.abs(this.quadrantSegments);}\nif(quadSegs<=0){this.quadrantSegments=1;}\nif(this.joinStyle!==jsts.operation.buffer.BufferParameters.JOIN_ROUND){this.quadrantSegments=jsts.operation.buffer.BufferParameters.DEFAULT_QUADRANT_SEGMENTS;}};jsts.operation.buffer.BufferParameters.bufferDistanceError=function(quadSegs){var alpha=Math.PI/2.0/quadSegs;return 1-Math.cos(alpha/2.0);};jsts.operation.buffer.BufferParameters.prototype.getEndCapStyle=function(){return this.endCapStyle;};jsts.operation.buffer.BufferParameters.prototype.setEndCapStyle=function(endCapStyle){this.endCapStyle=endCapStyle;};jsts.operation.buffer.BufferParameters.prototype.getJoinStyle=function(){return this.joinStyle;};jsts.operation.buffer.BufferParameters.prototype.setJoinStyle=function(joinStyle){this.joinStyle=joinStyle;};jsts.operation.buffer.BufferParameters.prototype.getMitreLimit=function(){return this.mitreLimit;};jsts.operation.buffer.BufferParameters.prototype.setMitreLimit=function(mitreLimit){this.mitreLimit=mitreLimit;};jsts.operation.buffer.BufferParameters.prototype.setSingleSided=function(isSingleSided){this._isSingleSided=isSingleSided;};jsts.operation.buffer.BufferParameters.prototype.isSingleSided=function(){return this._isSingleSided;};(function(){jsts.geom.util.ShortCircuitedGeometryVisitor=function(){};jsts.geom.util.ShortCircuitedGeometryVisitor.prototype.isDone=false;jsts.geom.util.ShortCircuitedGeometryVisitor.prototype.applyTo=function(geom){for(var i=0;i<geom.getNumGeometries()&&!this.isDone;i++){var element=geom.getGeometryN(i);if(!(element instanceof jsts.geom.GeometryCollection)){this.visit(element);if(this.isDone()){this.isDone=true;return;}}\nelse\nthis.applyTo(element);}}\njsts.geom.util.ShortCircuitedGeometryVisitor.prototype.visit=function(element){};jsts.geom.util.ShortCircuitedGeometryVisitor.prototype.isDone=function(){};})();(function(){var EnvelopeIntersectsVisitor=function(rectEnv){this.rectEnv=rectEnv;};EnvelopeIntersectsVisitor.prototype=new jsts.geom.util.ShortCircuitedGeometryVisitor();EnvelopeIntersectsVisitor.constructor=EnvelopeIntersectsVisitor;EnvelopeIntersectsVisitor.prototype.rectEnv=null;EnvelopeIntersectsVisitor.prototype.intersects=false;EnvelopeIntersectsVisitor.prototype.intersects=function(){return this.intersects;}\nEnvelopeIntersectsVisitor.prototype.visit=function(element){var elementEnv=element.getEnvelopeInternal();if(!this.rectEnv.intersects(elementEnv)){return;}\nif(this.rectEnv.contains(elementEnv)){this.intersects=true;return;}\nif(elementEnv.getMinX()>=rectEnv.getMinX()&&elementEnv.getMaxX()<=rectEnv.getMaxX()){this.intersects=true;return;}\nif(elementEnv.getMinY()>=rectEnv.getMinY()&&elementEnv.getMaxY()<=rectEnv.getMaxY()){this.intersects=true;return;}}\nEnvelopeIntersectsVisitor.prototype.isDone=function(){return this.intersects==true;}\nvar GeometryContainsPointVisitor=function(rectangle){this.rectSeq=rectangle.getExteriorRing().getCoordinateSequence();this.rectEnv=rectangle.getEnvelopeInternal();};GeometryContainsPointVisitor.prototype=new jsts.geom.util.ShortCircuitedGeometryVisitor();GeometryContainsPointVisitor.constructor=GeometryContainsPointVisitor;GeometryContainsPointVisitor.prototype.rectSeq=null;GeometryContainsPointVisitor.prototype.rectEnv=null;GeometryContainsPointVisitor.prototype.containsPoint=false;GeometryContainsPointVisitor.prototype.containsPoint=function(){return this.containsPoint;}\nGeometryContainsPointVisitor.prototype.visit=function(geom){if(!(geom instanceof jsts.geom.Polygon))\nreturn;var elementEnv=geom.getEnvelopeInternal();if(!this.rectEnv.intersects(elementEnv))\nreturn;var rectPt=new jsts.geom.Coordinate();for(var i=0;i<4;i++){this.rectSeq.getCoordinate(i,rectPt);if(!elementEnv.contains(rectPt))\ncontinue;if(SimplePointInAreaLocator.containsPointInPolygon(rectPt,geom)){this.containsPoint=true;return;}}}\nGeometryContainsPointVisitor.prototype.isDone=function(){return this.containsPoint==true;}\nvar RectangleIntersectsSegmentVisitor=function(rectangle){this.rectEnv=rectangle.getEnvelopeInternal();this.rectIntersector=new RectangleLineIntersector(rectEnv);};RectangleIntersectsSegmentVisitor.prototype=new jsts.geom.util.ShortCircuitedGeometryVisitor();RectangleIntersectsSegmentVisitor.constructor=RectangleIntersectsSegmentVisitor;RectangleIntersectsSegmentVisitor.prototype.rectEnv=null;RectangleIntersectsSegmentVisitor.prototype.rectIntersector=null;RectangleIntersectsSegmentVisitor.prototype.hasIntersection=false;RectangleIntersectsSegmentVisitor.prototype.p0=null;RectangleIntersectsSegmentVisitor.prototype.p1=null;RectangleIntersectsSegmentVisitor.prototype.intersects=function(){return this.hasIntersection;}\nRectangleIntersectsSegmentVisitor.prototype.visit=function(geom){var elementEnv=geom.getEnvelopeInternal();if(!this.rectEnv.intersects(elementEnv))\nreturn;var lines=LinearComponentExtracter.getLines(geom);this.checkIntersectionWithLineStrings(lines);}\nRectangleIntersectsSegmentVisitor.prototype.checkIntersectionWithLineStrings=function(lines){for(var i=lines.iterator();i.hasNext();){var testLine=i.next();this.checkIntersectionWithSegments(testLine);if(this.hasIntersection)\nreturn;}}\nRectangleIntersectsSegmentVisitor.prototype.checkIntersectionWithSegments=function(testLine){var seq1=testLine.getCoordinateSequence();for(var j=1;j<seq1.length;j++){this.p0=seq1[j-1];this.p1=seq1[j];if(rectIntersector.intersects(p0,p1)){this.hasIntersection=true;return;}}}\nRectangleIntersectsSegmentVisitor.prototype.isDone=function(){return this.hasIntersection==true;}\njsts.operation.predicate.RectangleIntersects=function(rectangle){this.rectangle=rectangle;this.rectEnv=rectangle.getEnvelopeInternal();}\njsts.operation.predicate.RectangleIntersects.intersects=function(rectangle,b){var rp=new jsts.operation.predicate.RectangleIntersects(rectangle);return rp.intersects(b);}\njsts.operation.predicate.RectangleIntersects.prototype.rectangle=null;jsts.operation.predicate.RectangleIntersects.prototype.rectEnv=null;jsts.operation.predicate.RectangleIntersects.prototype.intersects=function(geom){if(!this.rectEnv.intersects(geom.getEnvelopeInternal()))\nreturn false;var visitor=new EnvelopeIntersectsVisitor(this.rectEnv);visitor.applyTo(geom);if(visitor.intersects())\nreturn true;var ecpVisitor=new GeometryContainsPointVisitor(rectangle);ecpVisitor.applyTo(geom);if(ecpVisitor.containsPoint())\nreturn true;var riVisitor=new RectangleIntersectsSegmentVisitor(rectangle);riVisitor.applyTo(geom);if(riVisitor.intersects())\nreturn true;return false;}})();jsts.operation.buffer.BufferBuilder=function(bufParams){this.bufParams=bufParams;this.edgeList=new jsts.geomgraph.EdgeList();};jsts.operation.buffer.BufferBuilder.depthDelta=function(label){var lLoc=label.getLocation(0,jsts.geomgraph.Position.LEFT);var rLoc=label.getLocation(0,jsts.geomgraph.Position.RIGHT);if(lLoc===jsts.geom.Location.INTERIOR&&rLoc===jsts.geom.Location.EXTERIOR)\nreturn 1;else if(lLoc===jsts.geom.Location.EXTERIOR&&rLoc===jsts.geom.Location.INTERIOR)\nreturn-1;return 0;};jsts.operation.buffer.BufferBuilder.prototype.bufParams=null;jsts.operation.buffer.BufferBuilder.prototype.workingPrecisionModel=null;jsts.operation.buffer.BufferBuilder.prototype.workingNoder=null;jsts.operation.buffer.BufferBuilder.prototype.geomFact=null;jsts.operation.buffer.BufferBuilder.prototype.graph=null;jsts.operation.buffer.BufferBuilder.prototype.edgeList=null;jsts.operation.buffer.BufferBuilder.prototype.setWorkingPrecisionModel=function(pm){this.workingPrecisionModel=pm;};jsts.operation.buffer.BufferBuilder.prototype.setNoder=function(noder){this.workingNoder=noder;};jsts.operation.buffer.BufferBuilder.prototype.buffer=function(g,distance){var precisionModel=this.workingPrecisionModel;if(precisionModel===null)\nprecisionModel=g.getPrecisionModel();this.geomFact=g.getFactory();var curveBuilder=new jsts.operation.buffer.OffsetCurveBuilder(precisionModel,this.bufParams);var curveSetBuilder=new jsts.operation.buffer.OffsetCurveSetBuilder(g,distance,curveBuilder);var bufferSegStrList=curveSetBuilder.getCurves();if(bufferSegStrList.size()<=0){return this.createEmptyResultGeometry();}\nthis.computeNodedEdges(bufferSegStrList,precisionModel);this.graph=new jsts.geomgraph.PlanarGraph(new jsts.operation.overlay.OverlayNodeFactory());this.graph.addEdges(this.edgeList.getEdges());var subgraphList=this.createSubgraphs(this.graph);var polyBuilder=new jsts.operation.overlay.PolygonBuilder(this.geomFact);this.buildSubgraphs(subgraphList,polyBuilder);var resultPolyList=polyBuilder.getPolygons();if(resultPolyList.size()<=0){return this.createEmptyResultGeometry();}\nvar resultGeom=this.geomFact.buildGeometry(resultPolyList);return resultGeom;};jsts.operation.buffer.BufferBuilder.prototype.getNoder=function(precisionModel){if(this.workingNoder!==null)\nreturn this.workingNoder;var noder=new jsts.noding.MCIndexNoder();var li=new jsts.algorithm.RobustLineIntersector();li.setPrecisionModel(precisionModel);noder.setSegmentIntersector(new jsts.noding.IntersectionAdder(li));return noder;};jsts.operation.buffer.BufferBuilder.prototype.computeNodedEdges=function(bufferSegStrList,precisionModel){var noder=this.getNoder(precisionModel);noder.computeNodes(bufferSegStrList);var nodedSegStrings=noder.getNodedSubstrings();for(var i=nodedSegStrings.iterator();i.hasNext();){var segStr=i.next();var oldLabel=segStr.getData();var edge=new jsts.geomgraph.Edge(segStr.getCoordinates(),new jsts.geomgraph.Label(oldLabel));this.insertUniqueEdge(edge);}};jsts.operation.buffer.BufferBuilder.prototype.insertUniqueEdge=function(e){var existingEdge=this.edgeList.findEqualEdge(e);if(existingEdge!=null){var existingLabel=existingEdge.getLabel();var labelToMerge=e.getLabel();if(!existingEdge.isPointwiseEqual(e)){labelToMerge=new jsts.geomgraph.Label(e.getLabel());labelToMerge.flip();}\nexistingLabel.merge(labelToMerge);var mergeDelta=jsts.operation.buffer.BufferBuilder.depthDelta(labelToMerge);var existingDelta=existingEdge.getDepthDelta();var newDelta=existingDelta+mergeDelta;existingEdge.setDepthDelta(newDelta);}else{this.edgeList.add(e);e.setDepthDelta(jsts.operation.buffer.BufferBuilder.depthDelta(e.getLabel()));}};jsts.operation.buffer.BufferBuilder.prototype.createSubgraphs=function(graph){var subgraphList=[];for(var i=graph.getNodes().iterator();i.hasNext();){var node=i.next();if(!node.isVisited()){var subgraph=new jsts.operation.buffer.BufferSubgraph();subgraph.create(node);subgraphList.push(subgraph);}}\nvar compare=function(a,b){return a.compareTo(b);};subgraphList.sort(compare);subgraphList.reverse();return subgraphList;};jsts.operation.buffer.BufferBuilder.prototype.buildSubgraphs=function(subgraphList,polyBuilder){var processedGraphs=[];for(var i=0;i<subgraphList.length;i++){var subgraph=subgraphList[i];var p=subgraph.getRightmostCoordinate();var locater=new jsts.operation.buffer.SubgraphDepthLocater(processedGraphs);var outsideDepth=locater.getDepth(p);subgraph.computeDepth(outsideDepth);subgraph.findResultEdges();processedGraphs.push(subgraph);polyBuilder.add(subgraph.getDirectedEdges(),subgraph.getNodes());}};jsts.operation.buffer.BufferBuilder.convertSegStrings=function(it){var fact=new jsts.geom.GeometryFactory();var lines=new javascript.util.ArrayList();while(it.hasNext()){var ss=it.next();var line=fact.createLineString(ss.getCoordinates());lines.add(line);}\nreturn fact.buildGeometry(lines);};jsts.operation.buffer.BufferBuilder.prototype.createEmptyResultGeometry=function(){var emptyGeom=this.geomFact.createPolygon(null,null);return emptyGeom;};jsts.noding.SegmentPointComparator=function(){};jsts.noding.SegmentPointComparator.compare=function(octant,p0,p1){if(p0.equals2D(p1))\nreturn 0;var xSign=jsts.noding.SegmentPointComparator.relativeSign(p0.x,p1.x);var ySign=jsts.noding.SegmentPointComparator.relativeSign(p0.y,p1.y);switch(octant){case 0:return jsts.noding.SegmentPointComparator.compareValue(xSign,ySign);case 1:return jsts.noding.SegmentPointComparator.compareValue(ySign,xSign);case 2:return jsts.noding.SegmentPointComparator.compareValue(ySign,-xSign);case 3:return jsts.noding.SegmentPointComparator.compareValue(-xSign,ySign);case 4:return jsts.noding.SegmentPointComparator.compareValue(-xSign,-ySign);case 5:return jsts.noding.SegmentPointComparator.compareValue(-ySign,-xSign);case 6:return jsts.noding.SegmentPointComparator.compareValue(-ySign,xSign);case 7:return jsts.noding.SegmentPointComparator.compareValue(xSign,-ySign);}\nreturn 0;};jsts.noding.SegmentPointComparator.relativeSign=function(x0,x1){if(x0<x1)\nreturn-1;if(x0>x1)\nreturn 1;return 0;};jsts.noding.SegmentPointComparator.compareValue=function(compareSign0,compareSign1){if(compareSign0<0)\nreturn-1;if(compareSign0>0)\nreturn 1;if(compareSign1<0)\nreturn-1;if(compareSign1>0)\nreturn 1;return 0;};jsts.operation.relate.RelateOp=function(){jsts.operation.GeometryGraphOperation.apply(this,arguments);this._relate=new jsts.operation.relate.RelateComputer(this.arg);};jsts.operation.relate.RelateOp.prototype=new jsts.operation.GeometryGraphOperation();jsts.operation.relate.RelateOp.relate=function(a,b,boundaryNodeRule){var relOp=new jsts.operation.relate.RelateOp(a,b,boundaryNodeRule);var im=relOp.getIntersectionMatrix();return im;};jsts.operation.relate.RelateOp.prototype._relate=null;jsts.operation.relate.RelateOp.prototype.getIntersectionMatrix=function(){return this._relate.computeIM();};jsts.index.chain.MonotoneChain=function(pts,start,end,context){this.pts=pts;this.start=start;this.end=end;this.context=context;};jsts.index.chain.MonotoneChain.prototype.pts=null;jsts.index.chain.MonotoneChain.prototype.start=null;jsts.index.chain.MonotoneChain.prototype.end=null;jsts.index.chain.MonotoneChain.prototype.env=null;jsts.index.chain.MonotoneChain.prototype.context=null;jsts.index.chain.MonotoneChain.prototype.id=null;jsts.index.chain.MonotoneChain.prototype.setId=function(id){this.id=id;};jsts.index.chain.MonotoneChain.prototype.getId=function(){return this.id;};jsts.index.chain.MonotoneChain.prototype.getContext=function(){return this.context;};jsts.index.chain.MonotoneChain.prototype.getEnvelope=function(){if(this.env==null){var p0=this.pts[this.start];var p1=this.pts[this.end];this.env=new jsts.geom.Envelope(p0,p1);}\nreturn this.env;};jsts.index.chain.MonotoneChain.prototype.getStartIndex=function(){return this.start;};jsts.index.chain.MonotoneChain.prototype.getEndIndex=function(){return this.end;};jsts.index.chain.MonotoneChain.prototype.getLineSegment=function(index,ls){ls.p0=this.pts[index];ls.p1=this.pts[index+1];};jsts.index.chain.MonotoneChain.prototype.getCoordinates=function(){var coord=[];var index=0;for(var i=this.start;i<=this.end;i++){coord[index++]=this.pts[i];}\nreturn coord;};jsts.index.chain.MonotoneChain.prototype.select=function(searchEnv,mcs){this.computeSelect2(searchEnv,this.start,this.end,mcs);};jsts.index.chain.MonotoneChain.prototype.computeSelect2=function(searchEnv,start0,end0,mcs){var p0=this.pts[start0];var p1=this.pts[end0];mcs.tempEnv1.init(p0,p1);if(end0-start0===1){mcs.select(this,start0);return;}\nif(!searchEnv.intersects(mcs.tempEnv1))\nreturn;var mid=parseInt((start0+end0)/2);if(start0<mid){this.computeSelect2(searchEnv,start0,mid,mcs);}\nif(mid<end0){this.computeSelect2(searchEnv,mid,end0,mcs);}};jsts.index.chain.MonotoneChain.prototype.computeOverlaps=function(mc,mco){if(arguments.length===6){return this.computeOverlaps2.apply(this,arguments);}\nthis.computeOverlaps2(this.start,this.end,mc,mc.start,mc.end,mco);};jsts.index.chain.MonotoneChain.prototype.computeOverlaps2=function(start0,end0,mc,start1,end1,mco){var p00=this.pts[start0];var p01=this.pts[end0];var p10=mc.pts[start1];var p11=mc.pts[end1];if(end0-start0===1&&end1-start1===1){mco.overlap(this,start0,mc,start1);return;}\nmco.tempEnv1.init(p00,p01);mco.tempEnv2.init(p10,p11);if(!mco.tempEnv1.intersects(mco.tempEnv2))\nreturn;var mid0=parseInt((start0+end0)/2);var mid1=parseInt((start1+end1)/2);if(start0<mid0){if(start1<mid1)\nthis.computeOverlaps2(start0,mid0,mc,start1,mid1,mco);if(mid1<end1)\nthis.computeOverlaps2(start0,mid0,mc,mid1,end1,mco);}\nif(mid0<end0){if(start1<mid1)\nthis.computeOverlaps2(mid0,end0,mc,start1,mid1,mco);if(mid1<end1)\nthis.computeOverlaps2(mid0,end0,mc,mid1,end1,mco);}};(function(){var Location=jsts.geom.Location;var Dimension=jsts.geom.Dimension;jsts.geom.IntersectionMatrix=function(elements){var other=elements;if(elements===undefined||elements===null){this.matrix=[[],[],[]];this.setAll(Dimension.FALSE);}else if(typeof elements==='string'){this.set(elements);}else if(other instanceof jsts.geom.IntersectionMatrix){this.matrix[Location.INTERIOR][Location.INTERIOR]=other.matrix[Location.INTERIOR][Location.INTERIOR];this.matrix[Location.INTERIOR][Location.BOUNDARY]=other.matrix[Location.INTERIOR][Location.BOUNDARY];this.matrix[Location.INTERIOR][Location.EXTERIOR]=other.matrix[Location.INTERIOR][Location.EXTERIOR];this.matrix[Location.BOUNDARY][Location.INTERIOR]=other.matrix[Location.BOUNDARY][Location.INTERIOR];this.matrix[Location.BOUNDARY][Location.BOUNDARY]=other.matrix[Location.BOUNDARY][Location.BOUNDARY];this.matrix[Location.BOUNDARY][Location.EXTERIOR]=other.matrix[Location.BOUNDARY][Location.EXTERIOR];this.matrix[Location.EXTERIOR][Location.INTERIOR]=other.matrix[Location.EXTERIOR][Location.INTERIOR];this.matrix[Location.EXTERIOR][Location.BOUNDARY]=other.matrix[Location.EXTERIOR][Location.BOUNDARY];this.matrix[Location.EXTERIOR][Location.EXTERIOR]=other.matrix[Location.EXTERIOR][Location.EXTERIOR];}};jsts.geom.IntersectionMatrix.prototype.matrix=null;jsts.geom.IntersectionMatrix.prototype.add=function(im){var i,j;for(i=0;i<3;i++){for(j=0;j<3;j++){this.setAtLeast(i,j,im.get(i,j));}}};jsts.geom.IntersectionMatrix.matches=function(actualDimensionValue,requiredDimensionSymbol){if(typeof actualDimensionValue==='string'){return jsts.geom.IntersectionMatrix.matches2.call(this,arguments);}\nif(requiredDimensionSymbol==='*'){return true;}\nif(requiredDimensionSymbol==='T'&&(actualDimensionValue>=0||actualDimensionValue===Dimension.TRUE)){return true;}\nif(requiredDimensionSymbol==='F'&&actualDimensionValue===Dimension.FALSE){return true;}\nif(requiredDimensionSymbol==='0'&&actualDimensionValue===Dimension.P){return true;}\nif(requiredDimensionSymbol==='1'&&actualDimensionValue===Dimension.L){return true;}\nif(requiredDimensionSymbol==='2'&&actualDimensionValue===Dimension.A){return true;}\nreturn false;};jsts.geom.IntersectionMatrix.matches2=function(actualDimensionSymbols,requiredDimensionSymbols){var m=new jsts.geom.IntersectionMatrix(actualDimensionSymbols);return m.matches(requiredDimensionSymbols);};jsts.geom.IntersectionMatrix.prototype.set=function(row,column,dimensionValue){if(typeof row==='string'){this.set2(row);return;}\nthis.matrix[row][column]=dimensionValue;};jsts.geom.IntersectionMatrix.prototype.set2=function(dimensionSymbols){for(var i=0;i<dimensionSymbols.length();i++){var row=i/3;var col=i%3;this.matrix[row][col]=Dimension.toDimensionValue(dimensionSymbols.charAt(i));}};jsts.geom.IntersectionMatrix.prototype.setAtLeast=function(row,column,minimumDimensionValue){if(arguments.length===1){this.setAtLeast2(arguments[0]);return;}\nif(this.matrix[row][column]<minimumDimensionValue){this.matrix[row][column]=minimumDimensionValue;}};jsts.geom.IntersectionMatrix.prototype.setAtLeastIfValid=function(row,column,minimumDimensionValue){if(row>=0&&column>=0){this.setAtLeast(row,column,minimumDimensionValue);}};jsts.geom.IntersectionMatrix.prototype.setAtLeast2=function(minimumDimensionSymbols){var i;for(i=0;i<minimumDimensionSymbols.length;i++){var row=parseInt(i/3);var col=parseInt(i%3);this.setAtLeast(row,col,jsts.geom.Dimension.toDimensionValue(minimumDimensionSymbols.charAt(i)));}};jsts.geom.IntersectionMatrix.prototype.setAll=function(dimensionValue){var ai,bi;for(ai=0;ai<3;ai++){for(bi=0;bi<3;bi++){this.matrix[ai][bi]=dimensionValue;}}};jsts.geom.IntersectionMatrix.prototype.get=function(row,column){return this.matrix[row][column];};jsts.geom.IntersectionMatrix.prototype.isDisjoint=function(){return this.matrix[Location.INTERIOR][Location.INTERIOR]===Dimension.FALSE&&this.matrix[Location.INTERIOR][Location.BOUNDARY]===Dimension.FALSE&&this.matrix[Location.BOUNDARY][Location.INTERIOR]===Dimension.FALSE&&this.matrix[Location.BOUNDARY][Location.BOUNDARY]===Dimension.FALSE;};jsts.geom.IntersectionMatrix.prototype.isIntersects=function(){return!this.isDisjoint();};jsts.geom.IntersectionMatrix.prototype.isTouches=function(dimensionOfGeometryA,dimensionOfGeometryB){if(dimensionOfGeometryA>dimensionOfGeometryB){return this.isTouches(dimensionOfGeometryB,dimensionOfGeometryA);}\nif((dimensionOfGeometryA==Dimension.A&&dimensionOfGeometryB==Dimension.A)||(dimensionOfGeometryA==Dimension.L&&dimensionOfGeometryB==Dimension.L)||(dimensionOfGeometryA==Dimension.L&&dimensionOfGeometryB==Dimension.A)||(dimensionOfGeometryA==Dimension.P&&dimensionOfGeometryB==Dimension.A)||(dimensionOfGeometryA==Dimension.P&&dimensionOfGeometryB==Dimension.L)){return this.matrix[Location.INTERIOR][Location.INTERIOR]===Dimension.FALSE&&(jsts.geom.IntersectionMatrix.matches(this.matrix[Location.INTERIOR][Location.BOUNDARY],'T')||jsts.geom.IntersectionMatrix.matches(this.matrix[Location.BOUNDARY][Location.INTERIOR],'T')||jsts.geom.IntersectionMatrix.matches(this.matrix[Location.BOUNDARY][Location.BOUNDARY],'T'));}\nreturn false;};jsts.geom.IntersectionMatrix.prototype.isCrosses=function(dimensionOfGeometryA,dimensionOfGeometryB){if((dimensionOfGeometryA==Dimension.P&&dimensionOfGeometryB==Dimension.L)||(dimensionOfGeometryA==Dimension.P&&dimensionOfGeometryB==Dimension.A)||(dimensionOfGeometryA==Dimension.L&&dimensionOfGeometryB==Dimension.A)){return jsts.geom.IntersectionMatrix.matches(this.matrix[Location.INTERIOR][Location.INTERIOR],'T')&&jsts.geom.IntersectionMatrix.matches(this.matrix[Location.INTERIOR][Location.EXTERIOR],'T');}\nif((dimensionOfGeometryA==Dimension.L&&dimensionOfGeometryB==Dimension.P)||(dimensionOfGeometryA==Dimension.A&&dimensionOfGeometryB==Dimension.P)||(dimensionOfGeometryA==Dimension.A&&dimensionOfGeometryB==Dimension.L)){return jsts.geom.IntersectionMatrix.matches(matrix[Location.INTERIOR][Location.INTERIOR],'T')&&jsts.geom.IntersectionMatrix.matches(this.matrix[Location.EXTERIOR][Location.INTERIOR],'T');}\nif(dimensionOfGeometryA===Dimension.L&&dimensionOfGeometryB===Dimension.L){return this.matrix[Location.INTERIOR][Location.INTERIOR]===0;}\nreturn false;};jsts.geom.IntersectionMatrix.prototype.isWithin=function(){return jsts.geom.IntersectionMatrix.matches(this.matrix[Location.INTERIOR][Location.INTERIOR],'T')&&this.matrix[Location.INTERIOR][Location.EXTERIOR]==Dimension.FALSE&&this.matrix[Location.BOUNDARY][Location.EXTERIOR]==Dimension.FALSE;};jsts.geom.IntersectionMatrix.prototype.isContains=function(){return jsts.geom.IntersectionMatrix.matches(this.matrix[Location.INTERIOR][Location.INTERIOR],'T')&&this.matrix[Location.EXTERIOR][Location.INTERIOR]==Dimension.FALSE&&this.matrix[Location.EXTERIOR][Location.BOUNDARY]==Dimension.FALSE;};jsts.geom.IntersectionMatrix.prototype.isCovers=function(){var hasPointInCommon=jsts.geom.IntersectionMatrix.matches(this.matrix[Location.INTERIOR][Location.INTERIOR],'T')||jsts.geom.IntersectionMatrix.matches(this.matrix[Location.INTERIOR][Location.BOUNDARY],'T')||jsts.geom.IntersectionMatrix.matches(this.matrix[Location.BOUNDARY][Location.INTERIOR],'T')||jsts.geom.IntersectionMatrix.matches(this.matrix[Location.BOUNDARY][Location.BOUNDARY],'T');return hasPointInCommon&&this.matrix[Location.EXTERIOR][Location.INTERIOR]==Dimension.FALSE&&this.matrix[Location.EXTERIOR][Location.BOUNDARY]==Dimension.FALSE;};jsts.geom.IntersectionMatrix.prototype.isCoveredBy=function(){var hasPointInCommon=jsts.geom.IntersectionMatrix.matches(this.matrix[Location.INTERIOR][Location.INTERIOR],'T')||jsts.geom.IntersectionMatrix.matches(this.matrix[Location.INTERIOR][Location.BOUNDARY],'T')||jsts.geom.IntersectionMatrix.matches(this.matrix[Location.BOUNDARY][Location.INTERIOR],'T')||jsts.geom.IntersectionMatrix.matches(this.matrix[Location.BOUNDARY][Location.BOUNDARY],'T');return hasPointInCommon&&this.matrix[Location.INTERIOR][Location.EXTERIOR]===Dimension.FALSE&&this.matrix[Location.BOUNDARY][Location.EXTERIOR]===Dimension.FALSE;};jsts.geom.IntersectionMatrix.prototype.isEquals=function(dimensionOfGeometryA,dimensionOfGeometryB){if(dimensionOfGeometryA!==dimensionOfGeometryB){return false;}\nreturn jsts.geom.IntersectionMatrix.matches(this.matrix[Location.INTERIOR][Location.INTERIOR],'T')&&this.matrix[Location.EXTERIOR][Location.INTERIOR]===Dimension.FALSE&&this.matrix[Location.INTERIOR][Location.EXTERIOR]===Dimension.FALSE&&this.matrix[Location.EXTERIOR][Location.BOUNDARY]===Dimension.FALSE&&this.matrix[Location.BOUNDARY][Location.EXTERIOR]===Dimension.FALSE;};jsts.geom.IntersectionMatrix.prototype.isOverlaps=function(dimensionOfGeometryA,dimensionOfGeometryB){if((dimensionOfGeometryA==Dimension.P&&dimensionOfGeometryB===Dimension.P)||(dimensionOfGeometryA==Dimension.A&&dimensionOfGeometryB===Dimension.A)){return jsts.geom.IntersectionMatrix.matches(this.matrix[Location.INTERIOR][Location.INTERIOR],'T')&&jsts.geom.IntersectionMatrix.matches(this.matrix[Location.INTERIOR][Location.EXTERIOR],'T')&&jsts.geom.IntersectionMatrix.matches(this.matrix[Location.EXTERIOR][Location.INTERIOR],'T');}\nif(dimensionOfGeometryA===Dimension.L&&dimensionOfGeometryB===Dimension.L){return this.matrix[Location.INTERIOR][Location.INTERIOR]==1&&jsts.geom.IntersectionMatrix.matches(this.matrix[Location.INTERIOR][Location.EXTERIOR],'T')&&jsts.geom.IntersectionMatrix.matches(this.matrix[Location.EXTERIOR][Location.INTERIOR],'T');}\nreturn false;};jsts.geom.IntersectionMatrix.prototype.matches=function(requiredDimensionSymbols){if(requiredDimensionSymbols.length!=9){throw new jsts.error.IllegalArgumentException('Should be length 9: '+\nrequiredDimensionSymbols);}\nfor(var ai=0;ai<3;ai++){for(var bi=0;bi<3;bi++){if(!jsts.geom.IntersectionMatrix.matches(this.matrix[ai][bi],requiredDimensionSymbols.charAt(3*ai+bi))){return false;}}}\nreturn true;};jsts.geom.IntersectionMatrix.prototype.transpose=function(){var temp=matrix[1][0];this.matrix[1][0]=this.matrix[0][1];this.matrix[0][1]=temp;temp=this.matrix[2][0];this.matrix[2][0]=this.matrix[0][2];this.matrix[0][2]=temp;temp=this.matrix[2][1];this.matrix[2][1]=this.matrix[1][2];this.matrix[1][2]=temp;return this;};jsts.geom.IntersectionMatrix.prototype.toString=function(){var ai,bi,buf='';for(ai=0;ai<3;ai++){for(bi=0;bi<3;bi++){buf+=Dimension.toDimensionSymbol(this.matrix[ai][bi]);}}\nreturn buf;};})();jsts.triangulate.quadedge.LastFoundQuadEdgeLocator=function(subdiv){this.subdiv=subdiv;this.lastEdge=null;this.init();};jsts.triangulate.quadedge.LastFoundQuadEdgeLocator.prototype.init=function(){this.lastEdge=this.findEdge();};jsts.triangulate.quadedge.LastFoundQuadEdgeLocator.prototype.findEdge=function(){var edges=this.subdiv.getEdges();return edges[0];};jsts.triangulate.quadedge.LastFoundQuadEdgeLocator.prototype.locate=function(v){if(!this.lastEdge.isLive()){this.init();}\nvar e=this.subdiv.locateFromEdge(v,this.lastEdge);this.lastEdge=e;return e;};jsts.noding.SegmentNodeList=function(edge){this.nodeMap=new javascript.util.TreeMap();this.edge=edge;};jsts.noding.SegmentNodeList.prototype.nodeMap=null;jsts.noding.SegmentNodeList.prototype.iterator=function(){return this.nodeMap.values().iterator();};jsts.noding.SegmentNodeList.prototype.edge=null;jsts.noding.SegmentNodeList.prototype.getEdge=function(){return this.edge;};jsts.noding.SegmentNodeList.prototype.add=function(intPt,segmentIndex){var eiNew=new jsts.noding.SegmentNode(this.edge,intPt,segmentIndex,this.edge.getSegmentOctant(segmentIndex));var ei=this.nodeMap.get(eiNew);if(ei!==null){jsts.util.Assert.isTrue(ei.coord.equals2D(intPt),'Found equal nodes with different coordinates');return ei;}\nthis.nodeMap.put(eiNew,eiNew);return eiNew;};jsts.noding.SegmentNodeList.prototype.addEndpoints=function(){var maxSegIndex=this.edge.size()-1;this.add(this.edge.getCoordinate(0),0);this.add(this.edge.getCoordinate(maxSegIndex),maxSegIndex);};jsts.noding.SegmentNodeList.prototype.addCollapsedNodes=function(){var collapsedVertexIndexes=[];this.findCollapsesFromInsertedNodes(collapsedVertexIndexes);this.findCollapsesFromExistingVertices(collapsedVertexIndexes);for(var i=0;i<collapsedVertexIndexes.length;i++){var vertexIndex=collapsedVertexIndexes[i];this.add(this.edge.getCoordinate(vertexIndex),vertexIndex);}};jsts.noding.SegmentNodeList.prototype.findCollapsesFromExistingVertices=function(collapsedVertexIndexes){for(var i=0;i<this.edge.size()-2;i++){var p0=this.edge.getCoordinate(i);var p1=this.edge.getCoordinate(i+1);var p2=this.edge.getCoordinate(i+2);if(p0.equals2D(p2)){collapsedVertexIndexes.push(i+1);}}};jsts.noding.SegmentNodeList.prototype.findCollapsesFromInsertedNodes=function(collapsedVertexIndexes){var collapsedVertexIndex=[null];var it=this.iterator();var eiPrev=it.next();while(it.hasNext()){var ei=it.next();var isCollapsed=this.findCollapseIndex(eiPrev,ei,collapsedVertexIndex);if(isCollapsed)\ncollapsedVertexIndexes.push(collapsedVertexIndex[0]);eiPrev=ei;}};jsts.noding.SegmentNodeList.prototype.findCollapseIndex=function(ei0,ei1,collapsedVertexIndex){if(!ei0.coord.equals2D(ei1.coord))\nreturn false;var numVerticesBetween=ei1.segmentIndex-ei0.segmentIndex;if(!ei1.isInterior()){numVerticesBetween--;}\nif(numVerticesBetween===1){collapsedVertexIndex[0]=ei0.segmentIndex+1;return true;}\nreturn false;};jsts.noding.SegmentNodeList.prototype.addSplitEdges=function(edgeList){this.addEndpoints();this.addCollapsedNodes();var it=this.iterator();var eiPrev=it.next();while(it.hasNext()){var ei=it.next();var newEdge=this.createSplitEdge(eiPrev,ei);edgeList.add(newEdge);eiPrev=ei;}};jsts.noding.SegmentNodeList.prototype.checkSplitEdgesCorrectness=function(splitEdges){var edgePts=edge.getCoordinates();var split0=splitEdges[0];var pt0=split0.getCoordinate(0);if(!pt0.equals2D(edgePts[0]))\nthrow new Error('bad split edge start point at '+pt0);var splitn=splitEdges[splitEdges.length-1];var splitnPts=splitn.getCoordinates();var ptn=splitnPts[splitnPts.length-1];if(!ptn.equals2D(edgePts[edgePts.length-1]))\nthrow new Error('bad split edge end point at '+ptn);};jsts.noding.SegmentNodeList.prototype.createSplitEdge=function(ei0,ei1){var npts=ei1.segmentIndex-ei0.segmentIndex+2;var lastSegStartPt=this.edge.getCoordinate(ei1.segmentIndex);var useIntPt1=ei1.isInterior()||!ei1.coord.equals2D(lastSegStartPt);if(!useIntPt1){npts--;}\nvar pts=[];var ipt=0;pts[ipt++]=new jsts.geom.Coordinate(ei0.coord);for(var i=ei0.segmentIndex+1;i<=ei1.segmentIndex;i++){pts[ipt++]=this.edge.getCoordinate(i);}\nif(useIntPt1)\npts[ipt]=ei1.coord;return new jsts.noding.NodedSegmentString(pts,this.edge.getData());};jsts.io.WKTWriter=function(){this.parser=new jsts.io.WKTParser(this.geometryFactory);};jsts.io.WKTWriter.prototype.write=function(geometry){var wkt=this.parser.write(geometry);return wkt;};jsts.io.WKTWriter.toLineString=function(p0,p1){if(arguments.length!==2){throw new jsts.error.NotImplementedError();}\nreturn'LINESTRING ( '+p0.x+' '+p0.y+', '+p1.x+' '+p1.y+' )';};jsts.io.WKTReader=function(geometryFactory){this.geometryFactory=geometryFactory||new jsts.geom.GeometryFactory();this.precisionModel=this.geometryFactory.getPrecisionModel();this.parser=new jsts.io.WKTParser(this.geometryFactory);};jsts.io.WKTReader.prototype.read=function(wkt){var geometry=this.parser.read(wkt);if(this.precisionModel.getType()===jsts.geom.PrecisionModel.FIXED){this.reducePrecision(geometry);}\nreturn geometry;};jsts.io.WKTReader.prototype.reducePrecision=function(geometry){var i,len;if(geometry.coordinate){this.precisionModel.makePrecise(geometry.coordinate);}else if(geometry.points){for(i=0,len=geometry.points.length;i<len;i++){this.precisionModel.makePrecise(geometry.points[i]);}}else if(geometry.geometries){for(i=0,len=geometry.geometries.length;i<len;i++){this.reducePrecision(geometry.geometries[i]);}}};jsts.triangulate.quadedge.QuadEdgeSubdivision=function(env,tolerance){this.tolerance=tolerance;this.edgeCoincidenceTolerance=tolerance/jsts.triangulate.quadedge.QuadEdgeSubdivision.EDGE_COINCIDENCE_TOL_FACTOR;this.visitedKey=0;this.quadEdges=[];this.startingEdge;this.tolerance;this.edgeCoincidenceTolerance;this.frameEnv;this.locator=null;this.seg=new jsts.geom.LineSegment();this.triEdges=new Array(3);this.frameVertex=new Array(3);this.createFrame(env);this.startingEdge=this.initSubdiv();this.locator=new jsts.triangulate.quadedge.LastFoundQuadEdgeLocator(this);};jsts.triangulate.quadedge.QuadEdgeSubdivision.EDGE_COINCIDENCE_TOL_FACTOR=1000;jsts.triangulate.quadedge.QuadEdgeSubdivision.getTriangleEdges=function(startQE,triEdge){triEdge[0]=startQE;triEdge[1]=triEdge[0].lNext();triEdge[2]=triEdge[1].lNext();if(triEdge[2].lNext()!=triEdge[0]){throw new jsts.IllegalArgumentError('Edges do not form a triangle');}};jsts.triangulate.quadedge.QuadEdgeSubdivision.prototype.createFrame=function(env){var deltaX,deltaY,offset;deltaX=env.getWidth();deltaY=env.getHeight();offset=0.0;if(deltaX>deltaY){offset=deltaX*10.0;}else{offset=deltaY*10.0;}\nthis.frameVertex[0]=new jsts.triangulate.quadedge.Vertex((env.getMaxX()+env.getMinX())/2.0,env.getMaxY()\n+offset);this.frameVertex[1]=new jsts.triangulate.quadedge.Vertex(env.getMinX()-offset,env.getMinY()-offset);this.frameVertex[2]=new jsts.triangulate.quadedge.Vertex(env.getMaxX()+offset,env.getMinY()-offset);this.frameEnv=new jsts.geom.Envelope(this.frameVertex[0].getCoordinate(),this.frameVertex[1].getCoordinate());this.frameEnv.expandToInclude(this.frameVertex[2].getCoordinate());};jsts.triangulate.quadedge.QuadEdgeSubdivision.prototype.initSubdiv=function(){var ea,eb,ec;ea=this.makeEdge(this.frameVertex[0],this.frameVertex[1]);eb=this.makeEdge(this.frameVertex[1],this.frameVertex[2]);jsts.triangulate.quadedge.QuadEdge.splice(ea.sym(),eb);ec=this.makeEdge(this.frameVertex[2],this.frameVertex[0]);jsts.triangulate.quadedge.QuadEdge.splice(eb.sym(),ec);jsts.triangulate.quadedge.QuadEdge.splice(ec.sym(),ea);return ea;};jsts.triangulate.quadedge.QuadEdgeSubdivision.prototype.getTolerance=function(){return this.tolerance;};jsts.triangulate.quadedge.QuadEdgeSubdivision.prototype.getEnvelope=function(){return new jsts.geom.Envelope(this.frameEnv);};jsts.triangulate.quadedge.QuadEdgeSubdivision.prototype.getEdges=function(){if(arguments.length>0){return this.getEdgesByFactory(arguments[0]);}else{return this.quadEdges;}};jsts.triangulate.quadedge.QuadEdgeSubdivision.prototype.setLocator=function(locator){this.locator=locator;};jsts.triangulate.quadedge.QuadEdgeSubdivision.prototype.makeEdge=function(o,d){var q=jsts.triangulate.quadedge.QuadEdge.makeEdge(o,d);this.quadEdges.push(q);return q;};jsts.triangulate.quadedge.QuadEdgeSubdivision.prototype.connect=function(a,b){var q=jsts.triangulate.quadedge.QuadEdge.connect(a,b);this.quadEdges.push(q);return q;};jsts.triangulate.quadedge.QuadEdgeSubdivision.prototype.delete_jsts=function(e){jsts.triangulate.quadedge.QuadEdge.splice(e,e.oPrev());jsts.triangulate.quadedge.QuadEdge.splice(e.sym(),e.sym().oPrev());var eSym,eRot,eRotSym;e.eSym=e.sym();eRot=e.rot;eRotSym=e.rot.sym();var idx=this.quadEdges.indexOf(e);if(idx!==-1){this.quadEdges.splice(idx,1);}\nidx=this.quadEdges.indexOf(eSym);if(idx!==-1){this.quadEdges.splice(idx,1);}\nidx=this.quadEdges.indexOf(eRot);if(idx!==-1){this.quadEdges.splice(idx,1);}\nidx=this.quadEdges.indexOf(eRotSym);if(idx!==-1){this.quadEdges.splice(idx,1);}\ne.delete_jsts();eSym.delete_jsts();eRot.delete_jsts();eRotSym.delete_jsts();};jsts.triangulate.quadedge.QuadEdgeSubdivision.prototype.locateFromEdge=function(v,startEdge){var iter=0,maxIter=this.quadEdges.length,e;e=startEdge;while(true){iter++;if(iter>maxIter){throw new jsts.error.LocateFailureError(e.toLineSegment());}\nif((v.equals(e.orig()))||(v.equals(e.dest()))){break;}else if(v.rightOf(e)){e=e.sym();}else if(!v.rightOf(e.oNext())){e=e.oNext();}else if(!v.rightOf(e.dPrev())){e=e.dPrev();}else{break;}}\nreturn e;};jsts.triangulate.quadedge.QuadEdgeSubdivision.prototype.locate=function(){if(arguments.length===1){if(arguments[0]instanceof jsts.triangulate.quadedge.Vertex){return this.locateByVertex(arguments[0]);}else{return this.locateByCoordinate(arguments[0]);}}else{return this.locateByCoordinates(arguments[0],arguments[1]);}};jsts.triangulate.quadedge.QuadEdgeSubdivision.prototype.locateByVertex=function(v){return this.locator.locate(v);};jsts.triangulate.quadedge.QuadEdgeSubdivision.prototype.locateByCoordinate=function(p){return this.locator.locate(new jsts.triangulate.quadedge.Vertex(p));};jsts.triangulate.quadedge.QuadEdgeSubdivision.prototype.locateByCoordinates=function(p0,p1){var e,base,locEdge;var e=this.locator.locate(new jsts.triangulate.quadedge.Vertex(p0));if(e===null){return null;}\nbase=e;if(e.dest().getCoordinate().equals2D(p0)){base=e.sym();}\nlocEdge=base;do{if(locEdge.dest().getCoordinate().equals2D(p1)){return locEdge;}\nlocEdge=locEdge.oNext();}while(locEdge!=base);return null;};jsts.triangulate.quadedge.QuadEdgeSubdivision.prototype.insertSite=function(v){var e,base,startEdge;e=this.locate(v);if((v.equals(e.orig(),this.tolerance))||(v.equals(e.dest(),this.tolerance))){return e;}\nbase=this.makeEdge(e.orig(),v);jsts.triangulate.quadedge.QuadEdge.splice(base,e);startEdge=base;do{base=this.connect(e,base.sym());e=base.oPrev();}while(e.lNext()!=startEdge);return startEdge;};jsts.triangulate.quadedge.QuadEdgeSubdivision.prototype.isFrameEdge=function(e){if(this.isFrameVertex(e.orig())||this.isFrameVertex(e.dest())){return true;}\nreturn false;};jsts.triangulate.quadedge.QuadEdgeSubdivision.prototype.isFrameBorderEdge=function(e){var leftTri,rightTri,vLeftTriOther,vRightTriOther;leftTri=new Array(3);this.getTriangleEdges(e,leftTri);rightTri=new Array(3);this.getTriangleEdges(e.sym(),rightTri);vLeftTriOther=e.lNext().dest();if(this.isFrameVertex(vLeftTriOther)){return true;}\nvRightTriOther=e.sym().lNext().dest();if(this.isFrameVertex(vRightTriOther)){return true;}\nreturn false;};jsts.triangulate.quadedge.QuadEdgeSubdivision.prototype.isFrameVertex=function(v){if(v.equals(this.frameVertex[0])){return true;}\nif(v.equals(this.frameVertex[1])){return true;}\nif(v.equals(this.frameVertex[2])){return true;}\nreturn false;};jsts.triangulate.quadedge.QuadEdgeSubdivision.prototype.isOnEdge=function(e,p){this.seg.setCoordinates(e.orig().getCoordinate(),e.dest().getCoordinate());var dist=this.seg.distance(p);return dist<this.edgeCoincidenceTolerance;};jsts.triangulate.quadedge.QuadEdgeSubdivision.prototype.isVertexOfEdge=function(e,v){if((v.equals(e.orig(),this.tolerance))||(v.equals(e.dest(),this.tolerance))){return true;}\nreturn false;};jsts.triangulate.quadedge.QuadEdgeSubdivision.prototype.getVertices=function(includeFrame)\n{var vertices=[],i,il,qe,v,vd;i=0,il=this.quadEdges.length;for(i;i<il;i++){qe=this.quadEdges[i];v=qe.orig();if(includeFrame||!this.isFrameVertex(v)){vertices.push(v);}\nvd=qe.dest();if(includeFrame||!this.isFrameVertex(vd)){vertices.push(vd);}}\nreturn vertices;};jsts.triangulate.quadedge.QuadEdgeSubdivision.prototype.getVertexUniqueEdges=function(includeFrame)\n{var edges,visitedVertices,i,il,qe,v,qd,vd;edges=[];visitedVertices=[];i=0,il=this.quadEdges.length;for(i;i<il;i++){qe=this.quadEdges[i];v=qe.orig();if(visitedVertices.indexOf(v)===-1){visitedVertices.push(v);if(includeFrame||!this.isFrameVertex(v)){edges.push(qe);}}\nqd=qe.sym();vd=qd.orig();if(visitedVertices.indexOf(vd)===-1){visitedVertices.push(vd);if(includeFrame||!this.isFrameVertex(vd)){edges.push(qd);}}}\nreturn edges;};jsts.triangulate.quadedge.QuadEdgeSubdivision.prototype.getPrimaryEdges=function(includeFrame){this.visitedKey++;var edges,edgeStack,visitedEdges,edge,priQE;edges=[];edgeStack=[];edgeStack.push(this.startingEdge);visitedEdges=[];while(edgeStack.length>0){edge=edgeStack.pop();if(visitedEdges.indexOf(edge)===-1){priQE=edge.getPrimary();if(includeFrame||!this.isFrameEdge(priQE)){edges.push(priQE);}\nedgeStack.push(edge.oNext());edgeStack.push(edge.sym().oNext());visitedEdges.push(edge);visitedEdges.push(edge.sym());}}\nreturn edges;};jsts.triangulate.quadedge.QuadEdgeSubdivision.prototype.visitTriangles=function(triVisitor,includeFrame){this.visitedKey++;var edgeStack,visitedEdges,edge,triEdges;edgeStack=[];edgeStack.push(this.startingEdge);visitedEdges=[];while(edgeStack.length>0){edge=edgeStack.pop();if(visitedEdges.indexOf(edge)===-1){triEdges=this.fetchTriangleToVisit(edge,edgeStack,includeFrame,visitedEdges);if(triEdges!==null)\ntriVisitor.visit(triEdges);}}};jsts.triangulate.quadedge.QuadEdgeSubdivision.prototype.fetchTriangleToVisit=function(edge,edgeStack,includeFrame,visitedEdges){var curr,edgeCount,isFrame,sym;curr=edge;edgeCount=0;isFrame=false;do{this.triEdges[edgeCount]=curr;if(this.isFrameEdge(curr)){isFrame=true;}\nsym=curr.sym();if(visitedEdges.indexOf(sym)===-1){edgeStack.push(sym);}\nvisitedEdges.push(curr);edgeCount++;curr=curr.lNext();}while(curr!==edge);if(isFrame&&!includeFrame){return null;}\nreturn this.triEdges;};jsts.triangulate.quadedge.QuadEdgeSubdivision.prototype.getTriangleEdges=function(includeFrame){var visitor=new jsts.triangulate.quadedge.TriangleEdgesListVisitor();this.visitTriangles(visitor,includeFrame);return visitor.getTriangleEdges();};jsts.triangulate.quadedge.QuadEdgeSubdivision.prototype.getTriangleVertices=function(includeFrame){var visitor=new TriangleVertexListVisitor();this.visitTriangles(visitor,includeFrame);return visitor.getTriangleVertices();};jsts.triangulate.quadedge.QuadEdgeSubdivision.prototype.getTriangleCoordinates=function(includeFrame){var visitor=new jsts.triangulate.quadedge.TriangleCoordinatesVisitor();this.visitTriangles(visitor,includeFrame);return visitor.getTriangles();};jsts.triangulate.quadedge.QuadEdgeSubdivision.prototype.getEdgesByFactory=function(geomFact){var quadEdges,edges,i,il,qe,coords;quadEdges=this.getPrimaryEdges(false);edges=[];i=0;il=quadEdges.length;for(i;i<il;i++){qe=quadEdges[i];coords=[];coords[0]=(qe.orig().getCoordinate());coords[1]=(qe.dest().getCoordinate());edges[i]=geomFact.createLineString(coords);}\nreturn geomFact.createMultiLineString(edges);};jsts.triangulate.quadedge.QuadEdgeSubdivision.prototype.getTriangles=function(geomFact){var triPtsList,tris,triPt,i,il;triPtsList=this.getTriangleCoordinates(false);tris=new Array(triPtsList.length);i=0,il=triPtsList.length;for(i;i<il;i++){triPt=triPtsList[i];tris[i]=geomFact.createPolygon(geomFact.createLinearRing(triPt,null));}\nreturn geomFact.createGeometryCollection(tris);};jsts.triangulate.quadedge.QuadEdgeSubdivision.prototype.getVoronoiDiagram=function(geomFact)\n{var vorCells=this.getVoronoiCellPolygons(geomFact);return geomFact.createGeometryCollection(vorCells);};jsts.triangulate.quadedge.QuadEdgeSubdivision.prototype.getVoronoiCellPolygons=function(geomFact)\n{this.visitTriangles(new jsts.triangulate.quadedge.TriangleCircumcentreVisitor(),true);var cells,edges,i,il,qe;cells=[];edges=this.getVertexUniqueEdges(false);i=0,il=edges.length;for(i;i<il;i++){qe=edges[i];cells.push(this.getVoronoiCellPolygon(qe,geomFact));}\nreturn cells;};jsts.triangulate.quadedge.QuadEdgeSubdivision.prototype.getVoronoiCellPolygon=function(qe,geomFact)\n{var cellPts,startQe,cc,coordList,cellPoly,v;cellPts=[];startQE=qe;do{cc=qe.rot.orig().getCoordinate();cellPts.push(cc);qe=qe.oPrev();}while(qe!==startQE);coordList=new jsts.geom.CoordinateList([],false);coordList.add(cellPts,false);coordList.closeRing();if(coordList.size()<4){coordList.add(coordList.get(coordList.size()-1),true);}\ncellPoly=geomFact.createPolygon(geomFact.createLinearRing(coordList.toArray()),null);v=startQE.orig();return cellPoly;};jsts.triangulate.quadedge.TriangleCircumcentreVisitor=function(){};jsts.triangulate.quadedge.TriangleCircumcentreVisitor.prototype.visit=function(triEdges){var a,b,c,cc,ccVertex,i;a=triEdges[0].orig().getCoordinate();b=triEdges[1].orig().getCoordinate();c=triEdges[2].orig().getCoordinate();cc=jsts.geom.Triangle.circumcentre(a,b,c);ccVertex=new jsts.triangulate.quadedge.Vertex(cc);i=0;for(i;i<3;i++){triEdges[i].rot.setOrig(ccVertex);}};jsts.triangulate.quadedge.TriangleEdgesListVisitor=function(){this.triList=[];};jsts.triangulate.quadedge.TriangleEdgesListVisitor.prototype.visit=function(triEdges){var clone=triEdges.concat();this.triList.push(clone);};jsts.triangulate.quadedge.TriangleEdgesListVisitor.prototype.getTriangleEdges=function(){return this.triList;};jsts.triangulate.quadedge.TriangleVertexListVisitor=function(){this.triList=[];};jsts.triangulate.quadedge.TriangleVertexListVisitor.prototype.visit=function(triEdges){var vertices=[];vertices.push(trieEdges[0].orig());vertices.push(trieEdges[1].orig());vertices.push(trieEdges[2].orig());this.triList.push(vertices);};jsts.triangulate.quadedge.TriangleVertexListVisitor.prototype.getTriangleVertices=function(){return this.triList;};jsts.triangulate.quadedge.TriangleCoordinatesVisitor=function(){this.coordList=new jsts.geom.CoordinateList([],false);this.triCoords=[];};jsts.triangulate.quadedge.TriangleCoordinatesVisitor.prototype.visit=function(triEdges){this.coordList=new jsts.geom.CoordinateList([],false);var i=0,v,pts;for(i;i<3;i++){v=triEdges[i].orig();this.coordList.add(v.getCoordinate());}\nif(this.coordList.size()>0){this.coordList.closeRing();pts=this.coordList.toArray();if(pts.length!==4){return;}\nthis.triCoords.push(pts);}};jsts.triangulate.quadedge.TriangleCoordinatesVisitor.prototype.getTriangles=function(){return this.triCoords;};jsts.operation.relate.EdgeEndBundle=function(){this.edgeEnds=[];var e=arguments[0]instanceof jsts.geomgraph.EdgeEnd?arguments[0]:arguments[1];var edge=e.getEdge();var coord=e.getCoordinate();var dirCoord=e.getDirectedCoordinate();var label=new jsts.geomgraph.Label(e.getLabel());jsts.geomgraph.EdgeEnd.call(this,edge,coord,dirCoord,label);this.insert(e);};jsts.operation.relate.EdgeEndBundle.prototype=new jsts.geomgraph.EdgeEnd();jsts.operation.relate.EdgeEndBundle.prototype.edgeEnds=null;jsts.operation.relate.EdgeEndBundle.prototype.getLabel=function(){return this.label;};jsts.operation.relate.EdgeEndBundle.prototype.getEdgeEnds=function(){return this.edgeEnds;};jsts.operation.relate.EdgeEndBundle.prototype.insert=function(e){this.edgeEnds.push(e);};jsts.operation.relate.EdgeEndBundle.prototype.computeLabel=function(boundaryNodeRule){var isArea=false;for(var i=0;i<this.edgeEnds.length;i++){var e=this.edgeEnds[i];if(e.getLabel().isArea())\nisArea=true;}\nif(isArea)\nthis.label=new jsts.geomgraph.Label(jsts.geom.Location.NONE,jsts.geom.Location.NONE,jsts.geom.Location.NONE);else\nthis.label=new jsts.geomgraph.Label(jsts.geom.Location.NONE);for(var i=0;i<2;i++){this.computeLabelOn(i,boundaryNodeRule);if(isArea)\nthis.computeLabelSides(i);}};jsts.operation.relate.EdgeEndBundle.prototype.computeLabelOn=function(geomIndex,boundaryNodeRule){var boundaryCount=0;var foundInterior=false;for(var i=0;i<this.edgeEnds.length;i++){var e=this.edgeEnds[i];var loc=e.getLabel().getLocation(geomIndex);if(loc==jsts.geom.Location.BOUNDARY)\nboundaryCount++;if(loc==jsts.geom.Location.INTERIOR)\nfoundInterior=true;}\nvar loc=jsts.geom.Location.NONE;if(foundInterior)\nloc=jsts.geom.Location.INTERIOR;if(boundaryCount>0){loc=jsts.geomgraph.GeometryGraph.determineBoundary(boundaryNodeRule,boundaryCount);}\nthis.label.setLocation(geomIndex,loc);};jsts.operation.relate.EdgeEndBundle.prototype.computeLabelSides=function(geomIndex){this.computeLabelSide(geomIndex,jsts.geomgraph.Position.LEFT);this.computeLabelSide(geomIndex,jsts.geomgraph.Position.RIGHT);};jsts.operation.relate.EdgeEndBundle.prototype.computeLabelSide=function(geomIndex,side){for(var i=0;i<this.edgeEnds.length;i++){var e=this.edgeEnds[i];if(e.getLabel().isArea()){var loc=e.getLabel().getLocation(geomIndex,side);if(loc===jsts.geom.Location.INTERIOR){this.label.setLocation(geomIndex,side,jsts.geom.Location.INTERIOR);return;}else if(loc===jsts.geom.Location.EXTERIOR)\nthis.label.setLocation(geomIndex,side,jsts.geom.Location.EXTERIOR);}}};jsts.operation.relate.EdgeEndBundle.prototype.updateIM=function(im){jsts.geomgraph.Edge.updateIM(this.label,im);};jsts.index.kdtree.KdTree=function(tolerance){var tol=0.0;if(tolerance!==undefined){tol=tolerance;}\nthis.root=null;this.last=null;this.numberOfNodes=0;this.tolerance=tol;};jsts.index.kdtree.KdTree.prototype.insert=function(){if(arguments.length===1){return this.insertCoordinate.apply(this,arguments[0]);}else{return this.insertWithData.apply(this,arguments[0],arguments[1]);}};jsts.index.kdtree.KdTree.prototype.insertCoordinate=function(p){return this.insertWithData(p,null);};jsts.index.kdtree.KdTree.prototype.insertWithData=function(p,data){if(this.root===null){this.root=new jsts.index.kdtree.KdNode(p,data);return this.root;}\nvar currentNode=this.root,leafNode=this.root,isOddLevel=true,isLessThan=true;while(currentNode!==last){if(isOddLevel){isLessThan=p.x<currentNode.getX();}else{isLessThan=p.y<currentNode.getY();}\nleafNode=currentNode;if(isLessThan){currentNode=currentNode.getLeft();}else{currentNode=currentNode.getRight();}\nif(currentNode!==null){var isInTolerance=p.distance(currentNode.getCoordinate())<=this.tolerance;if(isInTolerance){currentNode.increment();return currentNode;}}\nisOddLevel=!isOddLevel;}\nthis.numberOfNodes=numberOfNodes+1;var node=new jsts.index.kdtree.KdNode(p,data);node.setLeft(this.last);node.setRight(this.last);if(isLessThan){leafNode.setLeft(node);}else{leafNode.setRight(node);}\nreturn node;};jsts.index.kdtree.KdTree.prototype.queryNode=function(currentNode,bottomNode,queryEnv,odd,result){if(currentNode===bottomNode){return;}\nvar min,max,discriminant;if(odd){min=queryEnv.getMinX();max=queryEnv.getMaxX();discriminant=currentNode.getX();}else{min=queryEnv.getMinY();max=queryEnv.getMaxY();discriminant=currentNode.getY();}\nvar searchLeft=min<discriminant;var searchRight=discriminant<=max;if(searchLeft){this.queryNode(currentNode.getLeft(),bottomNode,queryEnv,!odd,result);}\nif(queryEnv.contains(currentNode.getCoordinate())){result.add(currentNode);}\nif(searchRight){this.queryNode(currentNode.getRight(),bottomNode,queryEnv,!odd,result);}};jsts.index.kdtree.KdTree.prototype.query=function(){if(arguments.length===1){return this.queryByEnvelope.apply(this,arguments[0]);}else{return this.queryWithArray.apply(this,arguments[0],arguments[1]);}};jsts.index.kdtree.KdTree.prototype.queryByEnvelope=function(queryEnv){var result=[];this.queryNode(this.root,this.last,queryEnv,true,result);return result;};jsts.index.kdtree.KdTree.prototype.queryWithArray=function(queryEnv,result){this.queryNode(this.root,this.last,queryEnv,true,result);};jsts.geom.Triangle=function(p0,p1,p2){this.p0=p0;this.p1=p1;this.p2=p2;};jsts.geom.Triangle.isAcute=function(a,b,c){if(!jsts.algorithm.Angle.isAcute(a,b,c)){return false;}\nif(!jsts.algorithm.Angle.isAcute(b,c,a)){return false;}\nif(!jsts.algorithm.Angle.isAcute(c,a,b)){return false;}\nreturn true;};jsts.geom.Triangle.perpendicularBisector=function(a,b){var dx,dy,l1,l2;dx=b.x-a.x;dy=b.y-a.y;l1=new jsts.algorithm.HCoordinate(a.x+dx/2.0,a.y+dy/2.0,1.0);l2=new jsts.algorithm.HCoordinate(a.x-dy+dx/2.0,a.y+dx+dy/2.0,1.0);return new jsts.algorithm.HCoordinate(l1,l2);};jsts.geom.Triangle.circumcentre=function(a,b,c){var cx,cy,ax,ay,bx,by,denom,numx,numy,ccx,ccy;cx=c.x;cy=c.y;ax=a.x-cx;ay=a.y-cy;bx=b.x-cx;by=b.y-cy;denom=2*jsts.geom.Triangle.det(ax,ay,bx,by);numx=jsts.geom.Triangle.det(ay,ax*ax+ay*ay,by,bx*bx+by*by);numy=jsts.geom.Triangle.det(ax,ax*ax+ay*ay,bx,bx*bx+by*by);ccx=cx-numx/denom;ccy=cy+numy/denom;return new jsts.geom.Coordinate(ccx,ccy);};jsts.geom.Triangle.det=function(m00,m01,m10,m11){return m00*m11-m01*m10;};jsts.geom.Triangle.inCentre=function(a,b,c){var len0,len1,len2,circum,inCentreX,inCentreY;len0=b.distance(c);len1=a.distance(c);len2=a.distance(b);circum=len0+len1+len2;inCentreX=(len0*a.x+len1*b.x+len2*c.x)/circum;inCentreY=(len0*a.y+len1*b.y+len2*c.y)/circum;return new jsts.geom.Coordinate(inCentreX,inCentreY);};jsts.geom.Triangle.centroid=function(a,b,c){var x,y;x=(a.x+b.x+c.x)/3;y=(a.y+b.y+c.y)/3;return new jsts.geom.Coordinate(x,y);};jsts.geom.Triangle.longestSideLength=function(a,b,c){var lenAB,lenBC,lenCA,maxLen;lenAB=a.distance(b);lenBC=b.distance(c);lenCA=c.distance(a);maxLen=lenAB;if(lenBC>maxLen){maxLen=lenBC;}\nif(lenCA>maxLen){maxLen=lenCA;}\nreturn maxLen;};jsts.geom.Triangle.angleBisector=function(a,b,c){var len0,len2,frac,dx,dy,splitPt;len0=b.distance(a);len2=b.distance(c);frac=len0/(len0+len2);dx=c.x-a.x;dy=c.y-a.y;splitPt=new jsts.geom.Coordinate(a.x+frac*dx,a.y+frac*dy);return splitPt;};jsts.geom.Triangle.area=function(a,b,c){return Math.abs(((c.x-a.x)*(b.y-a.y)-(b.x-a.x)*(c.y-a.y))/2.0);};jsts.geom.Triangle.signedArea=function(a,b,c){return((c.x-a.x)*(b.y-a.y)-(b.x-a.x)*(c.y-a.y))/2.0;};jsts.geom.Triangle.prototype.inCentre=function(){return jsts.geom.Triangle.inCentre(this.p0,this.p1,this.p2);};jsts.noding.OrientedCoordinateArray=function(pts){this.pts=pts;this._orientation=jsts.noding.OrientedCoordinateArray.orientation(pts);};jsts.noding.OrientedCoordinateArray.prototype.pts=null;jsts.noding.OrientedCoordinateArray.prototype._orientation=undefined;jsts.noding.OrientedCoordinateArray.orientation=function(pts){return jsts.geom.CoordinateArrays.increasingDirection(pts)===1;};jsts.noding.OrientedCoordinateArray.prototype.compareTo=function(o1){var oca=o1;var comp=jsts.noding.OrientedCoordinateArray.compareOriented(this.pts,this._orientation,oca.pts,oca._orientation);return comp;};jsts.noding.OrientedCoordinateArray.compareOriented=function(pts1,orientation1,pts2,orientation2){var dir1=orientation1?1:-1;var dir2=orientation2?1:-1;var limit1=orientation1?pts1.length:-1;var limit2=orientation2?pts2.length:-1;var i1=orientation1?0:pts1.length-1;var i2=orientation2?0:pts2.length-1;var comp=0;while(true){var compPt=pts1[i1].compareTo(pts2[i2]);if(compPt!==0)\nreturn compPt;i1+=dir1;i2+=dir2;var done1=i1===limit1;var done2=i2===limit2;if(done1&&!done2)\nreturn-1;if(!done1&&done2)\nreturn 1;if(done1&&done2)\nreturn 0;}};jsts.algorithm.CentralEndpointIntersector=function(p00,p01,p10,p11){this.pts=[p00,p01,p10,p11];this.compute();};jsts.algorithm.CentralEndpointIntersector.getIntersection=function(p00,p01,p10,p11){var intor=new jsts.algorithm.CentralEndpointIntersector(p00,p01,p10,p11);return intor.getIntersection();};jsts.algorithm.CentralEndpointIntersector.prototype.pts=null;jsts.algorithm.CentralEndpointIntersector.prototype.intPt=null;jsts.algorithm.CentralEndpointIntersector.prototype.compute=function(){var centroid=jsts.algorithm.CentralEndpointIntersector.average(this.pts);this.intPt=this.findNearestPoint(centroid,this.pts);};jsts.algorithm.CentralEndpointIntersector.prototype.getIntersection=function(){return this.intPt;};jsts.algorithm.CentralEndpointIntersector.average=function(pts){var avg=new jsts.geom.Coordinate();var i,n=pts.length;for(i=0;i<n;i++){avg.x+=pts[i].x;avg.y+=pts[i].y;}\nif(n>0){avg.x/=n;avg.y/=n;}\nreturn avg;};jsts.algorithm.CentralEndpointIntersector.prototype.findNearestPoint=function(p,pts){var minDist=Number.MAX_VALUE;var i,result=null,dist;for(i=0;i<pts.length;i++){dist=p.distance(pts[i]);if(dist<minDist){minDist=dist;result=pts[i];}}\nreturn result;};jsts.operation.buffer.BufferOp=function(g,bufParams){this.argGeom=g;this.bufParams=bufParams?bufParams:new jsts.operation.buffer.BufferParameters();};jsts.operation.buffer.BufferOp.MAX_PRECISION_DIGITS=12;jsts.operation.buffer.BufferOp.precisionScaleFactor=function(g,distance,maxPrecisionDigits){var env=g.getEnvelopeInternal();var envSize=Math.max(env.getHeight(),env.getWidth());var expandByDistance=distance>0.0?distance:0.0;var bufEnvSize=envSize+2*expandByDistance;var bufEnvLog10=(Math.log(bufEnvSize)/Math.log(10)+1.0);var minUnitLog10=bufEnvLog10-maxPrecisionDigits;var scaleFactor=Math.pow(10.0,-minUnitLog10);return scaleFactor;};jsts.operation.buffer.BufferOp.bufferOp=function(g,distance){if(arguments.length>2){return jsts.operation.buffer.BufferOp.bufferOp2.apply(this,arguments);}\nvar gBuf=new jsts.operation.buffer.BufferOp(g);var geomBuf=gBuf.getResultGeometry(distance);return geomBuf;};jsts.operation.buffer.BufferOp.bufferOp2=function(g,distance,params){if(arguments.length>3){return jsts.operation.buffer.BufferOp.bufferOp3.apply(this,arguments);}\nvar bufOp=new jsts.operation.buffer.BufferOp(g,params);var geomBuf=bufOp.getResultGeometry(distance);return geomBuf;};jsts.operation.buffer.BufferOp.bufferOp3=function(g,distance,quadrantSegments){if(arguments.length>4){return jsts.operation.buffer.BufferOp.bufferOp4.apply(this,arguments);}\nvar bufOp=new jsts.operation.buffer.BufferOp(g);bufOp.setQuadrantSegments(quadrantSegments);var geomBuf=bufOp.getResultGeometry(distance);return geomBuf;};jsts.operation.buffer.BufferOp.bufferOp4=function(g,distance,quadrantSegments,endCapStyle){var bufOp=new jsts.operation.buffer.BufferOp(g);bufOp.setQuadrantSegments(quadrantSegments);bufOp.setEndCapStyle(endCapStyle);var geomBuf=bufOp.getResultGeometry(distance);return geomBuf;};jsts.operation.buffer.BufferOp.prototype.argGeom=null;jsts.operation.buffer.BufferOp.prototype.distance=null;jsts.operation.buffer.BufferOp.prototype.bufParams=null;jsts.operation.buffer.BufferOp.prototype.resultGeometry=null;jsts.operation.buffer.BufferOp.prototype.setEndCapStyle=function(endCapStyle){this.bufParams.setEndCapStyle(endCapStyle);};jsts.operation.buffer.BufferOp.prototype.setQuadrantSegments=function(quadrantSegments){this.bufParams.setQuadrantSegments(quadrantSegments);};jsts.operation.buffer.BufferOp.prototype.getResultGeometry=function(dist){this.distance=dist;this.computeGeometry();return this.resultGeometry;};jsts.operation.buffer.BufferOp.prototype.computeGeometry=function(){this.bufferOriginalPrecision();if(this.resultGeometry!==null){return;}\nvar argPM=this.argGeom.getPrecisionModel();if(argPM.getType()===jsts.geom.PrecisionModel.FIXED){this.bufferFixedPrecision(argPM);}else{this.bufferReducedPrecision();}};jsts.operation.buffer.BufferOp.prototype.bufferReducedPrecision=function(){var precDigits;var saveException=null;for(precDigits=jsts.operation.buffer.BufferOp.MAX_PRECISION_DIGITS;precDigits>=0;precDigits--){try{this.bufferReducedPrecision2(precDigits);}catch(ex){saveException=ex;}\nif(this.resultGeometry!==null){return;}}\nthrow saveException;};jsts.operation.buffer.BufferOp.prototype.bufferOriginalPrecision=function(){try{var bufBuilder=new jsts.operation.buffer.BufferBuilder(this.bufParams);this.resultGeometry=bufBuilder.buffer(this.argGeom,this.distance);}catch(e){}};jsts.operation.buffer.BufferOp.prototype.bufferReducedPrecision2=function(precisionDigits){var sizeBasedScaleFactor=jsts.operation.buffer.BufferOp.precisionScaleFactor(this.argGeom,this.distance,precisionDigits);var fixedPM=new jsts.geom.PrecisionModel(sizeBasedScaleFactor);this.bufferFixedPrecision(fixedPM);};jsts.operation.buffer.BufferOp.prototype.bufferFixedPrecision=function(fixedPM){var noder=new jsts.noding.ScaledNoder(new jsts.noding.snapround.MCIndexSnapRounder(new jsts.geom.PrecisionModel(1.0)),fixedPM.getScale());var bufBuilder=new jsts.operation.buffer.BufferBuilder(this.bufParams);bufBuilder.setWorkingPrecisionModel(fixedPM);bufBuilder.setNoder(noder);this.resultGeometry=bufBuilder.buffer(this.argGeom,this.distance);};(function(){var Location=jsts.geom.Location;var Position=jsts.geomgraph.Position;var Assert=jsts.util.Assert;jsts.geomgraph.GeometryGraph=function(argIndex,parentGeom,boundaryNodeRule){jsts.geomgraph.PlanarGraph.call(this);this.lineEdgeMap=new javascript.util.HashMap();this.ptLocator=new jsts.algorithm.PointLocator();this.argIndex=argIndex;this.parentGeom=parentGeom;this.boundaryNodeRule=boundaryNodeRule||jsts.algorithm.BoundaryNodeRule.OGC_SFS_BOUNDARY_RULE;if(parentGeom!==null){this.add(parentGeom);}};jsts.geomgraph.GeometryGraph.prototype=new jsts.geomgraph.PlanarGraph();jsts.geomgraph.GeometryGraph.constructor=jsts.geomgraph.GeometryGraph;jsts.geomgraph.GeometryGraph.prototype.createEdgeSetIntersector=function(){return new jsts.geomgraph.index.SimpleMCSweepLineIntersector();};jsts.geomgraph.GeometryGraph.determineBoundary=function(boundaryNodeRule,boundaryCount){return boundaryNodeRule.isInBoundary(boundaryCount)?Location.BOUNDARY:Location.INTERIOR;};jsts.geomgraph.GeometryGraph.prototype.parentGeom=null;jsts.geomgraph.GeometryGraph.prototype.lineEdgeMap=null;jsts.geomgraph.GeometryGraph.prototype.boundaryNodeRule=null;jsts.geomgraph.GeometryGraph.prototype.useBoundaryDeterminationRule=true;jsts.geomgraph.GeometryGraph.prototype.argIndex=null;jsts.geomgraph.GeometryGraph.prototype.boundaryNodes=null;jsts.geomgraph.GeometryGraph.prototype.hasTooFewPoints=false;jsts.geomgraph.GeometryGraph.prototype.invalidPoint=null;jsts.geomgraph.GeometryGraph.prototype.areaPtLocator=null;jsts.geomgraph.GeometryGraph.prototype.ptLocator=null;jsts.geomgraph.GeometryGraph.prototype.getGeometry=function(){return this.parentGeom;};jsts.geomgraph.GeometryGraph.prototype.getBoundaryNodes=function(){if(this.boundaryNodes===null)\nthis.boundaryNodes=this.nodes.getBoundaryNodes(this.argIndex);return this.boundaryNodes;};jsts.geomgraph.GeometryGraph.prototype.getBoundaryNodeRule=function(){return this.boundaryNodeRule;};jsts.geomgraph.GeometryGraph.prototype.findEdge=function(line){return this.lineEdgeMap.get(line);};jsts.geomgraph.GeometryGraph.prototype.computeSplitEdges=function(edgelist){for(var i=this.edges.iterator();i.hasNext();){var e=i.next();e.eiList.addSplitEdges(edgelist);}}\njsts.geomgraph.GeometryGraph.prototype.add=function(g){if(g.isEmpty()){return;}\nif(g instanceof jsts.geom.MultiPolygon)\nthis.useBoundaryDeterminationRule=false;if(g instanceof jsts.geom.Polygon)\nthis.addPolygon(g);else if(g instanceof jsts.geom.LineString)\nthis.addLineString(g);else if(g instanceof jsts.geom.Point)\nthis.addPoint(g);else if(g instanceof jsts.geom.MultiPoint)\nthis.addCollection(g);else if(g instanceof jsts.geom.MultiLineString)\nthis.addCollection(g);else if(g instanceof jsts.geom.MultiPolygon)\nthis.addCollection(g);else if(g instanceof jsts.geom.GeometryCollection)\nthis.addCollection(g);else\nthrow new jsts.error.IllegalArgumentError('Geometry type not supported.');};jsts.geomgraph.GeometryGraph.prototype.addCollection=function(gc){for(var i=0;i<gc.getNumGeometries();i++){var g=gc.getGeometryN(i);this.add(g);}};jsts.geomgraph.GeometryGraph.prototype.addEdge=function(e){this.insertEdge(e);var coord=e.getCoordinates();this.insertPoint(this.argIndex,coord[0],Location.BOUNDARY);this.insertPoint(this.argIndex,coord[coord.length-1],Location.BOUNDARY);};jsts.geomgraph.GeometryGraph.prototype.addPoint=function(p){var coord=p.getCoordinate();this.insertPoint(this.argIndex,coord,Location.INTERIOR);};jsts.geomgraph.GeometryGraph.prototype.addLineString=function(line){var coord=jsts.geom.CoordinateArrays.removeRepeatedPoints(line.getCoordinates());if(coord.length<2){this.hasTooFewPoints=true;this.invalidPoint=coords[0];return;}\nvar e=new jsts.geomgraph.Edge(coord,new jsts.geomgraph.Label(this.argIndex,Location.INTERIOR));this.lineEdgeMap.put(line,e);this.insertEdge(e);Assert.isTrue(coord.length>=2,'found LineString with single point');this.insertBoundaryPoint(this.argIndex,coord[0]);this.insertBoundaryPoint(this.argIndex,coord[coord.length-1]);};jsts.geomgraph.GeometryGraph.prototype.addPolygonRing=function(lr,cwLeft,cwRight){if(lr.isEmpty())\nreturn;var coord=jsts.geom.CoordinateArrays.removeRepeatedPoints(lr.getCoordinates());if(coord.length<4){this.hasTooFewPoints=true;this.invalidPoint=coord[0];return;}\nvar left=cwLeft;var right=cwRight;if(jsts.algorithm.CGAlgorithms.isCCW(coord)){left=cwRight;right=cwLeft;}\nvar e=new jsts.geomgraph.Edge(coord,new jsts.geomgraph.Label(this.argIndex,Location.BOUNDARY,left,right));this.lineEdgeMap.put(lr,e);this.insertEdge(e);this.insertPoint(this.argIndex,coord[0],Location.BOUNDARY);};jsts.geomgraph.GeometryGraph.prototype.addPolygon=function(p){this.addPolygonRing(p.getExteriorRing(),Location.EXTERIOR,Location.INTERIOR);for(var i=0;i<p.getNumInteriorRing();i++){var hole=p.getInteriorRingN(i);this.addPolygonRing(hole,Location.INTERIOR,Location.EXTERIOR);}};jsts.geomgraph.GeometryGraph.prototype.computeEdgeIntersections=function(g,li,includeProper){var si=new jsts.geomgraph.index.SegmentIntersector(li,includeProper,true);si.setBoundaryNodes(this.getBoundaryNodes(),g.getBoundaryNodes());var esi=this.createEdgeSetIntersector();esi.computeIntersections(this.edges,g.edges,si);return si;};jsts.geomgraph.GeometryGraph.prototype.computeSelfNodes=function(li,computeRingSelfNodes){var si=new jsts.geomgraph.index.SegmentIntersector(li,true,false);var esi=this.createEdgeSetIntersector();if(!computeRingSelfNodes&&(this.parentGeom instanceof jsts.geom.LinearRing||this.parentGeom instanceof jsts.geom.Polygon||this.parentGeom instanceof jsts.geom.MultiPolygon)){esi.computeIntersections(this.edges,si,false);}else{esi.computeIntersections(this.edges,si,true);}\nthis.addSelfIntersectionNodes(this.argIndex);return si;};jsts.geomgraph.GeometryGraph.prototype.insertPoint=function(argIndex,coord,onLocation){var n=this.nodes.addNode(coord);var lbl=n.getLabel();if(lbl==null){n.label=new jsts.geomgraph.Label(argIndex,onLocation);}else\nlbl.setLocation(argIndex,onLocation);};jsts.geomgraph.GeometryGraph.prototype.insertBoundaryPoint=function(argIndex,coord){var n=this.nodes.addNode(coord);var lbl=n.getLabel();var boundaryCount=1;var loc=Location.NONE;if(lbl!==null)\nloc=lbl.getLocation(argIndex,Position.ON);if(loc===Location.BOUNDARY)\nboundaryCount++;var newLoc=jsts.geomgraph.GeometryGraph.determineBoundary(this.boundaryNodeRule,boundaryCount);lbl.setLocation(argIndex,newLoc);};jsts.geomgraph.GeometryGraph.prototype.addSelfIntersectionNodes=function(argIndex){for(var i=this.edges.iterator();i.hasNext();){var e=i.next();var eLoc=e.getLabel().getLocation(argIndex);for(var eiIt=e.eiList.iterator();eiIt.hasNext();){var ei=eiIt.next();this.addSelfIntersectionNode(argIndex,ei.coord,eLoc);}}};jsts.geomgraph.GeometryGraph.prototype.addSelfIntersectionNode=function(argIndex,coord,loc){if(this.isBoundaryNode(argIndex,coord))\nreturn;if(loc===Location.BOUNDARY&&this.useBoundaryDeterminationRule)\nthis.insertBoundaryPoint(argIndex,coord);else\nthis.insertPoint(argIndex,coord,loc);};jsts.geomgraph.GeometryGraph.prototype.getInvalidPoint=function(){return this.invalidPoint;};})();jsts.operation.buffer.OffsetSegmentString=function(){this.ptList=[];};jsts.operation.buffer.OffsetSegmentString.prototype.ptList=null;jsts.operation.buffer.OffsetSegmentString.prototype.precisionModel=null;jsts.operation.buffer.OffsetSegmentString.prototype.minimimVertexDistance=0.0;jsts.operation.buffer.OffsetSegmentString.prototype.setPrecisionModel=function(precisionModel){this.precisionModel=precisionModel;};jsts.operation.buffer.OffsetSegmentString.prototype.setMinimumVertexDistance=function(minimimVertexDistance){this.minimimVertexDistance=minimimVertexDistance;};jsts.operation.buffer.OffsetSegmentString.prototype.addPt=function(pt){var bufPt=new jsts.geom.Coordinate(pt);this.precisionModel.makePrecise(bufPt);if(this.isRedundant(bufPt))\nreturn;this.ptList.push(bufPt);};jsts.operation.buffer.OffsetSegmentString.prototype.addPts=function(pt,isForward){if(isForward){for(var i=0;i<pt.length;i++){this.addPt(pt[i]);}}else{for(var i=pt.length-1;i>=0;i--){this.addPt(pt[i]);}}};jsts.operation.buffer.OffsetSegmentString.prototype.isRedundant=function(pt){if(this.ptList.length<1)\nreturn false;var lastPt=this.ptList[this.ptList.length-1];var ptDist=pt.distance(lastPt);if(ptDist<this.minimimVertexDistance)\nreturn true;return false;};jsts.operation.buffer.OffsetSegmentString.prototype.closeRing=function(){if(this.ptList.length<1)\nreturn;var startPt=new jsts.geom.Coordinate(this.ptList[0]);var lastPt=this.ptList[this.ptList.length-1];var last2Pt=null;if(this.ptList.length>=2)\nlast2Pt=this.ptList[this.ptList.length-2];if(startPt.equals(lastPt))\nreturn;this.ptList.push(startPt);};jsts.operation.buffer.OffsetSegmentString.prototype.reverse=function(){};jsts.operation.buffer.OffsetSegmentString.prototype.getCoordinates=function(){return this.ptList;};jsts.algorithm.distance.PointPairDistance=function(){this.pt=[new jsts.geom.Coordinate(),new jsts.geom.Coordinate()];};jsts.algorithm.distance.PointPairDistance.prototype.pt=null;jsts.algorithm.distance.PointPairDistance.prototype.distance=NaN;jsts.algorithm.distance.PointPairDistance.prototype.isNull=true;jsts.algorithm.distance.PointPairDistance.prototype.initialize=function(p0,p1,distance){if(p0===undefined){this.isNull=true;return;}\nthis.pt[0].setCoordinate(p0);this.pt[1].setCoordinate(p1);this.distance=distance!==undefined?distance:p0.distance(p1);this.isNull=false;};jsts.algorithm.distance.PointPairDistance.prototype.getDistance=function(){return this.distance;};jsts.algorithm.distance.PointPairDistance.prototype.getCoordinates=function(){return this.pt;};jsts.algorithm.distance.PointPairDistance.prototype.getCoordinate=function(i){return this.pt[i];};jsts.algorithm.distance.PointPairDistance.prototype.setMaximum=function(ptDist){if(arguments.length===2){this.setMaximum2.apply(this,arguments);return;}\nthis.setMaximum(ptDist.pt[0],ptDist.pt[1]);};jsts.algorithm.distance.PointPairDistance.prototype.setMaximum2=function(p0,p1){if(this.isNull){this.initialize(p0,p1);return;}\nvar dist=p0.distance(p1);if(dist>this.distance)\nthis.initialize(p0,p1,dist);};jsts.algorithm.distance.PointPairDistance.prototype.setMinimum=function(ptDist){if(arguments.length===2){this.setMinimum2.apply(this,arguments);return;}\nthis.setMinimum(ptDist.pt[0],ptDist.pt[1]);};jsts.algorithm.distance.PointPairDistance.prototype.setMinimum2=function(p0,p1){if(this.isNull){this.initialize(p0,p1);return;}\nvar dist=p0.distance(p1);if(dist<this.distance)\nthis.initialize(p0,p1,dist);};(function(){var PointPairDistance=jsts.algorithm.distance.PointPairDistance;var DistanceToPoint=jsts.algorithm.distance.DistanceToPoint;var MaxPointDistanceFilter=function(geom){this.maxPtDist=new PointPairDistance();this.minPtDist=new PointPairDistance();this.euclideanDist=new DistanceToPoint();this.geom=geom;};MaxPointDistanceFilter.prototype=new jsts.geom.CoordinateFilter();MaxPointDistanceFilter.prototype.maxPtDist=new PointPairDistance();MaxPointDistanceFilter.prototype.minPtDist=new PointPairDistance();MaxPointDistanceFilter.prototype.euclideanDist=new DistanceToPoint();MaxPointDistanceFilter.prototype.geom;MaxPointDistanceFilter.prototype.filter=function(pt){this.minPtDist.initialize();DistanceToPoint.computeDistance(this.geom,pt,this.minPtDist);this.maxPtDist.setMaximum(this.minPtDist);};MaxPointDistanceFilter.prototype.getMaxPointDistance=function(){return this.maxPtDist;};var MaxDensifiedByFractionDistanceFilter=function(geom,fraction){this.maxPtDist=new PointPairDistance();this.minPtDist=new PointPairDistance();this.geom=geom;this.numSubSegs=Math.round(1.0/fraction);};MaxDensifiedByFractionDistanceFilter.prototype=new jsts.geom.CoordinateSequenceFilter();MaxDensifiedByFractionDistanceFilter.prototype.maxPtDist=new PointPairDistance();MaxDensifiedByFractionDistanceFilter.prototype.minPtDist=new PointPairDistance();MaxDensifiedByFractionDistanceFilter.prototype.geom;MaxDensifiedByFractionDistanceFilter.prototype.numSubSegs=0;MaxDensifiedByFractionDistanceFilter.prototype.filter=function(seq,index){if(index==0)\nreturn;var p0=seq[index-1];var p1=seq[index];var delx=(p1.x-p0.x)/this.numSubSegs;var dely=(p1.y-p0.y)/this.numSubSegs;for(var i=0;i<this.numSubSegs;i++){var x=p0.x+i*delx;var y=p0.y+i*dely;var pt=new jsts.geom.Coordinate(x,y);this.minPtDist.initialize();DistanceToPoint.computeDistance(this.geom,pt,this.minPtDist);this.maxPtDist.setMaximum(this.minPtDist);}};MaxDensifiedByFractionDistanceFilter.prototype.isGeometryChanged=function(){return false;};MaxDensifiedByFractionDistanceFilter.prototype.isDone=function(){return false;};MaxDensifiedByFractionDistanceFilter.prototype.getMaxPointDistance=function(){return this.maxPtDist;};jsts.algorithm.distance.DiscreteHausdorffDistance=function(g0,g1){this.g0=g0;this.g1=g1;this.ptDist=new jsts.algorithm.distance.PointPairDistance();};jsts.algorithm.distance.DiscreteHausdorffDistance.prototype.g0=null;jsts.algorithm.distance.DiscreteHausdorffDistance.prototype.g1=null;jsts.algorithm.distance.DiscreteHausdorffDistance.prototype.ptDist=null;jsts.algorithm.distance.DiscreteHausdorffDistance.prototype.densifyFrac=0.0;jsts.algorithm.distance.DiscreteHausdorffDistance.distance=function(g0,g1,densifyFrac){var dist=new jsts.algorithm.distance.DiscreteHausdorffDistance(g0,g1);if(densifyFrac!==undefined)\ndist.setDensifyFraction(densifyFrac);return dist.distance();};jsts.algorithm.distance.DiscreteHausdorffDistance.prototype.setDensifyFraction=function(densifyFrac){if(densifyFrac>1.0||densifyFrac<=0.0)\nthrow new jsts.error.IllegalArgumentError('Fraction is not in range (0.0 - 1.0]');this.densifyFrac=densifyFrac;};jsts.algorithm.distance.DiscreteHausdorffDistance.prototype.distance=function(){this.compute(this.g0,this.g1);return ptDist.getDistance();};jsts.algorithm.distance.DiscreteHausdorffDistance.prototype.orientedDistance=function(){this.computeOrientedDistance(this.g0,this.g1,this.ptDist);return this.ptDist.getDistance();};jsts.algorithm.distance.DiscreteHausdorffDistance.prototype.getCoordinates=function(){return ptDist.getCoordinates();};jsts.algorithm.distance.DiscreteHausdorffDistance.prototype.compute=function(g0,g1){this.computeOrientedDistance(g0,g1,this.ptDist);this.computeOrientedDistance(g1,g0,this.ptDist);};jsts.algorithm.distance.DiscreteHausdorffDistance.prototype.computeOrientedDistance=function(discreteGeom,geom,ptDist){var distFilter=new MaxPointDistanceFilter(geom);discreteGeom.apply(distFilter);ptDist.setMaximum(distFilter.getMaxPointDistance());if(this.densifyFrac>0){var fracFilter=new MaxDensifiedByFractionDistanceFilter(geom,this.densifyFrac);discreteGeom.apply(fracFilter);ptDist.setMaximum(fracFilter.getMaxPointDistance());}};})();jsts.algorithm.MinimumBoundingCircle=function(geom){this.input=null;this.extremalPts=null;this.centre=null;this.radius=0;this.input=geom;};jsts.algorithm.MinimumBoundingCircle.prototype.getCircle=function(){this.compute();if(this.centre===null){return this.input.getFactory().createPolygon(null,null);}\nvar centrePoint=this.input.getFactory().createPoint(this.centre);if(this.radius===0){return centrePoint;}\nreturn centrePoint.buffer(this.radius);};jsts.algorithm.MinimumBoundingCircle.prototype.getExtremalPoints=function(){this.compute();return this.extremalPts;};jsts.algorithm.MinimumBoundingCircle.prototype.getCentre=function(){this.compute();return this.centre;};jsts.algorithm.MinimumBoundingCircle.prototype.getRadius=function(){this.compute();return this.radius;};jsts.algorithm.MinimumBoundingCircle.prototype.computeCentre=function(){switch(this.extremalPts.length){case 0:this.centre=null;break;case 1:this.centre=this.extremalPts[0];break;case 2:this.centre=new jsts.geom.Coordinate((this.extremalPts[0].x+this.extremalPts[1].x)/2,(this.extremalPts[0].y+this.extremalPts[1].y)/2);break;case 3:this.centre=jsts.geom.Triangle.circumcentre(this.extremalPts[0],this.extremalPts[1],this.extremalPts[2]);break;}};jsts.algorithm.MinimumBoundingCircle.prototype.compute=function(){if(this.extremalPts!==null){return;}\nthis.computeCirclePoints();this.computeCentre();if(this.centre!==null){this.radius=this.centre.distance(this.extremalPts[0]);}};jsts.algorithm.MinimumBoundingCircle.prototype.computeCirclePoints=function(){if(this.input.isEmpty()){this.extremalPts=[];return;}\nvar pts;if(this.input.getNumPoints()===1){pts=this.input.getCoordinates();this.extremalPts=[new jsts.geom.Coordinate(pts[0])];return;}\nvar convexHull=this.input.convexHull();var hullPts=convexHull.getCoordinates();pts=hullPts;if(hullPts[0].equals2D(hullPts[hullPts.length-1])){pts=[];jsts.geom.CoordinateArrays.copyDeep(hullPts,0,pts,0,hullPts.length-1);}\nif(pts.length<=2){this.extremalPts=jsts.geom.CoordinateArrays.copyDeep(pts);return;}\nvar P=jsts.algorithm.MinimumBoundingCircle.lowestPoint(pts);var Q=jsts.algorithm.MinimumBoundingCircle.pointWitMinAngleWithX(pts,P);for(var i=0;i<pts.length;i++){var R=jsts.algorithm.MinimumBoundingCircle.pointWithMinAngleWithSegment(pts,P,Q);if(jsts.algorithm.Angle.isObtuse(P,R,Q)){this.extremalPts=[new jsts.geom.Coordinate(P),new jsts.geom.Coordinate(Q)];return;}\nif(jsts.algorithm.Angle.isObtuse(R,P,Q)){P=R;continue;}\nif(jsts.algorithm.Angle.isObtuse(R,Q,P)){Q=R;continue;}\nthis.extremalPts=[new jsts.geom.Coordinate(P),new jsts.geom.Coordinate(Q),new jsts.geom.Coordinate(R)];return;}\nthrow new Error(\"Logic failure in Minimum Bounding Circle algorithm!\");};jsts.algorithm.MinimumBoundingCircle.lowestPoint=function(pts){var min=pts[0];for(var i=1;i<pts.length;i++){if(pts[i].y<min.y){min=pts[i];}}\nreturn min;};jsts.algorithm.MinimumBoundingCircle.pointWitMinAngleWithX=function(pts,P){var minSin=Number.MAX_VALUE;var minAngPt=null;for(var i=0;i<pts.length;i++){var p=pts[i];if(p===P)continue;var dx=p.x-P.x;var dy=p.y-P.y;if(dy<0)dy=-dy;var len=Math.sqrt(dx*dx+dy*dy);var sin=dy/len;if(sin<minSin){minSin=sin;minAngPt=p;}}\nreturn minAngPt;};jsts.algorithm.MinimumBoundingCircle.pointWithMinAngleWithSegment=function(pts,P,Q){var minAng=Number.MAX_VALUE;var minAngPt=null;for(var i=0;i<pts.length;i++){var p=pts[i];if(p===P)continue;if(p===Q)continue;var ang=jsts.algorithm.Angle.angleBetween(P,p,Q);if(ang<minAng){minAng=ang;minAngPt=p;}}\nreturn minAngPt;};jsts.noding.ScaledNoder=function(noder,scaleFactor,offsetX,offsetY){this.offsetX=offsetX?offsetX:0;this.offsetY=offsetY?offsetY:0;this.noder=noder;this.scaleFactor=scaleFactor;this.isScaled=!this.isIntegerPrecision();};jsts.noding.ScaledNoder.prototype=new jsts.noding.Noder();jsts.noding.ScaledNoder.constructor=jsts.noding.ScaledNoder;jsts.noding.ScaledNoder.prototype.noder=null;jsts.noding.ScaledNoder.prototype.scaleFactor=undefined;jsts.noding.ScaledNoder.prototype.offsetX=undefined;jsts.noding.ScaledNoder.prototype.offsetY=undefined;jsts.noding.ScaledNoder.prototype.isScaled=false;jsts.noding.ScaledNoder.prototype.isIntegerPrecision=function(){return this.scaleFactor===1.0;};jsts.noding.ScaledNoder.prototype.getNodedSubstrings=function(){var splitSS=this.noder.getNodedSubstrings();if(this.isScaled)\nthis.rescale(splitSS);return splitSS;};jsts.noding.ScaledNoder.prototype.computeNodes=function(inputSegStrings){var intSegStrings=inputSegStrings;if(this.isScaled)\nintSegStrings=this.scale(inputSegStrings);this.noder.computeNodes(intSegStrings);};jsts.noding.ScaledNoder.prototype.scale=function(segStrings){if(segStrings instanceof Array){return this.scale2(segStrings);}\nvar transformed=new javascript.util.ArrayList();for(var i=segStrings.iterator();i.hasNext();){var ss=i.next();transformed.add(new jsts.noding.NodedSegmentString(this.scale(ss.getCoordinates()),ss.getData()));}\nreturn transformed;};jsts.noding.ScaledNoder.prototype.scale2=function(pts){var roundPts=[];for(var i=0;i<pts.length;i++){roundPts[i]=new jsts.geom.Coordinate(Math.round((pts[i].x-this.offsetX)*this.scaleFactor),Math.round((pts[i].y-this.offsetY)*this.scaleFactor));}\nvar roundPtsNoDup=jsts.geom.CoordinateArrays.removeRepeatedPoints(roundPts);return roundPtsNoDup;};jsts.noding.ScaledNoder.prototype.rescale=function(segStrings){if(segStrings instanceof Array){this.rescale2(segStrings);return;}\nfor(var i=segStrings.iterator();i.hasNext();){var ss=i.next();this.rescale(ss.getCoordinates());}};jsts.noding.ScaledNoder.prototype.rescale2=function(pts){for(var i=0;i<pts.length;i++){pts[i].x=pts[i].x/this.scaleFactor+this.offsetX;pts[i].y=pts[i].y/this.scaleFactor+this.offsetY;}};(function(){var ArrayList=javascript.util.ArrayList;jsts.geomgraph.index.SegmentIntersector=function(li,includeProper,recordIsolated){this.li=li;this.includeProper=includeProper;this.recordIsolated=recordIsolated;};jsts.geomgraph.index.SegmentIntersector.isAdjacentSegments=function(i1,i2){return Math.abs(i1-i2)===1;};jsts.geomgraph.index.SegmentIntersector.prototype._hasIntersection=false;jsts.geomgraph.index.SegmentIntersector.prototype.hasProper=false;jsts.geomgraph.index.SegmentIntersector.prototype.hasProperInterior=false;jsts.geomgraph.index.SegmentIntersector.prototype.properIntersectionPoint=null;jsts.geomgraph.index.SegmentIntersector.prototype.li=null;jsts.geomgraph.index.SegmentIntersector.prototype.includeProper=null;jsts.geomgraph.index.SegmentIntersector.prototype.recordIsolated=null;jsts.geomgraph.index.SegmentIntersector.prototype.isSelfIntersection=null;jsts.geomgraph.index.SegmentIntersector.prototype.numIntersections=0;jsts.geomgraph.index.SegmentIntersector.prototype.numTests=0;jsts.geomgraph.index.SegmentIntersector.prototype.bdyNodes=null;jsts.geomgraph.index.SegmentIntersector.prototype.setBoundaryNodes=function(bdyNodes0,bdyNodes1){this.bdyNodes=[];this.bdyNodes[0]=bdyNodes0;this.bdyNodes[1]=bdyNodes1;};jsts.geomgraph.index.SegmentIntersector.prototype.getProperIntersectionPoint=function(){return this.properIntersectionPoint;};jsts.geomgraph.index.SegmentIntersector.prototype.hasIntersection=function(){return this._hasIntersection;};jsts.geomgraph.index.SegmentIntersector.prototype.hasProperIntersection=function(){return this.hasProper;};jsts.geomgraph.index.SegmentIntersector.prototype.hasProperInteriorIntersection=function(){return this.hasProperInterior;};jsts.geomgraph.index.SegmentIntersector.prototype.isTrivialIntersection=function(e0,segIndex0,e1,segIndex1){if(e0===e1){if(this.li.getIntersectionNum()===1){if(jsts.geomgraph.index.SegmentIntersector.isAdjacentSegments(segIndex0,segIndex1))\nreturn true;if(e0.isClosed()){var maxSegIndex=e0.getNumPoints()-1;if((segIndex0===0&&segIndex1===maxSegIndex)||(segIndex1===0&&segIndex0===maxSegIndex)){return true;}}}}\nreturn false;};jsts.geomgraph.index.SegmentIntersector.prototype.addIntersections=function(e0,segIndex0,e1,segIndex1){if(e0===e1&&segIndex0===segIndex1)\nreturn;this.numTests++;var p00=e0.getCoordinates()[segIndex0];var p01=e0.getCoordinates()[segIndex0+1];var p10=e1.getCoordinates()[segIndex1];var p11=e1.getCoordinates()[segIndex1+1];this.li.computeIntersection(p00,p01,p10,p11);if(this.li.hasIntersection()){if(this.recordIsolated){e0.setIsolated(false);e1.setIsolated(false);}\nthis.numIntersections++;if(!this.isTrivialIntersection(e0,segIndex0,e1,segIndex1)){this._hasIntersection=true;if(this.includeProper||!this.li.isProper()){e0.addIntersections(this.li,segIndex0,0);e1.addIntersections(this.li,segIndex1,1);}\nif(this.li.isProper()){this.properIntersectionPoint=this.li.getIntersection(0).clone();this.hasProper=true;if(!this.isBoundaryPoint(this.li,this.bdyNodes))\nthis.hasProperInterior=true;}}}};jsts.geomgraph.index.SegmentIntersector.prototype.isBoundaryPoint=function(li,bdyNodes){if(bdyNodes===null)\nreturn false;if(bdyNodes instanceof Array){if(this.isBoundaryPoint(li,bdyNodes[0]))\nreturn true;if(this.isBoundaryPoint(li,bdyNodes[1]))\nreturn true;return false;}else{for(var i=bdyNodes.iterator();i.hasNext();){var node=i.next();var pt=node.getCoordinate();if(li.isIntersection(pt))\nreturn true;}\nreturn false;}};})();","/*\n  javascript.util is a port of selected parts of java.util to JavaScript which\n  main purpose is to ease porting Java code to JavaScript.\n  \n  The MIT License (MIT)\n\n  Copyright (C) 2011-2014 by The Authors\n\n  Permission is hereby granted, free of charge, to any person obtaining a copy\n  of this software and associated documentation files (the \"Software\"), to deal\n  in the Software without restriction, including without limitation the rights\n  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n  copies of the Software, and to permit persons to whom the Software is\n  furnished to do so, subject to the following conditions:\n\n  The above copyright notice and this permission notice shall be included in\n  all copies or substantial portions of the Software.\n\n  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n  THE SOFTWARE.\n*/\n;(function(){var e=this;function f(a,b){var c=a.split(\".\"),d=e;c[0]in d||!d.execScript||d.execScript(\"var \"+c[0]);for(var t;c.length&&(t=c.shift());)c.length||void 0===b?d=d[t]?d[t]:d[t]={}:d[t]=b}function g(a,b){function c(){}c.prototype=b.prototype;a.q=b.prototype;a.prototype=new c;a.prototype.constructor=a;a.p=function(a,c,O){var M=Array.prototype.slice.call(arguments,2);return b.prototype[c].apply(a,M)}};function h(a){this.message=a||\"\"}g(h,Error);f(\"javascript.util.EmptyStackException\",h);h.prototype.name=\"EmptyStackException\";function k(a){this.message=a||\"\"}g(k,Error);f(\"javascript.util.IndexOutOfBoundsException\",k);k.prototype.name=\"IndexOutOfBoundsException\";function l(){}f(\"javascript.util.Iterator\",l);l.prototype.hasNext=l.prototype.c;l.prototype.next=l.prototype.next;l.prototype.remove=l.prototype.remove;function m(){}f(\"javascript.util.Collection\",m);function n(){}g(n,m);f(\"javascript.util.List\",n);function p(){}f(\"javascript.util.Map\",p);function q(a){this.message=a||\"\"}g(q,Error);f(\"javascript.util.NoSuchElementException\",q);q.prototype.name=\"NoSuchElementException\";function r(a){this.message=a||\"\"}g(r,Error);r.prototype.name=\"OperationNotSupported\";function s(a){this.a=[];a instanceof m&&this.e(a)}g(s,n);f(\"javascript.util.ArrayList\",s);s.prototype.a=null;s.prototype.add=function(a){this.a.push(a);return!0};s.prototype.add=s.prototype.add;s.prototype.e=function(a){for(a=a.f();a.c();)this.add(a.next());return!0};s.prototype.addAll=s.prototype.e;s.prototype.set=function(a,b){var c=this.a[a];this.a[a]=b;return c};s.prototype.set=s.prototype.set;s.prototype.f=function(){return new u(this)};s.prototype.iterator=s.prototype.f;\ns.prototype.get=function(a){if(0>a||a>=this.size())throw new k;return this.a[a]};s.prototype.get=s.prototype.get;s.prototype.g=function(){return 0===this.a.length};s.prototype.isEmpty=s.prototype.g;s.prototype.size=function(){return this.a.length};s.prototype.size=s.prototype.size;s.prototype.h=function(){for(var a=[],b=0,c=this.a.length;b<c;b++)a.push(this.a[b]);return a};s.prototype.toArray=s.prototype.h;\ns.prototype.remove=function(a){for(var b=!1,c=0,d=this.a.length;c<d;c++)if(this.a[c]===a){this.a.splice(c,1);b=!0;break}return b};s.prototype.remove=s.prototype.remove;function u(a){this.j=a}f(\"$jscomp.scope.Iterator_\",u);u.prototype.j=null;u.prototype.b=0;u.prototype.next=function(){if(this.b===this.j.size())throw new q;return this.j.get(this.b++)};u.prototype.next=u.prototype.next;u.prototype.c=function(){return this.b<this.j.size()?!0:!1};u.prototype.hasNext=u.prototype.c;\nu.prototype.remove=function(){throw new r;};u.prototype.remove=u.prototype.remove;function v(){}f(\"javascript.util.Arrays\",v);\nv.sort=function(){var a=arguments[0],b,c,d;if(1===arguments.length)a.sort();else if(2===arguments.length)c=arguments[1],d=function(a,b){return c.compare(a,b)},a.sort(d);else if(3===arguments.length)for(b=a.slice(arguments[1],arguments[2]),b.sort(),d=a.slice(0,arguments[1]).concat(b,a.slice(arguments[2],a.length)),a.splice(0,a.length),b=0;b<d.length;b++)a.push(d[b]);else if(4===arguments.length)for(b=a.slice(arguments[1],arguments[2]),c=arguments[3],d=function(a,b){return c.compare(a,b)},b.sort(d),\nd=a.slice(0,arguments[1]).concat(b,a.slice(arguments[2],a.length)),a.splice(0,a.length),b=0;b<d.length;b++)a.push(d[b])};v.asList=function(a){for(var b=new s,c=0,d=a.length;c<d;c++)b.add(a[c]);return b};function w(){this.i={}}g(w,p);f(\"javascript.util.HashMap\",w);w.prototype.i=null;w.prototype.get=function(a){return this.i[a]||null};w.prototype.get=w.prototype.get;w.prototype.put=function(a,b){return this.i[a]=b};w.prototype.put=w.prototype.put;w.prototype.m=function(){var a=new s,b;for(b in this.i)this.i.hasOwnProperty(b)&&a.add(this.i[b]);return a};w.prototype.values=w.prototype.m;w.prototype.size=function(){return this.m().size()};w.prototype.size=w.prototype.size;function x(){}g(x,m);f(\"javascript.util.Set\",x);function y(a){this.a=[];a instanceof m&&this.e(a)}g(y,x);f(\"javascript.util.HashSet\",y);y.prototype.a=null;y.prototype.contains=function(a){for(var b=0,c=this.a.length;b<c;b++)if(this.a[b]===a)return!0;return!1};y.prototype.contains=y.prototype.contains;y.prototype.add=function(a){if(this.contains(a))return!1;this.a.push(a);return!0};y.prototype.add=y.prototype.add;y.prototype.e=function(a){for(a=a.f();a.c();)this.add(a.next());return!0};y.prototype.addAll=y.prototype.e;\ny.prototype.remove=function(){throw new r;};y.prototype.remove=y.prototype.remove;y.prototype.size=function(){return this.a.length};y.prototype.g=function(){return 0===this.a.length};y.prototype.isEmpty=y.prototype.g;y.prototype.h=function(){for(var a=[],b=0,c=this.a.length;b<c;b++)a.push(this.a[b]);return a};y.prototype.toArray=y.prototype.h;y.prototype.f=function(){return new z(this)};y.prototype.iterator=y.prototype.f;function z(a){this.k=a}f(\"$jscomp.scope.Iterator_$1\",z);z.prototype.k=null;\nz.prototype.b=0;z.prototype.next=function(){if(this.b===this.k.size())throw new q;return this.k.a[this.b++]};z.prototype.next=z.prototype.next;z.prototype.c=function(){return this.b<this.k.size()?!0:!1};z.prototype.hasNext=z.prototype.c;z.prototype.remove=function(){throw new r;};z.prototype.remove=z.prototype.remove;function A(){}g(A,p);f(\"javascript.util.SortedMap\",A);function B(){}g(B,x);f(\"javascript.util.SortedSet\",B);function C(){this.a=[]}g(C,n);f(\"javascript.util.Stack\",C);C.prototype.a=null;C.prototype.push=function(a){this.a.push(a);return a};C.prototype.push=C.prototype.push;C.prototype.pop=function(){if(0===this.a.length)throw new h;return this.a.pop()};C.prototype.pop=C.prototype.pop;C.prototype.o=function(){if(0===this.a.length)throw new h;return this.a[this.a.length-1]};C.prototype.peek=C.prototype.o;C.prototype.empty=function(){return 0===this.a.length?!0:!1};C.prototype.empty=C.prototype.empty;\nC.prototype.g=function(){return this.empty()};C.prototype.isEmpty=C.prototype.g;C.prototype.search=function(a){return this.a.indexOf(a)};C.prototype.search=C.prototype.search;C.prototype.size=function(){return this.a.length};C.prototype.size=C.prototype.size;C.prototype.h=function(){for(var a=[],b=0,c=this.a.length;b<c;b++)a.push(this.a[b]);return a};C.prototype.toArray=C.prototype.h;function D(a){return null==a?null:a.parent}function E(a,b){null!==a&&(a.color=b)}function F(a){return null==a?null:a.left}function G(a){return null==a?null:a.right}function H(){this.d=null;this.n=0}g(H,A);f(\"javascript.util.TreeMap\",H);H.prototype.get=function(a){for(var b=this.d;null!==b;){var c=a.compareTo(b.key);if(0>c)b=b.left;else if(0<c)b=b.right;else return b.value}return null};H.prototype.get=H.prototype.get;\nH.prototype.put=function(a,b){if(null===this.d)return this.d={key:a,value:b,left:null,right:null,parent:null,color:0},this.n=1,null;var c=this.d,d,t;do if(d=c,t=a.compareTo(c.key),0>t)c=c.left;else if(0<t)c=c.right;else return d=c.value,c.value=b,d;while(null!==c);c={key:a,left:null,right:null,value:b,parent:d,color:0};0>t?d.left=c:d.right=c;for(c.color=1;null!=c&&c!=this.d&&1==c.parent.color;)D(c)==F(D(D(c)))?(d=G(D(D(c))),1==(null==d?0:d.color)?(E(D(c),0),E(d,0),E(D(D(c)),1),c=D(D(c))):(c==G(D(c))&&\n(c=D(c),I(this,c)),E(D(c),0),E(D(D(c)),1),J(this,D(D(c))))):(d=F(D(D(c))),1==(null==d?0:d.color)?(E(D(c),0),E(d,0),E(D(D(c)),1),c=D(D(c))):(c==F(D(c))&&(c=D(c),J(this,c)),E(D(c),0),E(D(D(c)),1),I(this,D(D(c)))));this.d.color=0;this.n++;return null};H.prototype.put=H.prototype.put;H.prototype.m=function(){var a=new s,b;b=this.d;if(null!=b)for(;null!=b.left;)b=b.left;if(null!==b)for(a.add(b.value);null!==(b=K(b));)a.add(b.value);return a};H.prototype.values=H.prototype.m;\nfunction I(a,b){if(null!=b){var c=b.right;b.right=c.left;null!=c.left&&(c.left.parent=b);c.parent=b.parent;null==b.parent?a.d=c:b.parent.left==b?b.parent.left=c:b.parent.right=c;c.left=b;b.parent=c}}function J(a,b){if(null!=b){var c=b.left;b.left=c.right;null!=c.right&&(c.right.parent=b);c.parent=b.parent;null==b.parent?a.d=c:b.parent.right==b?b.parent.right=c:b.parent.left=c;c.right=b;b.parent=c}}\nfunction K(a){if(null===a)return null;if(null!==a.right)for(var b=a.right;null!==b.left;)b=b.left;else for(b=a.parent;null!==b&&a===b.right;)a=b,b=b.parent;return b}H.prototype.size=function(){return this.n};H.prototype.size=H.prototype.size;function L(a){this.a=[];a instanceof m&&this.e(a)}g(L,B);f(\"javascript.util.TreeSet\",L);L.prototype.a=null;L.prototype.contains=function(a){for(var b=0,c=this.a.length;b<c;b++)if(0===this.a[b].compareTo(a))return!0;return!1};L.prototype.contains=L.prototype.contains;L.prototype.add=function(a){if(this.contains(a))return!1;for(var b=0,c=this.a.length;b<c;b++)if(1===this.a[b].compareTo(a))return this.a.splice(b,0,a),!0;this.a.push(a);return!0};L.prototype.add=L.prototype.add;\nL.prototype.e=function(a){for(a=a.f();a.c();)this.add(a.next());return!0};L.prototype.addAll=L.prototype.e;L.prototype.remove=function(){throw new r;};L.prototype.remove=L.prototype.remove;L.prototype.size=function(){return this.a.length};L.prototype.size=L.prototype.size;L.prototype.g=function(){return 0===this.a.length};L.prototype.isEmpty=L.prototype.g;L.prototype.h=function(){for(var a=[],b=0,c=this.a.length;b<c;b++)a.push(this.a[b]);return a};L.prototype.toArray=L.prototype.h;L.prototype.f=function(){return new N(this)};\nL.prototype.iterator=L.prototype.f;function N(a){this.l=a}f(\"$jscomp.scope.Iterator_$2\",N);N.prototype.l=null;N.prototype.b=0;N.prototype.next=function(){if(this.b===this.l.size())throw new q;return this.l.a[this.b++]};N.prototype.next=N.prototype.next;N.prototype.c=function(){return this.b<this.l.size()?!0:!1};N.prototype.hasNext=N.prototype.c;N.prototype.remove=function(){throw new r;};N.prototype.remove=N.prototype.remove;\"undefined\"!==typeof global&&(global.javascript={},global.javascript.util={},global.javascript.util.ArrayList=s,global.javascript.util.Arrays=v,global.javascript.util.Collection=m,global.javascript.util.EmptyStackException=h,global.javascript.util.HashMap=w,global.javascript.util.HashSet=y,global.javascript.util.IndexOutOfBoundsException=k,global.javascript.util.Iterator=l,global.javascript.util.List=n,global.javascript.util.Map=p,global.javascript.util.NoSuchElementException=q,global.javascript.util.OperationNotSupported=\nr,global.javascript.util.Set=x,global.javascript.util.SortedMap=A,global.javascript.util.SortedSet=B,global.javascript.util.Stack=C,global.javascript.util.TreeMap=H,global.javascript.util.TreeSet=L);}).call(this);\n","require('./dist/javascript.util-node.min.js');\n","var extent = require('turf-extent'),\n    point = require('turf-point');\n\n/**\n * Takes a {@link FeatureCollection} of any type and returns the absolute center point of all features.\n *\n * @module turf/center\n * @category measurement\n * @param {FeatureCollection} features a FeatureCollection of any type\n * @return {Point} a Point feature at the\n * absolute center point of all input features\n * @example\n * var features = {\n *   \"type\": \"FeatureCollection\",\n *   \"features\": [\n *     {\n *       \"type\": \"Feature\",\n *       \"properties\": {},\n *       \"geometry\": {\n *         \"type\": \"Point\",\n *         \"coordinates\": [-97.522259, 35.4691]\n *       }\n *     }, {\n *       \"type\": \"Feature\",\n *       \"properties\": {},\n *       \"geometry\": {\n *         \"type\": \"Point\",\n *         \"coordinates\": [-97.502754, 35.463455]\n *       }\n *     }, {\n *       \"type\": \"Feature\",\n *       \"properties\": {},\n *       \"geometry\": {\n *         \"type\": \"Point\",\n *         \"coordinates\": [-97.508269, 35.463245]\n *       }\n *     }, {\n *       \"type\": \"Feature\",\n *       \"properties\": {},\n *       \"geometry\": {\n *         \"type\": \"Point\",\n *         \"coordinates\": [-97.516809, 35.465779]\n *       }\n *     }, {\n *       \"type\": \"Feature\",\n *       \"properties\": {},\n *       \"geometry\": {\n *         \"type\": \"Point\",\n *         \"coordinates\": [-97.515372, 35.467072]\n *       }\n *     }, {\n *       \"type\": \"Feature\",\n *       \"properties\": {},\n *       \"geometry\": {\n *         \"type\": \"Point\",\n *         \"coordinates\": [-97.509363, 35.463053]\n *       }\n *     }, {\n *       \"type\": \"Feature\",\n *       \"properties\": {},\n *       \"geometry\": {\n *         \"type\": \"Point\",\n *         \"coordinates\": [-97.511123, 35.466601]\n *       }\n *     }, {\n *       \"type\": \"Feature\",\n *       \"properties\": {},\n *       \"geometry\": {\n *         \"type\": \"Point\",\n *         \"coordinates\": [-97.518547, 35.469327]\n *       }\n *     }, {\n *       \"type\": \"Feature\",\n *       \"properties\": {},\n *       \"geometry\": {\n *         \"type\": \"Point\",\n *         \"coordinates\": [-97.519706, 35.469659]\n *       }\n *     }, {\n *       \"type\": \"Feature\",\n *       \"properties\": {},\n *       \"geometry\": {\n *         \"type\": \"Point\",\n *         \"coordinates\": [-97.517839, 35.466998]\n *       }\n *     }, {\n *       \"type\": \"Feature\",\n *       \"properties\": {},\n *       \"geometry\": {\n *         \"type\": \"Point\",\n *         \"coordinates\": [-97.508678, 35.464942]\n *       }\n *     }, {\n *       \"type\": \"Feature\",\n *       \"properties\": {},\n *       \"geometry\": {\n *         \"type\": \"Point\",\n *         \"coordinates\": [-97.514914, 35.463453]\n *       }\n *     }\n *   ]\n * };\n *\n * var centerPt = turf.center(features);\n * centerPt.properties['marker-size'] = 'large';\n * centerPt.properties['marker-color'] = '#000';\n *\n * var resultFeatures = features.features.concat(centerPt);\n * var result = {\n *   \"type\": \"FeatureCollection\",\n *   \"features\": resultFeatures\n * };\n *\n * //=result\n */\n\nmodule.exports = function(layer, done){\n  var ext = extent(layer);\n  var x = (ext[0] + ext[2])/2;\n  var y = (ext[1] + ext[3])/2;\n  return point([x, y]);\n};\n","var each = require('turf-meta').coordEach;\nvar point = require('turf-point');\n\n/**\n * Takes a {@link Feature} or {@link FeatureCollection} of any type and calculates the centroid using the arithmetic mean of all vertices.\n * This lessens the effect of small islands and artifacts when calculating\n * the centroid of a set of polygons.\n *\n * @module turf/centroid\n * @category measurement\n * @param {GeoJSON} features a {@link Feature} or FeatureCollection of any type\n * @return {Point} a Point feature at the centroid of the input feature(s)\n * @example\n * var poly = {\n *   \"type\": \"Feature\",\n *   \"properties\": {},\n *   \"geometry\": {\n *     \"type\": \"Polygon\",\n *     \"coordinates\": [[\n *       [105.818939,21.004714],\n *       [105.818939,21.061754],\n *       [105.890007,21.061754],\n *       [105.890007,21.004714],\n *       [105.818939,21.004714]\n *     ]]\n *   }\n * };\n *\n * var centroidPt = turf.centroid(poly);\n *\n * var result = {\n *   \"type\": \"FeatureCollection\",\n *   \"features\": [poly, centroidPt]\n * };\n *\n * //=result\n */\nmodule.exports = function(features){\n  var xSum = 0, ySum = 0, len = 0;\n  each(features, function(coord) {\n    xSum += coord[0];\n    ySum += coord[1];\n    len++;\n  }, true);\n  return point([xSum / len, ySum / len]);\n};\n","/**\n * Lazily iterate over coordinates in any GeoJSON object, similar to\n * Array.forEach.\n *\n * @param {Object} layer any GeoJSON object\n * @param {Function} callback a method that takes (value)\n * @param {boolean=} excludeWrapCoord whether or not to include\n * the final coordinate of LinearRings that wraps the ring in its iteration.\n * @example\n * var point = { type: 'Point', coordinates: [0, 0] };\n * coordEach(point, function(coords) {\n *   // coords is equal to [0, 0]\n * });\n */\nfunction coordEach(layer, callback, excludeWrapCoord) {\n  var i, j, k, g, geometry, stopG, coords,\n    geometryMaybeCollection,\n    wrapShrink = 0,\n    isGeometryCollection,\n    isFeatureCollection = layer.type === 'FeatureCollection',\n    isFeature = layer.type === 'Feature',\n    stop = isFeatureCollection ? layer.features.length : 1;\n\n  // This logic may look a little weird. The reason why it is that way\n  // is because it's trying to be fast. GeoJSON supports multiple kinds\n  // of objects at its root: FeatureCollection, Features, Geometries.\n  // This function has the responsibility of handling all of them, and that\n  // means that some of the `for` loops you see below actually just don't apply\n  // to certain inputs. For instance, if you give this just a\n  // Point geometry, then both loops are short-circuited and all we do\n  // is gradually rename the input until it's called 'geometry'.\n  //\n  // This also aims to allocate as few resources as possible: just a\n  // few numbers and booleans, rather than any temporary arrays as would\n  // be required with the normalization approach.\n  for (i = 0; i < stop; i++) {\n\n    geometryMaybeCollection = (isFeatureCollection ? layer.features[i].geometry :\n        (isFeature ? layer.geometry : layer));\n    isGeometryCollection = geometryMaybeCollection.type === 'GeometryCollection';\n    stopG = isGeometryCollection ? geometryMaybeCollection.geometries.length : 1;\n\n    for (g = 0; g < stopG; g++) {\n\n      geometry = isGeometryCollection ?\n          geometryMaybeCollection.geometries[g] : geometryMaybeCollection;\n      coords = geometry.coordinates;\n\n      wrapShrink = (excludeWrapCoord &&\n        (geometry.type === 'Polygon' || geometry.type === 'MultiPolygon')) ?\n        1 : 0;\n\n      if (geometry.type === 'Point') {\n        callback(coords);\n      } else if (geometry.type === 'LineString' || geometry.type === 'MultiPoint') {\n        for (j = 0; j < coords.length; j++) callback(coords[j]);\n      } else if (geometry.type === 'Polygon' || geometry.type === 'MultiLineString') {\n        for (j = 0; j < coords.length; j++)\n          for (k = 0; k < coords[j].length - wrapShrink; k++)\n            callback(coords[j][k]);\n      } else if (geometry.type === 'MultiPolygon') {\n        for (j = 0; j < coords.length; j++)\n          for (k = 0; k < coords[j].length; k++)\n            for (l = 0; l < coords[j][k].length - wrapShrink; l++)\n              callback(coords[j][k][l]);\n      } else {\n        throw new Error('Unknown Geometry Type');\n      }\n    }\n  }\n}\nmodule.exports.coordEach = coordEach;\n\n/**\n * Lazily reduce coordinates in any GeoJSON object into a single value,\n * similar to how Array.reduce works. However, in this case we lazily run\n * the reduction, so an array of all coordinates is unnecessary.\n *\n * @param {Object} layer any GeoJSON object\n * @param {Function} callback a method that takes (memo, value) and returns\n * a new memo\n * @param {boolean=} excludeWrapCoord whether or not to include\n * the final coordinate of LinearRings that wraps the ring in its iteration.\n * @param {*} memo the starting value of memo: can be any type.\n */\nfunction coordReduce(layer, callback, memo, excludeWrapCoord) {\n  coordEach(layer, function(coord) {\n    memo = callback(memo, coord);\n  }, excludeWrapCoord);\n  return memo;\n}\nmodule.exports.coordReduce = coordReduce;\n\n/**\n * Lazily iterate over property objects in any GeoJSON object, similar to\n * Array.forEach.\n *\n * @param {Object} layer any GeoJSON object\n * @param {Function} callback a method that takes (value)\n * @example\n * var point = { type: 'Feature', geometry: null, properties: { foo: 1 } };\n * propEach(point, function(props) {\n *   // props is equal to { foo: 1}\n * });\n */\nfunction propEach(layer, callback) {\n  var i;\n  switch (layer.type) {\n      case 'FeatureCollection':\n        features = layer.features;\n        for (i = 0; i < layer.features.length; i++) {\n            callback(layer.features[i].properties);\n        }\n        break;\n      case 'Feature':\n        callback(layer.properties);\n        break;\n  }\n}\nmodule.exports.propEach = propEach;\n\n/**\n * Lazily reduce properties in any GeoJSON object into a single value,\n * similar to how Array.reduce works. However, in this case we lazily run\n * the reduction, so an array of all properties is unnecessary.\n *\n * @param {Object} layer any GeoJSON object\n * @param {Function} callback a method that takes (memo, coord) and returns\n * a new memo\n * @param {*} memo the starting value of memo: can be any type.\n */\nfunction propReduce(layer, callback, memo) {\n  propEach(layer, function(prop) {\n    memo = callback(memo, prop);\n  });\n  return memo;\n}\nmodule.exports.propReduce = propReduce;\n","/**\n * Combines a {@link FeatureCollection} of {@link Point}, {@link LineString}, or {@link Polygon} features into {@link MultiPoint}, {@link MultiLineString}, or {@link MultiPolygon} features.\n *\n * @module turf/combine\n * @category misc\n * @param {FeatureCollection} fc a FeatureCollection of any type\n * @return {FeatureCollection} a FeatureCollection of corresponding type to input\n * @example\n * var fc = {\n *   \"type\": \"FeatureCollection\",\n *   \"features\": [\n *     {\n *       \"type\": \"Feature\",\n *       \"properties\": {},\n *       \"geometry\": {\n *         \"type\": \"Point\",\n *         \"coordinates\": [19.026432, 47.49134]\n *       }\n *     }, {\n *       \"type\": \"Feature\",\n *       \"properties\": {},\n *       \"geometry\": {\n *         \"type\": \"Point\",\n *         \"coordinates\": [19.074497, 47.509548]\n *       }\n *     }\n *   ]\n * };\n *\n * var combined = turf.combine(fc);\n *\n * //=combined\n */\n\nmodule.exports = function(fc) {\n  var type = fc.features[0].geometry.type;\n  var geometries = fc.features.map(function(f) {\n    return f.geometry;\n  });\n\n  switch (type) {\n    case 'Point':\n      return {\n        type: 'Feature',\n        properties: {},\n        geometry: {\n          type: 'MultiPoint',\n          coordinates: pluckCoods(geometries)\n        }\n      };\n    case 'LineString':\n      return {\n        type: 'Feature',\n        properties: {},\n        geometry: {\n          type: 'MultiLineString',\n          coordinates: pluckCoods(geometries)\n        }\n      };\n    case 'Polygon':\n      return {\n        type: 'Feature',\n        properties: {},\n        geometry: {\n          type: 'MultiPolygon',\n          coordinates: pluckCoods(geometries)\n        }\n      };\n    default:\n      return fc;\n  }\n};\n\nfunction pluckCoods(multi){\n  return multi.map(function(geom){\n    return geom.coordinates;\n  });\n}\n","// 1. run tin on points\n// 2. calculate lenth of all edges and area of all triangles\n// 3. remove triangles that fail the max length test\n// 4. buffer the results slightly\n// 5. merge the results\nvar t = {};\nt.tin = require('turf-tin');\nt.merge = require('turf-merge');\nt.distance = require('turf-distance');\nt.point = require('turf-point');\n\n/**\n * Takes a {@link FeatureCollection} of {@link Point} features and\n * returns a concave hull.\n *\n * Internally, this implements\n * a [Monotone chain algorithm](http://en.wikibooks.org/wiki/Algorithm_Implementation/Geometry/Convex_hull/Monotone_chain#JavaScript).\n *\n * @module turf/concave\n * @category transformation\n * @param {FeatureCollection} points a FeatureCollection of {@link Point} features\n * @param {number} maxEdge the size of an edge necessary for part of the\n * hull to become concave (in miles)\n * @param {String} units used for maxEdge distance (miles or kilometers)\n * @returns {Feature} a {@link Polygon} feature\n * @throws {Error} if maxEdge parameter is missing\n * @example\n * var points = {\n *   \"type\": \"FeatureCollection\",\n *   \"features\": [\n *     {\n *       \"type\": \"Feature\",\n *       \"properties\": {},\n *       \"geometry\": {\n *         \"type\": \"Point\",\n *         \"coordinates\": [-63.601226, 44.642643]\n *       }\n *     }, {\n *       \"type\": \"Feature\",\n *       \"properties\": {},\n *       \"geometry\": {\n *         \"type\": \"Point\",\n *         \"coordinates\": [-63.591442, 44.651436]\n *       }\n *     }, {\n *       \"type\": \"Feature\",\n *       \"properties\": {},\n *       \"geometry\": {\n *         \"type\": \"Point\",\n *         \"coordinates\": [-63.580799, 44.648749]\n *       }\n *     }, {\n *       \"type\": \"Feature\",\n *       \"properties\": {},\n *       \"geometry\": {\n *         \"type\": \"Point\",\n *         \"coordinates\": [-63.573589, 44.641788]\n *       }\n *     }, {\n *       \"type\": \"Feature\",\n *       \"properties\": {},\n *       \"geometry\": {\n *         \"type\": \"Point\",\n *         \"coordinates\": [-63.587665, 44.64533]\n *       }\n *     }, {\n *       \"type\": \"Feature\",\n *       \"properties\": {},\n *       \"geometry\": {\n *         \"type\": \"Point\",\n *         \"coordinates\": [-63.595218, 44.64765]\n *       }\n *     }\n *   ]\n * };\n *\n * var hull = turf.concave(points, 1, 'miles');\n *\n * var resultFeatures = points.features.concat(hull);\n * var result = {\n *   \"type\": \"FeatureCollection\",\n *   \"features\": resultFeatures\n * };\n *\n * //=result\n */\n\n\nmodule.exports = function(points, maxEdge, units) {\n  if (typeof maxEdge !== 'number') throw new Error('maxEdge parameter is required');\n  if (typeof units !== 'string') throw new Error('units parameter is required');\n\n  var tinPolys = t.tin(points);\n  var filteredPolys = tinPolys.features.filter(filterTriangles);\n  tinPolys.features = filteredPolys;\n\n  function filterTriangles(triangle) {\n    var pt1 = t.point(triangle.geometry.coordinates[0][0]);\n    var pt2 = t.point(triangle.geometry.coordinates[0][1]);\n    var pt3 = t.point(triangle.geometry.coordinates[0][2]);\n    var dist1 = t.distance(pt1, pt2, units);\n    var dist2 = t.distance(pt2, pt3, units);\n    var dist3 = t.distance(pt1, pt3, units);\n    return (dist1 <= maxEdge && dist2 <= maxEdge && dist3 <= maxEdge);\n  }\n\n  return t.merge(tinPolys);\n};\n","var each = require('turf-meta').coordEach,\n    convexHull = require('convex-hull'),\n    polygon = require('turf-polygon');\n\n/**\n * Takes any {@link GeoJSON} object and returns a\n * [convex hull](http://en.wikipedia.org/wiki/Convex_hull) polygon.\n *\n * Internally this uses\n * the [convex-hull](https://github.com/mikolalysenko/convex-hull) module that\n * implements a [monotone chain hull](http://en.wikibooks.org/wiki/Algorithm_Implementation/Geometry/Convex_hull/Monotone_chain).\n *\n * @module turf/convex\n * @category transformation\n * @param {GeoJSON} input any GeoJSON object\n * @returns {Feature} a {@link Polygon} feature\n * @example\n * var points = {\n *   \"type\": \"FeatureCollection\",\n *   \"features\": [\n *     {\n *       \"type\": \"Feature\",\n *       \"properties\": {},\n *       \"geometry\": {\n *         \"type\": \"Point\",\n *         \"coordinates\": [10.195312, 43.755225]\n *       }\n *     }, {\n *       \"type\": \"Feature\",\n *       \"properties\": {},\n *       \"geometry\": {\n *         \"type\": \"Point\",\n *         \"coordinates\": [10.404052, 43.8424511]\n *       }\n *     }, {\n *       \"type\": \"Feature\",\n *       \"properties\": {},\n *       \"geometry\": {\n *         \"type\": \"Point\",\n *         \"coordinates\": [10.579833, 43.659924]\n *       }\n *     }, {\n *       \"type\": \"Feature\",\n *       \"properties\": {},\n *       \"geometry\": {\n *         \"type\": \"Point\",\n *         \"coordinates\": [10.360107, 43.516688]\n *       }\n *     }, {\n *       \"type\": \"Feature\",\n *       \"properties\": {},\n *       \"geometry\": {\n *         \"type\": \"Point\",\n *         \"coordinates\": [10.14038, 43.588348]\n *       }\n *     }, {\n *       \"type\": \"Feature\",\n *       \"properties\": {},\n *       \"geometry\": {\n *         \"type\": \"Point\",\n *         \"coordinates\": [10.195312, 43.755225]\n *       }\n *     }\n *   ]\n * };\n *\n * var hull = turf.convex(points);\n *\n * var resultFeatures = points.features.concat(hull);\n * var result = {\n *   \"type\": \"FeatureCollection\",\n *   \"features\": resultFeatures\n * };\n *\n * //=result\n */\nmodule.exports = function(fc) {\n  var points = [];\n  each(fc, function(coord) { points.push(coord); });\n  var hull = convexHull(points);\n  var ring = [];\n  for (var i = 0; i < hull.length; i++) {\n      ring.push(points[hull[i][0]]);\n  }\n  ring.push(points[hull[hull.length - 1][1]]);\n  return polygon([ring]);\n};\n","\"use strict\"\n\nvar convexHull1d = require('./lib/ch1d')\nvar convexHull2d = require('./lib/ch2d')\nvar convexHullnd = require('./lib/chnd')\n\nmodule.exports = convexHull\n\nfunction convexHull(points) {\n  var n = points.length\n  if(n === 0) {\n    return []\n  } else if(n === 1) {\n    return [[0]]\n  }\n  var d = points[0].length\n  if(d === 0) {\n    return []\n  } else if(d === 1) {\n    return convexHull1d(points)\n  } else if(d === 2) {\n    return convexHull2d(points)\n  }\n  return convexHullnd(points, d)\n}","\"use strict\"\n\nmodule.exports = convexHull1d\n\nfunction convexHull1d(points) {\n  var lo = 0\n  var hi = 0\n  for(var i=1; i<points.length; ++i) {\n    if(points[i][0] < points[lo][0]) {\n      lo = i\n    }\n    if(points[i][0] > points[hi][0]) {\n      hi = i\n    }\n  }\n  if(lo < hi) {\n    return [[lo], [hi]]\n  } else if(lo > hi) {\n    return [[hi], [lo]]\n  } else {\n    return [[lo]]\n  }\n}","'use strict'\n\nmodule.exports = convexHull2D\n\nvar monotoneHull = require('monotone-convex-hull-2d')\n\nfunction convexHull2D(points) {\n  var hull = monotoneHull(points)\n  var h = hull.length\n  if(h <= 2) {\n    return []\n  }\n  var edges = new Array(h)\n  var a = hull[h-1]\n  for(var i=0; i<h; ++i) {\n    var b = hull[i]\n    edges[i] = [a,b]\n    a = b\n  }\n  return edges\n}\n","'use strict'\n\nmodule.exports = convexHullnD\n\nvar ich = require('incremental-convex-hull')\nvar aff = require('affine-hull')\n\nfunction permute(points, front) {\n  var n = points.length\n  var npoints = new Array(n)\n  for(var i=0; i<front.length; ++i) {\n    npoints[i] = points[front[i]]\n  }\n  var ptr = front.length\n  for(var i=0; i<n; ++i) {\n    if(front.indexOf(i) < 0) {\n      npoints[ptr++] = points[i]\n    }\n  }\n  return npoints\n}\n\nfunction invPermute(cells, front) {\n  var nc = cells.length\n  var nf = front.length\n  for(var i=0; i<nc; ++i) {\n    var c = cells[i]\n    for(var j=0; j<c.length; ++j) {\n      var x = c[j]\n      if(x < nf) {\n        c[j] = front[x]\n      } else {\n        x = x - nf\n        for(var k=0; k<nf; ++k) {\n          if(x >= front[k]) {\n            x += 1\n          }\n        }\n        c[j] = x\n      }\n    }\n  }\n  return cells\n}\n\nfunction convexHullnD(points, d) {\n  try {\n    return ich(points, true)\n  } catch(e) {\n    //If point set is degenerate, try to find a basis and rerun it\n    var ah = aff(points)\n    if(ah.length <= d) {\n      //No basis, no try\n      return []\n    }\n    var npoints = permute(points, ah)\n    var nhull   = ich(npoints, true)\n    return invPermute(nhull, ah)\n  }\n}","'use strict'\n\nmodule.exports = affineHull\n\nvar orient = require('robust-orientation')\n\nfunction linearlyIndependent(points, d) {\n  var nhull = new Array(d+1)\n  for(var i=0; i<points.length; ++i) {\n    nhull[i] = points[i]\n  }\n  for(var i=0; i<=points.length; ++i) {\n    for(var j=points.length; j<=d; ++j) {\n      var x = new Array(d)\n      for(var k=0; k<d; ++k) {\n        x[k] = Math.pow(j+1-i, k)\n      }\n      nhull[j] = x\n    }\n    var o = orient.apply(void 0, nhull)\n    if(o) {\n      return true\n    }\n  }\n  return false\n}\n\nfunction affineHull(points) {\n  var n = points.length\n  if(n === 0) {\n    return []\n  }\n  if(n === 1) {\n    return [0]\n  }\n  var d = points[0].length\n  var frame = [ points[0] ]\n  var index = [ 0 ]\n  for(var i=1; i<n; ++i) {\n    frame.push(points[i])\n    if(!linearlyIndependent(frame, d)) {\n      frame.pop()\n      continue\n    }\n    index.push(i)\n    if(index.length === d+1) {\n      return index\n    }\n  }\n  return index\n}","\"use strict\"\n\nmodule.exports = fastTwoSum\n\nfunction fastTwoSum(a, b, result) {\n\tvar x = a + b\n\tvar bv = x - a\n\tvar av = x - bv\n\tvar br = b - bv\n\tvar ar = a - av\n\tif(result) {\n\t\tresult[0] = ar + br\n\t\tresult[1] = x\n\t\treturn result\n\t}\n\treturn [ar+br, x]\n}","\"use strict\"\n\nvar twoProduct = require(\"two-product\")\nvar twoSum = require(\"two-sum\")\n\nmodule.exports = scaleLinearExpansion\n\nfunction scaleLinearExpansion(e, scale) {\n  var n = e.length\n  if(n === 1) {\n    var ts = twoProduct(e[0], scale)\n    if(ts[0]) {\n      return ts\n    }\n    return [ ts[1] ]\n  }\n  var g = new Array(2 * n)\n  var q = [0.1, 0.1]\n  var t = [0.1, 0.1]\n  var count = 0\n  twoProduct(e[0], scale, q)\n  if(q[0]) {\n    g[count++] = q[0]\n  }\n  for(var i=1; i<n; ++i) {\n    twoProduct(e[i], scale, t)\n    var pq = q[1]\n    twoSum(pq, t[0], q)\n    if(q[0]) {\n      g[count++] = q[0]\n    }\n    var a = t[1]\n    var b = q[1]\n    var x = a + b\n    var bv = x - a\n    var y = b - bv\n    q[1] = x\n    if(y) {\n      g[count++] = y\n    }\n  }\n  if(q[1]) {\n    g[count++] = q[1]\n  }\n  if(count === 0) {\n    g[count++] = 0.0\n  }\n  g.length = count\n  return g\n}","\"use strict\"\n\nmodule.exports = robustSubtract\n\n//Easy case: Add two scalars\nfunction scalarScalar(a, b) {\n  var x = a + b\n  var bv = x - a\n  var av = x - bv\n  var br = b - bv\n  var ar = a - av\n  var y = ar + br\n  if(y) {\n    return [y, x]\n  }\n  return [x]\n}\n\nfunction robustSubtract(e, f) {\n  var ne = e.length|0\n  var nf = f.length|0\n  if(ne === 1 && nf === 1) {\n    return scalarScalar(e[0], -f[0])\n  }\n  var n = ne + nf\n  var g = new Array(n)\n  var count = 0\n  var eptr = 0\n  var fptr = 0\n  var abs = Math.abs\n  var ei = e[eptr]\n  var ea = abs(ei)\n  var fi = -f[fptr]\n  var fa = abs(fi)\n  var a, b\n  if(ea < fa) {\n    b = ei\n    eptr += 1\n    if(eptr < ne) {\n      ei = e[eptr]\n      ea = abs(ei)\n    }\n  } else {\n    b = fi\n    fptr += 1\n    if(fptr < nf) {\n      fi = -f[fptr]\n      fa = abs(fi)\n    }\n  }\n  if((eptr < ne && ea < fa) || (fptr >= nf)) {\n    a = ei\n    eptr += 1\n    if(eptr < ne) {\n      ei = e[eptr]\n      ea = abs(ei)\n    }\n  } else {\n    a = fi\n    fptr += 1\n    if(fptr < nf) {\n      fi = -f[fptr]\n      fa = abs(fi)\n    }\n  }\n  var x = a + b\n  var bv = x - a\n  var y = b - bv\n  var q0 = y\n  var q1 = x\n  var _x, _bv, _av, _br, _ar\n  while(eptr < ne && fptr < nf) {\n    if(ea < fa) {\n      a = ei\n      eptr += 1\n      if(eptr < ne) {\n        ei = e[eptr]\n        ea = abs(ei)\n      }\n    } else {\n      a = fi\n      fptr += 1\n      if(fptr < nf) {\n        fi = -f[fptr]\n        fa = abs(fi)\n      }\n    }\n    b = q0\n    x = a + b\n    bv = x - a\n    y = b - bv\n    if(y) {\n      g[count++] = y\n    }\n    _x = q1 + x\n    _bv = _x - q1\n    _av = _x - _bv\n    _br = x - _bv\n    _ar = q1 - _av\n    q0 = _ar + _br\n    q1 = _x\n  }\n  while(eptr < ne) {\n    a = ei\n    b = q0\n    x = a + b\n    bv = x - a\n    y = b - bv\n    if(y) {\n      g[count++] = y\n    }\n    _x = q1 + x\n    _bv = _x - q1\n    _av = _x - _bv\n    _br = x - _bv\n    _ar = q1 - _av\n    q0 = _ar + _br\n    q1 = _x\n    eptr += 1\n    if(eptr < ne) {\n      ei = e[eptr]\n    }\n  }\n  while(fptr < nf) {\n    a = fi\n    b = q0\n    x = a + b\n    bv = x - a\n    y = b - bv\n    if(y) {\n      g[count++] = y\n    } \n    _x = q1 + x\n    _bv = _x - q1\n    _av = _x - _bv\n    _br = x - _bv\n    _ar = q1 - _av\n    q0 = _ar + _br\n    q1 = _x\n    fptr += 1\n    if(fptr < nf) {\n      fi = -f[fptr]\n    }\n  }\n  if(q0) {\n    g[count++] = q0\n  }\n  if(q1) {\n    g[count++] = q1\n  }\n  if(!count) {\n    g[count++] = 0.0  \n  }\n  g.length = count\n  return g\n}","\"use strict\"\n\nmodule.exports = linearExpansionSum\n\n//Easy case: Add two scalars\nfunction scalarScalar(a, b) {\n  var x = a + b\n  var bv = x - a\n  var av = x - bv\n  var br = b - bv\n  var ar = a - av\n  var y = ar + br\n  if(y) {\n    return [y, x]\n  }\n  return [x]\n}\n\nfunction linearExpansionSum(e, f) {\n  var ne = e.length|0\n  var nf = f.length|0\n  if(ne === 1 && nf === 1) {\n    return scalarScalar(e[0], f[0])\n  }\n  var n = ne + nf\n  var g = new Array(n)\n  var count = 0\n  var eptr = 0\n  var fptr = 0\n  var abs = Math.abs\n  var ei = e[eptr]\n  var ea = abs(ei)\n  var fi = f[fptr]\n  var fa = abs(fi)\n  var a, b\n  if(ea < fa) {\n    b = ei\n    eptr += 1\n    if(eptr < ne) {\n      ei = e[eptr]\n      ea = abs(ei)\n    }\n  } else {\n    b = fi\n    fptr += 1\n    if(fptr < nf) {\n      fi = f[fptr]\n      fa = abs(fi)\n    }\n  }\n  if((eptr < ne && ea < fa) || (fptr >= nf)) {\n    a = ei\n    eptr += 1\n    if(eptr < ne) {\n      ei = e[eptr]\n      ea = abs(ei)\n    }\n  } else {\n    a = fi\n    fptr += 1\n    if(fptr < nf) {\n      fi = f[fptr]\n      fa = abs(fi)\n    }\n  }\n  var x = a + b\n  var bv = x - a\n  var y = b - bv\n  var q0 = y\n  var q1 = x\n  var _x, _bv, _av, _br, _ar\n  while(eptr < ne && fptr < nf) {\n    if(ea < fa) {\n      a = ei\n      eptr += 1\n      if(eptr < ne) {\n        ei = e[eptr]\n        ea = abs(ei)\n      }\n    } else {\n      a = fi\n      fptr += 1\n      if(fptr < nf) {\n        fi = f[fptr]\n        fa = abs(fi)\n      }\n    }\n    b = q0\n    x = a + b\n    bv = x - a\n    y = b - bv\n    if(y) {\n      g[count++] = y\n    }\n    _x = q1 + x\n    _bv = _x - q1\n    _av = _x - _bv\n    _br = x - _bv\n    _ar = q1 - _av\n    q0 = _ar + _br\n    q1 = _x\n  }\n  while(eptr < ne) {\n    a = ei\n    b = q0\n    x = a + b\n    bv = x - a\n    y = b - bv\n    if(y) {\n      g[count++] = y\n    }\n    _x = q1 + x\n    _bv = _x - q1\n    _av = _x - _bv\n    _br = x - _bv\n    _ar = q1 - _av\n    q0 = _ar + _br\n    q1 = _x\n    eptr += 1\n    if(eptr < ne) {\n      ei = e[eptr]\n    }\n  }\n  while(fptr < nf) {\n    a = fi\n    b = q0\n    x = a + b\n    bv = x - a\n    y = b - bv\n    if(y) {\n      g[count++] = y\n    } \n    _x = q1 + x\n    _bv = _x - q1\n    _av = _x - _bv\n    _br = x - _bv\n    _ar = q1 - _av\n    q0 = _ar + _br\n    q1 = _x\n    fptr += 1\n    if(fptr < nf) {\n      fi = f[fptr]\n    }\n  }\n  if(q0) {\n    g[count++] = q0\n  }\n  if(q1) {\n    g[count++] = q1\n  }\n  if(!count) {\n    g[count++] = 0.0  \n  }\n  g.length = count\n  return g\n}","\"use strict\"\n\nmodule.exports = twoProduct\n\nvar SPLITTER = +(Math.pow(2, 27) + 1.0)\n\nfunction twoProduct(a, b, result) {\n  var x = a * b\n\n  var c = SPLITTER * a\n  var abig = c - a\n  var ahi = c - abig\n  var alo = a - ahi\n\n  var d = SPLITTER * b\n  var bbig = d - b\n  var bhi = d - bbig\n  var blo = b - bhi\n\n  var err1 = x - (ahi * bhi)\n  var err2 = err1 - (alo * bhi)\n  var err3 = err2 - (ahi * blo)\n\n  var y = alo * blo - err3\n\n  if(result) {\n    result[0] = y\n    result[1] = x\n    return result\n  }\n\n  return [ y, x ]\n}","\"use strict\"\n\nvar twoProduct = require(\"two-product\")\nvar robustSum = require(\"robust-sum\")\nvar robustScale = require(\"robust-scale\")\nvar robustSubtract = require(\"robust-subtract\")\n\nvar NUM_EXPAND = 5\n\nvar EPSILON     = 1.1102230246251565e-16\nvar ERRBOUND3   = (3.0 + 16.0 * EPSILON) * EPSILON\nvar ERRBOUND4   = (7.0 + 56.0 * EPSILON) * EPSILON\n\nfunction cofactor(m, c) {\n  var result = new Array(m.length-1)\n  for(var i=1; i<m.length; ++i) {\n    var r = result[i-1] = new Array(m.length-1)\n    for(var j=0,k=0; j<m.length; ++j) {\n      if(j === c) {\n        continue\n      }\n      r[k++] = m[i][j]\n    }\n  }\n  return result\n}\n\nfunction matrix(n) {\n  var result = new Array(n)\n  for(var i=0; i<n; ++i) {\n    result[i] = new Array(n)\n    for(var j=0; j<n; ++j) {\n      result[i][j] = [\"m\", j, \"[\", (n-i-1), \"]\"].join(\"\")\n    }\n  }\n  return result\n}\n\nfunction sign(n) {\n  if(n & 1) {\n    return \"-\"\n  }\n  return \"\"\n}\n\nfunction generateSum(expr) {\n  if(expr.length === 1) {\n    return expr[0]\n  } else if(expr.length === 2) {\n    return [\"sum(\", expr[0], \",\", expr[1], \")\"].join(\"\")\n  } else {\n    var m = expr.length>>1\n    return [\"sum(\", generateSum(expr.slice(0, m)), \",\", generateSum(expr.slice(m)), \")\"].join(\"\")\n  }\n}\n\nfunction determinant(m) {\n  if(m.length === 2) {\n    return [[\"sum(prod(\", m[0][0], \",\", m[1][1], \"),prod(-\", m[0][1], \",\", m[1][0], \"))\"].join(\"\")]\n  } else {\n    var expr = []\n    for(var i=0; i<m.length; ++i) {\n      expr.push([\"scale(\", generateSum(determinant(cofactor(m, i))), \",\", sign(i), m[0][i], \")\"].join(\"\"))\n    }\n    return expr\n  }\n}\n\nfunction orientation(n) {\n  var pos = []\n  var neg = []\n  var m = matrix(n)\n  var args = []\n  for(var i=0; i<n; ++i) {\n    if((i&1)===0) {\n      pos.push.apply(pos, determinant(cofactor(m, i)))\n    } else {\n      neg.push.apply(neg, determinant(cofactor(m, i)))\n    }\n    args.push(\"m\" + i)\n  }\n  var posExpr = generateSum(pos)\n  var negExpr = generateSum(neg)\n  var funcName = \"orientation\" + n + \"Exact\"\n  var code = [\"function \", funcName, \"(\", args.join(), \"){var p=\", posExpr, \",n=\", negExpr, \",d=sub(p,n);\\\nreturn d[d.length-1];};return \", funcName].join(\"\")\n  var proc = new Function(\"sum\", \"prod\", \"scale\", \"sub\", code)\n  return proc(robustSum, twoProduct, robustScale, robustSubtract)\n}\n\nvar orientation3Exact = orientation(3)\nvar orientation4Exact = orientation(4)\n\nvar CACHED = [\n  function orientation0() { return 0 },\n  function orientation1() { return 0 },\n  function orientation2(a, b) { \n    return b[0] - a[0]\n  },\n  function orientation3(a, b, c) {\n    var l = (a[1] - c[1]) * (b[0] - c[0])\n    var r = (a[0] - c[0]) * (b[1] - c[1])\n    var det = l - r\n    var s\n    if(l > 0) {\n      if(r <= 0) {\n        return det\n      } else {\n        s = l + r\n      }\n    } else if(l < 0) {\n      if(r >= 0) {\n        return det\n      } else {\n        s = -(l + r)\n      }\n    } else {\n      return det\n    }\n    var tol = ERRBOUND3 * s\n    if(det >= tol || det <= -tol) {\n      return det\n    }\n    return orientation3Exact(a, b, c)\n  },\n  function orientation4(a,b,c,d) {\n    var adx = a[0] - d[0]\n    var bdx = b[0] - d[0]\n    var cdx = c[0] - d[0]\n    var ady = a[1] - d[1]\n    var bdy = b[1] - d[1]\n    var cdy = c[1] - d[1]\n    var adz = a[2] - d[2]\n    var bdz = b[2] - d[2]\n    var cdz = c[2] - d[2]\n    var bdxcdy = bdx * cdy\n    var cdxbdy = cdx * bdy\n    var cdxady = cdx * ady\n    var adxcdy = adx * cdy\n    var adxbdy = adx * bdy\n    var bdxady = bdx * ady\n    var det = adz * (bdxcdy - cdxbdy) \n            + bdz * (cdxady - adxcdy)\n            + cdz * (adxbdy - bdxady)\n    var permanent = (Math.abs(bdxcdy) + Math.abs(cdxbdy)) * Math.abs(adz)\n                  + (Math.abs(cdxady) + Math.abs(adxcdy)) * Math.abs(bdz)\n                  + (Math.abs(adxbdy) + Math.abs(bdxady)) * Math.abs(cdz)\n    var tol = ERRBOUND4 * permanent\n    if ((det > tol) || (-det > tol)) {\n      return det\n    }\n    return orientation4Exact(a,b,c,d)\n  }\n]\n\nfunction slowOrient(args) {\n  var proc = CACHED[args.length]\n  if(!proc) {\n    proc = CACHED[args.length] = orientation(args.length)\n  }\n  return proc.apply(undefined, args)\n}\n\nfunction generateOrientationProc() {\n  while(CACHED.length <= NUM_EXPAND) {\n    CACHED.push(orientation(CACHED.length))\n  }\n  var args = []\n  var procArgs = [\"slow\"]\n  for(var i=0; i<=NUM_EXPAND; ++i) {\n    args.push(\"a\" + i)\n    procArgs.push(\"o\" + i)\n  }\n  var code = [\n    \"function getOrientation(\", args.join(), \"){switch(arguments.length){case 0:case 1:return 0;\"\n  ]\n  for(var i=2; i<=NUM_EXPAND; ++i) {\n    code.push(\"case \", i, \":return o\", i, \"(\", args.slice(0, i).join(), \");\")\n  }\n  code.push(\"}var s=new Array(arguments.length);for(var i=0;i<arguments.length;++i){s[i]=arguments[i]};return slow(s);}return getOrientation\")\n  procArgs.push(code.join(\"\"))\n\n  var proc = Function.apply(undefined, procArgs)\n  module.exports = proc.apply(undefined, [slowOrient].concat(CACHED))\n  for(var i=0; i<=NUM_EXPAND; ++i) {\n    module.exports[i] = CACHED[i]\n  }\n}\n\ngenerateOrientationProc()","\"use strict\"\n\n//High level idea:\n// 1. Use Clarkson's incremental construction to find convex hull\n// 2. Point location in triangulation by jump and walk\n\nmodule.exports = incrementalConvexHull\n\nvar orient = require(\"robust-orientation\")\nvar compareCell = require(\"simplicial-complex\").compareCells\n\nfunction compareInt(a, b) {\n  return a - b\n}\n\nfunction Simplex(vertices, adjacent, boundary) {\n  this.vertices = vertices\n  this.adjacent = adjacent\n  this.boundary = boundary\n  this.lastVisited = -1\n}\n\nSimplex.prototype.flip = function() {\n  var t = this.vertices[0]\n  this.vertices[0] = this.vertices[1]\n  this.vertices[1] = t\n  var u = this.adjacent[0]\n  this.adjacent[0] = this.adjacent[1]\n  this.adjacent[1] = u\n}\n\nfunction GlueFacet(vertices, cell, index) {\n  this.vertices = vertices\n  this.cell = cell\n  this.index = index\n}\n\nfunction compareGlue(a, b) {\n  return compareCell(a.vertices, b.vertices)\n}\n\nfunction bakeOrient(d) {\n  var code = [\"function orient(){var tuple=this.tuple;return test(\"]\n  for(var i=0; i<=d; ++i) {\n    if(i > 0) {\n      code.push(\",\")\n    }\n    code.push(\"tuple[\", i, \"]\")\n  }\n  code.push(\")}return orient\")\n  var proc = new Function(\"test\", code.join(\"\"))\n  var test = orient[d+1]\n  if(!test) {\n    test = orient\n  }\n  return proc(test)\n}\n\nvar BAKED = []\n\nfunction Triangulation(dimension, vertices, simplices) {\n  this.dimension = dimension\n  this.vertices = vertices\n  this.simplices = simplices\n  this.interior = simplices.filter(function(c) {\n    return !c.boundary\n  })\n\n  this.tuple = new Array(dimension+1)\n  for(var i=0; i<=dimension; ++i) {\n    this.tuple[i] = this.vertices[i]\n  }\n\n  var o = BAKED[dimension]\n  if(!o) {\n    o = BAKED[dimension] = bakeOrient(dimension)\n  }\n  this.orient = o\n}\n\nvar proto = Triangulation.prototype\n\n//Degenerate situation where we are on boundary, but coplanar to face\nproto.handleBoundaryDegeneracy = function(cell, point) {\n  var d = this.dimension\n  var n = this.vertices.length - 1\n  var tuple = this.tuple\n  var verts = this.vertices\n\n  //Dumb solution: Just do dfs from boundary cell until we find any peak, or terminate\n  var toVisit = [ cell ]\n  cell.lastVisited = -n\n  while(toVisit.length > 0) {\n    cell = toVisit.pop()\n    var cellVerts = cell.vertices\n    var cellAdj = cell.adjacent\n    for(var i=0; i<=d; ++i) {\n      var neighbor = cellAdj[i]\n      if(!neighbor.boundary || neighbor.lastVisited <= -n) {\n        continue\n      }\n      var nv = neighbor.vertices\n      for(var j=0; j<=d; ++j) {\n        var vv = nv[j]\n        if(vv < 0) {\n          tuple[j] = point\n        } else {\n          tuple[j] = verts[vv]\n        }\n      }\n      var o = this.orient()\n      if(o > 0) {\n        return neighbor\n      }\n      neighbor.lastVisited = -n\n      if(o === 0) {\n        toVisit.push(neighbor)\n      }\n    }\n  }\n  return null\n}\n\nproto.walk = function(point, random) {\n  //Alias local properties\n  var n = this.vertices.length - 1\n  var d = this.dimension\n  var verts = this.vertices\n  var tuple = this.tuple\n\n  //Compute initial jump cell\n  var initIndex = random ? (this.interior.length * Math.random())|0 : (this.interior.length-1)\n  var cell = this.interior[ initIndex ]\n\n  //Start walking\nouterLoop:\n  while(!cell.boundary) {\n    var cellVerts = cell.vertices\n    var cellAdj = cell.adjacent\n\n    for(var i=0; i<=d; ++i) {\n      tuple[i] = verts[cellVerts[i]]\n    }\n    cell.lastVisited = n\n\n    //Find farthest adjacent cell\n    for(var i=0; i<=d; ++i) {\n      var neighbor = cellAdj[i]\n      if(neighbor.lastVisited >= n) {\n        continue\n      }\n      var prev = tuple[i]\n      tuple[i] = point\n      var o = this.orient()\n      tuple[i] = prev\n      if(o < 0) {\n        cell = neighbor\n        continue outerLoop\n      } else {\n        if(!neighbor.boundary) {\n          neighbor.lastVisited = n\n        } else {\n          neighbor.lastVisited = -n\n        }\n      }\n    }\n    return\n  }\n\n  return cell\n}\n\nproto.addPeaks = function(point, cell) {\n  var n = this.vertices.length - 1\n  var d = this.dimension\n  var verts = this.vertices\n  var tuple = this.tuple\n  var interior = this.interior\n  var simplices = this.simplices\n\n  //Walking finished at boundary, time to add peaks\n  var tovisit = [ cell ]\n\n  //Stretch initial boundary cell into a peak\n  cell.lastVisited = n\n  cell.vertices[cell.vertices.indexOf(-1)] = n\n  cell.boundary = false\n  interior.push(cell)\n\n  //Record a list of all new boundaries created by added peaks so we can glue them together when we are all done\n  var glueFacets = []\n\n  //Do a traversal of the boundary walking outward from starting peak\n  while(tovisit.length > 0) {\n    //Pop off peak and walk over adjacent cells\n    var cell = tovisit.pop()\n    var cellVerts = cell.vertices\n    var cellAdj = cell.adjacent\n    var indexOfN = cellVerts.indexOf(n)\n    if(indexOfN < 0) {\n      continue\n    }\n\n    for(var i=0; i<=d; ++i) {\n      if(i === indexOfN) {\n        continue\n      }\n\n      //For each boundary neighbor of the cell\n      var neighbor = cellAdj[i]\n      if(!neighbor.boundary || neighbor.lastVisited >= n) {\n        continue\n      }\n\n      var nv = neighbor.vertices\n\n      //Test if neighbor is a peak\n      if(neighbor.lastVisited !== -n) {      \n        //Compute orientation of p relative to each boundary peak\n        var indexOfNeg1 = 0\n        for(var j=0; j<=d; ++j) {\n          if(nv[j] < 0) {\n            indexOfNeg1 = j\n            tuple[j] = point\n          } else {\n            tuple[j] = verts[nv[j]]\n          }\n        }\n        var o = this.orient()\n\n        //Test if neighbor cell is also a peak\n        if(o > 0) {\n          nv[indexOfNeg1] = n\n          neighbor.boundary = false\n          interior.push(neighbor)\n          tovisit.push(neighbor)\n          neighbor.lastVisited = n\n          continue\n        } else {\n          neighbor.lastVisited = -n\n        }\n      }\n\n      var na = neighbor.adjacent\n\n      //Otherwise, replace neighbor with new face\n      var vverts = cellVerts.slice()\n      var vadj = cellAdj.slice()\n      var ncell = new Simplex(vverts, vadj, true)\n      simplices.push(ncell)\n\n      //Connect to neighbor\n      var opposite = na.indexOf(cell)\n      if(opposite < 0) {\n        continue\n      }\n      na[opposite] = ncell\n      vadj[indexOfN] = neighbor\n\n      //Connect to cell\n      vverts[i] = -1\n      vadj[i] = cell\n      cellAdj[i] = ncell\n\n      //Flip facet\n      ncell.flip()\n\n      //Add to glue list\n      for(var j=0; j<=d; ++j) {\n        var uu = vverts[j]\n        if(uu < 0 || uu === n) {\n          continue\n        }\n        var nface = new Array(d-1)\n        var nptr = 0\n        for(var k=0; k<=d; ++k) {\n          var vv = vverts[k]\n          if(vv < 0 || k === j) {\n            continue\n          }\n          nface[nptr++] = vv\n        }\n        glueFacets.push(new GlueFacet(nface, ncell, j))\n      }\n    }\n  }\n\n  //Glue boundary facets together\n  glueFacets.sort(compareGlue)\n\n  for(var i=0; i+1<glueFacets.length; i+=2) {\n    var a = glueFacets[i]\n    var b = glueFacets[i+1]\n    var ai = a.index\n    var bi = b.index\n    if(ai < 0 || bi < 0) {\n      continue\n    }\n    a.cell.adjacent[a.index] = b.cell\n    b.cell.adjacent[b.index] = a.cell\n  }\n}\n\nproto.insert = function(point, random) {\n  //Add point\n  var verts = this.vertices\n  verts.push(point)\n\n  var cell = this.walk(point, random)\n  if(!cell) {\n    return\n  }\n\n  //Alias local properties\n  var d = this.dimension\n  var tuple = this.tuple\n\n  //Degenerate case: If point is coplanar to cell, then walk until we find a non-degenerate boundary\n  for(var i=0; i<=d; ++i) {\n    var vv = cell.vertices[i]\n    if(vv < 0) {\n      tuple[i] = point\n    } else {\n      tuple[i] = verts[vv]\n    }\n  }\n  var o = this.orient(tuple)\n  if(o < 0) {\n    return\n  } else if(o === 0) {\n    cell = this.handleBoundaryDegeneracy(cell, point)\n    if(!cell) {\n      return\n    }\n  }\n\n  //Add peaks\n  this.addPeaks(point, cell)\n}\n\n//Extract all boundary cells\nproto.boundary = function() {\n  var d = this.dimension\n  var boundary = []\n  var cells = this.simplices\n  var nc = cells.length\n  for(var i=0; i<nc; ++i) {\n    var c = cells[i]\n    if(c.boundary) {\n      var bcell = new Array(d)\n      var cv = c.vertices\n      var ptr = 0\n      var parity = 0\n      for(var j=0; j<=d; ++j) {\n        if(cv[j] >= 0) {\n          bcell[ptr++] = cv[j]\n        } else {\n          parity = j&1\n        }\n      }\n      if(parity === (d&1)) {\n        var t = bcell[0]\n        bcell[0] = bcell[1]\n        bcell[1] = t\n      }\n      boundary.push(bcell)\n    }\n  }\n  return boundary\n}\n\nfunction incrementalConvexHull(points, randomSearch) {\n  var n = points.length\n  if(n === 0) {\n    throw new Error(\"Must have at least d+1 points\")\n  }\n  var d = points[0].length\n  if(n <= d) {\n    throw new Error(\"Must input at least d+1 points\")\n  }\n\n  //FIXME: This could be degenerate, but need to select d+1 non-coplanar points to bootstrap process\n  var initialSimplex = points.slice(0, d+1)\n\n  //Make sure initial simplex is positively oriented\n  var o = orient.apply(void 0, initialSimplex)\n  if(o === 0) {\n    throw new Error(\"Input not in general position\")\n  }\n  var initialCoords = new Array(d+1)\n  for(var i=0; i<=d; ++i) {\n    initialCoords[i] = i\n  }\n  if(o < 0) {\n    initialCoords[0] = 1\n    initialCoords[1] = 0\n  }\n\n  //Create initial topological index, glue pointers together (kind of messy)\n  var initialCell = new Simplex(initialCoords, new Array(d+1), false)\n  var boundary = initialCell.adjacent\n  var list = new Array(d+2)\n  for(var i=0; i<=d; ++i) {\n    var verts = initialCoords.slice()\n    for(var j=0; j<=d; ++j) {\n      if(j === i) {\n        verts[j] = -1\n      }\n    }\n    var t = verts[0]\n    verts[0] = verts[1]\n    verts[1] = t\n    var cell = new Simplex(verts, new Array(d+1), true)\n    boundary[i] = cell\n    list[i] = cell\n  }\n  list[d+1] = initialCell\n  for(var i=0; i<=d; ++i) {\n    var verts = boundary[i].vertices\n    var adj = boundary[i].adjacent\n    for(var j=0; j<=d; ++j) {\n      var v = verts[j]\n      if(v < 0) {\n        adj[j] = initialCell\n        continue\n      }\n      for(var k=0; k<=d; ++k) {\n        if(boundary[k].vertices.indexOf(v) < 0) {\n          adj[j] = boundary[k]\n        }\n      }\n    }\n  }\n\n  //Initialize triangles\n  var triangles = new Triangulation(d, initialSimplex, list)\n\n  //Insert remaining points\n  var useRandom = !!randomSearch\n  for(var i=d+1; i<n; ++i) {\n    triangles.insert(points[i], useRandom)\n  }\n  \n  //Extract boundary cells\n  return triangles.boundary()\n}","/**\n * Bit twiddling hacks for JavaScript.\n *\n * Author: Mikola Lysenko\n *\n * Ported from Stanford bit twiddling hack library:\n *    http://graphics.stanford.edu/~seander/bithacks.html\n */\n\n\"use strict\"; \"use restrict\";\n\n//Number of bits in an integer\nvar INT_BITS = 32;\n\n//Constants\nexports.INT_BITS  = INT_BITS;\nexports.INT_MAX   =  0x7fffffff;\nexports.INT_MIN   = -1<<(INT_BITS-1);\n\n//Returns -1, 0, +1 depending on sign of x\nexports.sign = function(v) {\n  return (v > 0) - (v < 0);\n}\n\n//Computes absolute value of integer\nexports.abs = function(v) {\n  var mask = v >> (INT_BITS-1);\n  return (v ^ mask) - mask;\n}\n\n//Computes minimum of integers x and y\nexports.min = function(x, y) {\n  return y ^ ((x ^ y) & -(x < y));\n}\n\n//Computes maximum of integers x and y\nexports.max = function(x, y) {\n  return x ^ ((x ^ y) & -(x < y));\n}\n\n//Checks if a number is a power of two\nexports.isPow2 = function(v) {\n  return !(v & (v-1)) && (!!v);\n}\n\n//Computes log base 2 of v\nexports.log2 = function(v) {\n  var r, shift;\n  r =     (v > 0xFFFF) << 4; v >>>= r;\n  shift = (v > 0xFF  ) << 3; v >>>= shift; r |= shift;\n  shift = (v > 0xF   ) << 2; v >>>= shift; r |= shift;\n  shift = (v > 0x3   ) << 1; v >>>= shift; r |= shift;\n  return r | (v >> 1);\n}\n\n//Computes log base 10 of v\nexports.log10 = function(v) {\n  return  (v >= 1000000000) ? 9 : (v >= 100000000) ? 8 : (v >= 10000000) ? 7 :\n          (v >= 1000000) ? 6 : (v >= 100000) ? 5 : (v >= 10000) ? 4 :\n          (v >= 1000) ? 3 : (v >= 100) ? 2 : (v >= 10) ? 1 : 0;\n}\n\n//Counts number of bits\nexports.popCount = function(v) {\n  v = v - ((v >>> 1) & 0x55555555);\n  v = (v & 0x33333333) + ((v >>> 2) & 0x33333333);\n  return ((v + (v >>> 4) & 0xF0F0F0F) * 0x1010101) >>> 24;\n}\n\n//Counts number of trailing zeros\nfunction countTrailingZeros(v) {\n  var c = 32;\n  v &= -v;\n  if (v) c--;\n  if (v & 0x0000FFFF) c -= 16;\n  if (v & 0x00FF00FF) c -= 8;\n  if (v & 0x0F0F0F0F) c -= 4;\n  if (v & 0x33333333) c -= 2;\n  if (v & 0x55555555) c -= 1;\n  return c;\n}\nexports.countTrailingZeros = countTrailingZeros;\n\n//Rounds to next power of 2\nexports.nextPow2 = function(v) {\n  v += v === 0;\n  --v;\n  v |= v >>> 1;\n  v |= v >>> 2;\n  v |= v >>> 4;\n  v |= v >>> 8;\n  v |= v >>> 16;\n  return v + 1;\n}\n\n//Rounds down to previous power of 2\nexports.prevPow2 = function(v) {\n  v |= v >>> 1;\n  v |= v >>> 2;\n  v |= v >>> 4;\n  v |= v >>> 8;\n  v |= v >>> 16;\n  return v - (v>>>1);\n}\n\n//Computes parity of word\nexports.parity = function(v) {\n  v ^= v >>> 16;\n  v ^= v >>> 8;\n  v ^= v >>> 4;\n  v &= 0xf;\n  return (0x6996 >>> v) & 1;\n}\n\nvar REVERSE_TABLE = new Array(256);\n\n(function(tab) {\n  for(var i=0; i<256; ++i) {\n    var v = i, r = i, s = 7;\n    for (v >>>= 1; v; v >>>= 1) {\n      r <<= 1;\n      r |= v & 1;\n      --s;\n    }\n    tab[i] = (r << s) & 0xff;\n  }\n})(REVERSE_TABLE);\n\n//Reverse bits in a 32 bit word\nexports.reverse = function(v) {\n  return  (REVERSE_TABLE[ v         & 0xff] << 24) |\n          (REVERSE_TABLE[(v >>> 8)  & 0xff] << 16) |\n          (REVERSE_TABLE[(v >>> 16) & 0xff] << 8)  |\n           REVERSE_TABLE[(v >>> 24) & 0xff];\n}\n\n//Interleave bits of 2 coordinates with 16 bits.  Useful for fast quadtree codes\nexports.interleave2 = function(x, y) {\n  x &= 0xFFFF;\n  x = (x | (x << 8)) & 0x00FF00FF;\n  x = (x | (x << 4)) & 0x0F0F0F0F;\n  x = (x | (x << 2)) & 0x33333333;\n  x = (x | (x << 1)) & 0x55555555;\n\n  y &= 0xFFFF;\n  y = (y | (y << 8)) & 0x00FF00FF;\n  y = (y | (y << 4)) & 0x0F0F0F0F;\n  y = (y | (y << 2)) & 0x33333333;\n  y = (y | (y << 1)) & 0x55555555;\n\n  return x | (y << 1);\n}\n\n//Extracts the nth interleaved component\nexports.deinterleave2 = function(v, n) {\n  v = (v >>> n) & 0x55555555;\n  v = (v | (v >>> 1))  & 0x33333333;\n  v = (v | (v >>> 2))  & 0x0F0F0F0F;\n  v = (v | (v >>> 4))  & 0x00FF00FF;\n  v = (v | (v >>> 16)) & 0x000FFFF;\n  return (v << 16) >> 16;\n}\n\n\n//Interleave bits of 3 coordinates, each with 10 bits.  Useful for fast octree codes\nexports.interleave3 = function(x, y, z) {\n  x &= 0x3FF;\n  x  = (x | (x<<16)) & 4278190335;\n  x  = (x | (x<<8))  & 251719695;\n  x  = (x | (x<<4))  & 3272356035;\n  x  = (x | (x<<2))  & 1227133513;\n\n  y &= 0x3FF;\n  y  = (y | (y<<16)) & 4278190335;\n  y  = (y | (y<<8))  & 251719695;\n  y  = (y | (y<<4))  & 3272356035;\n  y  = (y | (y<<2))  & 1227133513;\n  x |= (y << 1);\n  \n  z &= 0x3FF;\n  z  = (z | (z<<16)) & 4278190335;\n  z  = (z | (z<<8))  & 251719695;\n  z  = (z | (z<<4))  & 3272356035;\n  z  = (z | (z<<2))  & 1227133513;\n  \n  return x | (z << 2);\n}\n\n//Extracts nth interleaved component of a 3-tuple\nexports.deinterleave3 = function(v, n) {\n  v = (v >>> n)       & 1227133513;\n  v = (v | (v>>>2))   & 3272356035;\n  v = (v | (v>>>4))   & 251719695;\n  v = (v | (v>>>8))   & 4278190335;\n  v = (v | (v>>>16))  & 0x3FF;\n  return (v<<22)>>22;\n}\n\n//Computes next combination in colexicographic order (this is mistakenly called nextPermutation on the bit twiddling hacks page)\nexports.nextCombination = function(v) {\n  var t = v | (v - 1);\n  return (t + 1) | (((~t & -~t) - 1) >>> (countTrailingZeros(v) + 1));\n}\n\n","\"use strict\"; \"use restrict\";\n\nmodule.exports = UnionFind;\n\nfunction UnionFind(count) {\n  this.roots = new Array(count);\n  this.ranks = new Array(count);\n  \n  for(var i=0; i<count; ++i) {\n    this.roots[i] = i;\n    this.ranks[i] = 0;\n  }\n}\n\nvar proto = UnionFind.prototype\n\nObject.defineProperty(proto, \"length\", {\n  \"get\": function() {\n    return this.roots.length\n  }\n})\n\nproto.makeSet = function() {\n  var n = this.roots.length;\n  this.roots.push(n);\n  this.ranks.push(0);\n  return n;\n}\n\nproto.find = function(x) {\n  var x0 = x\n  var roots = this.roots;\n  while(roots[x] !== x) {\n    x = roots[x]\n  }\n  while(roots[x0] !== x) {\n    var y = roots[x0]\n    roots[x0] = x\n    x0 = y\n  }\n  return x;\n}\n\nproto.link = function(x, y) {\n  var xr = this.find(x)\n    , yr = this.find(y);\n  if(xr === yr) {\n    return;\n  }\n  var ranks = this.ranks\n    , roots = this.roots\n    , xd    = ranks[xr]\n    , yd    = ranks[yr];\n  if(xd < yd) {\n    roots[xr] = yr;\n  } else if(yd < xd) {\n    roots[yr] = xr;\n  } else {\n    roots[yr] = xr;\n    ++ranks[xr];\n  }\n}","\"use strict\"; \"use restrict\";\n\nvar bits      = require(\"bit-twiddle\")\n  , UnionFind = require(\"union-find\")\n\n//Returns the dimension of a cell complex\nfunction dimension(cells) {\n  var d = 0\n    , max = Math.max\n  for(var i=0, il=cells.length; i<il; ++i) {\n    d = max(d, cells[i].length)\n  }\n  return d-1\n}\nexports.dimension = dimension\n\n//Counts the number of vertices in faces\nfunction countVertices(cells) {\n  var vc = -1\n    , max = Math.max\n  for(var i=0, il=cells.length; i<il; ++i) {\n    var c = cells[i]\n    for(var j=0, jl=c.length; j<jl; ++j) {\n      vc = max(vc, c[j])\n    }\n  }\n  return vc+1\n}\nexports.countVertices = countVertices\n\n//Returns a deep copy of cells\nfunction cloneCells(cells) {\n  var ncells = new Array(cells.length)\n  for(var i=0, il=cells.length; i<il; ++i) {\n    ncells[i] = cells[i].slice(0)\n  }\n  return ncells\n}\nexports.cloneCells = cloneCells\n\n//Ranks a pair of cells up to permutation\nfunction compareCells(a, b) {\n  var n = a.length\n    , t = a.length - b.length\n    , min = Math.min\n  if(t) {\n    return t\n  }\n  switch(n) {\n    case 0:\n      return 0;\n    case 1:\n      return a[0] - b[0];\n    case 2:\n      var d = a[0]+a[1]-b[0]-b[1]\n      if(d) {\n        return d\n      }\n      return min(a[0],a[1]) - min(b[0],b[1])\n    case 3:\n      var l1 = a[0]+a[1]\n        , m1 = b[0]+b[1]\n      d = l1+a[2] - (m1+b[2])\n      if(d) {\n        return d\n      }\n      var l0 = min(a[0], a[1])\n        , m0 = min(b[0], b[1])\n        , d  = min(l0, a[2]) - min(m0, b[2])\n      if(d) {\n        return d\n      }\n      return min(l0+a[2], l1) - min(m0+b[2], m1)\n    \n    //TODO: Maybe optimize n=4 as well?\n    \n    default:\n      var as = a.slice(0)\n      as.sort()\n      var bs = b.slice(0)\n      bs.sort()\n      for(var i=0; i<n; ++i) {\n        t = as[i] - bs[i]\n        if(t) {\n          return t\n        }\n      }\n      return 0\n  }\n}\nexports.compareCells = compareCells\n\nfunction compareZipped(a, b) {\n  return compareCells(a[0], b[0])\n}\n\n//Puts a cell complex into normal order for the purposes of findCell queries\nfunction normalize(cells, attr) {\n  if(attr) {\n    var len = cells.length\n    var zipped = new Array(len)\n    for(var i=0; i<len; ++i) {\n      zipped[i] = [cells[i], attr[i]]\n    }\n    zipped.sort(compareZipped)\n    for(var i=0; i<len; ++i) {\n      cells[i] = zipped[i][0]\n      attr[i] = zipped[i][1]\n    }\n    return cells\n  } else {\n    cells.sort(compareCells)\n    return cells\n  }\n}\nexports.normalize = normalize\n\n//Removes all duplicate cells in the complex\nfunction unique(cells) {\n  if(cells.length === 0) {\n    return []\n  }\n  var ptr = 1\n    , len = cells.length\n  for(var i=1; i<len; ++i) {\n    var a = cells[i]\n    if(compareCells(a, cells[i-1])) {\n      if(i === ptr) {\n        ptr++\n        continue\n      }\n      cells[ptr++] = a\n    }\n  }\n  cells.length = ptr\n  return cells\n}\nexports.unique = unique;\n\n//Finds a cell in a normalized cell complex\nfunction findCell(cells, c) {\n  var lo = 0\n    , hi = cells.length-1\n    , r  = -1\n  while (lo <= hi) {\n    var mid = (lo + hi) >> 1\n      , s   = compareCells(cells[mid], c)\n    if(s <= 0) {\n      if(s === 0) {\n        r = mid\n      }\n      lo = mid + 1\n    } else if(s > 0) {\n      hi = mid - 1\n    }\n  }\n  return r\n}\nexports.findCell = findCell;\n\n//Builds an index for an n-cell.  This is more general than dual, but less efficient\nfunction incidence(from_cells, to_cells) {\n  var index = new Array(from_cells.length)\n  for(var i=0, il=index.length; i<il; ++i) {\n    index[i] = []\n  }\n  var b = []\n  for(var i=0, n=to_cells.length; i<n; ++i) {\n    var c = to_cells[i]\n    var cl = c.length\n    for(var k=1, kn=(1<<cl); k<kn; ++k) {\n      b.length = bits.popCount(k)\n      var l = 0\n      for(var j=0; j<cl; ++j) {\n        if(k & (1<<j)) {\n          b[l++] = c[j]\n        }\n      }\n      var idx=findCell(from_cells, b)\n      if(idx < 0) {\n        continue\n      }\n      while(true) {\n        index[idx++].push(i)\n        if(idx >= from_cells.length || compareCells(from_cells[idx], b) !== 0) {\n          break\n        }\n      }\n    }\n  }\n  return index\n}\nexports.incidence = incidence\n\n//Computes the dual of the mesh.  This is basically an optimized version of buildIndex for the situation where from_cells is just the list of vertices\nfunction dual(cells, vertex_count) {\n  if(!vertex_count) {\n    return incidence(unique(skeleton(cells, 0)), cells, 0)\n  }\n  var res = new Array(vertex_count)\n  for(var i=0; i<vertex_count; ++i) {\n    res[i] = []\n  }\n  for(var i=0, len=cells.length; i<len; ++i) {\n    var c = cells[i]\n    for(var j=0, cl=c.length; j<cl; ++j) {\n      res[c[j]].push(i)\n    }\n  }\n  return res\n}\nexports.dual = dual\n\n//Enumerates all cells in the complex\nfunction explode(cells) {\n  var result = []\n  for(var i=0, il=cells.length; i<il; ++i) {\n    var c = cells[i]\n      , cl = c.length|0\n    for(var j=1, jl=(1<<cl); j<jl; ++j) {\n      var b = []\n      for(var k=0; k<cl; ++k) {\n        if((j >>> k) & 1) {\n          b.push(c[k])\n        }\n      }\n      result.push(b)\n    }\n  }\n  return normalize(result)\n}\nexports.explode = explode\n\n//Enumerates all of the n-cells of a cell complex\nfunction skeleton(cells, n) {\n  if(n < 0) {\n    return []\n  }\n  var result = []\n    , k0     = (1<<(n+1))-1\n  for(var i=0; i<cells.length; ++i) {\n    var c = cells[i]\n    for(var k=k0; k<(1<<c.length); k=bits.nextCombination(k)) {\n      var b = new Array(n+1)\n        , l = 0\n      for(var j=0; j<c.length; ++j) {\n        if(k & (1<<j)) {\n          b[l++] = c[j]\n        }\n      }\n      result.push(b)\n    }\n  }\n  return normalize(result)\n}\nexports.skeleton = skeleton;\n\n//Computes the boundary of all cells, does not remove duplicates\nfunction boundary(cells) {\n  var res = []\n  for(var i=0,il=cells.length; i<il; ++i) {\n    var c = cells[i]\n    for(var j=0,cl=c.length; j<cl; ++j) {\n      var b = new Array(c.length-1)\n      for(var k=0, l=0; k<cl; ++k) {\n        if(k !== j) {\n          b[l++] = c[k]\n        }\n      }\n      res.push(b)\n    }\n  }\n  return normalize(res)\n}\nexports.boundary = boundary;\n\n//Computes connected components for a dense cell complex\nfunction connectedComponents_dense(cells, vertex_count) {\n  var labels = new UnionFind(vertex_count)\n  for(var i=0; i<cells.length; ++i) {\n    var c = cells[i]\n    for(var j=0; j<c.length; ++j) {\n      for(var k=j+1; k<c.length; ++k) {\n        labels.link(c[j], c[k])\n      }\n    }\n  }\n  var components = []\n    , component_labels = labels.ranks\n  for(var i=0; i<component_labels.length; ++i) {\n    component_labels[i] = -1\n  }\n  for(var i=0; i<cells.length; ++i) {\n    var l = labels.find(cells[i][0])\n    if(component_labels[l] < 0) {\n      component_labels[l] = components.length\n      components.push([cells[i].slice(0)])\n    } else {\n      components[component_labels[l]].push(cells[i].slice(0))\n    }\n  }\n  return components\n}\n\n//Computes connected components for a sparse graph\nfunction connectedComponents_sparse(cells) {\n  var vertices  = unique(normalize(skeleton(cells, 0)))\n    , labels    = new UnionFind(vertices.length)\n  for(var i=0; i<cells.length; ++i) {\n    var c = cells[i]\n    for(var j=0; j<c.length; ++j) {\n      var vj = findCell(vertices, [c[j]])\n      for(var k=j+1; k<c.length; ++k) {\n        labels.link(vj, findCell(vertices, [c[k]]))\n      }\n    }\n  }\n  var components        = []\n    , component_labels  = labels.ranks\n  for(var i=0; i<component_labels.length; ++i) {\n    component_labels[i] = -1\n  }\n  for(var i=0; i<cells.length; ++i) {\n    var l = labels.find(findCell(vertices, [cells[i][0]]));\n    if(component_labels[l] < 0) {\n      component_labels[l] = components.length\n      components.push([cells[i].slice(0)])\n    } else {\n      components[component_labels[l]].push(cells[i].slice(0))\n    }\n  }\n  return components\n}\n\n//Computes connected components for a cell complex\nfunction connectedComponents(cells, vertex_count) {\n  if(vertex_count) {\n    return connectedComponents_dense(cells, vertex_count)\n  }\n  return connectedComponents_sparse(cells)\n}\nexports.connectedComponents = connectedComponents\n","'use strict'\n\nmodule.exports = monotoneConvexHull2D\n\nvar orient = require('robust-orientation')[3]\n\nfunction monotoneConvexHull2D(points) {\n  var n = points.length\n\n  if(n < 3) {\n    var result = new Array(n)\n    for(var i=0; i<n; ++i) {\n      result[i] = i\n    }\n\n    if(n === 2 &&\n       points[0][0] === points[1][0] &&\n       points[0][1] === points[1][1]) {\n      return [0]\n    }\n\n    return result\n  }\n\n  //Sort point indices along x-axis\n  var sorted = new Array(n)\n  for(var i=0; i<n; ++i) {\n    sorted[i] = i\n  }\n  sorted.sort(function(a,b) {\n    var d = points[a][0]-points[b][0]\n    if(d) {\n      return d\n    }\n    return points[a][1] - points[b][1]\n  })\n\n  //Construct upper and lower hulls\n  var lower = [sorted[0], sorted[1]]\n  var upper = [sorted[0], sorted[1]]\n\n  for(var i=2; i<n; ++i) {\n    var idx = sorted[i]\n    var p   = points[idx]\n\n    //Insert into lower list\n    var m = lower.length\n    while(m > 1 && orient(\n        points[lower[m-2]], \n        points[lower[m-1]], \n        p) <= 0) {\n      m -= 1\n      lower.pop()\n    }\n    lower.push(idx)\n\n    //Insert into upper list\n    m = upper.length\n    while(m > 1 && orient(\n        points[upper[m-2]], \n        points[upper[m-1]], \n        p) >= 0) {\n      m -= 1\n      upper.pop()\n    }\n    upper.push(idx)\n  }\n\n  //Merge lists together\n  var result = new Array(upper.length + lower.length - 2)\n  var ptr    = 0\n  for(var i=0, nl=lower.length; i<nl; ++i) {\n    result[ptr++] = lower[i]\n  }\n  for(var j=upper.length-2; j>0; --j) {\n    result[ptr++] = upper[j]\n  }\n\n  //Return result\n  return result\n}","var inside = require('turf-inside');\n\n/**\n * Takes a {@link FeatureCollection} of {@link Point} features and a {@link FeatureCollection} of {@link Polygon} features and calculates the number of points that fall within the set of polygons.\n *\n * @module turf/count\n * @category aggregation\n * @param {FeatureCollection} polygons a FeatureCollection of {@link Polygon} features\n * @param {FeatureCollection} points a FeatureCollection of {@link Point} features\n * @param {String} countField a field to append to the attributes of the Polygon features representing Point counts\n * @return {FeatureCollection} a FeatureCollection of Polygon features with `countField` appended\n * @example\n* var polygons = {\n *   \"type\": \"FeatureCollection\",\n *   \"features\": [\n *     {\n *       \"type\": \"Feature\",\n *       \"properties\": {},\n *       \"geometry\": {\n *         \"type\": \"Polygon\",\n *         \"coordinates\": [[\n *           [-112.072391,46.586591],\n *           [-112.072391,46.61761],\n *           [-112.028102,46.61761],\n *           [-112.028102,46.586591],\n *           [-112.072391,46.586591]\n *         ]]\n *       }\n *     }, {\n *       \"type\": \"Feature\",\n *       \"properties\": {},\n *       \"geometry\": {\n *         \"type\": \"Polygon\",\n *         \"coordinates\": [[\n *           [-112.023983,46.570426],\n *           [-112.023983,46.615016],\n *           [-111.966133,46.615016],\n *           [-111.966133,46.570426],\n *           [-112.023983,46.570426]\n *         ]]\n *       }\n *     }\n *   ]\n * };\n * var points = {\n *   \"type\": \"FeatureCollection\",\n *   \"features\": [\n *     {\n *       \"type\": \"Feature\",\n *       \"properties\": {\n *         \"population\": 200\n *       },\n *       \"geometry\": {\n *         \"type\": \"Point\",\n *         \"coordinates\": [-112.0372, 46.608058]\n *       }\n *     }, {\n *       \"type\": \"Feature\",\n *       \"properties\": {\n *         \"population\": 600\n *       },\n *       \"geometry\": {\n *         \"type\": \"Point\",\n *         \"coordinates\": [-112.045955, 46.596264]\n *       }\n *     }\n *   ]\n * };\n *\n * var counted = turf.count(polygons, points, 'pt_count');\n *\n * var resultFeatures = points.features.concat(counted.features);\n * var result = {\n *   \"type\": \"FeatureCollection\",\n *   \"features\": resultFeatures\n * };\n *\n * //=result\n */\n\nmodule.exports = function(polyFC, ptFC, outField, done){\n  for (var i = 0; i < polyFC.features.length; i++) {\n    var poly = polyFC.features[i];\n    if(!poly.properties) poly.properties = {};\n    var values = 0;\n    for (var j = 0; j < ptFC.features.length; j++) {\n      var pt = ptFC.features[j];\n      if (inside(pt, poly)) {\n        values++;\n      }\n    }\n    poly.properties[outField] = values;\n  }\n\n  return polyFC;\n};\n","//http://en.wikipedia.org/wiki/Haversine_formula\n//http://www.movable-type.co.uk/scripts/latlong.html\nvar point = require('turf-point');\n\n/**\n * Takes a {@link Point} feature and calculates the location of a destination point given a distance in degrees, radians, miles, or kilometers; and bearing in degrees. This uses the [Haversine formula](http://en.wikipedia.org/wiki/Haversine_formula) to account for global curvature.\n *\n * @module turf/destination\n * @category measurement\n * @param {Point} start a Point feature at the starting point\n * @param {Number} distance distance from the starting point\n * @param {Number} bearing ranging from -180 to 180\n * @param {String} units miles, kilometers, degrees, or radians\n * @returns {Point} a Point feature at the destination\n * @example\n * var point = {\n *   \"type\": \"Feature\",\n *   \"properties\": {\n *     \"marker-color\": \"#0f0\"\n *   },\n *   \"geometry\": {\n *     \"type\": \"Point\",\n *     \"coordinates\": [-75.343, 39.984]\n *   }\n * };\n * var distance = 50;\n * var bearing = 90;\n * var units = 'miles';\n *\n * var destination = turf.destination(point, distance, bearing, units);\n * destination.properties['marker-color'] = '#f00';\n *\n * var result = {\n *   \"type\": \"FeatureCollection\",\n *   \"features\": [point, destination]\n * };\n *\n * //=result\n */\nmodule.exports = function (point1, distance, bearing, units) {\n    var coordinates1 = point1.geometry.coordinates;\n    var longitude1 = toRad(coordinates1[0]);\n    var latitude1 = toRad(coordinates1[1]);\n    var bearing_rad = toRad(bearing);\n\n    var R = 0;\n    switch (units) {\n    case 'miles':\n        R = 3960;\n        break\n    case 'kilometers':\n        R = 6373;\n        break\n    case 'degrees':\n        R = 57.2957795;\n        break\n    case 'radians':\n        R = 1;\n        break\n    }\n\n    var latitude2 = Math.asin(Math.sin(latitude1) * Math.cos(distance / R) +\n        Math.cos(latitude1) * Math.sin(distance / R) * Math.cos(bearing_rad));\n    var longitude2 = longitude1 + Math.atan2(Math.sin(bearing_rad) * Math.sin(distance / R) * Math.cos(latitude1),\n        Math.cos(distance / R) - Math.sin(latitude1) * Math.sin(latitude2));\n\n    return point([toDeg(longitude2), toDeg(latitude2)]);\n};\n\nfunction toRad(degree) {\n    return degree * Math.PI / 180;\n}\n\nfunction toDeg(rad) {\n    return rad * 180 / Math.PI;\n}\n","var ss = require('simple-statistics');\nvar inside = require('turf-inside');\n\n/**\n * Calculates the standard deviation value of a field for points within a set of polygons.\n *\n * @module turf/deviation\n * @category aggregation\n * @param {FeatureCollection} polygons a FeatureCollection of {@link Polygon} features\n * @param {FeatureCollection} points a FeatureCollection of {@link Point} features\n * @param {String} inField the field in `points` from which to aggregate\n * @param {String} outField the field to append to `polygons` representing deviation\n * @return {FeatureCollection} a FeatureCollection of Polygon features with appended field representing deviation\n * @example\n * var polygons = {\n *   \"type\": \"FeatureCollection\",\n *   \"features\": [\n *     {\n *       \"type\": \"Feature\",\n *       \"properties\": {},\n *       \"geometry\": {\n *         \"type\": \"Polygon\",\n *         \"coordinates\": [[\n *           [-97.807159, 30.270335],\n *           [-97.807159, 30.369913],\n *           [-97.612838, 30.369913],\n *           [-97.612838, 30.270335],\n *           [-97.807159, 30.270335]\n *         ]]\n *       }\n *     }, {\n *       \"type\": \"Feature\",\n *       \"properties\": {},\n *       \"geometry\": {\n *         \"type\": \"Polygon\",\n *         \"coordinates\": [[\n *           [-97.825698, 30.175405],\n *           [-97.825698, 30.264404],\n *           [-97.630691, 30.264404],\n *           [-97.630691, 30.175405],\n *           [-97.825698, 30.175405]\n *         ]]\n *       }\n *     }\n *   ]\n * };\n * var points = {\n *   \"type\": \"FeatureCollection\",\n *   \"features\": [\n *     {\n *       \"type\": \"Feature\",\n *       \"properties\": {\n *         \"population\": 500\n *       },\n *       \"geometry\": {\n *         \"type\": \"Point\",\n *         \"coordinates\": [-97.709655, 30.311245]\n *       }\n *     }, {\n *       \"type\": \"Feature\",\n *       \"properties\": {\n *         \"population\": 400\n *       },\n *       \"geometry\": {\n *         \"type\": \"Point\",\n *         \"coordinates\": [-97.766647, 30.345028]\n *       }\n *     }, {\n *       \"type\": \"Feature\",\n *       \"properties\": {\n *         \"population\": 600\n *       },\n *       \"geometry\": {\n *         \"type\": \"Point\",\n *         \"coordinates\": [-97.765274, 30.294646]\n *       }\n *     }, {\n *       \"type\": \"Feature\",\n *       \"properties\": {\n *         \"population\": 500\n *       },\n *       \"geometry\": {\n *         \"type\": \"Point\",\n *         \"coordinates\": [-97.753601, 30.216355]\n *       }\n *     }, {\n *       \"type\": \"Feature\",\n *       \"properties\": {\n *         \"population\": 200\n *       },\n *       \"geometry\": {\n *         \"type\": \"Point\",\n *         \"coordinates\": [-97.667083, 30.208047]\n *       }\n *     }\n *   ]\n * };\n *\n * var inField = \"population\";\n * var outField = \"pop_deviation\";\n *\n * var deviated = turf.deviation(\n *   polygons, points, inField, outField);\n *\n * var resultFeatures = points.features.concat(\n *   deviated.features);\n * var result = {\n *   \"type\": \"FeatureCollection\",\n *   \"features\": resultFeatures\n * };\n *\n * //=result\n */\n\nmodule.exports = function(polyFC, ptFC, inField, outField, done){\n  polyFC.features.forEach(function(poly){\n    if(!poly.properties){\n      poly.properties = {};\n    }\n    var values = [];\n    ptFC.features.forEach(function(pt){\n      if (inside(pt, poly)) {\n        values.push(pt.properties[inField]);\n      }\n    });\n    poly.properties[outField] = ss.standard_deviation(values);\n  })\n\n  return polyFC;\n}\n","/* global module */\n// # simple-statistics\n//\n// A simple, literate statistics system. The code below uses the\n// [Javascript module pattern](http://www.adequatelygood.com/2010/3/JavaScript-Module-Pattern-In-Depth),\n// eventually assigning `simple-statistics` to `ss` in browsers or the\n// `exports` object for node.js\n(function() {\n    var ss = {};\n\n    if (typeof module !== 'undefined') {\n        // Assign the `ss` object to exports, so that you can require\n        // it in [node.js](http://nodejs.org/)\n        module.exports = ss;\n    } else {\n        // Otherwise, in a browser, we assign `ss` to the window object,\n        // so you can simply refer to it as `ss`.\n        this.ss = ss;\n    }\n\n    // # [Linear Regression](http://en.wikipedia.org/wiki/Linear_regression)\n    //\n    // [Simple linear regression](http://en.wikipedia.org/wiki/Simple_linear_regression)\n    // is a simple way to find a fitted line\n    // between a set of coordinates.\n    function linear_regression() {\n        var linreg = {},\n            data = [];\n\n        // Assign data to the model. Data is assumed to be an array.\n        linreg.data = function(x) {\n            if (!arguments.length) return data;\n            data = x.slice();\n            return linreg;\n        };\n\n        // Calculate the slope and y-intercept of the regression line\n        // by calculating the least sum of squares\n        linreg.mb = function() {\n            var m, b;\n\n            // Store data length in a local variable to reduce\n            // repeated object property lookups\n            var data_length = data.length;\n\n            //if there's only one point, arbitrarily choose a slope of 0\n            //and a y-intercept of whatever the y of the initial point is\n            if (data_length === 1) {\n                m = 0;\n                b = data[0][1];\n            } else {\n                // Initialize our sums and scope the `m` and `b`\n                // variables that define the line.\n                var sum_x = 0, sum_y = 0,\n                    sum_xx = 0, sum_xy = 0;\n\n                // Use local variables to grab point values\n                // with minimal object property lookups\n                var point, x, y;\n\n                // Gather the sum of all x values, the sum of all\n                // y values, and the sum of x^2 and (x*y) for each\n                // value.\n                //\n                // In math notation, these would be SS_x, SS_y, SS_xx, and SS_xy\n                for (var i = 0; i < data_length; i++) {\n                    point = data[i];\n                    x = point[0];\n                    y = point[1];\n\n                    sum_x += x;\n                    sum_y += y;\n\n                    sum_xx += x * x;\n                    sum_xy += x * y;\n                }\n\n                // `m` is the slope of the regression line\n                m = ((data_length * sum_xy) - (sum_x * sum_y)) /\n                    ((data_length * sum_xx) - (sum_x * sum_x));\n\n                // `b` is the y-intercept of the line.\n                b = (sum_y / data_length) - ((m * sum_x) / data_length);\n            }\n\n            // Return both values as an object.\n            return { m: m, b: b };\n        };\n\n        // a shortcut for simply getting the slope of the regression line\n        linreg.m = function() {\n            return linreg.mb().m;\n        };\n\n        // a shortcut for simply getting the y-intercept of the regression\n        // line.\n        linreg.b = function() {\n            return linreg.mb().b;\n        };\n\n        // ## Fitting The Regression Line\n        //\n        // This is called after `.data()` and returns the\n        // equation `y = f(x)` which gives the position\n        // of the regression line at each point in `x`.\n        linreg.line = function() {\n\n            // Get the slope, `m`, and y-intercept, `b`, of the line.\n            var mb = linreg.mb(),\n                m = mb.m,\n                b = mb.b;\n\n            // Return a function that computes a `y` value for each\n            // x value it is given, based on the values of `b` and `a`\n            // that we just computed.\n            return function(x) {\n                return b + (m * x);\n            };\n        };\n\n        return linreg;\n    }\n\n    // # [R Squared](http://en.wikipedia.org/wiki/Coefficient_of_determination)\n    //\n    // The r-squared value of data compared with a function `f`\n    // is the sum of the squared differences between the prediction\n    // and the actual value.\n    function r_squared(data, f) {\n        if (data.length < 2) return 1;\n\n        // Compute the average y value for the actual\n        // data set in order to compute the\n        // _total sum of squares_\n        var sum = 0, average;\n        for (var i = 0; i < data.length; i++) {\n            sum += data[i][1];\n        }\n        average = sum / data.length;\n\n        // Compute the total sum of squares - the\n        // squared difference between each point\n        // and the average of all points.\n        var sum_of_squares = 0;\n        for (var j = 0; j < data.length; j++) {\n            sum_of_squares += Math.pow(average - data[j][1], 2);\n        }\n\n        // Finally estimate the error: the squared\n        // difference between the estimate and the actual data\n        // value at each point.\n        var err = 0;\n        for (var k = 0; k < data.length; k++) {\n            err += Math.pow(data[k][1] - f(data[k][0]), 2);\n        }\n\n        // As the error grows larger, its ratio to the\n        // sum of squares increases and the r squared\n        // value grows lower.\n        return 1 - (err / sum_of_squares);\n    }\n\n\n    // # [Bayesian Classifier](http://en.wikipedia.org/wiki/Naive_Bayes_classifier)\n    //\n    // This is a naïve bayesian classifier that takes\n    // singly-nested objects.\n    function bayesian() {\n        // The `bayes_model` object is what will be exposed\n        // by this closure, with all of its extended methods, and will\n        // have access to all scope variables, like `total_count`.\n        var bayes_model = {},\n            // The number of items that are currently\n            // classified in the model\n            total_count = 0,\n            // Every item classified in the model\n            data = {};\n\n        // ## Train\n        // Train the classifier with a new item, which has a single\n        // dimension of Javascript literal keys and values.\n        bayes_model.train = function(item, category) {\n            // If the data object doesn't have any values\n            // for this category, create a new object for it.\n            if (!data[category]) data[category] = {};\n\n            // Iterate through each key in the item.\n            for (var k in item) {\n                var v = item[k];\n                // Initialize the nested object `data[category][k][item[k]]`\n                // with an object of keys that equal 0.\n                if (data[category][k] === undefined) data[category][k] = {};\n                if (data[category][k][v] === undefined) data[category][k][v] = 0;\n\n                // And increment the key for this key/value combination.\n                data[category][k][item[k]]++;\n            }\n            // Increment the number of items classified\n            total_count++;\n        };\n\n        // ## Score\n        // Generate a score of how well this item matches all\n        // possible categories based on its attributes\n        bayes_model.score = function(item) {\n            // Initialize an empty array of odds per category.\n            var odds = {}, category;\n            // Iterate through each key in the item,\n            // then iterate through each category that has been used\n            // in previous calls to `.train()`\n            for (var k in item) {\n                var v = item[k];\n                for (category in data) {\n                    // Create an empty object for storing key - value combinations\n                    // for this category.\n                    if (odds[category] === undefined) odds[category] = {};\n\n                    // If this item doesn't even have a property, it counts for nothing,\n                    // but if it does have the property that we're looking for from\n                    // the item to categorize, it counts based on how popular it is\n                    // versus the whole population.\n                    if (data[category][k]) {\n                        odds[category][k + '_' + v] = (data[category][k][v] || 0) / total_count;\n                    } else {\n                        odds[category][k + '_' + v] = 0;\n                    }\n                }\n            }\n\n            // Set up a new object that will contain sums of these odds by category\n            var odds_sums = {};\n\n            for (category in odds) {\n                // Tally all of the odds for each category-combination pair -\n                // the non-existence of a category does not add anything to the\n                // score.\n                for (var combination in odds[category]) {\n                    if (odds_sums[category] === undefined) odds_sums[category] = 0;\n                    odds_sums[category] += odds[category][combination];\n                }\n            }\n\n            return odds_sums;\n        };\n\n        // Return the completed model.\n        return bayes_model;\n    }\n\n    // # sum\n    //\n    // is simply the result of adding all numbers\n    // together, starting from zero.\n    //\n    // This runs on `O(n)`, linear time in respect to the array\n    function sum(x) {\n        var value = 0;\n        for (var i = 0; i < x.length; i++) {\n            value += x[i];\n        }\n        return value;\n    }\n\n    // # mean\n    //\n    // is the sum over the number of values\n    //\n    // This runs on `O(n)`, linear time in respect to the array\n    function mean(x) {\n        // The mean of no numbers is null\n        if (x.length === 0) return null;\n\n        return sum(x) / x.length;\n    }\n\n    // # geometric mean\n    //\n    // a mean function that is more useful for numbers in different\n    // ranges.\n    //\n    // this is the nth root of the input numbers multiplied by each other\n    //\n    // This runs on `O(n)`, linear time in respect to the array\n    function geometric_mean(x) {\n        // The mean of no numbers is null\n        if (x.length === 0) return null;\n\n        // the starting value.\n        var value = 1;\n\n        for (var i = 0; i < x.length; i++) {\n            // the geometric mean is only valid for positive numbers\n            if (x[i] <= 0) return null;\n\n            // repeatedly multiply the value by each number\n            value *= x[i];\n        }\n\n        return Math.pow(value, 1 / x.length);\n    }\n\n\n    // # harmonic mean\n    //\n    // a mean function typically used to find the average of rates\n    //\n    // this is the reciprocal of the arithmetic mean of the reciprocals\n    // of the input numbers\n    //\n    // This runs on `O(n)`, linear time in respect to the array\n    function harmonic_mean(x) {\n        // The mean of no numbers is null\n        if (x.length === 0) return null;\n\n        var reciprocal_sum = 0;\n\n        for (var i = 0; i < x.length; i++) {\n            // the harmonic mean is only valid for positive numbers\n            if (x[i] <= 0) return null;\n\n            reciprocal_sum += 1 / x[i];\n        }\n\n        // divide n by the the reciprocal sum\n        return x.length / reciprocal_sum;\n    }\n\n    // root mean square (RMS)\n    //\n    // a mean function used as a measure of the magnitude of a set\n    // of numbers, regardless of their sign\n    //\n    // this is the square root of the mean of the squares of the \n    // input numbers\n    //\n    // This runs on `O(n)`, linear time in respect to the array\n    function root_mean_square(x) {\n        if (x.length === 0) return null;\n\n        var sum_of_squares = 0;\n        for (var i = 0; i < x.length; i++) {\n            sum_of_squares += Math.pow(x[i], 2);\n        }\n\n        return Math.sqrt(sum_of_squares / x.length);\n    }\n\n    // # min\n    //\n    // This is simply the minimum number in the set.\n    //\n    // This runs on `O(n)`, linear time in respect to the array\n    function min(x) {\n        var value;\n        for (var i = 0; i < x.length; i++) {\n            // On the first iteration of this loop, min is\n            // undefined and is thus made the minimum element in the array\n            if (x[i] < value || value === undefined) value = x[i];\n        }\n        return value;\n    }\n\n    // # max\n    //\n    // This is simply the maximum number in the set.\n    //\n    // This runs on `O(n)`, linear time in respect to the array\n    function max(x) {\n        var value;\n        for (var i = 0; i < x.length; i++) {\n            // On the first iteration of this loop, max is\n            // undefined and is thus made the maximum element in the array\n            if (x[i] > value || value === undefined) value = x[i];\n        }\n        return value;\n    }\n\n    // # [variance](http://en.wikipedia.org/wiki/Variance)\n    //\n    // is the sum of squared deviations from the mean\n    //\n    // depends on `mean()`\n    function variance(x) {\n        // The variance of no numbers is null\n        if (x.length === 0) return null;\n\n        var mean_value = mean(x),\n            deviations = [];\n\n        // Make a list of squared deviations from the mean.\n        for (var i = 0; i < x.length; i++) {\n            deviations.push(Math.pow(x[i] - mean_value, 2));\n        }\n\n        // Find the mean value of that list\n        return mean(deviations);\n    }\n\n    // # [standard deviation](http://en.wikipedia.org/wiki/Standard_deviation)\n    //\n    // is just the square root of the variance.\n    //\n    // depends on `variance()`\n    function standard_deviation(x) {\n        // The standard deviation of no numbers is null\n        if (x.length === 0) return null;\n\n        return Math.sqrt(variance(x));\n    }\n\n    // The sum of deviations to the Nth power.\n    // When n=2 it's the sum of squared deviations.\n    // When n=3 it's the sum of cubed deviations.\n    //\n    // depends on `mean()`\n    function sum_nth_power_deviations(x, n) {\n        var mean_value = mean(x),\n            sum = 0;\n\n        for (var i = 0; i < x.length; i++) {\n            sum += Math.pow(x[i] - mean_value, n);\n        }\n\n        return sum;\n    }\n\n    // # [variance](http://en.wikipedia.org/wiki/Variance)\n    //\n    // is the sum of squared deviations from the mean\n    //\n    // depends on `sum_nth_power_deviations`\n    function sample_variance(x) {\n        // The variance of no numbers is null\n        if (x.length <= 1) return null;\n\n        var sum_squared_deviations_value = sum_nth_power_deviations(x, 2);\n\n        // Find the mean value of that list\n        return sum_squared_deviations_value / (x.length - 1);\n    }\n\n    // # [standard deviation](http://en.wikipedia.org/wiki/Standard_deviation)\n    //\n    // is just the square root of the variance.\n    //\n    // depends on `sample_variance()`\n    function sample_standard_deviation(x) {\n        // The standard deviation of no numbers is null\n        if (x.length <= 1) return null;\n\n        return Math.sqrt(sample_variance(x));\n    }\n\n    // # [covariance](http://en.wikipedia.org/wiki/Covariance)\n    //\n    // sample covariance of two datasets:\n    // how much do the two datasets move together?\n    // x and y are two datasets, represented as arrays of numbers.\n    //\n    // depends on `mean()`\n    function sample_covariance(x, y) {\n\n        // The two datasets must have the same length which must be more than 1\n        if (x.length <= 1 || x.length != y.length){\n            return null;\n        }\n\n        // determine the mean of each dataset so that we can judge each\n        // value of the dataset fairly as the difference from the mean. this\n        // way, if one dataset is [1, 2, 3] and [2, 3, 4], their covariance\n        // does not suffer because of the difference in absolute values\n        var xmean = mean(x),\n            ymean = mean(y),\n            sum = 0;\n\n        // for each pair of values, the covariance increases when their\n        // difference from the mean is associated - if both are well above\n        // or if both are well below\n        // the mean, the covariance increases significantly.\n        for (var i = 0; i < x.length; i++){\n            sum += (x[i] - xmean) * (y[i] - ymean);\n        }\n\n        // the covariance is weighted by the length of the datasets.\n        return sum / (x.length - 1);\n    }\n\n    // # [correlation](http://en.wikipedia.org/wiki/Correlation_and_dependence)\n    //\n    // Gets a measure of how correlated two datasets are, between -1 and 1\n    //\n    // depends on `sample_standard_deviation()` and `sample_covariance()`\n    function sample_correlation(x, y) {\n        var cov = sample_covariance(x, y),\n            xstd = sample_standard_deviation(x),\n            ystd = sample_standard_deviation(y);\n\n        if (cov === null || xstd === null || ystd === null) {\n            return null;\n        }\n\n        return cov / xstd / ystd;\n    }\n\n    // # [median](http://en.wikipedia.org/wiki/Median)\n    //\n    // The middle number of a list. This is often a good indicator of 'the middle'\n    // when there are outliers that skew the `mean()` value.\n    function median(x) {\n        // The median of an empty list is null\n        if (x.length === 0) return null;\n\n        // Sorting the array makes it easy to find the center, but\n        // use `.slice()` to ensure the original array `x` is not modified\n        var sorted = x.slice().sort(function (a, b) { return a - b; });\n\n        // If the length of the list is odd, it's the central number\n        if (sorted.length % 2 === 1) {\n            return sorted[(sorted.length - 1) / 2];\n        // Otherwise, the median is the average of the two numbers\n        // at the center of the list\n        } else {\n            var a = sorted[(sorted.length / 2) - 1];\n            var b = sorted[(sorted.length / 2)];\n            return (a + b) / 2;\n        }\n    }\n\n    // # [mode](http://bit.ly/W5K4Yt)\n    //\n    // The mode is the number that appears in a list the highest number of times.\n    // There can be multiple modes in a list: in the event of a tie, this\n    // algorithm will return the most recently seen mode.\n    //\n    // This implementation is inspired by [science.js](https://github.com/jasondavies/science.js/blob/master/src/stats/mode.js)\n    //\n    // This runs on `O(n)`, linear time in respect to the array\n    function mode(x) {\n\n        // Handle edge cases:\n        // The median of an empty list is null\n        if (x.length === 0) return null;\n        else if (x.length === 1) return x[0];\n\n        // Sorting the array lets us iterate through it below and be sure\n        // that every time we see a new number it's new and we'll never\n        // see the same number twice\n        var sorted = x.slice().sort(function (a, b) { return a - b; });\n\n        // This assumes it is dealing with an array of size > 1, since size\n        // 0 and 1 are handled immediately. Hence it starts at index 1 in the\n        // array.\n        var last = sorted[0],\n            // store the mode as we find new modes\n            value,\n            // store how many times we've seen the mode\n            max_seen = 0,\n            // how many times the current candidate for the mode\n            // has been seen\n            seen_this = 1;\n\n        // end at sorted.length + 1 to fix the case in which the mode is\n        // the highest number that occurs in the sequence. the last iteration\n        // compares sorted[i], which is undefined, to the highest number\n        // in the series\n        for (var i = 1; i < sorted.length + 1; i++) {\n            // we're seeing a new number pass by\n            if (sorted[i] !== last) {\n                // the last number is the new mode since we saw it more\n                // often than the old one\n                if (seen_this > max_seen) {\n                    max_seen = seen_this;\n                    value = last;\n                }\n                seen_this = 1;\n                last = sorted[i];\n            // if this isn't a new number, it's one more occurrence of\n            // the potential mode\n            } else { seen_this++; }\n        }\n        return value;\n    }\n\n    // # [t-test](http://en.wikipedia.org/wiki/Student's_t-test)\n    //\n    // This is to compute a one-sample t-test, comparing the mean\n    // of a sample to a known value, x.\n    //\n    // in this case, we're trying to determine whether the\n    // population mean is equal to the value that we know, which is `x`\n    // here. usually the results here are used to look up a\n    // [p-value](http://en.wikipedia.org/wiki/P-value), which, for\n    // a certain level of significance, will let you determine that the\n    // null hypothesis can or cannot be rejected.\n    //\n    // Depends on `standard_deviation()` and `mean()`\n    function t_test(sample, x) {\n        // The mean of the sample\n        var sample_mean = mean(sample);\n\n        // The standard deviation of the sample\n        var sd = standard_deviation(sample);\n\n        // Square root the length of the sample\n        var rootN = Math.sqrt(sample.length);\n\n        // Compute the known value against the sample,\n        // returning the t value\n        return (sample_mean - x) / (sd / rootN);\n    }\n\n    // # [2-sample t-test](http://en.wikipedia.org/wiki/Student's_t-test)\n    //\n    // This is to compute two sample t-test.\n    // Tests whether \"mean(X)-mean(Y) = difference\", (\n    // in the most common case, we often have `difference == 0` to test if two samples\n    // are likely to be taken from populations with the same mean value) with\n    // no prior knowledge on standard deviations of both samples\n    // other than the fact that they have the same standard deviation.\n    //\n    // Usually the results here are used to look up a\n    // [p-value](http://en.wikipedia.org/wiki/P-value), which, for\n    // a certain level of significance, will let you determine that the\n    // null hypothesis can or cannot be rejected.\n    //\n    // `diff` can be omitted if it equals 0.\n    //\n    // [This is used to confirm or deny](http://www.monarchlab.org/Lab/Research/Stats/2SampleT.aspx)\n    // a null hypothesis that the two populations that have been sampled into\n    // `sample_x` and `sample_y` are equal to each other.\n    //\n    // Depends on `sample_variance()` and `mean()`\n    function t_test_two_sample(sample_x, sample_y, difference) {\n        var n = sample_x.length,\n            m = sample_y.length;\n\n        // If either sample doesn't actually have any values, we can't\n        // compute this at all, so we return `null`.\n        if (!n || !m) return null ;\n\n        // default difference (mu) is zero\n        if (!difference) difference = 0;\n\n        var meanX = mean(sample_x),\n            meanY = mean(sample_y);\n\n        var weightedVariance = ((n - 1) * sample_variance(sample_x) +\n            (m - 1) * sample_variance(sample_y)) / (n + m - 2);\n\n        return (meanX - meanY - difference) /\n            Math.sqrt(weightedVariance * (1 / n + 1 / m));\n    }\n\n    // # chunk\n    //\n    // Split an array into chunks of a specified size. This function\n    // has the same behavior as [PHP's array_chunk](http://php.net/manual/en/function.array-chunk.php)\n    // function, and thus will insert smaller-sized chunks at the end if\n    // the input size is not divisible by the chunk size.\n    //\n    // `sample` is expected to be an array, and `chunkSize` a number.\n    // The `sample` array can contain any kind of data.\n    function chunk(sample, chunkSize) {\n\n        // a list of result chunks, as arrays in an array\n        var output = [];\n\n        // `chunkSize` must be zero or higher - otherwise the loop below,\n        // in which we call `start += chunkSize`, will loop infinitely.\n        // So, we'll detect and return null in that case to indicate\n        // invalid input.\n        if (chunkSize <= 0) {\n            return null;\n        }\n\n        // `start` is the index at which `.slice` will start selecting\n        // new array elements\n        for (var start = 0; start < sample.length; start += chunkSize) {\n\n            // for each chunk, slice that part of the array and add it\n            // to the output. The `.slice` function does not change\n            // the original array.\n            output.push(sample.slice(start, start + chunkSize));\n        }\n        return output;\n    }\n\n    // # shuffle_in_place\n    //\n    // A [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle)\n    // in-place - which means that it will change the order of the original\n    // array by reference.\n    function shuffle_in_place(sample, randomSource) {\n\n        // a custom random number source can be provided if you want to use\n        // a fixed seed or another random number generator, like\n        // [random-js](https://www.npmjs.org/package/random-js)\n        randomSource = randomSource || Math.random;\n\n        // store the current length of the sample to determine\n        // when no elements remain to shuffle.\n        var length = sample.length;\n\n        // temporary is used to hold an item when it is being\n        // swapped between indices.\n        var temporary;\n\n        // The index to swap at each stage.\n        var index;\n\n        // While there are still items to shuffle\n        while (length > 0) {\n            // chose a random index within the subset of the array\n            // that is not yet shuffled\n            index = Math.floor(randomSource() * length--);\n\n            // store the value that we'll move temporarily\n            temporary = sample[length];\n\n            // swap the value at `sample[length]` with `sample[index]`\n            sample[length] = sample[index];\n            sample[index] = temporary;\n        }\n\n        return sample;\n    }\n\n    // # shuffle\n    //\n    // A [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle)\n    // is a fast way to create a random permutation of a finite set.\n    function shuffle(sample, randomSource) {\n        // slice the original array so that it is not modified\n        sample = sample.slice();\n\n        // and then shuffle that shallow-copied array, in place\n        return shuffle_in_place(sample.slice(), randomSource);\n    }\n\n    // # sample\n    //\n    // Create a [simple random sample](http://en.wikipedia.org/wiki/Simple_random_sample)\n    // from a given array of `n` elements.\n    function sample(array, n, randomSource) {\n        // shuffle the original array using a fisher-yates shuffle\n        var shuffled = shuffle(array, randomSource);\n\n        // and then return a subset of it - the first `n` elements.\n        return shuffled.slice(0, n);\n    }\n\n    // # quantile\n    //\n    // This is a population quantile, since we assume to know the entire\n    // dataset in this library. Thus I'm trying to follow the\n    // [Quantiles of a Population](http://en.wikipedia.org/wiki/Quantile#Quantiles_of_a_population)\n    // algorithm from wikipedia.\n    //\n    // Sample is a one-dimensional array of numbers,\n    // and p is either a decimal number from 0 to 1 or an array of decimal\n    // numbers from 0 to 1.\n    // In terms of a k/q quantile, p = k/q - it's just dealing with fractions or dealing\n    // with decimal values.\n    // When p is an array, the result of the function is also an array containing the appropriate\n    // quantiles in input order\n    function quantile(sample, p) {\n\n        // We can't derive quantiles from an empty list\n        if (sample.length === 0) return null;\n\n        // Sort a copy of the array. We'll need a sorted array to index\n        // the values in sorted order.\n        var sorted = sample.slice().sort(function (a, b) { return a - b; });\n\n        if (p.length) {\n            // Initialize the result array\n            var results = [];\n            // For each requested quantile\n            for (var i = 0; i < p.length; i++) {\n                results[i] = quantile_sorted(sorted, p[i]);\n            }\n            return results;\n        } else {\n            return quantile_sorted(sorted, p);\n        }\n    }\n\n    // # quantile\n    //\n    // This is the internal implementation of quantiles: when you know\n    // that the order is sorted, you don't need to re-sort it, and the computations\n    // are much faster.\n    function quantile_sorted(sample, p) {\n        var idx = (sample.length) * p;\n        if (p < 0 || p > 1) {\n            return null;\n        } else if (p === 1) {\n            // If p is 1, directly return the last element\n            return sample[sample.length - 1];\n        } else if (p === 0) {\n            // If p is 0, directly return the first element\n            return sample[0];\n        } else if (idx % 1 !== 0) {\n            // If p is not integer, return the next element in array\n            return sample[Math.ceil(idx) - 1];\n        } else if (sample.length % 2 === 0) {\n            // If the list has even-length, we'll take the average of this number\n            // and the next value, if there is one\n            return (sample[idx - 1] + sample[idx]) / 2;\n        } else {\n            // Finally, in the simple case of an integer value\n            // with an odd-length list, return the sample value at the index.\n            return sample[idx];\n        }\n    }\n\n    // # [Interquartile range](http://en.wikipedia.org/wiki/Interquartile_range)\n    //\n    // A measure of statistical dispersion, or how scattered, spread, or\n    // concentrated a distribution is. It's computed as the difference between\n    // the third quartile and first quartile.\n    function iqr(sample) {\n        // We can't derive quantiles from an empty list\n        if (sample.length === 0) return null;\n\n        // Interquartile range is the span between the upper quartile,\n        // at `0.75`, and lower quartile, `0.25`\n        return quantile(sample, 0.75) - quantile(sample, 0.25);\n    }\n\n    // # [Median Absolute Deviation](http://en.wikipedia.org/wiki/Median_absolute_deviation)\n    //\n    // The Median Absolute Deviation (MAD) is a robust measure of statistical\n    // dispersion. It is more resilient to outliers than the standard deviation.\n    function mad(x) {\n        // The mad of nothing is null\n        if (!x || x.length === 0) return null;\n\n        var median_value = median(x),\n            median_absolute_deviations = [];\n\n        // Make a list of absolute deviations from the median\n        for (var i = 0; i < x.length; i++) {\n            median_absolute_deviations.push(Math.abs(x[i] - median_value));\n        }\n\n        // Find the median value of that list\n        return median(median_absolute_deviations);\n    }\n\n    // ## Compute Matrices for Jenks\n    //\n    // Compute the matrices required for Jenks breaks. These matrices\n    // can be used for any classing of data with `classes <= n_classes`\n    function jenksMatrices(data, n_classes) {\n\n        // in the original implementation, these matrices are referred to\n        // as `LC` and `OP`\n        //\n        // * lower_class_limits (LC): optimal lower class limits\n        // * variance_combinations (OP): optimal variance combinations for all classes\n        var lower_class_limits = [],\n            variance_combinations = [],\n            // loop counters\n            i, j,\n            // the variance, as computed at each step in the calculation\n            variance = 0;\n\n        // Initialize and fill each matrix with zeroes\n        for (i = 0; i < data.length + 1; i++) {\n            var tmp1 = [], tmp2 = [];\n            // despite these arrays having the same values, we need\n            // to keep them separate so that changing one does not change\n            // the other\n            for (j = 0; j < n_classes + 1; j++) {\n                tmp1.push(0);\n                tmp2.push(0);\n            }\n            lower_class_limits.push(tmp1);\n            variance_combinations.push(tmp2);\n        }\n\n        for (i = 1; i < n_classes + 1; i++) {\n            lower_class_limits[1][i] = 1;\n            variance_combinations[1][i] = 0;\n            // in the original implementation, 9999999 is used but\n            // since Javascript has `Infinity`, we use that.\n            for (j = 2; j < data.length + 1; j++) {\n                variance_combinations[j][i] = Infinity;\n            }\n        }\n\n        for (var l = 2; l < data.length + 1; l++) {\n\n            // `SZ` originally. this is the sum of the values seen thus\n            // far when calculating variance.\n            var sum = 0,\n                // `ZSQ` originally. the sum of squares of values seen\n                // thus far\n                sum_squares = 0,\n                // `WT` originally. This is the number of\n                w = 0,\n                // `IV` originally\n                i4 = 0;\n\n            // in several instances, you could say `Math.pow(x, 2)`\n            // instead of `x * x`, but this is slower in some browsers\n            // introduces an unnecessary concept.\n            for (var m = 1; m < l + 1; m++) {\n\n                // `III` originally\n                var lower_class_limit = l - m + 1,\n                    val = data[lower_class_limit - 1];\n\n                // here we're estimating variance for each potential classing\n                // of the data, for each potential number of classes. `w`\n                // is the number of data points considered so far.\n                w++;\n\n                // increase the current sum and sum-of-squares\n                sum += val;\n                sum_squares += val * val;\n\n                // the variance at this point in the sequence is the difference\n                // between the sum of squares and the total x 2, over the number\n                // of samples.\n                variance = sum_squares - (sum * sum) / w;\n\n                i4 = lower_class_limit - 1;\n\n                if (i4 !== 0) {\n                    for (j = 2; j < n_classes + 1; j++) {\n                        // if adding this element to an existing class\n                        // will increase its variance beyond the limit, break\n                        // the class at this point, setting the `lower_class_limit`\n                        // at this point.\n                        if (variance_combinations[l][j] >=\n                            (variance + variance_combinations[i4][j - 1])) {\n                            lower_class_limits[l][j] = lower_class_limit;\n                            variance_combinations[l][j] = variance +\n                                variance_combinations[i4][j - 1];\n                        }\n                    }\n                }\n            }\n\n            lower_class_limits[l][1] = 1;\n            variance_combinations[l][1] = variance;\n        }\n\n        // return the two matrices. for just providing breaks, only\n        // `lower_class_limits` is needed, but variances can be useful to\n        // evaluate goodness of fit.\n        return {\n            lower_class_limits: lower_class_limits,\n            variance_combinations: variance_combinations\n        };\n    }\n\n    // ## Pull Breaks Values for Jenks\n    //\n    // the second part of the jenks recipe: take the calculated matrices\n    // and derive an array of n breaks.\n    function jenksBreaks(data, lower_class_limits, n_classes) {\n\n        var k = data.length,\n            kclass = [],\n            countNum = n_classes;\n\n        // the calculation of classes will never include the upper\n        // bound, so we need to explicitly set it\n        kclass[n_classes] = data[data.length - 1];\n\n        // the lower_class_limits matrix is used as indices into itself\n        // here: the `k` variable is reused in each iteration.\n        while (countNum > 0) {\n            kclass[countNum - 1] = data[lower_class_limits[k][countNum] - 1];\n            k = lower_class_limits[k][countNum] - 1;\n            countNum--;\n        }\n\n        return kclass;\n    }\n\n    // # [Jenks natural breaks optimization](http://en.wikipedia.org/wiki/Jenks_natural_breaks_optimization)\n    //\n    // Implementations: [1](http://danieljlewis.org/files/2010/06/Jenks.pdf) (python),\n    // [2](https://github.com/vvoovv/djeo-jenks/blob/master/main.js) (buggy),\n    // [3](https://github.com/simogeo/geostats/blob/master/lib/geostats.js#L407) (works)\n    //\n    // Depends on `jenksBreaks()` and `jenksMatrices()`\n    function jenks(data, n_classes) {\n\n        if (n_classes > data.length) return null;\n\n        // sort data in numerical order, since this is expected\n        // by the matrices function\n        data = data.slice().sort(function (a, b) { return a - b; });\n\n        // get our basic matrices\n        var matrices = jenksMatrices(data, n_classes),\n            // we only need lower class limits here\n            lower_class_limits = matrices.lower_class_limits;\n\n        // extract n_classes out of the computed matrices\n        return jenksBreaks(data, lower_class_limits, n_classes);\n\n    }\n\n    // # [Skewness](http://en.wikipedia.org/wiki/Skewness)\n    //\n    // A measure of the extent to which a probability distribution of a\n    // real-valued random variable \"leans\" to one side of the mean.\n    // The skewness value can be positive or negative, or even undefined.\n    //\n    // Implementation is based on the adjusted Fisher-Pearson standardized\n    // moment coefficient, which is the version found in Excel and several\n    // statistical packages including Minitab, SAS and SPSS.\n    //\n    // Depends on `sum_nth_power_deviations()` and `sample_standard_deviation`\n    function sample_skewness(x) {\n        // The skewness of less than three arguments is null\n        if (x.length < 3) return null;\n\n        var n = x.length,\n            cubed_s = Math.pow(sample_standard_deviation(x), 3),\n            sum_cubed_deviations = sum_nth_power_deviations(x, 3);\n\n        return n * sum_cubed_deviations / ((n - 1) * (n - 2) * cubed_s);\n    }\n\n    // # Standard Normal Table\n    // A standard normal table, also called the unit normal table or Z table,\n    // is a mathematical table for the values of Φ (phi), which are the values of\n    // the cumulative distribution function of the normal distribution.\n    // It is used to find the probability that a statistic is observed below,\n    // above, or between values on the standard normal distribution, and by\n    // extension, any normal distribution.\n    //\n    // The probabilities are taken from http://en.wikipedia.org/wiki/Standard_normal_table\n    // The table used is the cumulative, and not cumulative from 0 to mean\n    // (even though the latter has 5 digits precision, instead of 4).\n    var standard_normal_table = [\n        /*  z      0.00    0.01    0.02    0.03    0.04    0.05    0.06    0.07    0.08    0.09 */\n        /* 0.0 */\n        0.5000, 0.5040, 0.5080, 0.5120, 0.5160, 0.5199, 0.5239, 0.5279, 0.5319, 0.5359,\n        /* 0.1 */\n        0.5398, 0.5438, 0.5478, 0.5517, 0.5557, 0.5596, 0.5636, 0.5675, 0.5714, 0.5753,\n        /* 0.2 */\n        0.5793, 0.5832, 0.5871, 0.5910, 0.5948, 0.5987, 0.6026, 0.6064, 0.6103, 0.6141,\n        /* 0.3 */\n        0.6179, 0.6217, 0.6255, 0.6293, 0.6331, 0.6368, 0.6406, 0.6443, 0.6480, 0.6517,\n        /* 0.4 */\n        0.6554, 0.6591, 0.6628, 0.6664, 0.6700, 0.6736, 0.6772, 0.6808, 0.6844, 0.6879,\n        /* 0.5 */\n        0.6915, 0.6950, 0.6985, 0.7019, 0.7054, 0.7088, 0.7123, 0.7157, 0.7190, 0.7224,\n        /* 0.6 */\n        0.7257, 0.7291, 0.7324, 0.7357, 0.7389, 0.7422, 0.7454, 0.7486, 0.7517, 0.7549,\n        /* 0.7 */\n        0.7580, 0.7611, 0.7642, 0.7673, 0.7704, 0.7734, 0.7764, 0.7794, 0.7823, 0.7852,\n        /* 0.8 */\n        0.7881, 0.7910, 0.7939, 0.7967, 0.7995, 0.8023, 0.8051, 0.8078, 0.8106, 0.8133,\n        /* 0.9 */\n        0.8159, 0.8186, 0.8212, 0.8238, 0.8264, 0.8289, 0.8315, 0.8340, 0.8365, 0.8389,\n        /* 1.0 */\n        0.8413, 0.8438, 0.8461, 0.8485, 0.8508, 0.8531, 0.8554, 0.8577, 0.8599, 0.8621,\n        /* 1.1 */\n        0.8643, 0.8665, 0.8686, 0.8708, 0.8729, 0.8749, 0.8770, 0.8790, 0.8810, 0.8830,\n        /* 1.2 */\n        0.8849, 0.8869, 0.8888, 0.8907, 0.8925, 0.8944, 0.8962, 0.8980, 0.8997, 0.9015,\n        /* 1.3 */\n        0.9032, 0.9049, 0.9066, 0.9082, 0.9099, 0.9115, 0.9131, 0.9147, 0.9162, 0.9177,\n        /* 1.4 */\n        0.9192, 0.9207, 0.9222, 0.9236, 0.9251, 0.9265, 0.9279, 0.9292, 0.9306, 0.9319,\n        /* 1.5 */\n        0.9332, 0.9345, 0.9357, 0.9370, 0.9382, 0.9394, 0.9406, 0.9418, 0.9429, 0.9441,\n        /* 1.6 */\n        0.9452, 0.9463, 0.9474, 0.9484, 0.9495, 0.9505, 0.9515, 0.9525, 0.9535, 0.9545,\n        /* 1.7 */\n        0.9554, 0.9564, 0.9573, 0.9582, 0.9591, 0.9599, 0.9608, 0.9616, 0.9625, 0.9633,\n        /* 1.8 */\n        0.9641, 0.9649, 0.9656, 0.9664, 0.9671, 0.9678, 0.9686, 0.9693, 0.9699, 0.9706,\n        /* 1.9 */\n        0.9713, 0.9719, 0.9726, 0.9732, 0.9738, 0.9744, 0.9750, 0.9756, 0.9761, 0.9767,\n        /* 2.0 */\n        0.9772, 0.9778, 0.9783, 0.9788, 0.9793, 0.9798, 0.9803, 0.9808, 0.9812, 0.9817,\n        /* 2.1 */\n        0.9821, 0.9826, 0.9830, 0.9834, 0.9838, 0.9842, 0.9846, 0.9850, 0.9854, 0.9857,\n        /* 2.2 */\n        0.9861, 0.9864, 0.9868, 0.9871, 0.9875, 0.9878, 0.9881, 0.9884, 0.9887, 0.9890,\n        /* 2.3 */\n        0.9893, 0.9896, 0.9898, 0.9901, 0.9904, 0.9906, 0.9909, 0.9911, 0.9913, 0.9916,\n        /* 2.4 */\n        0.9918, 0.9920, 0.9922, 0.9925, 0.9927, 0.9929, 0.9931, 0.9932, 0.9934, 0.9936,\n        /* 2.5 */\n        0.9938, 0.9940, 0.9941, 0.9943, 0.9945, 0.9946, 0.9948, 0.9949, 0.9951, 0.9952,\n        /* 2.6 */\n        0.9953, 0.9955, 0.9956, 0.9957, 0.9959, 0.9960, 0.9961, 0.9962, 0.9963, 0.9964,\n        /* 2.7 */\n        0.9965, 0.9966, 0.9967, 0.9968, 0.9969, 0.9970, 0.9971, 0.9972, 0.9973, 0.9974,\n        /* 2.8 */\n        0.9974, 0.9975, 0.9976, 0.9977, 0.9977, 0.9978, 0.9979, 0.9979, 0.9980, 0.9981,\n        /* 2.9 */\n        0.9981, 0.9982, 0.9982, 0.9983, 0.9984, 0.9984, 0.9985, 0.9985, 0.9986, 0.9986,\n        /* 3.0 */\n        0.9987, 0.9987, 0.9987, 0.9988, 0.9988, 0.9989, 0.9989, 0.9989, 0.9990, 0.9990\n    ];\n\n    // # [Gaussian error function](http://en.wikipedia.org/wiki/Error_function)\n    //\n    // The error_function(x/(sd * Math.sqrt(2))) is the probability that a value in a\n    // normal distribution with standard deviation sd is within x of the mean.\n    //\n    // This function returns a numerical approximation to the exact value.\n    function error_function(x) {\n        var t = 1 / (1 + 0.5 * Math.abs(x));\n        var tau = t * Math.exp(-Math.pow(x, 2) -\n            1.26551223 +\n            1.00002368 * t +\n            0.37409196 * Math.pow(t, 2) +\n            0.09678418 * Math.pow(t, 3) -\n            0.18628806 * Math.pow(t, 4) +\n            0.27886807 * Math.pow(t, 5) -\n            1.13520398 * Math.pow(t, 6) +\n            1.48851587 * Math.pow(t, 7) -\n            0.82215223 * Math.pow(t, 8) +\n            0.17087277 * Math.pow(t, 9));\n        if (x >= 0) {\n            return 1 - tau;\n        } else {\n            return tau - 1;\n        }\n    }\n\n    // # [Cumulative Standard Normal Probability](http://en.wikipedia.org/wiki/Standard_normal_table)\n    //\n    // Since probability tables cannot be\n    // printed for every normal distribution, as there are an infinite variety\n    // of normal distributions, it is common practice to convert a normal to a\n    // standard normal and then use the standard normal table to find probabilities.\n    //\n    // You can use .5 + .5 * error_function(x / Math.sqrt(2)) to calculate the probability\n    // instead of looking it up in a table.\n    function cumulative_std_normal_probability(z) {\n\n        // Calculate the position of this value.\n        var absZ = Math.abs(z),\n            // Each row begins with a different\n            // significant digit: 0.5, 0.6, 0.7, and so on. Each value in the table\n            // corresponds to a range of 0.01 in the input values, so the value is\n            // multiplied by 100.\n            index = Math.min(Math.round(absZ * 100), standard_normal_table.length - 1);\n\n        // The index we calculate must be in the table as a positive value,\n        // but we still pay attention to whether the input is positive\n        // or negative, and flip the output value as a last step.\n        if (z >= 0) {\n            return standard_normal_table[index];\n        } else {\n            // due to floating-point arithmetic, values in the table with\n            // 4 significant figures can nevertheless end up as repeating\n            // fractions when they're computed here.\n            return +(1 - standard_normal_table[index]).toFixed(4);\n        }\n    }\n\n    // # [Z-Score, or Standard Score](http://en.wikipedia.org/wiki/Standard_score)\n    //\n    // The standard score is the number of standard deviations an observation\n    // or datum is above or below the mean. Thus, a positive standard score\n    // represents a datum above the mean, while a negative standard score\n    // represents a datum below the mean. It is a dimensionless quantity\n    // obtained by subtracting the population mean from an individual raw\n    // score and then dividing the difference by the population standard\n    // deviation.\n    //\n    // The z-score is only defined if one knows the population parameters;\n    // if one only has a sample set, then the analogous computation with\n    // sample mean and sample standard deviation yields the\n    // Student's t-statistic.\n    function z_score(x, mean, standard_deviation) {\n        return (x - mean) / standard_deviation;\n    }\n\n    // We use `ε`, epsilon, as a stopping criterion when we want to iterate\n    // until we're \"close enough\".\n    var epsilon = 0.0001;\n\n    // # [Factorial](https://en.wikipedia.org/wiki/Factorial)\n    //\n    // A factorial, usually written n!, is the product of all positive\n    // integers less than or equal to n. Often factorial is implemented\n    // recursively, but this iterative approach is significantly faster\n    // and simpler.\n    function factorial(n) {\n\n        // factorial is mathematically undefined for negative numbers\n        if (n < 0 ) { return null; }\n\n        // typically you'll expand the factorial function going down, like\n        // 5! = 5 * 4 * 3 * 2 * 1. This is going in the opposite direction,\n        // counting from 2 up to the number in question, and since anything\n        // multiplied by 1 is itself, the loop only needs to start at 2.\n        var accumulator = 1;\n        for (var i = 2; i <= n; i++) {\n            // for each number up to and including the number `n`, multiply\n            // the accumulator my that number.\n            accumulator *= i;\n        }\n        return accumulator;\n    }\n\n    // # Bernoulli Distribution\n    //\n    // The [Bernoulli distribution](http://en.wikipedia.org/wiki/Bernoulli_distribution)\n    // is the probability discrete\n    // distribution of a random variable which takes value 1 with success\n    // probability `p` and value 0 with failure\n    // probability `q` = 1 - `p`. It can be used, for example, to represent the\n    // toss of a coin, where \"1\" is defined to mean \"heads\" and \"0\" is defined\n    // to mean \"tails\" (or vice versa). It is\n    // a special case of a Binomial Distribution\n    // where `n` = 1.\n    function bernoulli_distribution(p) {\n        // Check that `p` is a valid probability (0 ≤ p ≤ 1)\n        if (p < 0 || p > 1 ) { return null; }\n\n        return binomial_distribution(1, p);\n    }\n\n    // # Binomial Distribution\n    //\n    // The [Binomial Distribution](http://en.wikipedia.org/wiki/Binomial_distribution) is the discrete probability\n    // distribution of the number of successes in a sequence of n independent yes/no experiments, each of which yields\n    // success with probability `probability`. Such a success/failure experiment is also called a Bernoulli experiment or\n    // Bernoulli trial; when trials = 1, the Binomial Distribution is a Bernoulli Distribution.\n    function binomial_distribution(trials, probability) {\n        // Check that `p` is a valid probability (0 ≤ p ≤ 1),\n        // that `n` is an integer, strictly positive.\n        if (probability < 0 || probability > 1 ||\n            trials <= 0 || trials % 1 !== 0) {\n            return null;\n        }\n\n        // a [probability mass function](https://en.wikipedia.org/wiki/Probability_mass_function)\n        function probability_mass(x, trials, probability) {\n            return factorial(trials) /\n                (factorial(x) * factorial(trials - x)) *\n                (Math.pow(probability, x) * Math.pow(1 - probability, trials - x));\n        }\n\n        // We initialize `x`, the random variable, and `accumulator`, an accumulator\n        // for the cumulative distribution function to 0. `distribution_functions`\n        // is the object we'll return with the `probability_of_x` and the\n        // `cumulative_probability_of_x`, as well as the calculated mean &\n        // variance. We iterate until the `cumulative_probability_of_x` is\n        // within `epsilon` of 1.0.\n        var x = 0,\n            cumulative_probability = 0,\n            cells = {};\n\n        // This algorithm iterates through each potential outcome,\n        // until the `cumulative_probability` is very close to 1, at\n        // which point we've defined the vast majority of outcomes\n        do {\n            cells[x] = probability_mass(x, trials, probability);\n            cumulative_probability += cells[x];\n            x++;\n        // when the cumulative_probability is nearly 1, we've calculated\n        // the useful range of this distribution\n        } while (cumulative_probability < 1 - epsilon);\n\n        return cells;\n    }\n\n    // # Poisson Distribution\n    //\n    // The [Poisson Distribution](http://en.wikipedia.org/wiki/Poisson_distribution)\n    // is a discrete probability distribution that expresses the probability\n    // of a given number of events occurring in a fixed interval of time\n    // and/or space if these events occur with a known average rate and\n    // independently of the time since the last event.\n    //\n    // The Poisson Distribution is characterized by the strictly positive\n    // mean arrival or occurrence rate, `λ`.\n    function poisson_distribution(lambda) {\n        // Check that lambda is strictly positive\n        if (lambda <= 0) { return null; }\n\n        // our current place in the distribution\n        var x = 0,\n            // and we keep track of the current cumulative probability, in\n            // order to know when to stop calculating chances.\n            cumulative_probability = 0,\n            // the calculated cells to be returned\n            cells = {};\n\n        // a [probability mass function](https://en.wikipedia.org/wiki/Probability_mass_function)\n        function probability_mass(x, lambda) {\n            return (Math.pow(Math.E, -lambda) * Math.pow(lambda, x)) /\n                factorial(x);\n        }\n\n        // This algorithm iterates through each potential outcome,\n        // until the `cumulative_probability` is very close to 1, at\n        // which point we've defined the vast majority of outcomes\n        do {\n            cells[x] = probability_mass(x, lambda);\n            cumulative_probability += cells[x];\n            x++;\n        // when the cumulative_probability is nearly 1, we've calculated\n        // the useful range of this distribution\n        } while (cumulative_probability < 1 - epsilon);\n\n        return cells;\n    }\n\n    // # Percentage Points of the χ2 (Chi-Squared) Distribution\n    // The [χ2 (Chi-Squared) Distribution](http://en.wikipedia.org/wiki/Chi-squared_distribution) is used in the common\n    // chi-squared tests for goodness of fit of an observed distribution to a theoretical one, the independence of two\n    // criteria of classification of qualitative data, and in confidence interval estimation for a population standard\n    // deviation of a normal distribution from a sample standard deviation.\n    //\n    // Values from Appendix 1, Table III of William W. Hines & Douglas C. Montgomery, \"Probability and Statistics in\n    // Engineering and Management Science\", Wiley (1980).\n    var chi_squared_distribution_table = {\n        1: { 0.995:  0.00, 0.99:  0.00, 0.975:  0.00, 0.95:  0.00, 0.9:  0.02, 0.5:  0.45, 0.1:  2.71, 0.05:  3.84, 0.025:  5.02, 0.01:  6.63, 0.005:  7.88 },\n        2: { 0.995:  0.01, 0.99:  0.02, 0.975:  0.05, 0.95:  0.10, 0.9:  0.21, 0.5:  1.39, 0.1:  4.61, 0.05:  5.99, 0.025:  7.38, 0.01:  9.21, 0.005: 10.60 },\n        3: { 0.995:  0.07, 0.99:  0.11, 0.975:  0.22, 0.95:  0.35, 0.9:  0.58, 0.5:  2.37, 0.1:  6.25, 0.05:  7.81, 0.025:  9.35, 0.01: 11.34, 0.005: 12.84 },\n        4: { 0.995:  0.21, 0.99:  0.30, 0.975:  0.48, 0.95:  0.71, 0.9:  1.06, 0.5:  3.36, 0.1:  7.78, 0.05:  9.49, 0.025: 11.14, 0.01: 13.28, 0.005: 14.86 },\n        5: { 0.995:  0.41, 0.99:  0.55, 0.975:  0.83, 0.95:  1.15, 0.9:  1.61, 0.5:  4.35, 0.1:  9.24, 0.05: 11.07, 0.025: 12.83, 0.01: 15.09, 0.005: 16.75 },\n        6: { 0.995:  0.68, 0.99:  0.87, 0.975:  1.24, 0.95:  1.64, 0.9:  2.20, 0.5:  5.35, 0.1: 10.65, 0.05: 12.59, 0.025: 14.45, 0.01: 16.81, 0.005: 18.55 },\n        7: { 0.995:  0.99, 0.99:  1.25, 0.975:  1.69, 0.95:  2.17, 0.9:  2.83, 0.5:  6.35, 0.1: 12.02, 0.05: 14.07, 0.025: 16.01, 0.01: 18.48, 0.005: 20.28 },\n        8: { 0.995:  1.34, 0.99:  1.65, 0.975:  2.18, 0.95:  2.73, 0.9:  3.49, 0.5:  7.34, 0.1: 13.36, 0.05: 15.51, 0.025: 17.53, 0.01: 20.09, 0.005: 21.96 },\n        9: { 0.995:  1.73, 0.99:  2.09, 0.975:  2.70, 0.95:  3.33, 0.9:  4.17, 0.5:  8.34, 0.1: 14.68, 0.05: 16.92, 0.025: 19.02, 0.01: 21.67, 0.005: 23.59 },\n        10: { 0.995:  2.16, 0.99:  2.56, 0.975:  3.25, 0.95:  3.94, 0.9:  4.87, 0.5:  9.34, 0.1: 15.99, 0.05: 18.31, 0.025: 20.48, 0.01: 23.21, 0.005: 25.19 },\n        11: { 0.995:  2.60, 0.99:  3.05, 0.975:  3.82, 0.95:  4.57, 0.9:  5.58, 0.5: 10.34, 0.1: 17.28, 0.05: 19.68, 0.025: 21.92, 0.01: 24.72, 0.005: 26.76 },\n        12: { 0.995:  3.07, 0.99:  3.57, 0.975:  4.40, 0.95:  5.23, 0.9:  6.30, 0.5: 11.34, 0.1: 18.55, 0.05: 21.03, 0.025: 23.34, 0.01: 26.22, 0.005: 28.30 },\n        13: { 0.995:  3.57, 0.99:  4.11, 0.975:  5.01, 0.95:  5.89, 0.9:  7.04, 0.5: 12.34, 0.1: 19.81, 0.05: 22.36, 0.025: 24.74, 0.01: 27.69, 0.005: 29.82 },\n        14: { 0.995:  4.07, 0.99:  4.66, 0.975:  5.63, 0.95:  6.57, 0.9:  7.79, 0.5: 13.34, 0.1: 21.06, 0.05: 23.68, 0.025: 26.12, 0.01: 29.14, 0.005: 31.32 },\n        15: { 0.995:  4.60, 0.99:  5.23, 0.975:  6.27, 0.95:  7.26, 0.9:  8.55, 0.5: 14.34, 0.1: 22.31, 0.05: 25.00, 0.025: 27.49, 0.01: 30.58, 0.005: 32.80 },\n        16: { 0.995:  5.14, 0.99:  5.81, 0.975:  6.91, 0.95:  7.96, 0.9:  9.31, 0.5: 15.34, 0.1: 23.54, 0.05: 26.30, 0.025: 28.85, 0.01: 32.00, 0.005: 34.27 },\n        17: { 0.995:  5.70, 0.99:  6.41, 0.975:  7.56, 0.95:  8.67, 0.9: 10.09, 0.5: 16.34, 0.1: 24.77, 0.05: 27.59, 0.025: 30.19, 0.01: 33.41, 0.005: 35.72 },\n        18: { 0.995:  6.26, 0.99:  7.01, 0.975:  8.23, 0.95:  9.39, 0.9: 10.87, 0.5: 17.34, 0.1: 25.99, 0.05: 28.87, 0.025: 31.53, 0.01: 34.81, 0.005: 37.16 },\n        19: { 0.995:  6.84, 0.99:  7.63, 0.975:  8.91, 0.95: 10.12, 0.9: 11.65, 0.5: 18.34, 0.1: 27.20, 0.05: 30.14, 0.025: 32.85, 0.01: 36.19, 0.005: 38.58 },\n        20: { 0.995:  7.43, 0.99:  8.26, 0.975:  9.59, 0.95: 10.85, 0.9: 12.44, 0.5: 19.34, 0.1: 28.41, 0.05: 31.41, 0.025: 34.17, 0.01: 37.57, 0.005: 40.00 },\n        21: { 0.995:  8.03, 0.99:  8.90, 0.975: 10.28, 0.95: 11.59, 0.9: 13.24, 0.5: 20.34, 0.1: 29.62, 0.05: 32.67, 0.025: 35.48, 0.01: 38.93, 0.005: 41.40 },\n        22: { 0.995:  8.64, 0.99:  9.54, 0.975: 10.98, 0.95: 12.34, 0.9: 14.04, 0.5: 21.34, 0.1: 30.81, 0.05: 33.92, 0.025: 36.78, 0.01: 40.29, 0.005: 42.80 },\n        23: { 0.995:  9.26, 0.99: 10.20, 0.975: 11.69, 0.95: 13.09, 0.9: 14.85, 0.5: 22.34, 0.1: 32.01, 0.05: 35.17, 0.025: 38.08, 0.01: 41.64, 0.005: 44.18 },\n        24: { 0.995:  9.89, 0.99: 10.86, 0.975: 12.40, 0.95: 13.85, 0.9: 15.66, 0.5: 23.34, 0.1: 33.20, 0.05: 36.42, 0.025: 39.36, 0.01: 42.98, 0.005: 45.56 },\n        25: { 0.995: 10.52, 0.99: 11.52, 0.975: 13.12, 0.95: 14.61, 0.9: 16.47, 0.5: 24.34, 0.1: 34.28, 0.05: 37.65, 0.025: 40.65, 0.01: 44.31, 0.005: 46.93 },\n        26: { 0.995: 11.16, 0.99: 12.20, 0.975: 13.84, 0.95: 15.38, 0.9: 17.29, 0.5: 25.34, 0.1: 35.56, 0.05: 38.89, 0.025: 41.92, 0.01: 45.64, 0.005: 48.29 },\n        27: { 0.995: 11.81, 0.99: 12.88, 0.975: 14.57, 0.95: 16.15, 0.9: 18.11, 0.5: 26.34, 0.1: 36.74, 0.05: 40.11, 0.025: 43.19, 0.01: 46.96, 0.005: 49.65 },\n        28: { 0.995: 12.46, 0.99: 13.57, 0.975: 15.31, 0.95: 16.93, 0.9: 18.94, 0.5: 27.34, 0.1: 37.92, 0.05: 41.34, 0.025: 44.46, 0.01: 48.28, 0.005: 50.99 },\n        29: { 0.995: 13.12, 0.99: 14.26, 0.975: 16.05, 0.95: 17.71, 0.9: 19.77, 0.5: 28.34, 0.1: 39.09, 0.05: 42.56, 0.025: 45.72, 0.01: 49.59, 0.005: 52.34 },\n        30: { 0.995: 13.79, 0.99: 14.95, 0.975: 16.79, 0.95: 18.49, 0.9: 20.60, 0.5: 29.34, 0.1: 40.26, 0.05: 43.77, 0.025: 46.98, 0.01: 50.89, 0.005: 53.67 },\n        40: { 0.995: 20.71, 0.99: 22.16, 0.975: 24.43, 0.95: 26.51, 0.9: 29.05, 0.5: 39.34, 0.1: 51.81, 0.05: 55.76, 0.025: 59.34, 0.01: 63.69, 0.005: 66.77 },\n        50: { 0.995: 27.99, 0.99: 29.71, 0.975: 32.36, 0.95: 34.76, 0.9: 37.69, 0.5: 49.33, 0.1: 63.17, 0.05: 67.50, 0.025: 71.42, 0.01: 76.15, 0.005: 79.49 },\n        60: { 0.995: 35.53, 0.99: 37.48, 0.975: 40.48, 0.95: 43.19, 0.9: 46.46, 0.5: 59.33, 0.1: 74.40, 0.05: 79.08, 0.025: 83.30, 0.01: 88.38, 0.005: 91.95 },\n        70: { 0.995: 43.28, 0.99: 45.44, 0.975: 48.76, 0.95: 51.74, 0.9: 55.33, 0.5: 69.33, 0.1: 85.53, 0.05: 90.53, 0.025: 95.02, 0.01: 100.42, 0.005: 104.22 },\n        80: { 0.995: 51.17, 0.99: 53.54, 0.975: 57.15, 0.95: 60.39, 0.9: 64.28, 0.5: 79.33, 0.1: 96.58, 0.05: 101.88, 0.025: 106.63, 0.01: 112.33, 0.005: 116.32 },\n        90: { 0.995: 59.20, 0.99: 61.75, 0.975: 65.65, 0.95: 69.13, 0.9: 73.29, 0.5: 89.33, 0.1: 107.57, 0.05: 113.14, 0.025: 118.14, 0.01: 124.12, 0.005: 128.30 },\n        100: { 0.995: 67.33, 0.99: 70.06, 0.975: 74.22, 0.95: 77.93, 0.9: 82.36, 0.5: 99.33, 0.1: 118.50, 0.05: 124.34, 0.025: 129.56, 0.01: 135.81, 0.005: 140.17 }\n    };\n\n    // # χ2 (Chi-Squared) Goodness-of-Fit Test\n    //\n    // The [χ2 (Chi-Squared) Goodness-of-Fit Test](http://en.wikipedia.org/wiki/Goodness_of_fit#Pearson.27s_chi-squared_test)\n    // uses a measure of goodness of fit which is the sum of differences between observed and expected outcome frequencies\n    // (that is, counts of observations), each squared and divided by the number of observations expected given the\n    // hypothesized distribution. The resulting χ2 statistic, `chi_squared`, can be compared to the chi-squared distribution\n    // to determine the goodness of fit. In order to determine the degrees of freedom of the chi-squared distribution, one\n    // takes the total number of observed frequencies and subtracts the number of estimated parameters. The test statistic\n    // follows, approximately, a chi-square distribution with (k − c) degrees of freedom where `k` is the number of non-empty\n    // cells and `c` is the number of estimated parameters for the distribution.\n    function chi_squared_goodness_of_fit(data, distribution_type, significance) {\n        // Estimate from the sample data, a weighted mean.\n        var input_mean = mean(data),\n            // Calculated value of the χ2 statistic.\n            chi_squared = 0,\n            // Degrees of freedom, calculated as (number of class intervals -\n            // number of hypothesized distribution parameters estimated - 1)\n            degrees_of_freedom,\n            // Number of hypothesized distribution parameters estimated, expected to be supplied in the distribution test.\n            // Lose one degree of freedom for estimating `lambda` from the sample data.\n            c = 1,\n            // The hypothesized distribution.\n            // Generate the hypothesized distribution.\n            hypothesized_distribution = distribution_type(input_mean),\n            observed_frequencies = [],\n            expected_frequencies = [],\n            k;\n\n        // Create an array holding a histogram from the sample data, of\n        // the form `{ value: numberOfOcurrences }`\n        for (var i = 0; i < data.length; i++) {\n            if (observed_frequencies[data[i]] === undefined) {\n                observed_frequencies[data[i]] = 0;\n            }\n            observed_frequencies[data[i]]++;\n        }\n\n        // The histogram we created might be sparse - there might be gaps\n        // between values. So we iterate through the histogram, making\n        // sure that instead of undefined, gaps have 0 values.\n        for (i = 0; i < observed_frequencies.length; i++) {\n            if (observed_frequencies[i] === undefined) {\n                observed_frequencies[i] = 0;\n            }\n        }\n\n        // Create an array holding a histogram of expected data given the\n        // sample size and hypothesized distribution.\n        for (k in hypothesized_distribution) {\n            if (k in observed_frequencies) {\n                expected_frequencies[k] = hypothesized_distribution[k] * data.length;\n            }\n        }\n\n        // Working backward through the expected frequencies, collapse classes\n        // if less than three observations are expected for a class.\n        // This transformation is applied to the observed frequencies as well.\n        for (k = expected_frequencies.length - 1; k >= 0; k--) {\n            if (expected_frequencies[k] < 3) {\n                expected_frequencies[k - 1] += expected_frequencies[k];\n                expected_frequencies.pop();\n\n                observed_frequencies[k - 1] += observed_frequencies[k];\n                observed_frequencies.pop();\n            }\n        }\n\n        // Iterate through the squared differences between observed & expected\n        // frequencies, accumulating the `chi_squared` statistic.\n        for (k = 0; k < observed_frequencies.length; k++) {\n            chi_squared += Math.pow(\n                observed_frequencies[k] - expected_frequencies[k], 2) /\n                expected_frequencies[k];\n        }\n\n        // Calculate degrees of freedom for this test and look it up in the\n        // `chi_squared_distribution_table` in order to\n        // accept or reject the goodness-of-fit of the hypothesized distribution.\n        degrees_of_freedom = observed_frequencies.length - c - 1;\n        return chi_squared_distribution_table[degrees_of_freedom][significance] < chi_squared;\n    }\n\n    // # Mixin\n    //\n    // Mixin simple_statistics to a single Array instance if provided\n    // or the Array native object if not. This is an optional\n    // feature that lets you treat simple_statistics as a native feature\n    // of Javascript.\n    function mixin(array) {\n        var support = !!(Object.defineProperty && Object.defineProperties);\n        if (!support) throw new Error('without defineProperty, simple-statistics cannot be mixed in');\n\n        // only methods which work on basic arrays in a single step\n        // are supported\n        var arrayMethods = ['median', 'standard_deviation', 'sum',\n            'sample_skewness',\n            'mean', 'min', 'max', 'quantile', 'geometric_mean',\n            'harmonic_mean', 'root_mean_square'];\n\n        // create a closure with a method name so that a reference\n        // like `arrayMethods[i]` doesn't follow the loop increment\n        function wrap(method) {\n            return function() {\n                // cast any arguments into an array, since they're\n                // natively objects\n                var args = Array.prototype.slice.apply(arguments);\n                // make the first argument the array itself\n                args.unshift(this);\n                // return the result of the ss method\n                return ss[method].apply(ss, args);\n            };\n        }\n\n        // select object to extend\n        var extending;\n        if (array) {\n            // create a shallow copy of the array so that our internal\n            // operations do not change it by reference\n            extending = array.slice();\n        } else {\n            extending = Array.prototype;\n        }\n\n        // for each array function, define a function that gets\n        // the array as the first argument.\n        // We use [defineProperty](https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Object/defineProperty)\n        // because it allows these properties to be non-enumerable:\n        // `for (var in x)` loops will not run into problems with this\n        // implementation.\n        for (var i = 0; i < arrayMethods.length; i++) {\n            Object.defineProperty(extending, arrayMethods[i], {\n                value: wrap(arrayMethods[i]),\n                configurable: true,\n                enumerable: false,\n                writable: true\n            });\n        }\n\n        return extending;\n    }\n\n    ss.linear_regression = linear_regression;\n    ss.standard_deviation = standard_deviation;\n    ss.r_squared = r_squared;\n    ss.median = median;\n    ss.mean = mean;\n    ss.mode = mode;\n    ss.min = min;\n    ss.max = max;\n    ss.sum = sum;\n    ss.quantile = quantile;\n    ss.quantile_sorted = quantile_sorted;\n    ss.iqr = iqr;\n    ss.mad = mad;\n\n    ss.chunk = chunk;\n    ss.shuffle = shuffle;\n    ss.shuffle_in_place = shuffle_in_place;\n\n    ss.sample = sample;\n\n    ss.sample_covariance = sample_covariance;\n    ss.sample_correlation = sample_correlation;\n    ss.sample_variance = sample_variance;\n    ss.sample_standard_deviation = sample_standard_deviation;\n    ss.sample_skewness = sample_skewness;\n\n    ss.geometric_mean = geometric_mean;\n    ss.harmonic_mean = harmonic_mean;\n    ss.root_mean_square = root_mean_square;\n    ss.variance = variance;\n    ss.t_test = t_test;\n    ss.t_test_two_sample = t_test_two_sample;\n\n    // jenks\n    ss.jenksMatrices = jenksMatrices;\n    ss.jenksBreaks = jenksBreaks;\n    ss.jenks = jenks;\n\n    ss.bayesian = bayesian;\n\n    // Distribution-related methods\n    ss.epsilon = epsilon; // We make ε available to the test suite.\n    ss.factorial = factorial;\n    ss.bernoulli_distribution = bernoulli_distribution;\n    ss.binomial_distribution = binomial_distribution;\n    ss.poisson_distribution = poisson_distribution;\n    ss.chi_squared_goodness_of_fit = chi_squared_goodness_of_fit;\n\n    // Normal distribution\n    ss.z_score = z_score;\n    ss.cumulative_std_normal_probability = cumulative_std_normal_probability;\n    ss.standard_normal_table = standard_normal_table;\n    ss.error_function = error_function;\n\n    // Alias this into its common name\n    ss.average = mean;\n    ss.interquartile_range = iqr;\n    ss.mixin = mixin;\n    ss.median_absolute_deviation = mad;\n    ss.rms = root_mean_square;\n    ss.erf = error_function;\n\n})(this);\n","var invariant = require('turf-invariant');\n//http://en.wikipedia.org/wiki/Haversine_formula\n//http://www.movable-type.co.uk/scripts/latlong.html\n\n/**\n * Takes two {@link Point} features and calculates\n * the distance between them in degress, radians,\n * miles, or kilometers. This uses the\n * [Haversine formula](http://en.wikipedia.org/wiki/Haversine_formula)\n * to account for global curvature.\n *\n * @module turf/distance\n * @category measurement\n * @param {Feature} from origin point\n * @param {Feature} to destination point\n * @param {String} [units=kilometers] can be degrees, radians, miles, or kilometers\n * @return {Number} distance between the two points\n * @example\n * var point1 = {\n *   \"type\": \"Feature\",\n *   \"properties\": {},\n *   \"geometry\": {\n *     \"type\": \"Point\",\n *     \"coordinates\": [-75.343, 39.984]\n *   }\n * };\n * var point2 = {\n *   \"type\": \"Feature\",\n *   \"properties\": {},\n *   \"geometry\": {\n *     \"type\": \"Point\",\n *     \"coordinates\": [-75.534, 39.123]\n *   }\n * };\n * var units = \"miles\";\n *\n * var points = {\n *   \"type\": \"FeatureCollection\",\n *   \"features\": [point1, point2]\n * };\n *\n * //=points\n *\n * var distance = turf.distance(point1, point2, units);\n *\n * //=distance\n */\nmodule.exports = function(point1, point2, units){\n  invariant.featureOf(point1, 'Point', 'distance');\n  invariant.featureOf(point2, 'Point', 'distance');\n  var coordinates1 = point1.geometry.coordinates;\n  var coordinates2 = point2.geometry.coordinates;\n\n  var dLat = toRad(coordinates2[1] - coordinates1[1]);\n  var dLon = toRad(coordinates2[0] - coordinates1[0]);\n  var lat1 = toRad(coordinates1[1]);\n  var lat2 = toRad(coordinates2[1]);\n  var a = Math.sin(dLat/2) * Math.sin(dLat/2) +\n          Math.sin(dLon/2) * Math.sin(dLon/2) * Math.cos(lat1) * Math.cos(lat2);\n  var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\n\n  var R;\n  switch(units){\n    case 'miles':\n      R = 3960;\n      break;\n    case 'kilometers':\n      R = 6373;\n      break;\n    case 'degrees':\n      R = 57.2957795;\n      break;\n    case 'radians':\n      R = 1;\n      break;\n    case undefined:\n      R = 6373;\n      break;\n    default:\n      throw new Error('unknown option given to \"units\"');\n  }\n\n  var distance = R * c;\n  return distance;\n};\n\nfunction toRad(degree) {\n  return degree * Math.PI / 180;\n}\n","module.exports.geojsonType = geojsonType;\nmodule.exports.collectionOf = collectionOf;\nmodule.exports.featureOf = featureOf;\n\n/**\n * Enforce expectations about types of GeoJSON objects for Turf.\n *\n * @alias geojsonType\n * @param {GeoJSON} value any GeoJSON object\n * @param {string} type expected GeoJSON type\n * @param {String} name name of calling function\n * @throws Error if value is not the expected type.\n */\nfunction geojsonType(value, type, name) {\n    if (!type || !name) throw new Error('type and name required');\n\n    if (!value || value.type !== type) {\n        throw new Error('Invalid input to ' + name + ': must be a ' + type + ', given ' + value.type);\n    }\n}\n\n/**\n * Enforce expectations about types of {@link Feature} inputs for Turf.\n * Internally this uses {@link geojsonType} to judge geometry types.\n *\n * @alias featureOf\n * @param {Feature} feature a feature with an expected geometry type\n * @param {string} type expected GeoJSON type\n * @param {String} name name of calling function\n * @throws Error if value is not the expected type.\n */\nfunction featureOf(value, type, name) {\n    if (!name) throw new Error('.featureOf() requires a name');\n    if (!value || value.type !== 'Feature' || !value.geometry) {\n        throw new Error('Invalid input to ' + name + ', Feature with geometry required');\n    }\n    if (!value.geometry || value.geometry.type !== type) {\n        throw new Error('Invalid input to ' + name + ': must be a ' + type + ', given ' + value.geometry.type);\n    }\n}\n\n/**\n * Enforce expectations about types of {@link FeatureCollection} inputs for Turf.\n * Internally this uses {@link geojsonType} to judge geometry types.\n *\n * @alias collectionOf\n * @param {FeatureCollection} featurecollection a featurecollection for which features will be judged\n * @param {string} type expected GeoJSON type\n * @param {String} name name of calling function\n * @throws Error if value is not the expected type.\n */\nfunction collectionOf(value, type, name) {\n    if (!name) throw new Error('.collectionOf() requires a name');\n    if (!value || value.type !== 'FeatureCollection') {\n        throw new Error('Invalid input to ' + name + ', FeatureCollection required');\n    }\n    for (var i = 0; i < value.features.length; i++) {\n        var feature = value.features[i];\n        if (!feature || feature.type !== 'Feature' || !feature.geometry) {\n            throw new Error('Invalid input to ' + name + ', Feature with geometry required');\n        }\n        if (!feature.geometry || feature.geometry.type !== type) {\n            throw new Error('Invalid input to ' + name + ': must be a ' + type + ', given ' + feature.geometry.type);\n        }\n    }\n}\n","var extent = require('turf-extent');\nvar bboxPolygon = require('turf-bbox-polygon');\n\n/**\n * Takes a {@link Feature} or {@link FeatureCollection} and returns a rectangular {@link Polygon} feature that encompasses all vertices.\n *\n * @module turf/envelope\n * @category measurement\n * @param {FeatureCollection} fc a FeatureCollection of any type\n * @return {Polygon} a rectangular Polygon feature that encompasses all vertices\n * @example\n * var fc = {\n *   \"type\": \"FeatureCollection\",\n *   \"features\": [\n *     {\n *       \"type\": \"Feature\",\n *       \"properties\": {\n *         \"name\": \"Location A\"\n *       },\n *       \"geometry\": {\n *         \"type\": \"Point\",\n *         \"coordinates\": [-75.343, 39.984]\n *       }\n *     }, {\n *       \"type\": \"Feature\",\n *       \"properties\": {\n *         \"name\": \"Location B\"\n *       },\n *       \"geometry\": {\n *         \"type\": \"Point\",\n *         \"coordinates\": [-75.833, 39.284]\n *       }\n *     }, {\n *       \"type\": \"Feature\",\n *       \"properties\": {\n *         \"name\": \"Location C\"\n *       },\n *       \"geometry\": {\n *         \"type\": \"Point\",\n *         \"coordinates\": [-75.534, 39.123]\n *       }\n *     }\n *   ]\n * };\n *\n * var enveloped = turf.envelope(fc);\n *\n * var resultFeatures = fc.features.concat(enveloped);\n * var result = {\n *   \"type\": \"FeatureCollection\",\n *   \"features\": resultFeatures\n * };\n *\n * //=result\n */\n\nmodule.exports = function(features, done){\n  var bbox = extent(features);\n  var poly = bboxPolygon(bbox);\n  return poly;\n}\n","// depend on jsts for now https://github.com/bjornharrtell/jsts/blob/master/examples/overlay.html\nvar jsts = require('jsts');\n\n/**\n * Finds the difference between two polygons by clipping the second\n * polygon from the first.\n *\n * @module turf/erase\n * @category transformation\n * @param {Polygon} poly1 input Polygon feaure\n * @param {Polygon} poly2 Polygon feature to erase from `poly1`\n * @return {Polygon} a Polygon feature showing the area of `poly1` excluding the area of `poly2`\n * @example\n * var poly1 = {\n *   \"type\": \"Feature\",\n *   \"properties\": {\n *     \"fill\": \"#0f0\"\n *   },\n *   \"geometry\": {\n *     \"type\": \"Polygon\",\n *     \"coordinates\": [[\n *       [-46.738586, -23.596711],\n *       [-46.738586, -23.458207],\n *       [-46.560058, -23.458207],\n *       [-46.560058, -23.596711],\n *       [-46.738586, -23.596711]\n *     ]]\n *   }\n * };\n * var poly2 = {\n *   \"type\": \"Feature\",\n *   \"properties\": {\n *     \"fill\": \"#00f\"\n *   },\n *   \"geometry\": {\n *     \"type\": \"Polygon\",\n *     \"coordinates\": [[\n *       [-46.650009, -23.631314],\n *       [-46.650009, -23.5237],\n *       [-46.509246, -23.5237],\n *       [-46.509246, -23.631314],\n *       [-46.650009, -23.631314]\n *     ]]\n *   }\n * };\n *\n * var erased = turf.erase(poly1, poly2);\n * erased.properties.fill = '#f00';\n *\n * var polygons = {\n *   \"type\": \"FeatureCollection\",\n *   \"features\": [poly1, poly2]\n * };\n *\n * //=polygons\n *\n * //=erased\n */\n\nmodule.exports = function(p1, p2, done){\n  var poly1 = JSON.parse(JSON.stringify(p1));\n  var poly2 = JSON.parse(JSON.stringify(p2));\n  if(poly1.type !== 'Feature') {\n    poly1 = {\n      type: 'Feature',\n      properties: {},\n      geometry: poly1\n    };\n  }\n  if(poly2.type !== 'Feature') {\n    poly2 = {\n      type: 'Feature',\n      properties: {},\n      geometry: poly2\n    };\n  }\n\n  var reader = new jsts.io.GeoJSONReader();\n  var a = reader.read(JSON.stringify(poly1.geometry));\n  var b = reader.read(JSON.stringify(poly2.geometry));\n  var erased = a.difference(b);\n  var parser = new jsts.io.GeoJSONParser();\n  erased = parser.write(erased);\n\n  poly1.geometry = erased;\n\n  if (poly1.geometry.type === 'GeometryCollection' && poly1.geometry.geometries.length === 0) {\n    return;\n  } else {\n    return {\n      type: 'Feature',\n      properties: poly1.properties,\n      geometry: erased\n    };\n  }\n};\n","/*\n  javascript.util is a port of selected parts of java.util to JavaScript which\n  main purpose is to ease porting Java code to JavaScript.\n  \n  The MIT License (MIT)\n\n  Copyright (C) 2011-2014 by The Authors\n\n  Permission is hereby granted, free of charge, to any person obtaining a copy\n  of this software and associated documentation files (the \"Software\"), to deal\n  in the Software without restriction, including without limitation the rights\n  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n  copies of the Software, and to permit persons to whom the Software is\n  furnished to do so, subject to the following conditions:\n\n  The above copyright notice and this permission notice shall be included in\n  all copies or substantial portions of the Software.\n\n  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n  THE SOFTWARE.\n*/\n;(function(){var e=this;function f(a,b){var c=a.split(\".\"),d=e;c[0]in d||!d.execScript||d.execScript(\"var \"+c[0]);for(var t;c.length&&(t=c.shift());)c.length||void 0===b?d=d[t]?d[t]:d[t]={}:d[t]=b}function g(a,b){function c(){}c.prototype=b.prototype;a.q=b.prototype;a.prototype=new c;a.prototype.constructor=a;a.p=function(a,c,O){var M=Array.prototype.slice.call(arguments,2);return b.prototype[c].apply(a,M)}};function h(a){this.message=a||\"\"}g(h,Error);f(\"javascript.util.EmptyStackException\",h);h.prototype.name=\"EmptyStackException\";function k(a){this.message=a||\"\"}g(k,Error);f(\"javascript.util.IndexOutOfBoundsException\",k);k.prototype.name=\"IndexOutOfBoundsException\";function l(){}f(\"javascript.util.Iterator\",l);l.prototype.hasNext=l.prototype.c;l.prototype.next=l.prototype.next;l.prototype.remove=l.prototype.remove;function m(){}f(\"javascript.util.Collection\",m);function n(){}g(n,m);f(\"javascript.util.List\",n);function p(){}f(\"javascript.util.Map\",p);function q(a){this.message=a||\"\"}g(q,Error);f(\"javascript.util.NoSuchElementException\",q);q.prototype.name=\"NoSuchElementException\";function r(a){this.message=a||\"\"}g(r,Error);r.prototype.name=\"OperationNotSupported\";function s(a){this.a=[];a instanceof m&&this.e(a)}g(s,n);f(\"javascript.util.ArrayList\",s);s.prototype.a=null;s.prototype.add=function(a){this.a.push(a);return!0};s.prototype.add=s.prototype.add;s.prototype.e=function(a){for(a=a.f();a.c();)this.add(a.next());return!0};s.prototype.addAll=s.prototype.e;s.prototype.set=function(a,b){var c=this.a[a];this.a[a]=b;return c};s.prototype.set=s.prototype.set;s.prototype.f=function(){return new u(this)};s.prototype.iterator=s.prototype.f;\ns.prototype.get=function(a){if(0>a||a>=this.size())throw new k;return this.a[a]};s.prototype.get=s.prototype.get;s.prototype.g=function(){return 0===this.a.length};s.prototype.isEmpty=s.prototype.g;s.prototype.size=function(){return this.a.length};s.prototype.size=s.prototype.size;s.prototype.h=function(){for(var a=[],b=0,c=this.a.length;b<c;b++)a.push(this.a[b]);return a};s.prototype.toArray=s.prototype.h;\ns.prototype.remove=function(a){for(var b=!1,c=0,d=this.a.length;c<d;c++)if(this.a[c]===a){this.a.splice(c,1);b=!0;break}return b};s.prototype.remove=s.prototype.remove;function u(a){this.j=a}f(\"$jscomp.scope.Iterator_\",u);u.prototype.j=null;u.prototype.b=0;u.prototype.next=function(){if(this.b===this.j.size())throw new q;return this.j.get(this.b++)};u.prototype.next=u.prototype.next;u.prototype.c=function(){return this.b<this.j.size()?!0:!1};u.prototype.hasNext=u.prototype.c;\nu.prototype.remove=function(){throw new r;};u.prototype.remove=u.prototype.remove;function v(){}f(\"javascript.util.Arrays\",v);\nv.sort=function(){var a=arguments[0],b,c,d;if(1===arguments.length)a.sort();else if(2===arguments.length)c=arguments[1],d=function(a,b){return c.compare(a,b)},a.sort(d);else if(3===arguments.length)for(b=a.slice(arguments[1],arguments[2]),b.sort(),d=a.slice(0,arguments[1]).concat(b,a.slice(arguments[2],a.length)),a.splice(0,a.length),b=0;b<d.length;b++)a.push(d[b]);else if(4===arguments.length)for(b=a.slice(arguments[1],arguments[2]),c=arguments[3],d=function(a,b){return c.compare(a,b)},b.sort(d),\nd=a.slice(0,arguments[1]).concat(b,a.slice(arguments[2],a.length)),a.splice(0,a.length),b=0;b<d.length;b++)a.push(d[b])};v.asList=function(a){for(var b=new s,c=0,d=a.length;c<d;c++)b.add(a[c]);return b};function w(){this.i={}}g(w,p);f(\"javascript.util.HashMap\",w);w.prototype.i=null;w.prototype.get=function(a){return this.i[a]||null};w.prototype.get=w.prototype.get;w.prototype.put=function(a,b){return this.i[a]=b};w.prototype.put=w.prototype.put;w.prototype.m=function(){var a=new s,b;for(b in this.i)this.i.hasOwnProperty(b)&&a.add(this.i[b]);return a};w.prototype.values=w.prototype.m;w.prototype.size=function(){return this.m().size()};w.prototype.size=w.prototype.size;function x(){}g(x,m);f(\"javascript.util.Set\",x);function y(a){this.a=[];a instanceof m&&this.e(a)}g(y,x);f(\"javascript.util.HashSet\",y);y.prototype.a=null;y.prototype.contains=function(a){for(var b=0,c=this.a.length;b<c;b++)if(this.a[b]===a)return!0;return!1};y.prototype.contains=y.prototype.contains;y.prototype.add=function(a){if(this.contains(a))return!1;this.a.push(a);return!0};y.prototype.add=y.prototype.add;y.prototype.e=function(a){for(a=a.f();a.c();)this.add(a.next());return!0};y.prototype.addAll=y.prototype.e;\ny.prototype.remove=function(){throw new r;};y.prototype.remove=y.prototype.remove;y.prototype.size=function(){return this.a.length};y.prototype.g=function(){return 0===this.a.length};y.prototype.isEmpty=y.prototype.g;y.prototype.h=function(){for(var a=[],b=0,c=this.a.length;b<c;b++)a.push(this.a[b]);return a};y.prototype.toArray=y.prototype.h;y.prototype.f=function(){return new z(this)};y.prototype.iterator=y.prototype.f;function z(a){this.k=a}f(\"$jscomp.scope.Iterator_$1\",z);z.prototype.k=null;\nz.prototype.b=0;z.prototype.next=function(){if(this.b===this.k.size())throw new q;return this.k.a[this.b++]};z.prototype.next=z.prototype.next;z.prototype.c=function(){return this.b<this.k.size()?!0:!1};z.prototype.hasNext=z.prototype.c;z.prototype.remove=function(){throw new r;};z.prototype.remove=z.prototype.remove;function A(){}g(A,p);f(\"javascript.util.SortedMap\",A);function B(){}g(B,x);f(\"javascript.util.SortedSet\",B);function C(){this.a=[]}g(C,n);f(\"javascript.util.Stack\",C);C.prototype.a=null;C.prototype.push=function(a){this.a.push(a);return a};C.prototype.push=C.prototype.push;C.prototype.pop=function(){if(0===this.a.length)throw new h;return this.a.pop()};C.prototype.pop=C.prototype.pop;C.prototype.o=function(){if(0===this.a.length)throw new h;return this.a[this.a.length-1]};C.prototype.peek=C.prototype.o;C.prototype.empty=function(){return 0===this.a.length?!0:!1};C.prototype.empty=C.prototype.empty;\nC.prototype.g=function(){return this.empty()};C.prototype.isEmpty=C.prototype.g;C.prototype.search=function(a){return this.a.indexOf(a)};C.prototype.search=C.prototype.search;C.prototype.size=function(){return this.a.length};C.prototype.size=C.prototype.size;C.prototype.h=function(){for(var a=[],b=0,c=this.a.length;b<c;b++)a.push(this.a[b]);return a};C.prototype.toArray=C.prototype.h;function D(a){return null==a?null:a.parent}function E(a,b){null!==a&&(a.color=b)}function F(a){return null==a?null:a.left}function G(a){return null==a?null:a.right}function H(){this.d=null;this.n=0}g(H,A);f(\"javascript.util.TreeMap\",H);H.prototype.get=function(a){for(var b=this.d;null!==b;){var c=a.compareTo(b.key);if(0>c)b=b.left;else if(0<c)b=b.right;else return b.value}return null};H.prototype.get=H.prototype.get;\nH.prototype.put=function(a,b){if(null===this.d)return this.d={key:a,value:b,left:null,right:null,parent:null,color:0},this.n=1,null;var c=this.d,d,t;do if(d=c,t=a.compareTo(c.key),0>t)c=c.left;else if(0<t)c=c.right;else return d=c.value,c.value=b,d;while(null!==c);c={key:a,left:null,right:null,value:b,parent:d,color:0};0>t?d.left=c:d.right=c;for(c.color=1;null!=c&&c!=this.d&&1==c.parent.color;)D(c)==F(D(D(c)))?(d=G(D(D(c))),1==(null==d?0:d.color)?(E(D(c),0),E(d,0),E(D(D(c)),1),c=D(D(c))):(c==G(D(c))&&\n(c=D(c),I(this,c)),E(D(c),0),E(D(D(c)),1),J(this,D(D(c))))):(d=F(D(D(c))),1==(null==d?0:d.color)?(E(D(c),0),E(d,0),E(D(D(c)),1),c=D(D(c))):(c==F(D(c))&&(c=D(c),J(this,c)),E(D(c),0),E(D(D(c)),1),I(this,D(D(c)))));this.d.color=0;this.n++;return null};H.prototype.put=H.prototype.put;H.prototype.m=function(){var a=new s,b;b=this.d;if(null!=b)for(;null!=b.left;)b=b.left;if(null!==b)for(a.add(b.value);null!==(b=K(b));)a.add(b.value);return a};H.prototype.values=H.prototype.m;\nfunction I(a,b){if(null!=b){var c=b.right;b.right=c.left;null!=c.left&&(c.left.parent=b);c.parent=b.parent;null==b.parent?a.d=c:b.parent.left==b?b.parent.left=c:b.parent.right=c;c.left=b;b.parent=c}}function J(a,b){if(null!=b){var c=b.left;b.left=c.right;null!=c.right&&(c.right.parent=b);c.parent=b.parent;null==b.parent?a.d=c:b.parent.right==b?b.parent.right=c:b.parent.left=c;c.right=b;b.parent=c}}\nfunction K(a){if(null===a)return null;if(null!==a.right)for(var b=a.right;null!==b.left;)b=b.left;else for(b=a.parent;null!==b&&a===b.right;)a=b,b=b.parent;return b}H.prototype.size=function(){return this.n};H.prototype.size=H.prototype.size;function L(a){this.a=[];a instanceof m&&this.e(a)}g(L,B);f(\"javascript.util.TreeSet\",L);L.prototype.a=null;L.prototype.contains=function(a){for(var b=0,c=this.a.length;b<c;b++)if(0===this.a[b].compareTo(a))return!0;return!1};L.prototype.contains=L.prototype.contains;L.prototype.add=function(a){if(this.contains(a))return!1;for(var b=0,c=this.a.length;b<c;b++)if(1===this.a[b].compareTo(a))return this.a.splice(b,0,a),!0;this.a.push(a);return!0};L.prototype.add=L.prototype.add;\nL.prototype.e=function(a){for(a=a.f();a.c();)this.add(a.next());return!0};L.prototype.addAll=L.prototype.e;L.prototype.remove=function(){throw new r;};L.prototype.remove=L.prototype.remove;L.prototype.size=function(){return this.a.length};L.prototype.size=L.prototype.size;L.prototype.g=function(){return 0===this.a.length};L.prototype.isEmpty=L.prototype.g;L.prototype.h=function(){for(var a=[],b=0,c=this.a.length;b<c;b++)a.push(this.a[b]);return a};L.prototype.toArray=L.prototype.h;L.prototype.f=function(){return new N(this)};\nL.prototype.iterator=L.prototype.f;function N(a){this.l=a}f(\"$jscomp.scope.Iterator_$2\",N);N.prototype.l=null;N.prototype.b=0;N.prototype.next=function(){if(this.b===this.l.size())throw new q;return this.l.a[this.b++]};N.prototype.next=N.prototype.next;N.prototype.c=function(){return this.b<this.l.size()?!0:!1};N.prototype.hasNext=N.prototype.c;N.prototype.remove=function(){throw new r;};N.prototype.remove=N.prototype.remove;\"undefined\"!==typeof global&&(global.javascript={},global.javascript.util={},global.javascript.util.ArrayList=s,global.javascript.util.Arrays=v,global.javascript.util.Collection=m,global.javascript.util.EmptyStackException=h,global.javascript.util.HashMap=w,global.javascript.util.HashSet=y,global.javascript.util.IndexOutOfBoundsException=k,global.javascript.util.Iterator=l,global.javascript.util.List=n,global.javascript.util.Map=p,global.javascript.util.NoSuchElementException=q,global.javascript.util.OperationNotSupported=\nr,global.javascript.util.Set=x,global.javascript.util.SortedMap=A,global.javascript.util.SortedSet=B,global.javascript.util.Stack=C,global.javascript.util.TreeMap=H,global.javascript.util.TreeSet=L);}).call(this);\n","var featureCollection = require('turf-featurecollection');\nvar each = require('turf-meta').coordEach;\nvar point = require('turf-point');\n\n/**\n * Takes any {@link GeoJSON} object and return all positions as\n * a {@link FeatureCollection} of {@link Point} features.\n *\n * @module turf/explode\n * @category misc\n * @param {GeoJSON} input input features\n * @return {FeatureCollection} a FeatureCollection of {@link Point} features representing the exploded input features\n * @throws {Error} if it encounters an unknown geometry type\n * @example\n * var poly = {\n *   \"type\": \"Feature\",\n *   \"properties\": {},\n *   \"geometry\": {\n *     \"type\": \"Polygon\",\n *     \"coordinates\": [[\n *       [177.434692, -17.77517],\n *       [177.402076, -17.779093],\n *       [177.38079, -17.803937],\n *       [177.40242, -17.826164],\n *       [177.438468, -17.824857],\n *       [177.454948, -17.796746],\n *       [177.434692, -17.77517]\n *     ]]\n *   }\n * };\n *\n * var points = turf.explode(poly);\n *\n * //=poly\n *\n * //=points\n */\nmodule.exports = function(layer) {\n  var points = [];\n  each(layer, function(coord) {\n    points.push(point(coord));\n  });\n  return featureCollection(points);\n};\n","var each = require('turf-meta').coordEach;\n\n/**\n * Takes any {@link GeoJSON} object, calculates the extent of all input features, and returns a bounding box.\n *\n * @module turf/extent\n * @category measurement\n * @param {GeoJSON} input any valid GeoJSON Object\n * @return {Array<number>} the bounding box of `input` given\n * as an array in WSEN order (west, south, east, north)\n * @example\n * var input = {\n *   \"type\": \"FeatureCollection\",\n *   \"features\": [\n *     {\n *       \"type\": \"Feature\",\n *       \"properties\": {},\n *       \"geometry\": {\n *         \"type\": \"Point\",\n *         \"coordinates\": [114.175329, 22.2524]\n *       }\n *     }, {\n *       \"type\": \"Feature\",\n *       \"properties\": {},\n *       \"geometry\": {\n *         \"type\": \"Point\",\n *         \"coordinates\": [114.170007, 22.267969]\n *       }\n *     }, {\n *       \"type\": \"Feature\",\n *       \"properties\": {},\n *       \"geometry\": {\n *         \"type\": \"Point\",\n *         \"coordinates\": [114.200649, 22.274641]\n *       }\n *     }, {\n *       \"type\": \"Feature\",\n *       \"properties\": {},\n *       \"geometry\": {\n *         \"type\": \"Point\",\n *         \"coordinates\": [114.186744, 22.265745]\n *       }\n *     }\n *   ]\n * };\n *\n * var bbox = turf.extent(input);\n *\n * var bboxPolygon = turf.bboxPolygon(bbox);\n *\n * var resultFeatures = input.features.concat(bboxPolygon);\n * var result = {\n *   \"type\": \"FeatureCollection\",\n *   \"features\": resultFeatures\n * };\n *\n * //=result\n */\nmodule.exports = function(layer) {\n    var extent = [Infinity, Infinity, -Infinity, -Infinity];\n    each(layer, function(coord) {\n      if (extent[0] > coord[0]) extent[0] = coord[0];\n      if (extent[1] > coord[1]) extent[1] = coord[1];\n      if (extent[2] < coord[0]) extent[2] = coord[0];\n      if (extent[3] < coord[1]) extent[3] = coord[1];\n    });\n    return extent;\n};\n","/**\n * Takes one or more {@link Feature|Features} and creates a {@link FeatureCollection}\n *\n * @module turf/featurecollection\n * @category helper\n * @param {Feature} features input Features\n * @returns {FeatureCollection} a FeatureCollection of input features\n * @example\n * var features = [\n *  turf.point([-75.343, 39.984], {name: 'Location A'}),\n *  turf.point([-75.833, 39.284], {name: 'Location B'}),\n *  turf.point([-75.534, 39.123], {name: 'Location C'})\n * ];\n *\n * var fc = turf.featurecollection(features);\n *\n * //=fc\n */\nmodule.exports = function(features){\n  return {\n    type: \"FeatureCollection\",\n    features: features\n  };\n};\n","var featureCollection = require('turf-featurecollection');\n\n/**\n * Takes a {@link FeatureCollection} and filters it by a given property and value\n *\n * @module turf/filter\n * @category data\n * @param {FeatureCollection} features input FeatureCollection of any type\n * @param {String} key the property on which to filter\n * @param {String} value the value of that property on which to filter\n * @return {FeatureCollection} a filtered collection with only features that match input `key` and `value`\n * @example\n * var features = {\n *   \"type\": \"FeatureCollection\",\n *   \"features\": [\n *     {\n *       \"type\": \"Feature\",\n *       \"properties\": {\n *         \"species\": \"oak\"\n *       },\n *       \"geometry\": {\n *         \"type\": \"Point\",\n *         \"coordinates\": [-72.581777, 44.260875]\n *       }\n *     }, {\n *       \"type\": \"Feature\",\n *       \"properties\": {\n *         \"species\": \"birch\"\n *       },\n *       \"geometry\": {\n *         \"type\": \"Point\",\n *         \"coordinates\": [-72.570018, 44.260691]\n *       }\n *     }, {\n *       \"type\": \"Feature\",\n *       \"properties\": {\n *         \"species\": \"oak\"\n *       },\n *       \"geometry\": {\n *         \"type\": \"Point\",\n *         \"coordinates\": [-72.576284, 44.257925]\n *       }\n *     }, {\n *       \"type\": \"Feature\",\n *       \"properties\": {\n *         \"species\": \"redwood\"\n *       },\n *       \"geometry\": {\n *         \"type\": \"Point\",\n *         \"coordinates\": [-72.56916, 44.254605]\n *       }\n *     }, {\n *       \"type\": \"Feature\",\n *       \"properties\": {\n *         \"species\": \"maple\"\n *       },\n *       \"geometry\": {\n *         \"type\": \"Point\",\n *         \"coordinates\": [-72.581691, 44.24858]\n *       }\n *     }, {\n *       \"type\": \"Feature\",\n *       \"properties\": {\n *         \"species\": \"oak\"\n *       },\n *       \"geometry\": {\n *         \"type\": \"Point\",\n *         \"coordinates\": [-72.583837, 44.255773]\n *       }\n *     }\n *   ]\n * };\n *\n * var key = \"species\";\n * var value = \"oak\";\n *\n * var filtered = turf.filter(features, key, value);\n *\n * //=features\n *\n * //=filtered\n */\nmodule.exports = function(collection, key, val) {\n  var newFC = featureCollection([]);\n  for(var i = 0; i < collection.features.length; i++) {\n    if(collection.features[i].properties[key] === val) {\n      newFC.features.push(collection.features[i]);\n    }\n  }\n  return newFC;\n};\n","/**\n * Takes a {@link GeoJSON} object of any type and flips all of its coordinates\n * from `[x, y]` to `[y, x]`.\n *\n * @module turf/flip\n * @category misc\n * @param {GeoJSON} input input GeoJSON object\n * @returns {GeoJSON} a GeoJSON object of the same type as `input` with flipped coordinates\n * @example\n * var serbia = {\n *   \"type\": \"Feature\",\n *   \"properties\": {},\n *   \"geometry\": {\n *     \"type\": \"Point\",\n *     \"coordinates\": [20.566406, 43.421008]\n *   }\n * };\n *\n * //=serbia\n *\n * var saudiArabia = turf.flip(serbia);\n *\n * //=saudiArabia\n */\nmodule.exports = flipAny;\n\nfunction flipAny(_) {\n    // ensure that we don't modify features in-place and changes to the\n    // output do not change the previous feature, including changes to nested\n    // properties.\n    var input = JSON.parse(JSON.stringify(_));\n    switch (input.type) {\n        case 'FeatureCollection':\n            for (var i = 0; i < input.features.length; i++)\n                flipGeometry(input.features[i].geometry);\n            return input;\n        case 'Feature':\n            flipGeometry(input.geometry);\n            return input;\n        default:\n            flipGeometry(input);\n            return input;\n    }\n}\n\nfunction flipGeometry(geometry) {\n    var coords = geometry.coordinates;\n    switch(geometry.type) {\n      case 'Point':\n        flip0(coords);\n        break;\n      case 'LineString':\n      case 'MultiPoint':\n        flip1(coords);\n        break;\n      case 'Polygon':\n      case 'MultiLineString':\n        flip2(coords);\n        break;\n      case 'MultiPolygon':\n        flip3(coords);\n        break;\n      case 'GeometryCollection':\n        geometry.geometries.forEach(flipGeometry);\n        break;\n    }\n}\n\nfunction flip0(coord) {\n    coord.reverse();\n}\n\nfunction flip1(coords) {\n  for(var i = 0; i < coords.length; i++) coords[i].reverse();\n}\n\nfunction flip2(coords) {\n  for(var i = 0; i < coords.length; i++)\n    for(var j = 0; j < coords[i].length; j++) coords[i][j].reverse();\n}\n\nfunction flip3(coords) {\n  for(var i = 0; i < coords.length; i++)\n    for(var j = 0; j < coords[i].length; j++)\n      for(var k = 0; k < coords[i][j].length; k++) coords[i][j][k].reverse();\n}\n","var point = require('turf-point');\nvar polygon = require('turf-polygon');\nvar distance = require('turf-distance');\nvar featurecollection = require('turf-featurecollection');\n\n/**\n * Takes a bounding box and a cell size in degrees and returns a {@link FeatureCollection} of flat-topped\n * hexagons ({@link Polygon} features) aligned in an \"odd-q\" vertical grid as\n * described in [Hexagonal Grids](http://www.redblobgames.com/grids/hexagons/)\n *\n * @module turf/hex-grid\n * @category interpolation\n * @param {Array<number>} bbox bounding box in [minX, minY, maxX, maxY] order\n * @param {Number} cellWidth width of cell in specified units\n * @param {String} units used in calculating cellWidth ('miles' or 'kilometers')\n * @return {FeatureCollection} units used in calculating cellWidth ('miles' or 'kilometers')\n * @example\n * var bbox = [-96,31,-84,40];\n * var cellWidth = 50;\n * var units = 'miles';\n *\n * var hexgrid = turf.hexGrid(bbox, cellWidth, units);\n *\n * //=hexgrid\n */\n\n//Precompute cosines and sines of angles used in hexagon creation\n// for performance gain\nvar cosines = [];\nvar sines = [];\nfor (var i = 0; i < 6; i++) {\n  var angle = 2 * Math.PI/6 * i;\n  cosines.push(Math.cos(angle));\n  sines.push(Math.sin(angle));\n}\n\nmodule.exports = function hexgrid(bbox, cell, units) {\n  var xFraction = cell / (distance(point([bbox[0], bbox[1]]), point([bbox[2], bbox[1]]), units));\n  var cellWidth = xFraction * (bbox[2] - bbox[0]);\n  var yFraction = cell / (distance(point([bbox[0], bbox[1]]), point([bbox[0], bbox[3]]), units));\n  var cellHeight = yFraction * (bbox[3] - bbox[1]);\n  var radius = cellWidth / 2;\n\n  var hex_width = radius * 2;\n  var hex_height = Math.sqrt(3)/2 * hex_width;\n\n  var box_width = bbox[2] - bbox[0];\n  var box_height = bbox[3] - bbox[1];\n\n  var x_interval = 3/4 * hex_width;\n  var y_interval = hex_height;\n\n  var x_span = box_width / (hex_width - radius/2);\n  var x_count = Math.ceil(x_span);\n  if (Math.round(x_span) === x_count) {\n    x_count++;\n  }\n\n  var x_adjust = ((x_count * x_interval - radius/2) - box_width)/2 - radius/2;\n\n  var y_count = Math.ceil(box_height / hex_height);\n\n  var y_adjust = (box_height - y_count * hex_height)/2;\n\n  var hasOffsetY = y_count * hex_height - box_height > hex_height/2;\n  if (hasOffsetY) {\n    y_adjust -= hex_height/4;\n  }\n\n  var fc = featurecollection([]);\n  for (var x = 0; x < x_count; x++) {\n    for (var y = 0; y <= y_count; y++) {\n\n      var isOdd = x % 2 === 1;\n      if (y === 0 && isOdd) {\n        continue;\n      }\n\n      if (y === 0 && hasOffsetY) {\n        continue;\n      }\n\n      var center_x = x * x_interval + bbox[0] - x_adjust;\n      var center_y = y * y_interval + bbox[1] + y_adjust;\n\n      if (isOdd) {\n        center_y -= hex_height/2;\n      }\n      fc.features.push(hexagon([center_x, center_y], radius));\n    }\n  }\n\n  return fc;\n};\n\n//Center should be [x, y]\nfunction hexagon(center, radius) {\n  var vertices = [];\n  for (var i = 0; i < 6; i++) {\n    var x = center[0] + radius * cosines[i];\n    var y = center[1] + radius * sines[i];\n    vertices.push([x,y]);\n  }\n  //first and last vertex must be the same\n  vertices.push(vertices[0]);\n  return polygon([vertices]);\n}","// http://en.wikipedia.org/wiki/Even%E2%80%93odd_rule\n// modified from: https://github.com/substack/point-in-polygon/blob/master/index.js\n// which was modified from http://www.ecse.rpi.edu/Homepages/wrf/Research/Short_Notes/pnpoly.html\n\n/**\n * Takes a {@link Point} feature and a {@link Polygon} feature and determines if the Point resides inside the Polygon. The Polygon can\n * be convex or concave. The function accepts any valid Polygon or {@link MultiPolygon}\n * and accounts for holes.\n *\n * @module turf/inside\n * @category joins\n * @param {Point} point a Point feature\n * @param {Polygon} polygon a Polygon feature\n * @return {Boolean} `true` if the Point is inside the Polygon; `false` if the Point is not inside the Polygon\n * @example\n * var pt1 = {\n *   \"type\": \"Feature\",\n *   \"properties\": {\n *     \"marker-color\": \"#f00\"\n *   },\n *   \"geometry\": {\n *     \"type\": \"Point\",\n *     \"coordinates\": [-111.467285, 40.75766]\n *   }\n * };\n * var pt2 = {\n *   \"type\": \"Feature\",\n *   \"properties\": {\n *     \"marker-color\": \"#0f0\"\n *   },\n *   \"geometry\": {\n *     \"type\": \"Point\",\n *     \"coordinates\": [-111.873779, 40.647303]\n *   }\n * };\n * var poly = {\n *   \"type\": \"Feature\",\n *   \"properties\": {},\n *   \"geometry\": {\n *     \"type\": \"Polygon\",\n *     \"coordinates\": [[\n *       [-112.074279, 40.52215],\n *       [-112.074279, 40.853293],\n *       [-111.610107, 40.853293],\n *       [-111.610107, 40.52215],\n *       [-112.074279, 40.52215]\n *     ]]\n *   }\n * };\n *\n * var features = {\n *   \"type\": \"FeatureCollection\",\n *   \"features\": [pt1, pt2, poly]\n * };\n *\n * //=features\n *\n * var isInside1 = turf.inside(pt1, poly);\n * //=isInside1\n *\n * var isInside2 = turf.inside(pt2, poly);\n * //=isInside2\n */\nmodule.exports = function(point, polygon) {\n  var polys = polygon.geometry.coordinates;\n  var pt = [point.geometry.coordinates[0], point.geometry.coordinates[1]];\n  // normalize to multipolygon\n  if(polygon.geometry.type === 'Polygon') polys = [polys];\n\n  var insidePoly = false;\n  var i = 0;\n  while (i < polys.length && !insidePoly) {\n    // check if it is in the outer ring first\n    if(inRing(pt, polys[i][0])) {\n      var inHole = false;\n      var k = 1;\n      // check for the point in any of the holes\n      while(k < polys[i].length && !inHole) {\n        if(inRing(pt, polys[i][k])) {\n          inHole = true;\n        }\n        k++;\n      }\n      if(!inHole) insidePoly = true;\n    }\n    i++;\n  }\n  return insidePoly;\n}\n\n// pt is [x,y] and ring is [[x,y], [x,y],..]\nfunction inRing (pt, ring) {\n  var isInside = false;\n  for (var i = 0, j = ring.length - 1; i < ring.length; j = i++) {\n    var xi = ring[i][0], yi = ring[i][1];\n    var xj = ring[j][0], yj = ring[j][1];\n    \n    var intersect = ((yi > pt[1]) != (yj > pt[1]))\n        && (pt[0] < (xj - xi) * (pt[1] - yi) / (yj - yi) + xi);\n    if (intersect) isInside = !isInside;\n  }\n  return isInside;\n}\n\n","// depend on jsts for now https://github.com/bjornharrtell/jsts/blob/master/examples/overlay.html\nvar jsts = require('jsts');\nvar featurecollection = require('turf-featurecollection');\n\n/**\n * Takes two {@link Polygon} features and finds their intersection.\n *\n * @module turf/intersect\n * @category transformation\n * @param {Polygon} poly1 the first Polygon\n * @param {Polygon} poly2 the second Polygon\n * @return {Polygon} a Polygon feature representing the area where `poly1` and `poly2` overlap\n * @example\n * var poly1 = turf.polygon([[\n *  [-122.801742, 45.48565],\n *  [-122.801742, 45.60491],\n *  [-122.584762, 45.60491],\n *  [-122.584762, 45.48565],\n *  [-122.801742, 45.48565]\n * ]]);\n * poly1.properties.fill = '#0f0';\n * var poly2 = turf.polygon([[\n *  [-122.520217, 45.535693],\n *  [-122.64038, 45.553967],\n *  [-122.720031, 45.526554],\n *  [-122.669906, 45.507309],\n *  [-122.723464, 45.446643],\n *  [-122.532577, 45.408574],\n *  [-122.487258, 45.477466],\n *  [-122.520217, 45.535693]\n * ]]);\n * poly2.properties.fill = '#00f';\n * var polygons = turf.featurecollection([poly1, poly2]);\n *\n * var intersection = turf.intersect(poly1, poly2);\n *\n * //=polygons\n *\n * //=intersection\n */\nmodule.exports = function(poly1, poly2){\n  var geom1;\n  if(poly1.type === 'Feature') geom1 = poly1.geometry;\n  else geom1 = poly1;\n  if(poly2.type === 'Feature') geom2 = poly2.geometry;\n  else geom2 = poly2;\n  var reader = new jsts.io.GeoJSONReader();\n  var a = reader.read(JSON.stringify(geom1));\n  var b = reader.read(JSON.stringify(geom2));\n  var intersection = a.intersection(b);\n  var parser = new jsts.io.GeoJSONParser();\n\n  intersection = parser.write(intersection);\n  if(intersection.type === 'GeometryCollection' && intersection.geometries.length === 0) {\n    return;\n  } else {\n    return {\n      type: 'Feature',\n      properties: {},\n      geometry: intersection\n    };\n  }\n};\n","/*\n  javascript.util is a port of selected parts of java.util to JavaScript which\n  main purpose is to ease porting Java code to JavaScript.\n  \n  The MIT License (MIT)\n\n  Copyright (C) 2011-2014 by The Authors\n\n  Permission is hereby granted, free of charge, to any person obtaining a copy\n  of this software and associated documentation files (the \"Software\"), to deal\n  in the Software without restriction, including without limitation the rights\n  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n  copies of the Software, and to permit persons to whom the Software is\n  furnished to do so, subject to the following conditions:\n\n  The above copyright notice and this permission notice shall be included in\n  all copies or substantial portions of the Software.\n\n  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n  THE SOFTWARE.\n*/\n;(function(){var e=this;function f(a,b){var c=a.split(\".\"),d=e;c[0]in d||!d.execScript||d.execScript(\"var \"+c[0]);for(var t;c.length&&(t=c.shift());)c.length||void 0===b?d=d[t]?d[t]:d[t]={}:d[t]=b}function g(a,b){function c(){}c.prototype=b.prototype;a.q=b.prototype;a.prototype=new c;a.prototype.constructor=a;a.p=function(a,c,O){var M=Array.prototype.slice.call(arguments,2);return b.prototype[c].apply(a,M)}};function h(a){this.message=a||\"\"}g(h,Error);f(\"javascript.util.EmptyStackException\",h);h.prototype.name=\"EmptyStackException\";function k(a){this.message=a||\"\"}g(k,Error);f(\"javascript.util.IndexOutOfBoundsException\",k);k.prototype.name=\"IndexOutOfBoundsException\";function l(){}f(\"javascript.util.Iterator\",l);l.prototype.hasNext=l.prototype.c;l.prototype.next=l.prototype.next;l.prototype.remove=l.prototype.remove;function m(){}f(\"javascript.util.Collection\",m);function n(){}g(n,m);f(\"javascript.util.List\",n);function p(){}f(\"javascript.util.Map\",p);function q(a){this.message=a||\"\"}g(q,Error);f(\"javascript.util.NoSuchElementException\",q);q.prototype.name=\"NoSuchElementException\";function r(a){this.message=a||\"\"}g(r,Error);r.prototype.name=\"OperationNotSupported\";function s(a){this.a=[];a instanceof m&&this.e(a)}g(s,n);f(\"javascript.util.ArrayList\",s);s.prototype.a=null;s.prototype.add=function(a){this.a.push(a);return!0};s.prototype.add=s.prototype.add;s.prototype.e=function(a){for(a=a.f();a.c();)this.add(a.next());return!0};s.prototype.addAll=s.prototype.e;s.prototype.set=function(a,b){var c=this.a[a];this.a[a]=b;return c};s.prototype.set=s.prototype.set;s.prototype.f=function(){return new u(this)};s.prototype.iterator=s.prototype.f;\ns.prototype.get=function(a){if(0>a||a>=this.size())throw new k;return this.a[a]};s.prototype.get=s.prototype.get;s.prototype.g=function(){return 0===this.a.length};s.prototype.isEmpty=s.prototype.g;s.prototype.size=function(){return this.a.length};s.prototype.size=s.prototype.size;s.prototype.h=function(){for(var a=[],b=0,c=this.a.length;b<c;b++)a.push(this.a[b]);return a};s.prototype.toArray=s.prototype.h;\ns.prototype.remove=function(a){for(var b=!1,c=0,d=this.a.length;c<d;c++)if(this.a[c]===a){this.a.splice(c,1);b=!0;break}return b};s.prototype.remove=s.prototype.remove;function u(a){this.j=a}f(\"$jscomp.scope.Iterator_\",u);u.prototype.j=null;u.prototype.b=0;u.prototype.next=function(){if(this.b===this.j.size())throw new q;return this.j.get(this.b++)};u.prototype.next=u.prototype.next;u.prototype.c=function(){return this.b<this.j.size()?!0:!1};u.prototype.hasNext=u.prototype.c;\nu.prototype.remove=function(){throw new r;};u.prototype.remove=u.prototype.remove;function v(){}f(\"javascript.util.Arrays\",v);\nv.sort=function(){var a=arguments[0],b,c,d;if(1===arguments.length)a.sort();else if(2===arguments.length)c=arguments[1],d=function(a,b){return c.compare(a,b)},a.sort(d);else if(3===arguments.length)for(b=a.slice(arguments[1],arguments[2]),b.sort(),d=a.slice(0,arguments[1]).concat(b,a.slice(arguments[2],a.length)),a.splice(0,a.length),b=0;b<d.length;b++)a.push(d[b]);else if(4===arguments.length)for(b=a.slice(arguments[1],arguments[2]),c=arguments[3],d=function(a,b){return c.compare(a,b)},b.sort(d),\nd=a.slice(0,arguments[1]).concat(b,a.slice(arguments[2],a.length)),a.splice(0,a.length),b=0;b<d.length;b++)a.push(d[b])};v.asList=function(a){for(var b=new s,c=0,d=a.length;c<d;c++)b.add(a[c]);return b};function w(){this.i={}}g(w,p);f(\"javascript.util.HashMap\",w);w.prototype.i=null;w.prototype.get=function(a){return this.i[a]||null};w.prototype.get=w.prototype.get;w.prototype.put=function(a,b){return this.i[a]=b};w.prototype.put=w.prototype.put;w.prototype.m=function(){var a=new s,b;for(b in this.i)this.i.hasOwnProperty(b)&&a.add(this.i[b]);return a};w.prototype.values=w.prototype.m;w.prototype.size=function(){return this.m().size()};w.prototype.size=w.prototype.size;function x(){}g(x,m);f(\"javascript.util.Set\",x);function y(a){this.a=[];a instanceof m&&this.e(a)}g(y,x);f(\"javascript.util.HashSet\",y);y.prototype.a=null;y.prototype.contains=function(a){for(var b=0,c=this.a.length;b<c;b++)if(this.a[b]===a)return!0;return!1};y.prototype.contains=y.prototype.contains;y.prototype.add=function(a){if(this.contains(a))return!1;this.a.push(a);return!0};y.prototype.add=y.prototype.add;y.prototype.e=function(a){for(a=a.f();a.c();)this.add(a.next());return!0};y.prototype.addAll=y.prototype.e;\ny.prototype.remove=function(){throw new r;};y.prototype.remove=y.prototype.remove;y.prototype.size=function(){return this.a.length};y.prototype.g=function(){return 0===this.a.length};y.prototype.isEmpty=y.prototype.g;y.prototype.h=function(){for(var a=[],b=0,c=this.a.length;b<c;b++)a.push(this.a[b]);return a};y.prototype.toArray=y.prototype.h;y.prototype.f=function(){return new z(this)};y.prototype.iterator=y.prototype.f;function z(a){this.k=a}f(\"$jscomp.scope.Iterator_$1\",z);z.prototype.k=null;\nz.prototype.b=0;z.prototype.next=function(){if(this.b===this.k.size())throw new q;return this.k.a[this.b++]};z.prototype.next=z.prototype.next;z.prototype.c=function(){return this.b<this.k.size()?!0:!1};z.prototype.hasNext=z.prototype.c;z.prototype.remove=function(){throw new r;};z.prototype.remove=z.prototype.remove;function A(){}g(A,p);f(\"javascript.util.SortedMap\",A);function B(){}g(B,x);f(\"javascript.util.SortedSet\",B);function C(){this.a=[]}g(C,n);f(\"javascript.util.Stack\",C);C.prototype.a=null;C.prototype.push=function(a){this.a.push(a);return a};C.prototype.push=C.prototype.push;C.prototype.pop=function(){if(0===this.a.length)throw new h;return this.a.pop()};C.prototype.pop=C.prototype.pop;C.prototype.o=function(){if(0===this.a.length)throw new h;return this.a[this.a.length-1]};C.prototype.peek=C.prototype.o;C.prototype.empty=function(){return 0===this.a.length?!0:!1};C.prototype.empty=C.prototype.empty;\nC.prototype.g=function(){return this.empty()};C.prototype.isEmpty=C.prototype.g;C.prototype.search=function(a){return this.a.indexOf(a)};C.prototype.search=C.prototype.search;C.prototype.size=function(){return this.a.length};C.prototype.size=C.prototype.size;C.prototype.h=function(){for(var a=[],b=0,c=this.a.length;b<c;b++)a.push(this.a[b]);return a};C.prototype.toArray=C.prototype.h;function D(a){return null==a?null:a.parent}function E(a,b){null!==a&&(a.color=b)}function F(a){return null==a?null:a.left}function G(a){return null==a?null:a.right}function H(){this.d=null;this.n=0}g(H,A);f(\"javascript.util.TreeMap\",H);H.prototype.get=function(a){for(var b=this.d;null!==b;){var c=a.compareTo(b.key);if(0>c)b=b.left;else if(0<c)b=b.right;else return b.value}return null};H.prototype.get=H.prototype.get;\nH.prototype.put=function(a,b){if(null===this.d)return this.d={key:a,value:b,left:null,right:null,parent:null,color:0},this.n=1,null;var c=this.d,d,t;do if(d=c,t=a.compareTo(c.key),0>t)c=c.left;else if(0<t)c=c.right;else return d=c.value,c.value=b,d;while(null!==c);c={key:a,left:null,right:null,value:b,parent:d,color:0};0>t?d.left=c:d.right=c;for(c.color=1;null!=c&&c!=this.d&&1==c.parent.color;)D(c)==F(D(D(c)))?(d=G(D(D(c))),1==(null==d?0:d.color)?(E(D(c),0),E(d,0),E(D(D(c)),1),c=D(D(c))):(c==G(D(c))&&\n(c=D(c),I(this,c)),E(D(c),0),E(D(D(c)),1),J(this,D(D(c))))):(d=F(D(D(c))),1==(null==d?0:d.color)?(E(D(c),0),E(d,0),E(D(D(c)),1),c=D(D(c))):(c==F(D(c))&&(c=D(c),J(this,c)),E(D(c),0),E(D(D(c)),1),I(this,D(D(c)))));this.d.color=0;this.n++;return null};H.prototype.put=H.prototype.put;H.prototype.m=function(){var a=new s,b;b=this.d;if(null!=b)for(;null!=b.left;)b=b.left;if(null!==b)for(a.add(b.value);null!==(b=K(b));)a.add(b.value);return a};H.prototype.values=H.prototype.m;\nfunction I(a,b){if(null!=b){var c=b.right;b.right=c.left;null!=c.left&&(c.left.parent=b);c.parent=b.parent;null==b.parent?a.d=c:b.parent.left==b?b.parent.left=c:b.parent.right=c;c.left=b;b.parent=c}}function J(a,b){if(null!=b){var c=b.left;b.left=c.right;null!=c.right&&(c.right.parent=b);c.parent=b.parent;null==b.parent?a.d=c:b.parent.right==b?b.parent.right=c:b.parent.left=c;c.right=b;b.parent=c}}\nfunction K(a){if(null===a)return null;if(null!==a.right)for(var b=a.right;null!==b.left;)b=b.left;else for(b=a.parent;null!==b&&a===b.right;)a=b,b=b.parent;return b}H.prototype.size=function(){return this.n};H.prototype.size=H.prototype.size;function L(a){this.a=[];a instanceof m&&this.e(a)}g(L,B);f(\"javascript.util.TreeSet\",L);L.prototype.a=null;L.prototype.contains=function(a){for(var b=0,c=this.a.length;b<c;b++)if(0===this.a[b].compareTo(a))return!0;return!1};L.prototype.contains=L.prototype.contains;L.prototype.add=function(a){if(this.contains(a))return!1;for(var b=0,c=this.a.length;b<c;b++)if(1===this.a[b].compareTo(a))return this.a.splice(b,0,a),!0;this.a.push(a);return!0};L.prototype.add=L.prototype.add;\nL.prototype.e=function(a){for(a=a.f();a.c();)this.add(a.next());return!0};L.prototype.addAll=L.prototype.e;L.prototype.remove=function(){throw new r;};L.prototype.remove=L.prototype.remove;L.prototype.size=function(){return this.a.length};L.prototype.size=L.prototype.size;L.prototype.g=function(){return 0===this.a.length};L.prototype.isEmpty=L.prototype.g;L.prototype.h=function(){for(var a=[],b=0,c=this.a.length;b<c;b++)a.push(this.a[b]);return a};L.prototype.toArray=L.prototype.h;L.prototype.f=function(){return new N(this)};\nL.prototype.iterator=L.prototype.f;function N(a){this.l=a}f(\"$jscomp.scope.Iterator_$2\",N);N.prototype.l=null;N.prototype.b=0;N.prototype.next=function(){if(this.b===this.l.size())throw new q;return this.l.a[this.b++]};N.prototype.next=N.prototype.next;N.prototype.c=function(){return this.b<this.l.size()?!0:!1};N.prototype.hasNext=N.prototype.c;N.prototype.remove=function(){throw new r;};N.prototype.remove=N.prototype.remove;\"undefined\"!==typeof global&&(global.javascript={},global.javascript.util={},global.javascript.util.ArrayList=s,global.javascript.util.Arrays=v,global.javascript.util.Collection=m,global.javascript.util.EmptyStackException=h,global.javascript.util.HashMap=w,global.javascript.util.HashSet=y,global.javascript.util.IndexOutOfBoundsException=k,global.javascript.util.Iterator=l,global.javascript.util.List=n,global.javascript.util.Map=p,global.javascript.util.NoSuchElementException=q,global.javascript.util.OperationNotSupported=\nr,global.javascript.util.Set=x,global.javascript.util.SortedMap=A,global.javascript.util.SortedSet=B,global.javascript.util.Stack=C,global.javascript.util.TreeMap=H,global.javascript.util.TreeSet=L);}).call(this);\n","/**\n * Copyright (c) 2010, Jason Davies.\n *\n * All rights reserved.  This code is based on Bradley White's Java version,\n * which is in turn based on Nicholas Yue's C++ version, which in turn is based\n * on Paul D. Bourke's original Fortran version.  See below for the respective\n * copyright notices.\n *\n * See http://local.wasp.uwa.edu.au/~pbourke/papers/conrec/ for the original\n * paper by Paul D. Bourke.\n *\n * The vector conversion code is based on http://apptree.net/conrec.htm by\n * Graham Cox.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *     * Redistributions of source code must retain the above copyright\n *       notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above copyright\n *       notice, this list of conditions and the following disclaimer in the\n *       documentation and/or other materials provided with the distribution.\n *     * Neither the name of the <organization> nor the\n *       names of its contributors may be used to endorse or promote products\n *       derived from this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n/*\n * Copyright (c) 1996-1997 Nicholas Yue\n *\n * This software is copyrighted by Nicholas Yue. This code is based on Paul D.\n * Bourke's CONREC.F routine.\n *\n * The authors hereby grant permission to use, copy, and distribute this\n * software and its documentation for any purpose, provided that existing\n * copyright notices are retained in all copies and that this notice is\n * included verbatim in any distributions. Additionally, the authors grant\n * permission to modify this software and its documentation for any purpose,\n * provided that such modifications are not distributed without the explicit\n * consent of the authors and that existing copyright notices are retained in\n * all copies. Some of the algorithms implemented by this software are\n * patented, observe all applicable patent law.\n *\n * IN NO EVENT SHALL THE AUTHORS OR DISTRIBUTORS BE LIABLE TO ANY PARTY FOR\n * DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT\n * OF THE USE OF THIS SOFTWARE, ITS DOCUMENTATION, OR ANY DERIVATIVES THEREOF,\n * EVEN IF THE AUTHORS HAVE BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *\n * THE AUTHORS AND DISTRIBUTORS SPECIFICALLY DISCLAIM ANY WARRANTIES,\n * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE, AND NON-INFRINGEMENT.  THIS SOFTWARE IS\n * PROVIDED ON AN \"AS IS\" BASIS, AND THE AUTHORS AND DISTRIBUTORS HAVE NO\n * OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR\n * MODIFICATIONS.\n */\n\n\n  module.exports = Conrec;\n\n  var EPSILON = 1e-10;\n\n  function pointsEqual(a, b) {\n    var x = a.x - b.x, y = a.y - b.y;\n    return x * x + y * y < EPSILON;\n  }\n\n  function reverseList(list) {\n    var pp = list.head;\n\n    while (pp) {\n      // swap prev/next pointers\n      var temp = pp.next;\n      pp.next = pp.prev;\n      pp.prev = temp;\n\n      // continue through the list\n      pp = temp;\n    }\n\n    // swap head/tail pointers\n    var temp = list.head;\n    list.head = list.tail;\n    list.tail = temp;\n  }\n\n  function ContourBuilder(level) {\n    this.level = level;\n    this.s = null;\n    this.count = 0;\n  }\n  ContourBuilder.prototype.remove_seq = function(list) {\n    // if list is the first item, static ptr s is updated\n    if (list.prev) {\n      list.prev.next = list.next;\n    } else {\n      this.s = list.next;\n    }\n\n    if (list.next) {\n      list.next.prev = list.prev;\n    }\n    --this.count;\n  }\n  ContourBuilder.prototype.addSegment = function(a, b) {\n    var ss = this.s;\n    var ma = null;\n    var mb = null;\n    var prependA = false;\n    var prependB = false;\n\n    while (ss) {\n      if (ma == null) {\n        // no match for a yet\n        if (pointsEqual(a, ss.head.p)) {\n          ma = ss;\n          prependA = true;\n        } else if (pointsEqual(a, ss.tail.p)) {\n          ma = ss;\n        }\n      }\n      if (mb == null) {\n        // no match for b yet\n        if (pointsEqual(b, ss.head.p)) {\n          mb = ss;\n          prependB = true;\n        } else if (pointsEqual(b, ss.tail.p)) {\n          mb = ss;\n        }\n      }\n      // if we matched both no need to continue searching\n      if (mb != null && ma != null) {\n        break;\n      } else {\n        ss = ss.next;\n      }\n    }\n\n    // c is the case selector based on which of ma and/or mb are set\n    var c = ((ma != null) ? 1 : 0) | ((mb != null) ? 2 : 0);\n\n    switch(c) {\n      case 0:   // both unmatched, add as new sequence\n        var aa = {p: a, prev: null};\n        var bb = {p: b, next: null};\n        aa.next = bb;\n        bb.prev = aa;\n\n        // create sequence element and push onto head of main list. The order\n        // of items in this list is unimportant\n        ma = {head: aa, tail: bb, next: this.s, prev: null, closed: false};\n        if (this.s) {\n          this.s.prev = ma;\n        }\n        this.s = ma;\n\n        ++this.count;    // not essential - tracks number of unmerged sequences\n      break;\n\n      case 1:   // a matched, b did not - thus b extends sequence ma\n        var pp = {p: b};\n\n        if (prependA) {\n          pp.next = ma.head;\n          pp.prev = null;\n          ma.head.prev = pp;\n          ma.head = pp;\n        } else {\n          pp.next = null;\n          pp.prev = ma.tail;\n          ma.tail.next = pp;\n          ma.tail = pp;\n        }\n      break;\n\n      case 2:   // b matched, a did not - thus a extends sequence mb\n        var pp = {p: a};\n\n        if (prependB) {\n          pp.next = mb.head;\n          pp.prev = null;\n          mb.head.prev = pp;\n          mb.head = pp;\n        } else {\n          pp.next = null;\n          pp.prev = mb.tail;\n          mb.tail.next = pp;\n          mb.tail = pp;\n        }\n      break;\n\n      case 3:   // both matched, can merge sequences\n        // if the sequences are the same, do nothing, as we are simply closing this path (could set a flag)\n\n        if (ma === mb) {\n          var pp = {p: ma.tail.p, next: ma.head, prev: null};\n          ma.head.prev = pp;\n          ma.head = pp;\n          ma.closed = true;\n          break;\n        }\n\n        // there are 4 ways the sequence pair can be joined. The current setting of prependA and\n        // prependB will tell us which type of join is needed. For head/head and tail/tail joins\n        // one sequence needs to be reversed\n        switch((prependA ? 1 : 0) | (prependB ? 2 : 0)) {\n          case 0:   // tail-tail\n            // reverse ma and append to mb\n            reverseList(ma);\n            // fall through to head/tail case\n          case 1:   // head-tail\n            // ma is appended to mb and ma discarded\n            mb.tail.next = ma.head;\n            ma.head.prev = mb.tail;\n            mb.tail = ma.tail;\n\n            //discard ma sequence record\n            this.remove_seq(ma);\n          break;\n\n          case 3:   // head-head\n            // reverse ma and append mb to it\n            reverseList(ma);\n            // fall through to tail/head case\n          case 2:   // tail-head\n            // mb is appended to ma and mb is discarded\n            ma.tail.next = mb.head;\n            mb.head.prev = ma.tail;\n            ma.tail = mb.tail;\n\n            //discard mb sequence record\n            this.remove_seq(mb);\n        break;\n      }\n    }\n  }\n\n  /**\n   * Implements CONREC.\n   *\n   * @param {function} drawContour function for drawing contour.  Defaults to a\n   *                               custom \"contour builder\", which populates the\n   *                               contours property.\n   */\n  function Conrec(drawContour) {\n    if (!drawContour) {\n      var c = this;\n      c.contours = {};\n      /**\n       * drawContour - interface for implementing the user supplied method to\n       * render the countours.\n       *\n       * Draws a line between the start and end coordinates.\n       *\n       * @param startX    - start coordinate for X\n       * @param startY    - start coordinate for Y\n       * @param endX      - end coordinate for X\n       * @param endY      - end coordinate for Y\n       * @param contourLevel - Contour level for line.\n       */\n      this.drawContour = function(startX, startY, endX, endY, contourLevel, k) {\n        var cb = c.contours[k];\n        if (!cb) {\n          cb = c.contours[k] = new ContourBuilder(contourLevel);\n        }\n        cb.addSegment({x: startX, y: startY}, {x: endX, y: endY});\n      }\n      this.contourList = function() {\n        var l = [];\n        var a = c.contours;\n        for (var k in a) {\n          var s = a[k].s;\n          var level = a[k].level;\n          while (s) {\n            var h = s.head;\n            var l2 = [];\n            l2.level = level;\n            l2.k = k;\n            while (h && h.p) {\n              l2.push(h.p);\n              h = h.next;\n            }\n            l.push(l2);\n            s = s.next;\n          }\n        }\n        l.sort(function(a, b) { return a.k - b.k });\n        return l;\n      }\n    } else {\n      this.drawContour = drawContour;\n    }\n    this.h  = new Array(5);\n    this.sh = new Array(5);\n    this.xh = new Array(5);\n    this.yh = new Array(5);\n  }\n\n  /**\n   * contour is a contouring subroutine for rectangularily spaced data\n   *\n   * It emits calls to a line drawing subroutine supplied by the user which\n   * draws a contour map corresponding to real*4data on a randomly spaced\n   * rectangular grid. The coordinates emitted are in the same units given in\n   * the x() and y() arrays.\n   *\n   * Any number of contour levels may be specified but they must be in order of\n   * increasing value.\n   *\n   *\n   * @param {number[][]} d - matrix of data to contour\n   * @param {number} ilb,iub,jlb,jub - index bounds of data matrix\n   *\n   *             The following two, one dimensional arrays (x and y) contain\n   *             the horizontal and vertical coordinates of each sample points.\n   * @param {number[]} x  - data matrix column coordinates\n   * @param {number[]} y  - data matrix row coordinates\n   * @param {number} nc   - number of contour levels\n   * @param {number[]} z  - contour levels in increasing order.\n   */\n  Conrec.prototype.contour = function(d, ilb, iub, jlb, jub, x, y, nc, z) {\n    var h = this.h, sh = this.sh, xh = this.xh, yh = this.yh;\n    var drawContour = this.drawContour;\n    this.contours = {};\n\n    /** private */\n    var xsect = function(p1, p2){\n      return (h[p2]*xh[p1]-h[p1]*xh[p2])/(h[p2]-h[p1]);\n    }\n\n    var ysect = function(p1, p2){\n      return (h[p2]*yh[p1]-h[p1]*yh[p2])/(h[p2]-h[p1]);\n    }\n    var m1;\n    var m2;\n    var m3;\n    var case_value;\n    var dmin;\n    var dmax;\n    var x1 = 0.0;\n    var x2 = 0.0;\n    var y1 = 0.0;\n    var y2 = 0.0;\n\n    // The indexing of im and jm should be noted as it has to start from zero\n    // unlike the fortran counter part\n    var im = [0, 1, 1, 0];\n    var jm = [0, 0, 1, 1];\n\n    // Note that castab is arranged differently from the FORTRAN code because\n    // Fortran and C/C++ arrays are transposed of each other, in this case\n    // it is more tricky as castab is in 3 dimensions\n    var castab = [\n      [\n        [0, 0, 8], [0, 2, 5], [7, 6, 9]\n      ],\n      [\n        [0, 3, 4], [1, 3, 1], [4, 3, 0]\n      ],\n      [\n        [9, 6, 7], [5, 2, 0], [8, 0, 0]\n      ]\n    ];\n\n    for (var j=(jub-1);j>=jlb;j--) {\n      for (var i=ilb;i<=iub-1;i++) {\n        var temp1, temp2;\n        temp1 = Math.min(d[i][j],d[i][j+1]);\n        temp2 = Math.min(d[i+1][j],d[i+1][j+1]);\n        dmin  = Math.min(temp1,temp2);\n        temp1 = Math.max(d[i][j],d[i][j+1]);\n        temp2 = Math.max(d[i+1][j],d[i+1][j+1]);\n        dmax  = Math.max(temp1,temp2);\n\n        if (dmax>=z[0]&&dmin<=z[nc-1]) {\n          for (var k=0;k<nc;k++) {\n            if (z[k]>=dmin&&z[k]<=dmax) {\n              for (var m=4;m>=0;m--) {\n                if (m>0) {\n                  // The indexing of im and jm should be noted as it has to\n                  // start from zero\n                  h[m] = d[i+im[m-1]][j+jm[m-1]]-z[k];\n                  xh[m] = x[i+im[m-1]];\n                  yh[m] = y[j+jm[m-1]];\n                } else {\n                  h[0] = 0.25*(h[1]+h[2]+h[3]+h[4]);\n                  xh[0]=0.5*(x[i]+x[i+1]);\n                  yh[0]=0.5*(y[j]+y[j+1]);\n                }\n                if (h[m]>EPSILON) {\n                  sh[m] = 1;\n                } else if (h[m]<-EPSILON) {\n                  sh[m] = -1;\n                } else\n                  sh[m] = 0;\n              }\n              //\n              // Note: at this stage the relative heights of the corners and the\n              // centre are in the h array, and the corresponding coordinates are\n              // in the xh and yh arrays. The centre of the box is indexed by 0\n              // and the 4 corners by 1 to 4 as shown below.\n              // Each triangle is then indexed by the parameter m, and the 3\n              // vertices of each triangle are indexed by parameters m1,m2,and\n              // m3.\n              // It is assumed that the centre of the box is always vertex 2\n              // though this isimportant only when all 3 vertices lie exactly on\n              // the same contour level, in which case only the side of the box\n              // is drawn.\n              //\n              //\n              //      vertex 4 +-------------------+ vertex 3\n              //               | \\               / |\n              //               |   \\    m-3    /   |\n              //               |     \\       /     |\n              //               |       \\   /       |\n              //               |  m=2    X   m=2   |       the centre is vertex 0\n              //               |       /   \\       |\n              //               |     /       \\     |\n              //               |   /    m=1    \\   |\n              //               | /               \\ |\n              //      vertex 1 +-------------------+ vertex 2\n              //\n              //\n              //\n              //               Scan each triangle in the box\n              //\n              for (m=1;m<=4;m++) {\n                m1 = m;\n                m2 = 0;\n                if (m!=4) {\n                    m3 = m+1;\n                } else {\n                    m3 = 1;\n                }\n                case_value = castab[sh[m1]+1][sh[m2]+1][sh[m3]+1];\n                if (case_value!=0) {\n                  switch (case_value) {\n                    case 1: // Line between vertices 1 and 2\n                      x1=xh[m1];\n                      y1=yh[m1];\n                      x2=xh[m2];\n                      y2=yh[m2];\n                      break;\n                    case 2: // Line between vertices 2 and 3\n                      x1=xh[m2];\n                      y1=yh[m2];\n                      x2=xh[m3];\n                      y2=yh[m3];\n                      break;\n                    case 3: // Line between vertices 3 and 1\n                      x1=xh[m3];\n                      y1=yh[m3];\n                      x2=xh[m1];\n                      y2=yh[m1];\n                      break;\n                    case 4: // Line between vertex 1 and side 2-3\n                      x1=xh[m1];\n                      y1=yh[m1];\n                      x2=xsect(m2,m3);\n                      y2=ysect(m2,m3);\n                      break;\n                    case 5: // Line between vertex 2 and side 3-1\n                      x1=xh[m2];\n                      y1=yh[m2];\n                      x2=xsect(m3,m1);\n                      y2=ysect(m3,m1);\n                      break;\n                    case 6: //  Line between vertex 3 and side 1-2\n                      x1=xh[m3];\n                      y1=yh[m3];\n                      x2=xsect(m1,m2);\n                      y2=ysect(m1,m2);\n                      break;\n                    case 7: // Line between sides 1-2 and 2-3\n                      x1=xsect(m1,m2);\n                      y1=ysect(m1,m2);\n                      x2=xsect(m2,m3);\n                      y2=ysect(m2,m3);\n                      break;\n                    case 8: // Line between sides 2-3 and 3-1\n                      x1=xsect(m2,m3);\n                      y1=ysect(m2,m3);\n                      x2=xsect(m3,m1);\n                      y2=ysect(m3,m1);\n                      break;\n                    case 9: // Line between sides 3-1 and 1-2\n                      x1=xsect(m3,m1);\n                      y1=ysect(m3,m1);\n                      x2=xsect(m1,m2);\n                      y2=ysect(m1,m2);\n                      break;\n                    default:\n                      break;\n                  }\n                  // Put your processing code here and comment out the printf\n                  //printf(\"%f %f %f %f %f\\n\",x1,y1,x2,y2,z[k]);\n                  drawContour(x1,y1,x2,y2,z[k],k);\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n","//https://github.com/jasondavies/conrec.js\n//http://stackoverflow.com/questions/263305/drawing-a-topographical-map\nvar tin = require('turf-tin');\nvar inside = require('turf-inside');\nvar grid = require('turf-grid');\nvar extent = require('turf-extent');\nvar planepoint = require('turf-planepoint');\nvar featurecollection = require('turf-featurecollection');\nvar linestring = require('turf-linestring');\nvar square = require('turf-square');\nvar Conrec = require('./conrec');\n\n/**\n * Takes a {@link FeatureCollection} of {@link Point} features with z-values and an array of\n * value breaks and generates [isolines](http://en.wikipedia.org/wiki/Isoline).\n *\n * @module turf/isolines\n * @category interpolation\n * @param {FeatureCollection} points a FeatureCollection of {@link Point} features\n * @param {string} z the property name in `points` from which z-values will be pulled\n * @param {number} resolution resolution of the underlying grid\n * @param {number[]} breaks where to draw contours\n * @returns {FeatureCollection} a FeatureCollection of {@link LineString} features representing isolines\n * @example\n * // create random points with random\n * // z-values in their properties\n * var points = turf.random('point', 100, {\n *   bbox: [0, 30, 20, 50]\n * });\n * for (var i = 0; i < points.features.length; i++) {\n *   points.features[i].properties.z = Math.random() * 10;\n * }\n * var breaks = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n * var isolined = turf.isolines(points, 'z', 15, breaks);\n * //=isolined\n */\nmodule.exports = function(points, z, resolution, breaks, done){\n  var tinResult = tin(points, z);\n  var extentBBox = extent(points);\n  var squareBBox = square(extentBBox);\n  var gridResult = grid(squareBBox, resolution);\n  var data = [];\n\n  for (var i = 0; i < gridResult.features.length; i++) {\n    var pt = gridResult.features[i];\n    for (var j = 0; j < tinResult.features.length; j++) {\n      var triangle = tinResult.features[j];\n      if (inside(pt, triangle)) {\n        pt.properties = {};\n        pt.properties[z] = planepoint(pt, triangle);\n      }\n    }\n  }\n\n  var depth = Math.sqrt(gridResult.features.length);\n  for (var x=0; x<depth; x++){\n    var xGroup = gridResult.features.slice(x * depth, (x + 1) * depth);\n    var xFlat = [];\n    xGroup.forEach(function(verticalPoint){\n      if(verticalPoint.properties){\n        xFlat.push(verticalPoint.properties[z]);\n      } else{\n        xFlat.push(0);\n      }\n    });\n    data.push(xFlat);\n  }\n  var interval = (squareBBox[2] - squareBBox[0]) / depth;\n  var xCoordinates = [];\n  var yCoordinates = [];\n  for (var x = 0; x < depth; x++) {\n    xCoordinates.push(x * interval + squareBBox[0]);\n    yCoordinates.push(x * interval + squareBBox[1]);\n  }\n\n  var c = new Conrec();\n  c.contour(data, 0, resolution, 0, resolution, xCoordinates, yCoordinates, breaks.length, breaks);\n  var contourList = c.contourList();\n\n  var fc = featurecollection([]);\n  contourList.forEach(function(c){\n    if(c.length > 2){\n      var polyCoordinates = [];\n      c.forEach(function(coord){\n        polyCoordinates.push([coord.x, coord.y]);\n      });\n      var poly = linestring(polyCoordinates);\n      poly.properties = {};\n      poly.properties[z] = c.level;\n\n      fc.features.push(poly);\n    }\n  });\n\n  return fc;\n}\n\n\n\n","var point = require('turf-point');\n\n/**\n * Takes a bounding box and a cell depth and returns a {@link FeatureCollection} of {@link Point} features in a grid.\n *\n * @module turf/grid\n * @category interpolation\n * @param {Array<number>} extent extent in [minX, minY, maxX, maxY] order\n * @param {Number} depth how many cells to output\n * @return {FeatureCollection} grid as FeatureCollection with {@link Point} features\n * @example\n * var extent = [-70.823364, -33.553984, -70.473175, -33.302986];\n * var depth = 10;\n *\n * var grid = turf.grid(extent, depth);\n *\n * //=grid\n */\nmodule.exports = function(extents, depth) {\n  var xmin = extents[0];\n  var ymin = extents[1];\n  var xmax = extents[2];\n  var ymax = extents[3];\n  var interval = (xmax - xmin) / depth;\n  var coords = [];\n  var fc = {\n    type: 'FeatureCollection',\n    features: []\n  };\n\n  for (var x=0; x<=depth; x++){\n    for (var y=0;y<=depth; y++){\n      fc.features.push(point([(x * interval) + xmin, (y * interval) + ymin]));\n    }\n  }\n  return fc;\n}\n","var ss = require('simple-statistics');\n\n/**\n* Takes a {@FeatureCollection} of any type and returns an array of the [Jenks Natural breaks](http://en.wikipedia.org/wiki/Jenks_natural_breaks_optimization)\n* for a given property\n* @module turf/jenks\n* @param {FeatureCollection} input a FeatureCollection of any type\n* @param {string} field the property in `input` on which to calculate Jenks natural breaks\n* @param {number} numberOfBreaks number of classes in which to group the data\n* @return {Array<number>} the break number for each class plus the minimum and maximum values\n* @example\n* var points = {\n*   \"type\": \"FeatureCollection\",\n*   \"features\": [\n*     {\n*       \"type\": \"Feature\",\n*       \"properties\": {\n*         \"population\": 200\n*       },\n*       \"geometry\": {\n*         \"type\": \"Point\",\n*         \"coordinates\": [49.859733, 40.400424]\n*       }\n*     }, {\n*       \"type\": \"Feature\",\n*       \"properties\": {\n*         \"population\": 600\n*       },\n*       \"geometry\": {\n*         \"type\": \"Point\",\n*         \"coordinates\": [49.83879, 40.401209]\n*       }\n*     }, {\n*       \"type\": \"Feature\",\n*       \"properties\": {\n*         \"population\": 100\n*       },\n*       \"geometry\": {\n*         \"type\": \"Point\",\n*         \"coordinates\": [49.817848, 40.376889]\n*       }\n*     }, {\n*       \"type\": \"Feature\",\n*       \"properties\": {\n*         \"population\": 200\n*       },\n*       \"geometry\": {\n*         \"type\": \"Point\",\n*         \"coordinates\": [49.840507, 40.386043]\n*       }\n*     }, {\n*       \"type\": \"Feature\",\n*       \"properties\": {\n*         \"population\": 300\n*       },\n*       \"geometry\": {\n*         \"type\": \"Point\",\n*         \"coordinates\": [49.854583, 40.37532]\n*       }\n*     }\n*   ]\n* };\n*\n* var breaks = turf.jenks(points, 'population', 3);\n*\n* //=breaks\n*/\nmodule.exports = function(fc, field, num){\n  var vals = [];\n  var breaks = [];\n\n  fc.features.forEach(function(feature){\n    if(feature.properties[field]!==undefined){\n      vals.push(feature.properties[field]);\n    }\n  });\n  breaks = ss.jenks(vals, num);\n\n  return breaks;\n};\n","/**\n * Takes a {@link Polygon} feature and returns a {@link FeatureCollection} of {@link Point} features at all self-intersections.\n *\n * @module turf/kinks\n * @category misc\n * @param {Polygon} polygon a Polygon feature\n * @returns {FeatureCollection} a FeatureCollection of {@link Point} features representing self-intersections\n * @example\n * var poly = {\n *   \"type\": \"Feature\",\n *   \"properties\": {},\n *   \"geometry\": {\n *     \"type\": \"Polygon\",\n *     \"coordinates\": [[\n *       [-12.034835, 8.901183],\n *       [-12.060413, 8.899826],\n *       [-12.03638, 8.873199],\n *       [-12.059383, 8.871418],\n *       [-12.034835, 8.901183]\n *     ]]\n *   }\n * };\n * \n * var kinks = turf.kinks(poly);\n *\n * var resultFeatures = kinks.intersections.features.concat(poly);\n * var result = {\n *   \"type\": \"FeatureCollection\",\n *   \"features\": resultFeatures\n * };\n *\n * //=result\n */\n\nvar polygon = require('turf-polygon');\nvar point = require('turf-point');\nvar fc = require('turf-featurecollection');\n\nmodule.exports = function(polyIn) {\n  var poly;\n  var results = {intersections: fc([]), fixed: null};\n  if (polyIn.type === 'Feature') {\n    poly = polyIn.geometry;\n  } else {\n    poly = polyIn;\n  }\n  var intersectionHash = {};\n  poly.coordinates.forEach(function(ring1){\n    poly.coordinates.forEach(function(ring2){\n      for(var i = 0; i < ring1.length-1; i++) {\n        for(var k = 0; k < ring2.length-1; k++) {\n          var intersection = lineIntersects(ring1[i][0],ring1[i][1],ring1[i+1][0],ring1[i+1][1],\n            ring2[k][0],ring2[k][1],ring2[k+1][0],ring2[k+1][1]);\n          if(intersection) {\n            results.intersections.features.push(point([intersection[0], intersection[1]]));\n          }\n        }\n      }\n    })\n  })\n  return results;\n}\n\n\n// modified from http://jsfiddle.net/justin_c_rounds/Gd2S2/light/\nfunction lineIntersects(line1StartX, line1StartY, line1EndX, line1EndY, line2StartX, line2StartY, line2EndX, line2EndY) {\n  // if the lines intersect, the result contains the x and y of the intersection (treating the lines as infinite) and booleans for whether line segment 1 or line segment 2 contain the point\n  var denominator, a, b, numerator1, numerator2, result = {\n    x: null,\n    y: null,\n    onLine1: false,\n    onLine2: false\n  };\n  denominator = ((line2EndY - line2StartY) * (line1EndX - line1StartX)) - ((line2EndX - line2StartX) * (line1EndY - line1StartY));\n  if (denominator == 0) {\n    if(result.x != null && result.y != null) {\n      return result;\n    } else {\n      return false;\n    }\n  }\n  a = line1StartY - line2StartY;\n  b = line1StartX - line2StartX;\n  numerator1 = ((line2EndX - line2StartX) * a) - ((line2EndY - line2StartY) * b);\n  numerator2 = ((line1EndX - line1StartX) * a) - ((line1EndY - line1StartY) * b);\n  a = numerator1 / denominator;\n  b = numerator2 / denominator;\n\n  // if we cast these lines infinitely in both directions, they intersect here:\n  result.x = line1StartX + (a * (line1EndX - line1StartX));\n  result.y = line1StartY + (a * (line1EndY - line1StartY));\n\n  // if line1 is a segment and line2 is infinite, they intersect if:\n  if (a > 0 && a < 1) {\n    result.onLine1 = true;\n  }\n  // if line2 is a segment and line1 is infinite, they intersect if:\n  if (b > 0 && b < 1) {\n    result.onLine2 = true;\n  }\n  // if line1 and line2 are segments, they intersect if both of the above are true\n  if(result.onLine1 && result.onLine2){\n    return [result.x, result.y];\n  }\n  else {\n    return false;\n  }\n}\n","var distance = require('turf-distance');\nvar point = require('turf-point');\n\n/**\n * Takes a {@link LineString} feature and measures its length in the specified units.\n *\n * @module turf/line-distance\n * @category measurement\n * @param {LineString} Line to measure\n * @param {String} [units=miles] can be degrees, radians, miles, or kilometers\n * @return {Number} length of the LineString\n * @example\n * var line = {\n *   \"type\": \"Feature\",\n *   \"properties\": {},\n *   \"geometry\": {\n *     \"type\": \"LineString\",\n *     \"coordinates\": [\n *       [-77.031669, 38.878605],\n *       [-77.029609, 38.881946],\n *       [-77.020339, 38.884084],\n *       [-77.025661, 38.885821],\n *       [-77.021884, 38.889563],\n *       [-77.019824, 38.892368]\n *     ]\n *   }\n * };\n *\n * var length = turf.lineDistance(line, 'miles');\n *\n * //=line\n *\n * //=length\n */\n\nmodule.exports = function (line, units) {\n  var coords;\n  if(line.type === 'Feature') coords = line.geometry.coordinates;\n  else if(line.type === 'LineString') coords = line.geometry.coordinates;\n  else throw new Error('input must be a LineString Feature or Geometry');\n\n  var travelled = 0;\n  for(var i = 0; i < coords.length - 1; i++) {\n    travelled += distance(point(coords[i]), point(coords[i+1]), units);\n  }\n  return travelled;\n}\n","var distance = require('turf-distance');\nvar point = require('turf-point');\nvar linestring = require('turf-linestring');\nvar bearing = require('turf-bearing');\nvar destination = require('turf-destination');\n\n/**\n * Slices a LineString at start and stop Points\n *\n * @module turf/line-slice\n *\n * @param {Point} Point to start the slice\n * @param {Point} Point to stop the slice\n * @param {LineString} Line to slice\n * @return {LineString} Sliced LineString\n * @example\n * var line = {\n *   \"type\": \"Feature\",\n *   \"properties\": {},\n *   \"geometry\": {\n *     \"type\": \"LineString\",\n *     \"coordinates\": [\n *       [-77.031669, 38.878605],\n *       [-77.029609, 38.881946],\n *       [-77.020339, 38.884084],\n *       [-77.025661, 38.885821],\n *       [-77.021884, 38.889563],\n *       [-77.019824, 38.892368]\n *     ]\n *   }\n * };\n * var start = {\n *   \"type\": \"Feature\",\n *   \"properties\": {},\n *   \"geometry\": {\n *     \"type\": \"Point\",\n *     \"coordinates\": [-77.029609, 38.881946]\n *   }\n * };\n * var stop = {\n *   \"type\": \"Feature\",\n *   \"properties\": {},\n *   \"geometry\": {\n *     \"type\": \"Point\",\n *     \"coordinates\": [-77.021884, 38.889563]\n *   }\n * };\n * \n * var sliced = turf.lineSlice(start, stop, line);\n *\n * //=line\n *\n * //=sliced\n */\n\nmodule.exports = function (startPt, stopPt, line) {  \n  var coords;\n  if(line.type === 'Feature') coords = line.geometry.coordinates;\n  else if(line.type === 'LineString') coords = line.geometry.coordinates;\n  else throw new Error('input must be a LineString Feature or Geometry');\n\n  var startVertex = pointOnLine(startPt, coords);\n  var stopVertex = pointOnLine(stopPt, coords);\n  var ends;\n  if(startVertex.properties.index <= stopVertex.properties.index) {\n    ends = [startVertex, stopVertex];\n  } else {\n    ends = [stopVertex, startVertex];\n  }\n  var clipLine = linestring([ends[0].geometry.coordinates], {});\n  for(var i = ends[0].properties.index+1; i < ends[1].properties.index+1; i++) {\n    clipLine.geometry.coordinates.push(coords[i]);\n  }\n  clipLine.geometry.coordinates.push(ends[1].geometry.coordinates);\n  return clipLine;\n}\n\nfunction pointOnLine (pt, coords) {\n  var units = 'miles'\n  var closestPt = point([Infinity, Infinity], {dist: Infinity});\n  for(var i = 0; i < coords.length - 1; i++) {\n    var start = point(coords[i])\n    var stop = point(coords[i+1])\n    //start\n    start.properties.dist = distance(pt, start, units);\n    //stop\n    stop.properties.dist = distance(pt, stop, units);\n    //perpendicular\n    var direction = bearing(start, stop)\n    var perpendicularPt = destination(pt, 1000 , direction + 90, units) // 1000 = gross\n    var intersect = lineIntersects(\n      pt.geometry.coordinates[0],\n      pt.geometry.coordinates[1],\n      perpendicularPt.geometry.coordinates[0],\n      perpendicularPt.geometry.coordinates[1],\n      start.geometry.coordinates[0],\n      start.geometry.coordinates[1],\n      stop.geometry.coordinates[0],\n      stop.geometry.coordinates[1]\n      );\n    if(!intersect) {\n      perpendicularPt = destination(pt, 1000 , direction - 90, units) // 1000 = gross\n      intersect = lineIntersects(\n        pt.geometry.coordinates[0],\n        pt.geometry.coordinates[1],\n        perpendicularPt.geometry.coordinates[0],\n        perpendicularPt.geometry.coordinates[1],\n        start.geometry.coordinates[0],\n        start.geometry.coordinates[1],\n        stop.geometry.coordinates[0],\n        stop.geometry.coordinates[1]\n        );\n    }\n    perpendicularPt.properties.dist = Infinity;\n    var intersectPt;\n    if(intersect) {\n      var intersectPt = point(intersect);\n      intersectPt.properties.dist = distance(pt, intersectPt, units);\n    }\n    \n    if(start.properties.dist < closestPt.properties.dist) {\n      closestPt = start;\n      closestPt.properties.index = i;\n    }\n    if(stop.properties.dist < closestPt.properties.dist) {\n     closestPt = stop;\n     closestPt.properties.index = i;\n    }\n    if(intersectPt && intersectPt.properties.dist < closestPt.properties.dist){ \n      closestPt = intersectPt;\n      closestPt.properties.index = i;\n    }\n  }\n  \n  return closestPt;\n}\n\n// modified from http://jsfiddle.net/justin_c_rounds/Gd2S2/light/\nfunction lineIntersects(line1StartX, line1StartY, line1EndX, line1EndY, line2StartX, line2StartY, line2EndX, line2EndY) {\n  // if the lines intersect, the result contains the x and y of the intersection (treating the lines as infinite) and booleans for whether line segment 1 or line segment 2 contain the point\n  var denominator, a, b, numerator1, numerator2, result = {\n    x: null,\n    y: null,\n    onLine1: false,\n    onLine2: false\n  };\n  denominator = ((line2EndY - line2StartY) * (line1EndX - line1StartX)) - ((line2EndX - line2StartX) * (line1EndY - line1StartY));\n  if (denominator == 0) {\n    if(result.x != null && result.y != null) {\n      return result;\n    } else {\n      return false;\n    }\n  }\n  a = line1StartY - line2StartY;\n  b = line1StartX - line2StartX;\n  numerator1 = ((line2EndX - line2StartX) * a) - ((line2EndY - line2StartY) * b);\n  numerator2 = ((line1EndX - line1StartX) * a) - ((line1EndY - line1StartY) * b);\n  a = numerator1 / denominator;\n  b = numerator2 / denominator;\n\n  // if we cast these lines infinitely in both directions, they intersect here:\n  result.x = line1StartX + (a * (line1EndX - line1StartX));\n  result.y = line1StartY + (a * (line1EndY - line1StartY));\n\n  // if line1 is a segment and line2 is infinite, they intersect if:\n  if (a > 0 && a < 1) {\n    result.onLine1 = true;\n  }\n  // if line2 is a segment and line1 is infinite, they intersect if:\n  if (b > 0 && b < 1) {\n    result.onLine2 = true;\n  }\n  // if line1 and line2 are segments, they intersect if both of the above are true\n  if(result.onLine1 && result.onLine2){\n    return [result.x, result.y];\n  }\n  else {\n    return false;\n  }\n}\n","/**\n * Creates a {@link LineString} {@link Feature} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @module turf/linestring\n * @category helper\n * @param {Array<Array<Number>>} coordinates an array of Positions\n * @param {Object} properties an Object of key-value pairs to add as properties\n * @return {LineString} a LineString feature\n * @throws {Error} if no coordinates are passed\n * @example\n * var linestring1 = turf.linestring([\n *\t[-21.964416, 64.148203],\n *\t[-21.956176, 64.141316],\n *\t[-21.93901, 64.135924],\n *\t[-21.927337, 64.136673]\n * ]);\n * var linestring2 = turf.linestring([\n *\t[-21.929054, 64.127985],\n *\t[-21.912918, 64.134726],\n *\t[-21.916007, 64.141016],\n * \t[-21.930084, 64.14446]\n * ], {name: 'line 1', distance: 145});\n *\n * //=linestring1\n *\n * //=linestring2\n */\nmodule.exports = function(coordinates, properties){\n  if (!coordinates) {\n      throw new Error('No coordinates passed');\n  }\n  return {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"LineString\",\n      \"coordinates\": coordinates\n    },\n    \"properties\": properties || {}\n  };\n};\n","var inside = require('turf-inside');\n\n/**\n * Calculates the maximum value of a field for a set of {@link Point} features within a set of {@link Polygon} features.\n *\n * @module turf/max\n * @category aggregation\n * @param {FeatureCollection} polygons a FeatureCollection of {@link Polygon} features\n * @param {FeatureCollection} points a FeatureCollection of {@link Point} features\n * @param {string} inField the field in input data to analyze\n * @param {string} outField the field in which to store results\n * @return {FeatureCollection} a FeatureCollection of {@link Polygon} features\n * with properties listed as `outField` values\n * @example\n * var polygons = {\n *   \"type\": \"FeatureCollection\",\n *   \"features\": [\n *     {\n *       \"type\": \"Feature\",\n *       \"properties\": {},\n *       \"geometry\": {\n *         \"type\": \"Polygon\",\n *         \"coordinates\": [[\n *           [101.551437, 3.150114],\n *           [101.551437, 3.250208],\n *           [101.742324, 3.250208],\n *           [101.742324, 3.150114],\n *           [101.551437, 3.150114]\n *         ]]\n *       }\n *     }, {\n *       \"type\": \"Feature\",\n *       \"properties\": {},\n *       \"geometry\": {\n *         \"type\": \"Polygon\",\n *         \"coordinates\": [[\n *           [101.659927, 3.011612],\n *           [101.659927, 3.143944],\n *           [101.913986, 3.143944],\n *           [101.913986, 3.011612],\n *           [101.659927, 3.011612]\n *         ]]\n *       }\n *     }\n *   ]\n * };\n * var points = {\n *   \"type\": \"FeatureCollection\",\n *   \"features\": [\n *     {\n *       \"type\": \"Feature\",\n *       \"properties\": {\n *         \"population\": 200\n *       },\n *       \"geometry\": {\n *         \"type\": \"Point\",\n *         \"coordinates\": [101.56105, 3.213874]\n *       }\n *     }, {\n *       \"type\": \"Feature\",\n *       \"properties\": {\n *         \"population\": 600\n *       },\n *       \"geometry\": {\n *         \"type\": \"Point\",\n *         \"coordinates\": [101.709365, 3.211817]\n *       }\n *     }, {\n *       \"type\": \"Feature\",\n *       \"properties\": {\n *         \"population\": 100\n *       },\n *       \"geometry\": {\n *         \"type\": \"Point\",\n *         \"coordinates\": [101.645507, 3.169311]\n *       }\n *     }, {\n *       \"type\": \"Feature\",\n *       \"properties\": {\n *         \"population\": 200\n *       },\n *       \"geometry\": {\n *         \"type\": \"Point\",\n *         \"coordinates\": [101.708679, 3.071266]\n *       }\n *     }, {\n *       \"type\": \"Feature\",\n *       \"properties\": {\n *         \"population\": 300\n *       },\n *       \"geometry\": {\n *         \"type\": \"Point\",\n *         \"coordinates\": [101.826782, 3.081551]\n *       }\n *     }\n *   ]\n * };\n *\n * var aggregated = turf.max(\n *   polygons, points, 'population', 'max');\n *\n * var resultFeatures = points.features.concat(\n *   aggregated.features);\n * var result = {\n *   \"type\": \"FeatureCollection\",\n *   \"features\": resultFeatures\n * };\n *\n * //=result\n */\nmodule.exports = function(polyFC, ptFC, inField, outField){\n  polyFC.features.forEach(function(poly){\n    if(!poly.properties){\n      poly.properties = {};\n    }\n    var values = [];\n    ptFC.features.forEach(function(pt){\n      if (inside(pt, poly)) {\n        values.push(pt.properties[inField]);\n      }\n    });\n    poly.properties[outField] = max(values);\n  });\n\n  return polyFC;\n}\n\nfunction max(x) {\n    var value;\n    for (var i = 0; i < x.length; i++) {\n        // On the first iteration of this loop, max is\n        // undefined and is thus made the maximum element in the array\n        if (x[i] > value || value === undefined) value = x[i];\n    }\n    return value;\n}\n","var inside = require('turf-inside');\n\n/**\n * Calculates the median value of a field for a set of {@link Point} features within a set of {@link Polygon} features.\n *\n * @module turf/median\n * @category aggregation\n * @param {FeatureCollection} polygons a FeatureCollection of {@link Polygon} features\n * @param {FeatureCollection} points a FeatureCollection of {@link Point} features\n * @param {string} inField the field in input data to analyze\n * @param {string} outField the field in which to store results\n * @return {FeatureCollection} a FeatureCollection of {@link Polygon} features\n * with properties listed as `outField` values\n * @example\n * var polygons = {\n *   \"type\": \"FeatureCollection\",\n *   \"features\": [\n *     {\n *       \"type\": \"Feature\",\n *       \"properties\": {},\n *       \"geometry\": {\n *         \"type\": \"Polygon\",\n *         \"coordinates\": [[\n *           [18.400039, -33.970697],\n *           [18.400039, -33.818518],\n *           [18.665771, -33.818518],\n *           [18.665771, -33.970697],\n *           [18.400039, -33.970697]\n *         ]]\n *       }\n *     }, {\n *       \"type\": \"Feature\",\n *       \"properties\": {},\n *       \"geometry\": {\n *         \"type\": \"Polygon\",\n *         \"coordinates\": [[\n *           [18.538742, -34.050383],\n *           [18.538742, -33.98721],\n *           [18.703536, -33.98721],\n *           [18.703536, -34.050383],\n *           [18.538742, -34.050383]\n *         ]]\n *       }\n *     }\n *   ]\n * };\n * var points = {\n *   \"type\": \"FeatureCollection\",\n *   \"features\": [\n *     {\n *       \"type\": \"Feature\",\n *       \"properties\": {\n *         \"population\": 200\n *       },\n *       \"geometry\": {\n *         \"type\": \"Point\",\n *         \"coordinates\": [18.514022, -33.860152]\n *       }\n *     }, {\n *       \"type\": \"Feature\",\n *       \"properties\": {\n *         \"population\": 600\n *       },\n *       \"geometry\": {\n *         \"type\": \"Point\",\n *         \"coordinates\": [18.48999, -33.926269]\n *       }\n *     }, {\n *       \"type\": \"Feature\",\n *       \"properties\": {\n *         \"population\": 100\n *       },\n *       \"geometry\": {\n *         \"type\": \"Point\",\n *         \"coordinates\": [18.583374, -33.905755]\n *       }\n *     }, {\n *       \"type\": \"Feature\",\n *       \"properties\": {\n *         \"population\": 200\n *       },\n *       \"geometry\": {\n *         \"type\": \"Point\",\n *         \"coordinates\": [18.591613, -34.024778]\n *       }\n *     }, {\n *       \"type\": \"Feature\",\n *       \"properties\": {\n *         \"population\": 300\n *       },\n *       \"geometry\": {\n *         \"type\": \"Point\",\n *         \"coordinates\": [18.653411, -34.017949]\n *       }\n *     }\n *   ]\n * };\n *\n * var medians = turf.median(\n *  polygons, points, 'population', 'median');\n *\n * var resultFeatures = points.features.concat(\n *   medians.features);\n * var result = {\n *   \"type\": \"FeatureCollection\",\n *   \"features\": resultFeatures\n * };\n *\n * //=result\n */\nmodule.exports = function(polyFC, ptFC, inField, outField){\n  polyFC.features.forEach(function(poly){\n    if(!poly.properties){\n      poly.properties = {};\n    }\n    var values = [];\n    ptFC.features.forEach(function(pt){\n      if (inside(pt, poly)) {\n        values.push(pt.properties[inField]);\n      }\n    });\n    poly.properties[outField] = median(values);\n  });\n\n  return polyFC;\n};\n\nfunction median(x) {\n    // The median of an empty list is null\n    if (x.length === 0) return null;\n\n    // Sorting the array makes it easy to find the center, but\n    // use `.slice()` to ensure the original array `x` is not modified\n    var sorted = x.slice().sort(function (a, b) { return a - b; });\n\n    // If the length of the list is odd, it's the central number\n    if (sorted.length % 2 === 1) {\n        return sorted[(sorted.length - 1) / 2];\n    // Otherwise, the median is the average of the two numbers\n    // at the center of the list\n    } else {\n        var a = sorted[(sorted.length / 2) - 1];\n        var b = sorted[(sorted.length / 2)];\n        return (a + b) / 2;\n    }\n}\n","var clone = require('clone');\nvar union = require('turf-union');\n\n/**\n * Takes a {@link FeatureCollection} of {@link Polygon} features and returns a single merged\n * polygon feature. If the input Polygon features are not contiguous, this function returns a {@link MultiPolygon} feature.\n * @module turf/merge\n * @category transformation\n * @param {FeatureCollection} fc a FeatureCollection of {@link Polygon} features\n * @return {Feature} a {@link Polygon} or {@link MultiPolygon} feature\n * @example\n * var polygons = {\n *   \"type\": \"FeatureCollection\",\n *   \"features\": [\n *     {\n *       \"type\": \"Feature\",\n *       \"properties\": {\n *         \"fill\": \"#0f0\"\n *       },\n *       \"geometry\": {\n *         \"type\": \"Polygon\",\n *         \"coordinates\": [[\n *           [9.994812, 53.549487],\n *           [10.046997, 53.598209],\n *           [10.117721, 53.531737],\n *           [9.994812, 53.549487]\n *         ]]\n *       }\n *     }, {\n *       \"type\": \"Feature\",\n *       \"properties\": {\n *         \"fill\": \"#00f\"\n *       },\n *       \"geometry\": {\n *         \"type\": \"Polygon\",\n *         \"coordinates\": [[\n *           [10.000991, 53.50418],\n *           [10.03807, 53.562539],\n *           [9.926834, 53.551731],\n *           [10.000991, 53.50418]\n *         ]]\n *       }\n *     }\n *   ]\n * };\n *\n * var merged = turf.merge(polygons);\n *\n * //=polygons\n *\n * //=merged\n */\nmodule.exports = function(polygons, done){\n\n  var merged = clone(polygons.features[0]),\n    features = polygons.features;\n\n  for (var i = 0, len = features.length; i < len; i++) {\n    var poly = features[i];\n\n    if(poly.geometry){\n      merged = union(merged, poly);\n    }\n  }\n\n  return merged;\n};\n","'use strict';\n\nfunction objectToString(o) {\n  return Object.prototype.toString.call(o);\n}\n\n// shim for Node's 'util' package\n// DO NOT REMOVE THIS! It is required for compatibility with EnderJS (http://enderjs.com/).\nvar util = {\n  isArray: function (ar) {\n    return Array.isArray(ar) || (typeof ar === 'object' && objectToString(ar) === '[object Array]');\n  },\n  isDate: function (d) {\n    return typeof d === 'object' && objectToString(d) === '[object Date]';\n  },\n  isRegExp: function (re) {\n    return typeof re === 'object' && objectToString(re) === '[object RegExp]';\n  },\n  getRegExpFlags: function (re) {\n    var flags = '';\n    re.global && (flags += 'g');\n    re.ignoreCase && (flags += 'i');\n    re.multiline && (flags += 'm');\n    return flags;\n  }\n};\n\n\nif (typeof module === 'object')\n  module.exports = clone;\n\n/**\n * Clones (copies) an Object using deep copying.\n *\n * This function supports circular references by default, but if you are certain\n * there are no circular references in your object, you can save some CPU time\n * by calling clone(obj, false).\n *\n * Caution: if `circular` is false and `parent` contains circular references,\n * your program may enter an infinite loop and crash.\n *\n * @param `parent` - the object to be cloned\n * @param `circular` - set to true if the object to be cloned may contain\n *    circular references. (optional - true by default)\n * @param `depth` - set to a number if the object is only to be cloned to\n *    a particular depth. (optional - defaults to Infinity)\n * @param `prototype` - sets the prototype to be used when cloning an object.\n *    (optional - defaults to parent prototype).\n*/\n\nfunction clone(parent, circular, depth, prototype) {\n  // maintain two arrays for circular references, where corresponding parents\n  // and children have the same index\n  var allParents = [];\n  var allChildren = [];\n\n  var useBuffer = typeof Buffer != 'undefined';\n\n  if (typeof circular == 'undefined')\n    circular = true;\n\n  if (typeof depth == 'undefined')\n    depth = Infinity;\n\n  // recurse this function so we don't reset allParents and allChildren\n  function _clone(parent, depth) {\n    // cloning null always returns null\n    if (parent === null)\n      return null;\n\n    if (depth == 0)\n      return parent;\n\n    var child;\n    var proto;\n    if (typeof parent != 'object') {\n      return parent;\n    }\n\n    if (util.isArray(parent)) {\n      child = [];\n    } else if (util.isRegExp(parent)) {\n      child = new RegExp(parent.source, util.getRegExpFlags(parent));\n      if (parent.lastIndex) child.lastIndex = parent.lastIndex;\n    } else if (util.isDate(parent)) {\n      child = new Date(parent.getTime());\n    } else if (useBuffer && Buffer.isBuffer(parent)) {\n      child = new Buffer(parent.length);\n      parent.copy(child);\n      return child;\n    } else {\n      if (typeof prototype == 'undefined') {\n        proto = Object.getPrototypeOf(parent);\n        child = Object.create(proto);\n      }\n      else {\n        child = Object.create(prototype);\n        proto = prototype;\n      }\n    }\n\n    if (circular) {\n      var index = allParents.indexOf(parent);\n\n      if (index != -1) {\n        return allChildren[index];\n      }\n      allParents.push(parent);\n      allChildren.push(child);\n    }\n\n    for (var i in parent) {\n      var attrs;\n      if (proto) {\n        attrs = Object.getOwnPropertyDescriptor(proto, i);\n      }\n      \n      if (attrs && attrs.set == null) {\n        continue;\n      }\n      child[i] = _clone(parent[i], depth - 1);\n    }\n\n    return child;\n  }\n\n  return _clone(parent, depth);\n}\n\n/**\n * Simple flat clone using prototype, accepts only objects, usefull for property\n * override on FLAT configuration object (no nested props).\n *\n * USE WITH CAUTION! This may not behave as you wish if you do not know how this\n * works.\n */\nclone.clonePrototype = function(parent) {\n  if (parent === null)\n    return null;\n\n  var c = function () {};\n  c.prototype = parent;\n  return new c();\n};\n","// http://cs.selu.edu/~rbyrd/math/midpoint/\n// ((x1+x2)/2), ((y1+y2)/2)\nvar point = require('turf-point');\n\n/**\n * Takes two {@link Point} features and returns a Point midway between the two.\n *\n * @module turf/midpoint\n * @category measurement\n * @param {Point} pt1 first point\n * @param {Point} pt2 second point\n * @return {Point} a point between the two\n * @example\n * var pt1 = {\n *   \"type\": \"Feature\",\n *   \"properties\": {},\n *   \"geometry\": {\n *     \"type\": \"Point\",\n *     \"coordinates\": [144.834823, -37.771257]\n *   }\n * };\n * var pt2 = {\n *   \"type\": \"Feature\",\n *   \"properties\": {},\n *   \"geometry\": {\n *     \"type\": \"Point\",\n *     \"coordinates\": [145.14244, -37.830937]\n *   }\n * };\n *\n * var midpointed = turf.midpoint(pt1, pt2);\n * midpointed.properties['marker-color'] = '#f00';\n *\n *\n * var result = {\n *   \"type\": \"FeatureCollection\",\n *   \"features\": [pt1, pt2, midpointed]\n * };\n *\n * //=result\n */\nmodule.exports = function(point1, point2) {\n  if (point1 === null || point2 === null){\n    throw new Error('Less than two points passed.');\n  }\n\n  var x1 = point1.geometry.coordinates[0];\n  var x2 = point2.geometry.coordinates[0];\n  var y1 = point1.geometry.coordinates[1];\n  var y2 = point2.geometry.coordinates[1];\n\n  var x3 = x1 + x2;\n  var midX = x3/2;\n  var y3 = y1 + y2;\n  var midY = y3/2;\n\n  return point([midX, midY]);\n};\n","var inside = require('turf-inside');\n\n/**\n* Calculates the minimum value of a field for {@link Point} features within a set of {@link Polygon} features.\n*\n* @module turf/min\n* @category aggregation\n* @param {FeatureCollection} polygons a FeatureCollection of {@link Polygon} features\n* @param {FeatureCollection} points a FeatureCollection of {@link Point} features\n* @param {string} inField the field in input data to analyze\n* @param {string} outField the field in which to store results\n* @return {FeatureCollection} a FeatureCollection of {@link Polygon} features\n* with properties listed as `outField` values\n* @example\n* var polygons = {\n*   \"type\": \"FeatureCollection\",\n*   \"features\": [\n*     {\n*       \"type\": \"Feature\",\n*       \"properties\": {},\n*       \"geometry\": {\n*         \"type\": \"Polygon\",\n*         \"coordinates\": [[\n*           [72.809658, 18.961818],\n*           [72.809658, 18.974805],\n*           [72.827167, 18.974805],\n*           [72.827167, 18.961818],\n*           [72.809658, 18.961818]\n*         ]]\n*       }\n*     }, {\n*       \"type\": \"Feature\",\n*       \"properties\": {},\n*       \"geometry\": {\n*         \"type\": \"Polygon\",\n*         \"coordinates\": [[\n*           [72.820987, 18.947043],\n*           [72.820987, 18.95922],\n*           [72.841243, 18.95922],\n*           [72.841243, 18.947043],\n*           [72.820987, 18.947043]\n*         ]]\n*       }\n*     }\n*   ]\n* };\n* var points = {\n*   \"type\": \"FeatureCollection\",\n*   \"features\": [\n*     {\n*       \"type\": \"Feature\",\n*       \"properties\": {\n*         \"population\": 200\n*       },\n*       \"geometry\": {\n*         \"type\": \"Point\",\n*         \"coordinates\": [72.814464, 18.971396]\n*       }\n*     }, {\n*       \"type\": \"Feature\",\n*       \"properties\": {\n*         \"population\": 600\n*       },\n*       \"geometry\": {\n*         \"type\": \"Point\",\n*         \"coordinates\": [72.820043, 18.969772]\n*       }\n*     }, {\n*       \"type\": \"Feature\",\n*       \"properties\": {\n*         \"population\": 100\n*       },\n*       \"geometry\": {\n*         \"type\": \"Point\",\n*         \"coordinates\": [72.817296, 18.964253]\n*       }\n*     }, {\n*       \"type\": \"Feature\",\n*       \"properties\": {\n*         \"population\": 200\n*       },\n*       \"geometry\": {\n*         \"type\": \"Point\",\n*         \"coordinates\": [72.83575, 18.954837]\n*       }\n*     }, {\n*       \"type\": \"Feature\",\n*       \"properties\": {\n*         \"population\": 300\n*       },\n*       \"geometry\": {\n*         \"type\": \"Point\",\n*         \"coordinates\": [72.828197, 18.95094]\n*       }\n*     }\n*   ]\n* };\n*\n* var minimums = turf.min(\n*   polygons, points, 'population', 'min');\n*\n* var resultFeatures = points.features.concat(\n*   minimums.features);\n* var result = {\n*   \"type\": \"FeatureCollection\",\n*   \"features\": resultFeatures\n* };\n*\n* //=result\n*/\nmodule.exports = function(polyFC, ptFC, inField, outField){\n  polyFC.features.forEach(function(poly){\n    if(!poly.properties){\n      poly.properties = {};\n    }\n    var values = [];\n    ptFC.features.forEach(function(pt){\n      if (inside(pt, poly)) {\n        values.push(pt.properties[inField]);\n      }\n    });\n    poly.properties[outField] = min(values);\n  });\n\n  return polyFC;\n};\n\nfunction min(x) {\n    var value;\n    for (var i = 0; i < x.length; i++) {\n        // On the first iteration of this loop, min is\n        // undefined and is thus made the minimum element in the array\n        if (x[i] < value || value === undefined) value = x[i];\n    }\n    return value;\n}\n","var distance = require('turf-distance');\n\n/**\n * Takes a {@link Point} feature and a {@link FeatureCollection} of Point features and returns the Point feature from the FeatureCollection closest to the input point.\n *\n * @module turf/nearest\n * @category classification\n * @param {Point} point the reference point\n * @param {FeatureCollection} against a FeatureCollection of Point features\n * @return {Feature} the closest Point feature in `against` to `point`\n * @example\n * var point = {\n *   \"type\": \"Feature\",\n *   \"properties\": {\n *     \"marker-color\": \"#0f0\"\n *   },\n *   \"geometry\": {\n *     \"type\": \"Point\",\n *     \"coordinates\": [28.965797, 41.010086]\n *   }\n * };\n * var against = {\n *   \"type\": \"FeatureCollection\",\n *   \"features\": [\n *     {\n *       \"type\": \"Feature\",\n *       \"properties\": {},\n *       \"geometry\": {\n *         \"type\": \"Point\",\n *         \"coordinates\": [28.973865, 41.011122]\n *       }\n *     }, {\n *       \"type\": \"Feature\",\n *       \"properties\": {},\n *       \"geometry\": {\n *         \"type\": \"Point\",\n *         \"coordinates\": [28.948459, 41.024204]\n *       }\n *     }, {\n *       \"type\": \"Feature\",\n *       \"properties\": {},\n *       \"geometry\": {\n *         \"type\": \"Point\",\n *         \"coordinates\": [28.938674, 41.013324]\n *       }\n *     }\n *   ]\n * };\n *\n * var nearest = turf.nearest(point, against);\n * nearest.properties['marker-color'] = '#f00';\n *\n * var resultFeatures = against.features.concat(point);\n * var result = {\n *   \"type\": \"FeatureCollection\",\n *   \"features\": resultFeatures\n * };\n *\n * //=result\n */\nmodule.exports = function(targetPoint, points){\n  var nearestPoint;\n  var count = 0;\n  var dist = Infinity;\n  points.features.forEach(function(pt){\n    if(!nearestPoint){\n      nearestPoint = pt;\n      var dist = distance(targetPoint, pt, 'miles');\n      nearestPoint.properties.distance = dist;\n    }\n    else{\n      var dist = distance(targetPoint, pt, 'miles');\n      if(dist < nearestPoint.properties.distance){\n        nearestPoint = pt;\n        nearestPoint.properties.distance = dist;\n      }\n    }\n  });\n  delete nearestPoint.properties.distance;\n  return nearestPoint;\n}\n","/**\n * Takes a triangular plane as a {@link Polygon} feature\n * and a {@link Point} feature within that triangle and returns the z-value\n * at that point. The Polygon needs to have properties `a`, `b`, and `c`\n * that define the values at its three corners.\n *\n * @module turf/planepoint\n * @category interpolation\n * @param {Point} interpolatedPoint the Point for which a z-value will be calculated\n * @param {Polygon} triangle a Polygon feature with three vertices\n * @return {number} the z-value for `interpolatedPoint`\n * @example\n * var point = {\n *   \"type\": \"Feature\",\n *   \"properties\": {},\n *   \"geometry\": {\n *     \"type\": \"Point\",\n *     \"coordinates\": [-75.3221, 39.529]\n *   }\n * };\n * var point = turf.point([-75.3221, 39.529]);\n * // triangle is a polygon with \"a\", \"b\",\n * // and \"c\" values representing\n * // the values of the coordinates in order.\n * var triangle = {\n *   \"type\": \"Feature\",\n *   \"properties\": {\n *     \"a\": 11,\n *     \"b\": 122,\n *     \"c\": 44\n *   },\n *   \"geometry\": {\n *     \"type\": \"Polygon\",\n *     \"coordinates\": [[\n *       [-75.1221, 39.57],\n *       [-75.58, 39.18],\n *       [-75.97, 39.86],\n *       [-75.1221, 39.57]\n *     ]]\n *   }\n * };\n *\n * var features = {\n *   \"type\": \"FeatureCollection\",\n *   \"features\": [triangle, point]\n * };\n *\n * var zValue = turf.planepoint(point, triangle);\n *\n * //=features\n *\n * //=zValue\n */\nmodule.exports = function(point, triangle){\n  var x = point.geometry.coordinates[0],\n      y = point.geometry.coordinates[1],\n      x1 = triangle.geometry.coordinates[0][0][0],\n      y1 = triangle.geometry.coordinates[0][0][1],\n      z1 = triangle.properties.a,\n      x2 = triangle.geometry.coordinates[0][1][0],\n      y2 = triangle.geometry.coordinates[0][1][1],\n      z2 = triangle.properties.b,\n      x3 = triangle.geometry.coordinates[0][2][0],\n      y3 = triangle.geometry.coordinates[0][2][1],\n      z3 = triangle.properties.c;\n\n  var z = (z3 * (x-x1) * (y-y2) + z1 * (x-x2) * (y-y3) + z2 * (x-x3) * (y-y1) -\n      z2 * (x-x1) * (y-y3) - z3 * (x-x2) * (y-y1) - z1 * (x-x3) * (y-y2)) /\n      ((x-x1) * (y-y2) + (x-x2) * (y-y3) +(x-x3) * (y-y1) -\n       (x-x1) * (y-y3) - (x-x2) * (y-y1) - (x-x3) * (y-y2));\n\n  return z;\n};\n","var point = require('turf-point');\nvar featurecollection = require('turf-featurecollection');\nvar distance = require('turf-distance');\n/**\n * Takes a bounding box and a cell depth and returns a {@link FeatureCollection} of {@link Point} features in a grid.\n *\n * @module turf/point-grid\n * @category interpolation\n * @param {Array<number>} extent extent in [minX, minY, maxX, maxY] order\n * @param {Number} depth how many cells to output\n * @return {FeatureCollection} grid as FeatureCollection with {@link Point} features\n * @example\n * var extent = [-70.823364, -33.553984, -70.473175, -33.302986];\n * var depth = 10;\n *\n * var grid = turf.pointGrid(extent, depth);\n *\n * //=grid\n */\nmodule.exports = function (bbox, cell, units) {\n  var fc = featurecollection([]);\n  var xFraction = cell / (distance(point([bbox[0], bbox[1]]), point([bbox[2], bbox[1]]), units));\n  var cellWidth = xFraction * (bbox[2] - bbox[0]);\n  var yFraction = cell / (distance(point([bbox[0], bbox[1]]), point([bbox[0], bbox[3]]), units));\n  var cellHeight = yFraction * (bbox[3] - bbox[1]);\n\n  var currentX = bbox[0];\n  while (currentX <= bbox[2]) {\n    var currentY = bbox[1];\n    while (currentY <= bbox[3]) {\n      fc.features.push(point([currentX, currentY]));\n\n      currentY += cellHeight;\n    }\n    currentX += cellWidth;\n  }\n  \n  return fc;\n}","var distance = require('turf-distance');\nvar point = require('turf-point');\nvar linestring = require('turf-linestring');\nvar bearing = require('turf-bearing');\nvar destination = require('turf-destination');\n\n/**\n * Takes a Point and a LineString and calculates the closest Point on the LineString\n *\n * @module turf/point-on-line\n *\n * @param {LineString} Line to snap to\n * @param {Point} Point to snap from\n * @return {Point} Closest Point on the Line\n * @example\n * var line = {\n *   \"type\": \"Feature\",\n *   \"properties\": {},\n *   \"geometry\": {\n *     \"type\": \"LineString\",\n *     \"coordinates\": [\n *       [-77.031669, 38.878605],\n *       [-77.029609, 38.881946],\n *       [-77.020339, 38.884084],\n *       [-77.025661, 38.885821],\n *       [-77.021884, 38.889563],\n *       [-77.019824, 38.892368]\n *     ]\n *   }\n * };\n * var pt = {\n *   \"type\": \"Feature\",\n *   \"properties\": {},\n *   \"geometry\": {\n *     \"type\": \"Point\",\n *     \"coordinates\": [-77.037076, 38.884017]\n *   }\n * };\n * \n * var snapped = turf.pointOnLine(line, pt);\n * snapped.properties['marker-color'] = '#00f'\n *\n * var result = {\n *   \"type\": \"FeatureCollection\",\n *   \"features\": [line, pt, snapped]\n * };\n *\n * //=result\n */\n\nmodule.exports = function (line, pt) {  \n  var coords;\n  if(line.type === 'Feature') coords = line.geometry.coordinates;\n  else if(line.type === 'LineString') coords = line.geometry.coordinates;\n  else throw new Error('input must be a LineString Feature or Geometry');\n\n  return pointOnLine(pt, coords);\n}\n\nfunction pointOnLine (pt, coords) {\n  var units = 'miles'\n  var closestPt = point([Infinity, Infinity], {dist: Infinity});\n  for(var i = 0; i < coords.length - 1; i++) {\n    var start = point(coords[i])\n    var stop = point(coords[i+1])\n    //start\n    start.properties.dist = distance(pt, start, units);\n    //stop\n    stop.properties.dist = distance(pt, stop, units);\n    //perpendicular\n    var direction = bearing(start, stop)\n    var perpendicularPt = destination(pt, 1000 , direction + 90, units) // 1000 = gross\n    var intersect = lineIntersects(\n      pt.geometry.coordinates[0],\n      pt.geometry.coordinates[1],\n      perpendicularPt.geometry.coordinates[0],\n      perpendicularPt.geometry.coordinates[1],\n      start.geometry.coordinates[0],\n      start.geometry.coordinates[1],\n      stop.geometry.coordinates[0],\n      stop.geometry.coordinates[1]\n      );\n    if(!intersect) {\n      perpendicularPt = destination(pt, 1000 , direction - 90, units) // 1000 = gross\n      intersect = lineIntersects(\n        pt.geometry.coordinates[0],\n        pt.geometry.coordinates[1],\n        perpendicularPt.geometry.coordinates[0],\n        perpendicularPt.geometry.coordinates[1],\n        start.geometry.coordinates[0],\n        start.geometry.coordinates[1],\n        stop.geometry.coordinates[0],\n        stop.geometry.coordinates[1]\n        );\n    }\n    perpendicularPt.properties.dist = Infinity;\n    var intersectPt;\n    if(intersect) {\n      var intersectPt = point(intersect);\n      intersectPt.properties.dist = distance(pt, intersectPt, units);\n    }\n    \n    if(start.properties.dist < closestPt.properties.dist) {\n      closestPt = start;\n      closestPt.properties.index = i;\n    }\n    if(stop.properties.dist < closestPt.properties.dist) {\n     closestPt = stop;\n     closestPt.properties.index = i;\n    }\n    if(intersectPt && intersectPt.properties.dist < closestPt.properties.dist){ \n      closestPt = intersectPt;\n      closestPt.properties.index = i;\n    }\n  }\n  \n  return closestPt;\n}\n\n// modified from http://jsfiddle.net/justin_c_rounds/Gd2S2/light/\nfunction lineIntersects(line1StartX, line1StartY, line1EndX, line1EndY, line2StartX, line2StartY, line2EndX, line2EndY) {\n  // if the lines intersect, the result contains the x and y of the intersection (treating the lines as infinite) and booleans for whether line segment 1 or line segment 2 contain the point\n  var denominator, a, b, numerator1, numerator2, result = {\n    x: null,\n    y: null,\n    onLine1: false,\n    onLine2: false\n  };\n  denominator = ((line2EndY - line2StartY) * (line1EndX - line1StartX)) - ((line2EndX - line2StartX) * (line1EndY - line1StartY));\n  if (denominator == 0) {\n    if(result.x != null && result.y != null) {\n      return result;\n    } else {\n      return false;\n    }\n  }\n  a = line1StartY - line2StartY;\n  b = line1StartX - line2StartX;\n  numerator1 = ((line2EndX - line2StartX) * a) - ((line2EndY - line2StartY) * b);\n  numerator2 = ((line1EndX - line1StartX) * a) - ((line1EndY - line1StartY) * b);\n  a = numerator1 / denominator;\n  b = numerator2 / denominator;\n\n  // if we cast these lines infinitely in both directions, they intersect here:\n  result.x = line1StartX + (a * (line1EndX - line1StartX));\n  result.y = line1StartY + (a * (line1EndY - line1StartY));\n\n  // if line1 is a segment and line2 is infinite, they intersect if:\n  if (a > 0 && a < 1) {\n    result.onLine1 = true;\n  }\n  // if line2 is a segment and line1 is infinite, they intersect if:\n  if (b > 0 && b < 1) {\n    result.onLine2 = true;\n  }\n  // if line1 and line2 are segments, they intersect if both of the above are true\n  if(result.onLine1 && result.onLine2){\n    return [result.x, result.y];\n  }\n  else {\n    return false;\n  }\n}\n","var featureCollection = require('turf-featurecollection');\nvar centroid = require('turf-center');\nvar distance = require('turf-distance');\nvar inside = require('turf-inside');\nvar explode = require('turf-explode');\n\n/**\n * Finds a {@link Point} guaranteed to be on the surface of\n * {@link GeoJSON} object.\n *\n * * Given a {@link Polygon}, the point will be in the area of the polygon\n * * Given a {@link LineString}, the point will be along the string\n * * Given a {@link Point}, the point will the same as the input\n *\n * @module turf/point-on-surface\n * @category measurement\n * @param {GeoJSON} input any GeoJSON object\n * @returns {Feature} a point on the surface of `input`\n * @example\n * // create a random polygon\n * var polygon = turf.random('polygon');\n *\n * //=polygon\n *\n * var pointOnPolygon = turf.pointOnSurface(polygon);\n *\n* var resultFeatures = polygon.features.concat(pointOnPolygon);\n* var result = {\n*   \"type\": \"FeatureCollection\",\n*   \"features\": resultFeatures\n* };\n *\n * //=result\n */\nmodule.exports = function(fc) {\n  // normalize\n  if(fc.type != 'FeatureCollection') {\n    if(fc.type != 'Feature') {\n      fc = {\n        type: 'Feature',\n        geometry: fc,\n        properties: {}\n      };\n    }\n    fc = featureCollection([fc]);\n  }\n\n  //get centroid\n  var cent = centroid(fc);\n\n  // check to see if centroid is on surface\n  var onSurface = false;\n  var i = 0;\n  while(!onSurface && i < fc.features.length) {\n    var geom = fc.features[i].geometry;\n    if (geom.type === 'Point') {\n      if (cent.geometry.coordinates[0] === geom.coordinates[0] &&\n        cent.geometry.coordinates[1] === geom.coordinates[1]) {\n        onSurface = true;\n      }\n    } else if(geom.type === 'MultiPoint') {\n      var onMultiPoint = false;\n      var k = 0;\n      while(!onMultiPoint && k < geom.coordinates.length) {\n        if (cent.geometry.coordinates[0] === geom.coordinates[k][0] &&\n          cent.geometry.coordinates[1] === geom.coordinates[k][1]) {\n          onSurface = true;\n          onMultiPoint = true;\n        }\n        k++;\n      }\n    } else if(geom.type === 'LineString') {\n      var onLine = false;\n      var k = 0;\n      while(!onLine && k < geom.coordinates.length - 1) {\n        var x = cent.geometry.coordinates[0];\n        var y = cent.geometry.coordinates[1];\n        var x1 = geom.coordinates[k][0];\n        var y1 = geom.coordinates[k][1];\n        var x2 = geom.coordinates[k+1][0];\n        var y2 = geom.coordinates[k+1][1];\n        if(pointOnSegment(x, y, x1, y1, x2, y2)) {\n          onLine = true;\n          onSurface = true;\n        }\n        k++;\n      }\n    } else if(geom.type === 'MultiLineString') {\n      var onMultiLine = false;\n      var j = 0;\n      while(!onMultiLine && j < geom.coordinates.length) {\n        var onLine = false;\n        var k = 0;\n        var line = geom.coordinates[j];\n        while(!onLine && k < line.length - 1) {\n          var x = cent.geometry.coordinates[0];\n          var y = cent.geometry.coordinates[1];\n          var x1 = line[k][0];\n          var y1 = line[k][1];\n          var x2 = line[k+1][0];\n          var y2 = line[k+1][1];\n          if(pointOnSegment(x, y, x1, y1, x2, y2)) {\n            onLine = true;\n            onSurface = true;\n          }\n          k++;\n        }\n        j++;\n      }\n    } else if(geom.type === 'Polygon' || geom.type === 'MultiPolygon') {\n      var f = {\n        type: 'Feature',\n        geometry: geom,\n        properties: {}\n      };\n      if(inside(cent, f)) {\n        onSurface = true;\n      }\n    }\n    i++;\n  }\n  if(onSurface) {\n    return cent;\n  } else {\n    var vertices = featureCollection([]);\n    for(var i = 0; i < fc.features.length; i++) {\n      vertices.features = vertices.features.concat(explode(fc.features[i]).features);\n    }\n    var closestVertex;\n    var closestDistance = Infinity;\n    for(var i = 0; i < vertices.features.length; i++) {\n      var dist = distance(cent, vertices.features[i], 'miles');\n      if(dist < closestDistance) {\n        closestDistance = dist;\n        closestVertex = vertices.features[i];\n      }\n    }\n    return closestVertex;\n  }\n};\n\nfunction pointOnSegment (x, y, x1, y1, x2, y2) {\n  var ab = Math.sqrt((x2-x1)*(x2-x1)+(y2-y1)*(y2-y1));\n  var ap = Math.sqrt((x-x1)*(x-x1)+(y-y1)*(y-y1));\n  var pb = Math.sqrt((x2-x)*(x2-x)+(y2-y)*(y2-y));\n  if(ab === ap + pb) {\n    return true;\n  }\n}\n","/**\n * Takes coordinates and properties (optional) and returns a new {@link Point} feature.\n *\n * @module turf/point\n * @category helper\n * @param {number} longitude position west to east in decimal degrees\n * @param {number} latitude position south to north in decimal degrees\n * @param {Object} properties an Object that is used as the {@link Feature}'s\n * properties\n * @return {Point} a Point feature\n * @example\n * var pt1 = turf.point([-75.343, 39.984]);\n *\n * //=pt1\n */\nvar isArray = Array.isArray || function(arg) {\n  return Object.prototype.toString.call(arg) === '[object Array]';\n};\nmodule.exports = function(coordinates, properties) {\n  if (!isArray(coordinates)) throw new Error('Coordinates must be an array');\n  if (coordinates.length < 2) throw new Error('Coordinates must be at least 2 numbers long');\n  return {\n    type: \"Feature\",\n    geometry: {\n      type: \"Point\",\n      coordinates: coordinates\n    },\n    properties: properties || {}\n  };\n};\n","/**\n * Takes an array of LinearRings and optionally an {@link Object} with properties and returns a GeoJSON {@link Polygon} feature.\n *\n * @module turf/polygon\n * @category helper\n * @param {Array<Array<Number>>} rings an array of LinearRings\n * @param {Object} properties an optional properties object\n * @return {Polygon} a Polygon feature\n * @throws {Error} throw an error if a LinearRing of the polygon has too few positions\n * or if a LinearRing of the Polygon does not have matching Positions at the\n * beginning & end.\n * @example\n * var polygon = turf.polygon([[\n *  [-2.275543, 53.464547],\n *  [-2.275543, 53.489271],\n *  [-2.215118, 53.489271],\n *  [-2.215118, 53.464547],\n *  [-2.275543, 53.464547]\n * ]], { name: 'poly1', population: 400});\n *\n * //=polygon\n */\nmodule.exports = function(coordinates, properties){\n\n  if (coordinates === null) throw new Error('No coordinates passed');\n\n  for (var i = 0; i < coordinates.length; i++) {\n    var ring = coordinates[i];\n    for (var j = 0; j < ring[ring.length - 1].length; j++) {\n      if (ring.length < 4) {\n        throw new Error('Each LinearRing of a Polygon must have 4 or more Positions.');\n      }\n      if (ring[ring.length - 1][j] !== ring[0][j]) {\n        throw new Error('First and last Position are not equivalent.');\n      }\n    }\n  }\n\n  var polygon = {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": coordinates\n    },\n    \"properties\": properties\n  };\n\n  if (!polygon.properties) {\n    polygon.properties = {};\n  }\n\n  return polygon;\n};\n","var ss = require('simple-statistics');\n\n/**\n* Takes a {@link FeatureCollection}, a property name, and a set of percentiles and returns a quantile array.\n* @module turf/quantile\n* @category classification\n* @param {FeatureCollection} input a FeatureCollection of any type\n* @param {String} field the property in `input` from which to retrieve quantile values\n* @param {Array<number>} percentiles an Array of percentiles on which to calculate quantile values\n* @return {Array<number>} an array of the break values\n* @example\n* var points = {\n*   \"type\": \"FeatureCollection\",\n*   \"features\": [\n*     {\n*       \"type\": \"Feature\",\n*       \"properties\": {\n*         \"population\": 5\n*       },\n*       \"geometry\": {\n*         \"type\": \"Point\",\n*         \"coordinates\": [5, 5]\n*       }\n*     }, {\n*       \"type\": \"Feature\",\n*       \"properties\": {\n*         \"population\": 40\n*       },\n*       \"geometry\": {\n*         \"type\": \"Point\",\n*         \"coordinates\": [1, 3]\n*       }\n*     }, {\n*       \"type\": \"Feature\",\n*       \"properties\": {\n*         \"population\": 80\n*       },\n*       \"geometry\": {\n*         \"type\": \"Point\",\n*         \"coordinates\": [14, 2]\n*       }\n*     }, {\n*       \"type\": \"Feature\",\n*       \"properties\": {\n*         \"population\": 90\n*       },\n*       \"geometry\": {\n*         \"type\": \"Point\",\n*         \"coordinates\": [13, 1]\n*       }\n*     }, {\n*       \"type\": \"Feature\",\n*       \"properties\": {\n*         \"population\": 100\n*       },\n*       \"geometry\": {\n*         \"type\": \"Point\",\n*         \"coordinates\": [19, 7]\n*       }\n*     }\n*   ]\n* };\n*\n* var breaks = turf.quantile(\n*   points, 'population', [25, 50, 75, 99]);\n*\n* //=breaks\n*/\nmodule.exports = function(fc, field, percentiles){\n  var vals = [];\n  var quantiles = [];\n\n  fc.features.forEach(function(feature){\n    vals.push(feature.properties[field]);\n  });\n  percentiles.forEach(function(percentile){\n    quantiles.push(ss.quantile(vals, percentile * 0.01));\n  });\n  return quantiles;\n};\n","var random = require('geojson-random');\n\n/**\n * Generates random {@link GeoJSON} data, including {@link Point|Points} and {@link Polygon|Polygons}, for testing\n * and experimentation.\n *\n * @module turf/random\n * @category data\n * @param {String} [type='point'] type of features desired: 'points' or 'polygons'\n * @param {Number} [count=1] how many geometries should be generated.\n * @param {Object} options options relevant to the feature desired. Can include:\n * @param {Array<number>} options.bbox a bounding box inside of which geometries\n * are placed. In the case of {@link Point} features, they are guaranteed to be within this bounds,\n * while {@link Polygon} features have their centroid within the bounds.\n * @param {Number} [options.num_vertices=10] options.vertices the number of vertices added\n * to polygon features.\n * @param {Number} [options.max_radial_length=10] the total number of decimal\n * degrees longitude or latitude that a polygon can extent outwards to\n * from its center.\n * @return {FeatureCollection} generated random features\n * @example\n * var points = turf.random('points', 100, {\n *   bbox: [-70, 40, -60, 60]\n * });\n *\n * //=points\n *\n * var polygons = turf.random('polygons', 4, {\n *   bbox: [-70, 40, -60, 60]\n * });\n *\n * //=polygons\n */\nmodule.exports = function(type, count, options) {\n    options = options || {};\n    count = count || 1;\n    switch (type) {\n        case 'point':\n        case 'points':\n        case undefined:\n            return random.point(count, options.bbox);\n        case 'polygon':\n        case 'polygons':\n            return random.polygon(\n                count,\n                options.num_vertices,\n                options.max_radial_length,\n                options.bbox);\n        default:\n            throw new Error('Unknown type given: valid options are points and polygons');\n    }\n};\n","module.exports = function() {\n    throw new Error('call .point() or .polygon() instead');\n};\n\nfunction position(bbox) {\n    if (bbox) return coordInBBBOX(bbox);\n    else return [lon(), lat()];\n}\n\nmodule.exports.position = position;\n\nmodule.exports.point = function(count, bbox) {\n    var features = [];\n    for (i = 0; i < count; i++) {\n        features.push(feature(bbox ? point(position(bbox)) : point()));\n    }\n    return collection(features);\n};\n\nmodule.exports.polygon = function(count, num_vertices, max_radial_length, bbox) {\n    if (typeof num_vertices !== 'number') num_vertices = 10;\n    if (typeof max_radial_length !== 'number') max_radial_length = 10;\n    var features = [];\n    for (i = 0; i < count; i++) {\n        var vertices = [],\n            circle_offsets = Array.apply(null,\n                new Array(num_vertices + 1)).map(Math.random);\n\n        circle_offsets.forEach(sumOffsets);\n        circle_offsets.forEach(scaleOffsets);\n        vertices[vertices.length - 1] = vertices[0]; // close the ring\n\n        // center the polygon around something\n        vertices = vertices.map(vertexToCoordinate(position(bbox)));\n        features.push(feature(polygon([vertices])));\n    }\n\n    function sumOffsets(cur, index, arr) {\n        arr[index] = (index > 0) ? cur + arr[index - 1] : cur;\n    }\n\n    function scaleOffsets(cur, index) {\n        cur = cur * 2 * Math.PI / circle_offsets[circle_offsets.length - 1];\n        var radial_scaler = Math.random();\n        vertices.push([\n            radial_scaler * max_radial_length * Math.sin(cur),\n            radial_scaler * max_radial_length * Math.cos(cur)\n        ]);\n    }\n\n    return collection(features);\n};\n\n\nfunction vertexToCoordinate(hub) {\n    return function(cur, index) { return [cur[0] + hub[0], cur[1] + hub[1]]; };\n}\n\nfunction rnd() { return Math.random() - 0.5; }\nfunction lon() { return rnd() * 360; }\nfunction lat() { return rnd() * 180; }\n\nfunction point(coordinates) {\n    return {\n        type: 'Point',\n        coordinates: coordinates || [lon(), lat()]\n    };\n}\n\nfunction coordInBBBOX(bbox) {\n    return [\n        (Math.random() * (bbox[2] - bbox[0])) + bbox[0],\n        (Math.random() * (bbox[3] - bbox[1])) + bbox[1]];\n}\n\nfunction pointInBBBOX() {\n    return {\n        type: 'Point',\n        coordinates: [lon(), lat()]\n    };\n}\n\nfunction polygon(coordinates) {\n    return {\n        type: 'Polygon',\n        coordinates: coordinates\n    };\n}\n\nfunction feature(geom) {\n    return {\n        type: 'Feature',\n        geometry: geom,\n        properties: {}\n    };\n}\n\nfunction collection(f) {\n    return {\n        type: 'FeatureCollection',\n        features: f\n    };\n}\n","var featurecollection = require('turf-featurecollection');\nvar reclass = require('./index.js');\n\n/**\n * Takes a {@link FeatureCollection}, an input field, an output field, and\n * an array of translations and outputs an identical FeatureCollection with\n * the output field property populated.\n* @module turf/reclass\n* @category classification\n* @param {FeatureCollection} input a FeatureCollection of any type\n* @param {string} inField the field to translate\n* @param {string} outField the field in which to store translated results\n* @param {Array<number>} translations an array of translations\n* @return {FeatureCollection} a FeatureCollection with identical geometries to `input` but with `outField` populated.\n* @example\n* var points = {\n*   \"type\": \"FeatureCollection\",\n*   \"features\": [\n*     {\n*       \"type\": \"Feature\",\n*       \"properties\": {\n*         \"population\": 200\n*       },\n*       \"geometry\": {\n*         \"type\": \"Point\",\n*         \"coordinates\": [13.170547, 32.888669]\n*       }\n*     }, {\n*       \"type\": \"Feature\",\n*       \"properties\": {\n*         \"population\": 600\n*       },\n*       \"geometry\": {\n*         \"type\": \"Point\",\n*         \"coordinates\": [13.182048, 32.889533]\n*       }\n*     }, {\n*       \"type\": \"Feature\",\n*       \"properties\": {\n*         \"population\": 100\n*       },\n*       \"geometry\": {\n*         \"type\": \"Point\",\n*         \"coordinates\": [13.17398, 32.882182]\n*       }\n*     }, {\n*       \"type\": \"Feature\",\n*       \"properties\": {\n*         \"population\": 200\n*       },\n*       \"geometry\": {\n*         \"type\": \"Point\",\n*         \"coordinates\": [13.174324, 32.895011]\n*       }\n*     }, {\n*       \"type\": \"Feature\",\n*       \"properties\": {\n*         \"population\": 300\n*       },\n*       \"geometry\": {\n*         \"type\": \"Point\",\n*         \"coordinates\": [13.185825, 32.884344]\n*       }\n*     }\n*   ]\n* };\n* // 0 to 200 will map to \"small\", 200 to 400 will map to \"medium\", 400 to 600 will map to \"large\"\n* var translations = [\n*   [0, 200, \"small\"],\n*   [200, 400, \"medium\"],\n*   [400, 600, \"large\"]\n* ];\n*\n* var reclassed = turf.reclass(\n*   points, 'population', 'size', translations);\n*\n* //=reclassed\n*\n*/\nmodule.exports = function(fc, inField, outField, translations, done){\n  var reclassed = featurecollection([]);\n\n  fc.features.forEach(function(feature){\n    var reclassedFeature;\n    var found = false;\n    for(var i = 0; i < translations.length; i++){\n      if(feature.properties[inField] >= translations[i][0] && feature.properties[inField] <= translations[i][1]) {\n        feature.properties[outField] = translations[i][2];\n      }\n    }\n    reclassed.features.push(feature);\n  });\n\n  return reclassed;\n};\n","var featureCollection = require('turf-featurecollection');\n\n/**\n * Takes a {@link FeatureCollection} of any type, a property, and a value and\n * returns a FeatureCollection with features matching that\n * property-value pair removed.\n *\n * @module turf/remove\n * @category data\n * @param {FeatureCollection} features a FeatureCollection of any type\n * @param {String} property the property to filter\n * @param {String} value the value to filter\n * @return {FeatureCollection} the resulting FeatureCollection without features that match the property-value pair\n * @example\n * var points = {\n *   \"type\": \"FeatureCollection\",\n *   \"features\": [\n *     {\n *       \"type\": \"Feature\",\n *       \"properties\": {\n *         'marker-color': '#00f'\n *       },\n *       \"geometry\": {\n *         \"type\": \"Point\",\n *         \"coordinates\": [-0.235004, 5.551918]\n *       }\n *     }, {\n *       \"type\": \"Feature\",\n *       \"properties\": {\n *         'marker-color': '#f00'\n *       },\n *       \"geometry\": {\n *         \"type\": \"Point\",\n *         \"coordinates\": [-0.209598, 5.56439]\n *       }\n *     }, {\n *       \"type\": \"Feature\",\n *       \"properties\": {\n *         'marker-color': '#00f'\n *       },\n *       \"geometry\": {\n *         \"type\": \"Point\",\n *         \"coordinates\": [-0.197753, 5.556018]\n *       }\n *     }, {\n *       \"type\": \"Feature\",\n *       \"properties\": {\n *         'marker-color': '#000'\n *       },\n *       \"geometry\": {\n *         \"type\": \"Point\",\n *         \"coordinates\": [-0.217323, 5.549526]\n *       }\n *     }, {\n *       \"type\": \"Feature\",\n *       \"properties\": {\n *         'marker-color': '#0f0'\n *       },\n *       \"geometry\": {\n *         \"type\": \"Point\",\n *         \"coordinates\": [-0.211315, 5.543887]\n *       }\n *     }, {\n *       \"type\": \"Feature\",\n *       \"properties\": {\n *         'marker-color': '#00f'\n *       },\n *       \"geometry\": {\n *         \"type\": \"Point\",\n *         \"coordinates\": [-0.202217, 5.547134]\n *       }\n *     }, {\n *       \"type\": \"Feature\",\n *       \"properties\": {\n *         'marker-color': '#0f0'\n *       },\n *       \"geometry\": {\n *         \"type\": \"Point\",\n *         \"coordinates\": [-0.231227, 5.56644]\n *       }\n *     }\n *   ]\n * };\n *\n * //=points\n *\n * var filtered = turf.remove(points, 'marker-color', '#00f');\n *\n * //=filtered\n*/\nmodule.exports = function(collection, key, val) {\n  var newFC = featureCollection([]);\n  for(var i = 0; i < collection.features.length; i++) {\n    if(collection.features[i].properties[key] != val) {\n      newFC.features.push(collection.features[i]);\n    }\n  }\n  return newFC;\n};\n","// http://stackoverflow.com/questions/11935175/sampling-a-random-subset-from-an-array\nvar featureCollection = require('turf-featurecollection');\n\n/**\n * Takes a {@link FeatureCollection} and returns a FeatureCollection with given number of {@link Feature|features} at random.\n *\n * @module turf/sample\n * @category data\n * @param {FeatureCollection} features a FeatureCollection of any type\n * @param {number} n number of features to select\n * @return {FeatureCollection} a FeatureCollection with `n` features\n * @example\n * var points = turf.random('points', 1000);\n *\n * //=points\n *\n * var sample = turf.sample(points, 10);\n *\n * //=sample\n */\nmodule.exports = function(fc, num){\n  var outFC = featureCollection(getRandomSubarray(fc.features, num));\n  return outFC;\n};\n\nfunction getRandomSubarray(arr, size) {\n  var shuffled = arr.slice(0), i = arr.length, min = i - size, temp, index;\n  while (i-- > min) {\n      index = Math.floor((i + 1) * Math.random());\n      temp = shuffled[index];\n      shuffled[index] = shuffled[i];\n      shuffled[i] = temp;\n  }\n  return shuffled.slice(min);\n}\n","var simplify = require('simplify-js');\n\n/**\n * Takes a {@link LineString} or {@link Polygon} feature and returns a simplified version. Internally uses [simplify-js](http://mourner.github.io/simplify-js/) to perform simplification.\n *\n * @module turf/simplify\n * @category transformation\n * @param {Feature} feature a {@link LineString} or {@link Polygon} feature to be simplified\n * @param {number} tolerance simplification tolerance\n * @param {boolean} highQuality whether or not to spend more time to create\n * a higher-quality simplification with a different algorithm\n * @return {Feature} a simplified feature\n * @example\n  * var feature = {\n *   \"type\": \"Feature\",\n *   \"properties\": {},\n *   \"geometry\": {\n *     \"type\": \"Polygon\",\n *     \"coordinates\": [[\n *       [-70.603637, -33.399918],\n *       [-70.614624, -33.395332],\n *       [-70.639343, -33.392466],\n *       [-70.659942, -33.394759],\n *       [-70.683975, -33.404504],\n *       [-70.697021, -33.419406],\n *       [-70.701141, -33.434306],\n *       [-70.700454, -33.446339],\n *       [-70.694274, -33.458369],\n *       [-70.682601, -33.465816],\n *       [-70.668869, -33.472117],\n *       [-70.646209, -33.473835],\n *       [-70.624923, -33.472117],\n *       [-70.609817, -33.468107],\n *       [-70.595397, -33.458369],\n *       [-70.587158, -33.442901],\n *       [-70.587158, -33.426283],\n *       [-70.590591, -33.414248],\n *       [-70.594711, -33.406224],\n *       [-70.603637, -33.399918]\n *     ]]\n *   }\n * };\n\n * var tolerance = 0.01;\n *\n * var simplified = turf.simplify(\n *  feature, tolerance, false);\n *\n * //=feature\n *\n * //=simplified\n */\nmodule.exports = function(feature, tolerance, highQuality){\n  if(feature.geometry.type === 'LineString') {\n    var line = {\n      type: 'LineString',\n      coordinates: []\n    };\n    var pts = feature.geometry.coordinates.map(function(coord) {\n      return {x: coord[0], y: coord[1]};\n    });\n    line.coordinates = simplify(pts, tolerance, highQuality).map(function(coords){\n      return [coords.x, coords.y];\n    });\n    \n    return simpleFeature(line, feature.properties);\n  } else if(feature.geometry.type === 'Polygon') {\n    var poly = {\n      type: 'Polygon',\n      coordinates: []\n    };\n    feature.geometry.coordinates.forEach(function(ring){\n      var pts = ring.map(function(coord) {\n        return {x: coord[0], y: coord[1]};\n      });\n      var simpleRing = simplify(pts, tolerance, highQuality).map(function(coords){\n        return [coords.x, coords.y];\n      });\n      poly.coordinates.push(simpleRing);\n    });\n    return simpleFeature(poly, feature.properties)\n  }\n}\n\nfunction simpleFeature (geom, properties) {\n  return {\n    type: 'Feature',\n    geometry: geom,\n    properties: properties\n  };\n}\n","/*\n (c) 2013, Vladimir Agafonkin\n Simplify.js, a high-performance JS polyline simplification library\n mourner.github.io/simplify-js\n*/\n\n(function () { 'use strict';\n\n// to suit your point format, run search/replace for '.x' and '.y';\n// for 3D version, see 3d branch (configurability would draw significant performance overhead)\n\n// square distance between 2 points\nfunction getSqDist(p1, p2) {\n\n    var dx = p1.x - p2.x,\n        dy = p1.y - p2.y;\n\n    return dx * dx + dy * dy;\n}\n\n// square distance from a point to a segment\nfunction getSqSegDist(p, p1, p2) {\n\n    var x = p1.x,\n        y = p1.y,\n        dx = p2.x - x,\n        dy = p2.y - y;\n\n    if (dx !== 0 || dy !== 0) {\n\n        var t = ((p.x - x) * dx + (p.y - y) * dy) / (dx * dx + dy * dy);\n\n        if (t > 1) {\n            x = p2.x;\n            y = p2.y;\n\n        } else if (t > 0) {\n            x += dx * t;\n            y += dy * t;\n        }\n    }\n\n    dx = p.x - x;\n    dy = p.y - y;\n\n    return dx * dx + dy * dy;\n}\n// rest of the code doesn't care about point format\n\n// basic distance-based simplification\nfunction simplifyRadialDist(points, sqTolerance) {\n\n    var prevPoint = points[0],\n        newPoints = [prevPoint],\n        point;\n\n    for (var i = 1, len = points.length; i < len; i++) {\n        point = points[i];\n\n        if (getSqDist(point, prevPoint) > sqTolerance) {\n            newPoints.push(point);\n            prevPoint = point;\n        }\n    }\n\n    if (prevPoint !== point) newPoints.push(point);\n\n    return newPoints;\n}\n\n// simplification using optimized Douglas-Peucker algorithm with recursion elimination\nfunction simplifyDouglasPeucker(points, sqTolerance) {\n\n    var len = points.length,\n        MarkerArray = typeof Uint8Array !== 'undefined' ? Uint8Array : Array,\n        markers = new MarkerArray(len),\n        first = 0,\n        last = len - 1,\n        stack = [],\n        newPoints = [],\n        i, maxSqDist, sqDist, index;\n\n    markers[first] = markers[last] = 1;\n\n    while (last) {\n\n        maxSqDist = 0;\n\n        for (i = first + 1; i < last; i++) {\n            sqDist = getSqSegDist(points[i], points[first], points[last]);\n\n            if (sqDist > maxSqDist) {\n                index = i;\n                maxSqDist = sqDist;\n            }\n        }\n\n        if (maxSqDist > sqTolerance) {\n            markers[index] = 1;\n            stack.push(first, index, index, last);\n        }\n\n        last = stack.pop();\n        first = stack.pop();\n    }\n\n    for (i = 0; i < len; i++) {\n        if (markers[i]) newPoints.push(points[i]);\n    }\n\n    return newPoints;\n}\n\n// both algorithms combined for awesome performance\nfunction simplify(points, tolerance, highestQuality) {\n\n    var sqTolerance = tolerance !== undefined ? tolerance * tolerance : 1;\n\n    points = highestQuality ? points : simplifyRadialDist(points, sqTolerance);\n    points = simplifyDouglasPeucker(points, sqTolerance);\n\n    return points;\n}\n\n// export as AMD module / Node module / browser or worker variable\nif (typeof define === 'function' && define.amd) define(function() { return simplify; });\nelse if (typeof module !== 'undefined') module.exports = simplify;\nelse if (typeof self !== 'undefined') self.simplify = simplify;\nelse window.simplify = simplify;\n\n})();\n","/**\n * Takes a bounding box and returns a new bounding box with a size expanded or contracted\n * by a factor of X.\n *\n * @module turf/size\n * @category measurement\n * @param {Array<number>} bbox a bounding box\n * @param {number} factor the ratio of the new bbox to the input bbox\n * @return {Array<number>} the resized bbox\n * @example\n * var bbox = [0, 0, 10, 10]\n *\n * var resized = turf.size(bbox, 2);\n *\n * var features = {\n *   \"type\": \"FeatureCollection\",\n *   \"features\": [\n *     turf.bboxPolygon(bbox),\n *     turf.bboxPolygon(resized)\n *   ]\n * };\n *\n * //=features\n */\nmodule.exports = function(bbox, factor){\n  var currentXDistance = (bbox[2] - bbox[0]);\n  var currentYDistance = (bbox[3] - bbox[1]);\n  var newXDistance = currentXDistance * factor;\n  var newYDistance = currentYDistance * factor;\n  var xChange = newXDistance - currentXDistance;\n  var yChange = newYDistance - currentYDistance;\n\n  var lowX = bbox[0] - (xChange / 2);\n  var lowY = bbox[1] - (yChange / 2);\n  var highX = (xChange / 2) + bbox[2];\n  var highY = (yChange / 2) + bbox[3];\n\n  var sized = [lowX, lowY, highX, highY];\n  return sized;\n}\n","var featurecollection = require('turf-featurecollection');\nvar point = require('turf-point');\nvar polygon = require('turf-polygon');\nvar distance = require('turf-distance');\n\n/**\n * Takes a bounding box and a cell depth and returns a {@link FeatureCollection} of {@link Polygon} features in a grid.\n *\n * @module turf/square-grid\n * @category interpolation\n * @param {Array<number>} extent extent in [minX, minY, maxX, maxY] order\n * @param {Number} cellWidth width of each cell\n * @param {String} units units to use for cellWidth\n * @return {FeatureCollection} grid as FeatureCollection with {@link Polygon} features\n * @example\n * var extent = [-77.3876953125,38.71980474264239,-76.9482421875,39.027718840211605];\n * var cellWidth = 10;\n * var units = 'miles';\n *\n * var squareGrid = turf.squareGrid(extent, cellWidth, units);\n *\n * //=squareGrid\n */\nmodule.exports = function (bbox, cell, units) {\n  var fc = featurecollection([]);\n  var xFraction = cell / (distance(point([bbox[0], bbox[1]]), point([bbox[2], bbox[1]]), units));\n  var cellWidth = xFraction * (bbox[2] - bbox[0]);\n  var yFraction = cell / (distance(point([bbox[0], bbox[1]]), point([bbox[0], bbox[3]]), units));\n  var cellHeight = yFraction * (bbox[3] - bbox[1]);\n\n  var currentX = bbox[0];\n  while (currentX <= bbox[2]) {\n    var currentY = bbox[1];\n    while (currentY <= bbox[3]) {\n      var cellPoly = polygon([[\n          [currentX, currentY],\n          [currentX, currentY+cellHeight],\n          [currentX+cellWidth, currentY+cellHeight],\n          [currentX+cellWidth, currentY],\n          [currentX, currentY]\n        ]]);\n      fc.features.push(cellPoly);\n\n      currentY += cellHeight;\n    }\n    currentX += cellWidth;\n  }\n  \n  return fc;\n}\n","var midpoint = require('turf-midpoint');\nvar point = require('turf-point');\nvar distance = require('turf-distance');\n\n/**\n * Takes a bounding box and calculates the minimum square bounding box that would contain the input.\n *\n * @module turf/square\n * @category measurement\n * @param {Array<number>} bbox a bounding box\n * @return {Array<number>} a square surrounding `bbox`\n * @example\n * var bbox = [-20,-20,-15,0];\n *\n * var squared = turf.square(bbox);\n *\n * var features = {\n *   \"type\": \"FeatureCollection\",\n *   \"features\": [\n *     turf.bboxPolygon(bbox),\n *     turf.bboxPolygon(squared)\n *   ]\n * };\n *\n * //=features\n */\nmodule.exports = function(bbox){\n  var squareBbox = [0,0,0,0];\n  var lowLeft = point([bbox[0], bbox[1]]);\n  var topLeft = point([bbox[0], bbox[3]]);\n  var topRight = point([bbox[2], bbox[3]]);\n  var lowRight = point([bbox[2], bbox[1]]);\n\n  var horizontalDistance = distance(lowLeft, lowRight, 'miles');\n  var verticalDistance = distance(lowLeft, topLeft, 'miles');\n  if(horizontalDistance >= verticalDistance){\n    squareBbox[0] = bbox[0];\n    squareBbox[2] = bbox[2];\n    var verticalMidpoint = midpoint(lowLeft, topLeft);\n    squareBbox[1] = verticalMidpoint.geometry.coordinates[1] - ((bbox[2] - bbox[0]) / 2);\n    squareBbox[3] = verticalMidpoint.geometry.coordinates[1] + ((bbox[2] - bbox[0]) / 2);\n    return squareBbox;\n  }\n  else {\n    squareBbox[1] = bbox[1];\n    squareBbox[3] = bbox[3];\n    var horzontalMidpoint = midpoint(lowLeft, lowRight);\n    squareBbox[0] = horzontalMidpoint.geometry.coordinates[0] - ((bbox[3] - bbox[1]) / 2);\n    squareBbox[2] = horzontalMidpoint.geometry.coordinates[0] + ((bbox[3] - bbox[1]) / 2);\n    return squareBbox;\n  }\n}\n\n","var inside = require('turf-inside');\n\n/**\n * Calculates the sum of a field for {@link Point} features within a set of {@link Polygon} features.\n *\n * @module turf/sum\n * @category aggregation\n * @param {FeatureCollection} polygons a FeatureCollection of {@link Polygon} features\n * @param {FeatureCollection} points a FeatureCollection of {@link Point} features\n * @param {String} inField the field in input data to analyze\n * @param {String} outField the field in which to store results\n * @return {FeatureCollection} a FeatureCollection of {@link Polygon} features\n * with properties listed as `outField`\n * @example\n * var polygons = {\n *   \"type\": \"FeatureCollection\",\n *   \"features\": [\n *     {\n *       \"type\": \"Feature\",\n *       \"properties\": {},\n *       \"geometry\": {\n *         \"type\": \"Polygon\",\n *         \"coordinates\": [[\n *           [-87.990188, 43.026486],\n *           [-87.990188, 43.062115],\n *           [-87.913284, 43.062115],\n *           [-87.913284, 43.026486],\n *           [-87.990188, 43.026486]\n *         ]]\n *       }\n *     }, {\n *       \"type\": \"Feature\",\n *       \"properties\": {},\n *       \"geometry\": {\n *         \"type\": \"Polygon\",\n *         \"coordinates\": [[\n *           [-87.973709, 42.962452],\n *           [-87.973709, 43.014689],\n *           [-87.904014, 43.014689],\n *           [-87.904014, 42.962452],\n *           [-87.973709, 42.962452]\n *         ]]\n *       }\n *     }\n *   ]\n * };\n * var points = {\n *   \"type\": \"FeatureCollection\",\n *   \"features\": [\n *     {\n *       \"type\": \"Feature\",\n *       \"properties\": {\n *         \"population\": 200\n *       },\n *       \"geometry\": {\n *         \"type\": \"Point\",\n *         \"coordinates\": [-87.974052, 43.049321]\n *       }\n *     }, {\n *       \"type\": \"Feature\",\n *       \"properties\": {\n *         \"population\": 600\n *       },\n *       \"geometry\": {\n *         \"type\": \"Point\",\n *         \"coordinates\": [-87.957229, 43.037277]\n *       }\n *     }, {\n *       \"type\": \"Feature\",\n *       \"properties\": {\n *         \"population\": 100\n *       },\n *       \"geometry\": {\n *         \"type\": \"Point\",\n *         \"coordinates\": [-87.931137, 43.048568]\n *       }\n *     }, {\n *       \"type\": \"Feature\",\n *       \"properties\": {\n *         \"population\": 200\n *       },\n *       \"geometry\": {\n *         \"type\": \"Point\",\n *         \"coordinates\": [-87.963409, 42.99611]\n *       }\n *     }, {\n *       \"type\": \"Feature\",\n *       \"properties\": {\n *         \"population\": 300\n *       },\n *       \"geometry\": {\n *         \"type\": \"Point\",\n *         \"coordinates\": [-87.94178, 42.974762]\n *       }\n *     }\n *   ]\n * };\n *\n * var aggregated = turf.sum(\n *   polygons, points, 'population', 'sum');\n *\n * var resultFeatures = points.features.concat(\n *   aggregated.features);\n * var result = {\n *   \"type\": \"FeatureCollection\",\n *   \"features\": resultFeatures\n * };\n *\n * //=result\n */\nmodule.exports = function(polyFC, ptFC, inField, outField){\n  polyFC.features.forEach(function(poly){\n    if(!poly.properties){\n      poly.properties = {};\n    }\n    var values = [];\n    ptFC.features.forEach(function(pt){\n      if (inside(pt, poly)) {\n        values.push(pt.properties[inField]);\n      }\n    });\n    poly.properties[outField] = sum(values);\n  });\n\n  return polyFC;\n};\n\nfunction sum(x) {\n    var value = 0;\n    for (var i = 0; i < x.length; i++) {\n        value += x[i];\n    }\n    return value;\n}\n","var inside = require('turf-inside');\n\n/**\n * Takes a {@link FeatureCollection} of {@link Point} features and a FeatureCollection of {@link Polygon} features and performs a spatial join.\n *\n * @module turf/tag\n * @category joins\n * @param {FeatureCollection} points a FeatureCollection of {@link Point} features\n * @param {FeatureCollection} polygons a FeatureCollection of {@link Polygon} features\n * @param {String} polyId property in `polygons` to add to joined Point features\n * @param {String} containingPolyId property in `points` in which to store joined property from `polygons\n * @return {FeatureCollection} a FeatureCollection of point features\n * @example\n * var bbox = [0, 0, 50, 50];\n * // create a triangular grid of polygons\n * var triangleGrid = turf.tin(turf.grid(bbox, 10));\n * triangleGrid.features.forEach(function(f) {\n *   f.properties.fill = '#' +\n *     (~~(Math.random() * 16)).toString(16) +\n *     (~~(Math.random() * 16)).toString(16) +\n *     (~~(Math.random() * 16)).toString(16);\n *   f.properties.stroke = 0;\n *   f.properties['fill-opacity'] = 1;\n * });\n * var randomPoints = turf.random('point', 30, {\n *   bbox: bbox\n * });\n * var both = turf.featurecollection(\n *   triangleGrid.features.concat(randomPoints.features));\n *\n * //=both\n *\n * var tagged = turf.tag(randomPoints, triangleGrid,\n *                       'fill', 'marker-color');\n *\n * //=tagged\n */\nmodule.exports = function(points, polygons, field, outField){\n  // prevent mutations\n  points = JSON.parse(JSON.stringify(points));\n  polygons = JSON.parse(JSON.stringify(polygons));\n  points.features.forEach(function(pt) {\n    if (!pt.properties) {\n      pt.properties = {};\n    }\n    polygons.features.forEach(function(poly) {\n      if (pt.properties[outField] === undefined) {\n        var isInside = inside(pt, poly);\n        if (isInside) {\n          pt.properties[outField] = poly.properties[field];\n        }\n      }\n    });\n  });\n  return points;\n};\n","//http://en.wikipedia.org/wiki/Delaunay_triangulation\n//https://github.com/ironwallaby/delaunay\nvar polygon = require('turf-polygon');\nvar featurecollection = require('turf-featurecollection');\n\n/**\n * Takes a set of points and the name of a z-value property and\n * creates a [Triangulated Irregular Network](http://en.wikipedia.org/wiki/Triangulated_irregular_network),\n * or a TIN for short, returned as a collection of Polygons. These are often used\n * for developing elevation contour maps or stepped heat visualizations.\n *\n * This triangulates the points, as well as adds properties called `a`, `b`,\n * and `c` representing the value of the given `propertyName` at each of\n * the points that represent the corners of the triangle.\n *\n * @module turf/tin\n * @category interpolation\n * @param {FeatureCollection} points - a GeoJSON FeatureCollection containing\n * Features with {@link Point} geometries\n * @param {string=} propertyName - name of the property from which to pull z values.\n * This is optional: if not given, then there will be no extra data added to the derived triangles.\n * @return {FeatureCollection} TIN output\n * @example\n * // generate some random point data\n * var points = turf.random('points', 30, {\n *   bbox: [50, 30, 70, 50]\n * });\n * //=points\n * // add a random property to each point between 0 and 9\n * for (var i = 0; i < points.features.length; i++) {\n *   points.features[i].properties.z = ~~(Math.random() * 9);\n * }\n * var tin = turf.tin(points, 'z')\n * for (var i = 0; i < tin.features.length; i++) {\n *   var properties  = tin.features[i].properties;\n *   // roughly turn the properties of each\n *   // triangle into a fill color\n *   // so we can visualize the result\n *   properties.fill = '#' + properties.a +\n *     properties.b + properties.c;\n * }\n * //=tin\n */\nmodule.exports = function(points, z) {\n  //break down points\n  return featurecollection(triangulate(points.features.map(function(p) {\n    var point = {\n      x: p.geometry.coordinates[0],\n      y: p.geometry.coordinates[1]\n    };\n    if (z) point.z = p.properties[z];\n    return point;\n  })).map(function(triangle) {\n    return polygon([[\n        [triangle.a.x, triangle.a.y],\n        [triangle.b.x, triangle.b.y],\n        [triangle.c.x, triangle.c.y],\n        [triangle.a.x, triangle.a.y]\n    ]], {\n        a: triangle.a.z,\n        b: triangle.b.z,\n        c: triangle.c.z\n      });\n  }));\n};\n\nfunction Triangle(a, b, c) {\n  this.a = a;\n  this.b = b;\n  this.c = c;\n\n  var A = b.x - a.x,\n    B = b.y - a.y,\n    C = c.x - a.x,\n    D = c.y - a.y,\n    E = A * (a.x + b.x) + B * (a.y + b.y),\n    F = C * (a.x + c.x) + D * (a.y + c.y),\n    G = 2 * (A * (c.y - b.y) - B * (c.x - b.x)),\n    minx, miny, dx, dy;\n\n  // If the points of the triangle are collinear, then just find the\n  // extremes and use the midpoint as the center of the circumcircle.\n  if (Math.abs(G) < 0.000001) {\n    minx = Math.min(a.x, b.x, c.x);\n    miny = Math.min(a.y, b.y, c.y);\n    dx = (Math.max(a.x, b.x, c.x) - minx) * 0.5;\n    dy = (Math.max(a.y, b.y, c.y) - miny) * 0.5;\n\n    this.x = minx + dx;\n    this.y = miny + dy;\n    this.r = dx * dx + dy * dy;\n  } else {\n    this.x = (D * E - B * F) / G;\n    this.y = (A * F - C * E) / G;\n    dx = this.x - a.x;\n    dy = this.y - a.y;\n    this.r = dx * dx + dy * dy;\n  }\n}\n\nfunction byX(a, b) {\n  return b.x - a.x;\n}\n\nfunction dedup(edges) {\n  var j = edges.length,\n    a, b, i, m, n;\n\n  outer:\n  while (j) {\n    b = edges[--j];\n    a = edges[--j];\n    i = j;\n    while (i) {\n      n = edges[--i];\n      m = edges[--i];\n      if ((a === m && b === n) || (a === n && b === m)) {\n        edges.splice(j, 2);\n        edges.splice(i, 2);\n        j -= 2;\n        continue outer;\n      }\n    }\n  }\n}\n\nfunction triangulate(vertices) {\n  // Bail if there aren't enough vertices to form any triangles.\n  if (vertices.length < 3)\n    return [];\n\n    // Ensure the vertex array is in order of descending X coordinate\n    // (which is needed to ensure a subquadratic runtime), and then find\n    // the bounding box around the points. \n  vertices.sort(byX);\n\n  var i = vertices.length - 1,\n    xmin = vertices[i].x,\n    xmax = vertices[0].x,\n    ymin = vertices[i].y,\n    ymax = ymin;\n\n  while (i--) {\n    if (vertices[i].y < ymin)\n      ymin = vertices[i].y;\n    if (vertices[i].y > ymax)\n      ymax = vertices[i].y;\n  }\n\n  //Find a supertriangle, which is a triangle that surrounds all the\n  //vertices. This is used like something of a sentinel value to remove\n  //cases in the main algorithm, and is removed before we return any\n  // results.\n \n  // Once found, put it in the \"open\" list. (The \"open\" list is for\n  // triangles who may still need to be considered; the \"closed\" list is\n  // for triangles which do not.)\n  var dx = xmax - xmin,\n    dy = ymax - ymin,\n    dmax = (dx > dy) ? dx : dy,\n    xmid = (xmax + xmin) * 0.5,\n    ymid = (ymax + ymin) * 0.5,\n    open = [\n      new Triangle({\n        x: xmid - 20 * dmax,\n        y: ymid - dmax,\n        __sentinel: true\n      },\n      {\n        x: xmid,\n        y: ymid + 20 * dmax,\n        __sentinel: true\n      },\n      {\n        x: xmid + 20 * dmax,\n        y: ymid - dmax,\n        __sentinel: true\n      }\n    )],\n    closed = [],\n    edges = [],\n    j, a, b;\n\n    // Incrementally add each vertex to the mesh.\n  i = vertices.length;\n  while (i--) {\n    // For each open triangle, check to see if the current point is\n    // inside it's circumcircle. If it is, remove the triangle and add\n    // it's edges to an edge list.\n    edges.length = 0;\n    j = open.length;\n    while (j--) {\n      // If this point is to the right of this triangle's circumcircle,\n      // then this triangle should never get checked again. Remove it\n      // from the open list, add it to the closed list, and skip.\n      dx = vertices[i].x - open[j].x;\n      if (dx > 0 && dx * dx > open[j].r) {\n        closed.push(open[j]);\n        open.splice(j, 1);\n        continue;\n      }\n\n      // If not, skip this triangle.\n      dy = vertices[i].y - open[j].y;\n      if (dx * dx + dy * dy > open[j].r)\n        continue;\n\n      // Remove the triangle and add it's edges to the edge list.\n      edges.push(\n        open[j].a, open[j].b,\n        open[j].b, open[j].c,\n        open[j].c, open[j].a\n      );\n      open.splice(j, 1);\n    }\n\n    // Remove any doubled edges.\n    dedup(edges);\n\n    // Add a new triangle for each edge.\n    j = edges.length;\n    while (j) {\n      b = edges[--j];\n      a = edges[--j];\n      open.push(new Triangle(a, b, vertices[i]));\n    }\n  }\n\n  // Copy any remaining open triangles to the closed list, and then\n  // remove any triangles that share a vertex with the supertriangle.\n  Array.prototype.push.apply(closed, open);\n\n  i = closed.length;\n  while (i--)\n  if (closed[i].a.__sentinel ||\n      closed[i].b.__sentinel ||\n      closed[i].c.__sentinel)\n      closed.splice(i, 1);\n\n  return closed;\n}\n","var featurecollection = require('turf-featurecollection');\nvar point = require('turf-point');\nvar polygon = require('turf-polygon');\nvar distance = require('turf-distance');\n\n/**\n * Takes a bounding box and a cell depth and returns a {@link FeatureCollection} of {@link Polygon} features in a grid.\n *\n * @module turf/triangle-grid\n * @category interpolation\n * @param {Array<number>} extent extent in [minX, minY, maxX, maxY] order\n * @param {Number} cellWidth width of each cell\n * @param {String} units units to use for cellWidth\n * @return {FeatureCollection} grid as FeatureCollection with {@link Polygon} features\n * @example\n * var extent = [-77.3876953125,38.71980474264239,-76.9482421875,39.027718840211605];\n * var cellWidth = 10;\n * var units = 'miles';\n *\n * var triangleGrid = turf.triangleGrid(extent, cellWidth, units);\n *\n * //=triangleGrid\n */\nmodule.exports = function (bbox, cell, units) {\n  var fc = featurecollection([]);\n  var xFraction = cell / (distance(point([bbox[0], bbox[1]]), point([bbox[2], bbox[1]]), units));\n  var cellWidth = xFraction * (bbox[2] - bbox[0]);\n  var yFraction = cell / (distance(point([bbox[0], bbox[1]]), point([bbox[0], bbox[3]]), units));\n  var cellHeight = yFraction * (bbox[3] - bbox[1]);\n\n  var xi = 0;\n  var currentX = bbox[0];\n  while (currentX <= bbox[2]) {\n    var yi = 0;\n    var currentY = bbox[1];\n    while (currentY <= bbox[3]) {\n      if(xi%2===0 && yi%2===0) {\n        var cell1 = polygon([[\n            [currentX, currentY],\n            [currentX, currentY+cellHeight],\n            [currentX+cellWidth, currentY],\n            [currentX, currentY]\n          ]]);\n        fc.features.push(cell1);\n        var cell2 = polygon([[\n            [currentX, currentY+cellHeight],\n            [currentX+cellWidth, currentY+cellHeight],\n            [currentX+cellWidth, currentY],\n            [currentX, currentY+cellHeight]\n          ]]);\n        fc.features.push(cell2);\n      } else if(xi%2===0 && yi%2===1) {\n        var cell1 = polygon([[\n            [currentX, currentY],\n            [currentX+cellWidth, currentY+cellHeight],\n            [currentX+cellWidth, currentY],\n            [currentX, currentY]\n          ]]);\n        fc.features.push(cell1);\n        var cell2 = polygon([[\n            [currentX, currentY],\n            [currentX, currentY+cellHeight],\n            [currentX+cellWidth, currentY+cellHeight],\n            [currentX, currentY]\n          ]]);\n        fc.features.push(cell2);\n      } else if(yi%2===0 && xi%2===1) {\n        var cell1 = polygon([[\n            [currentX, currentY],\n            [currentX, currentY+cellHeight],\n            [currentX+cellWidth, currentY+cellHeight],\n            [currentX, currentY]\n          ]]);\n        fc.features.push(cell1);\n        var cell2 = polygon([[\n            [currentX, currentY],\n            [currentX+cellWidth, currentY+cellHeight],\n            [currentX+cellWidth, currentY],\n            [currentX, currentY]\n          ]]);\n        fc.features.push(cell2);\n      } else if(yi%2===1 && xi%2===1) {\n        var cell1 = polygon([[\n            [currentX, currentY],\n            [currentX, currentY+cellHeight],\n            [currentX+cellWidth, currentY],\n            [currentX, currentY]\n          ]]);\n        fc.features.push(cell1);\n        var cell2 = polygon([[\n            [currentX, currentY+cellHeight],\n            [currentX+cellWidth, currentY+cellHeight],\n            [currentX+cellWidth, currentY],\n            [currentX, currentY+cellHeight]\n          ]]);\n        fc.features.push(cell2);\n      }\n      currentY += cellHeight;\n      yi++;\n    }\n    xi++;\n    currentX += cellWidth;\n  }\n  return fc;\n};\n\n","// look here for help http://svn.osgeo.org/grass/grass/branches/releasebranch_6_4/vector/v.overlay/main.c\n//must be array of polygons\n\n// depend on jsts for now https://github.com/bjornharrtell/jsts/blob/master/examples/overlay.html\n\nvar jsts = require('jsts');\n\n/**\n * Takes two {@link Polygon} features and returnes a combined {@link Polygon} feature. If the input Polygon features are not contiguous, this function returns a {@link MultiPolygon} feature.\n *\n * @module turf/union\n * @category transformation\n * @param {Polygon} poly1 an input Polygon\n * @param {Polygon} poly2 another input Polygon\n * @return {Feature} a combined {@link Polygon} or {@link MultiPolygon} feature\n * @example\n * var poly1 = {\n *   \"type\": \"Feature\",\n *   \"properties\": {\n *     \"fill\": \"#0f0\"\n *   },\n *   \"geometry\": {\n *     \"type\": \"Polygon\",\n *     \"coordinates\": [[\n *       [-82.574787, 35.594087],\n *       [-82.574787, 35.615581],\n *       [-82.545261, 35.615581],\n *       [-82.545261, 35.594087],\n *       [-82.574787, 35.594087]\n *     ]]\n *   }\n * };\n * var poly2 = {\n *   \"type\": \"Feature\",\n *   \"properties\": {\n *     \"fill\": \"#00f\"\n *   },\n *   \"geometry\": {\n *     \"type\": \"Polygon\",\n *     \"coordinates\": [[\n *       [-82.560024, 35.585153],\n *       [-82.560024, 35.602602],\n *       [-82.52964, 35.602602],\n *       [-82.52964, 35.585153],\n *       [-82.560024, 35.585153]\n *     ]]\n *   }\n * };\n * var polygons = {\n *   \"type\": \"FeatureCollection\",\n *   \"features\": [poly1, poly2]\n * };\n *\n * var union = turf.union(poly1, poly2);\n *\n * //=polygons\n *\n * //=union\n */\nmodule.exports = function(poly1, poly2){\n  var reader = new jsts.io.GeoJSONReader();\n  var a = reader.read(JSON.stringify(poly1.geometry));\n  var b = reader.read(JSON.stringify(poly2.geometry));\n  var union = a.union(b);\n  var parser = new jsts.io.GeoJSONParser();\n\n  union = parser.write(union);\n  return {\n    type: 'Feature',\n    geometry: union,\n    properties: poly1.properties\n  };\n}\n","/*\n  javascript.util is a port of selected parts of java.util to JavaScript which\n  main purpose is to ease porting Java code to JavaScript.\n  \n  The MIT License (MIT)\n\n  Copyright (C) 2011-2014 by The Authors\n\n  Permission is hereby granted, free of charge, to any person obtaining a copy\n  of this software and associated documentation files (the \"Software\"), to deal\n  in the Software without restriction, including without limitation the rights\n  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n  copies of the Software, and to permit persons to whom the Software is\n  furnished to do so, subject to the following conditions:\n\n  The above copyright notice and this permission notice shall be included in\n  all copies or substantial portions of the Software.\n\n  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n  THE SOFTWARE.\n*/\n;(function(){var e=this;function f(a,b){var c=a.split(\".\"),d=e;c[0]in d||!d.execScript||d.execScript(\"var \"+c[0]);for(var t;c.length&&(t=c.shift());)c.length||void 0===b?d=d[t]?d[t]:d[t]={}:d[t]=b}function g(a,b){function c(){}c.prototype=b.prototype;a.q=b.prototype;a.prototype=new c;a.prototype.constructor=a;a.p=function(a,c,O){var M=Array.prototype.slice.call(arguments,2);return b.prototype[c].apply(a,M)}};function h(a){this.message=a||\"\"}g(h,Error);f(\"javascript.util.EmptyStackException\",h);h.prototype.name=\"EmptyStackException\";function k(a){this.message=a||\"\"}g(k,Error);f(\"javascript.util.IndexOutOfBoundsException\",k);k.prototype.name=\"IndexOutOfBoundsException\";function l(){}f(\"javascript.util.Iterator\",l);l.prototype.hasNext=l.prototype.c;l.prototype.next=l.prototype.next;l.prototype.remove=l.prototype.remove;function m(){}f(\"javascript.util.Collection\",m);function n(){}g(n,m);f(\"javascript.util.List\",n);function p(){}f(\"javascript.util.Map\",p);function q(a){this.message=a||\"\"}g(q,Error);f(\"javascript.util.NoSuchElementException\",q);q.prototype.name=\"NoSuchElementException\";function r(a){this.message=a||\"\"}g(r,Error);r.prototype.name=\"OperationNotSupported\";function s(a){this.a=[];a instanceof m&&this.e(a)}g(s,n);f(\"javascript.util.ArrayList\",s);s.prototype.a=null;s.prototype.add=function(a){this.a.push(a);return!0};s.prototype.add=s.prototype.add;s.prototype.e=function(a){for(a=a.f();a.c();)this.add(a.next());return!0};s.prototype.addAll=s.prototype.e;s.prototype.set=function(a,b){var c=this.a[a];this.a[a]=b;return c};s.prototype.set=s.prototype.set;s.prototype.f=function(){return new u(this)};s.prototype.iterator=s.prototype.f;\ns.prototype.get=function(a){if(0>a||a>=this.size())throw new k;return this.a[a]};s.prototype.get=s.prototype.get;s.prototype.g=function(){return 0===this.a.length};s.prototype.isEmpty=s.prototype.g;s.prototype.size=function(){return this.a.length};s.prototype.size=s.prototype.size;s.prototype.h=function(){for(var a=[],b=0,c=this.a.length;b<c;b++)a.push(this.a[b]);return a};s.prototype.toArray=s.prototype.h;\ns.prototype.remove=function(a){for(var b=!1,c=0,d=this.a.length;c<d;c++)if(this.a[c]===a){this.a.splice(c,1);b=!0;break}return b};s.prototype.remove=s.prototype.remove;function u(a){this.j=a}f(\"$jscomp.scope.Iterator_\",u);u.prototype.j=null;u.prototype.b=0;u.prototype.next=function(){if(this.b===this.j.size())throw new q;return this.j.get(this.b++)};u.prototype.next=u.prototype.next;u.prototype.c=function(){return this.b<this.j.size()?!0:!1};u.prototype.hasNext=u.prototype.c;\nu.prototype.remove=function(){throw new r;};u.prototype.remove=u.prototype.remove;function v(){}f(\"javascript.util.Arrays\",v);\nv.sort=function(){var a=arguments[0],b,c,d;if(1===arguments.length)a.sort();else if(2===arguments.length)c=arguments[1],d=function(a,b){return c.compare(a,b)},a.sort(d);else if(3===arguments.length)for(b=a.slice(arguments[1],arguments[2]),b.sort(),d=a.slice(0,arguments[1]).concat(b,a.slice(arguments[2],a.length)),a.splice(0,a.length),b=0;b<d.length;b++)a.push(d[b]);else if(4===arguments.length)for(b=a.slice(arguments[1],arguments[2]),c=arguments[3],d=function(a,b){return c.compare(a,b)},b.sort(d),\nd=a.slice(0,arguments[1]).concat(b,a.slice(arguments[2],a.length)),a.splice(0,a.length),b=0;b<d.length;b++)a.push(d[b])};v.asList=function(a){for(var b=new s,c=0,d=a.length;c<d;c++)b.add(a[c]);return b};function w(){this.i={}}g(w,p);f(\"javascript.util.HashMap\",w);w.prototype.i=null;w.prototype.get=function(a){return this.i[a]||null};w.prototype.get=w.prototype.get;w.prototype.put=function(a,b){return this.i[a]=b};w.prototype.put=w.prototype.put;w.prototype.m=function(){var a=new s,b;for(b in this.i)this.i.hasOwnProperty(b)&&a.add(this.i[b]);return a};w.prototype.values=w.prototype.m;w.prototype.size=function(){return this.m().size()};w.prototype.size=w.prototype.size;function x(){}g(x,m);f(\"javascript.util.Set\",x);function y(a){this.a=[];a instanceof m&&this.e(a)}g(y,x);f(\"javascript.util.HashSet\",y);y.prototype.a=null;y.prototype.contains=function(a){for(var b=0,c=this.a.length;b<c;b++)if(this.a[b]===a)return!0;return!1};y.prototype.contains=y.prototype.contains;y.prototype.add=function(a){if(this.contains(a))return!1;this.a.push(a);return!0};y.prototype.add=y.prototype.add;y.prototype.e=function(a){for(a=a.f();a.c();)this.add(a.next());return!0};y.prototype.addAll=y.prototype.e;\ny.prototype.remove=function(){throw new r;};y.prototype.remove=y.prototype.remove;y.prototype.size=function(){return this.a.length};y.prototype.g=function(){return 0===this.a.length};y.prototype.isEmpty=y.prototype.g;y.prototype.h=function(){for(var a=[],b=0,c=this.a.length;b<c;b++)a.push(this.a[b]);return a};y.prototype.toArray=y.prototype.h;y.prototype.f=function(){return new z(this)};y.prototype.iterator=y.prototype.f;function z(a){this.k=a}f(\"$jscomp.scope.Iterator_$1\",z);z.prototype.k=null;\nz.prototype.b=0;z.prototype.next=function(){if(this.b===this.k.size())throw new q;return this.k.a[this.b++]};z.prototype.next=z.prototype.next;z.prototype.c=function(){return this.b<this.k.size()?!0:!1};z.prototype.hasNext=z.prototype.c;z.prototype.remove=function(){throw new r;};z.prototype.remove=z.prototype.remove;function A(){}g(A,p);f(\"javascript.util.SortedMap\",A);function B(){}g(B,x);f(\"javascript.util.SortedSet\",B);function C(){this.a=[]}g(C,n);f(\"javascript.util.Stack\",C);C.prototype.a=null;C.prototype.push=function(a){this.a.push(a);return a};C.prototype.push=C.prototype.push;C.prototype.pop=function(){if(0===this.a.length)throw new h;return this.a.pop()};C.prototype.pop=C.prototype.pop;C.prototype.o=function(){if(0===this.a.length)throw new h;return this.a[this.a.length-1]};C.prototype.peek=C.prototype.o;C.prototype.empty=function(){return 0===this.a.length?!0:!1};C.prototype.empty=C.prototype.empty;\nC.prototype.g=function(){return this.empty()};C.prototype.isEmpty=C.prototype.g;C.prototype.search=function(a){return this.a.indexOf(a)};C.prototype.search=C.prototype.search;C.prototype.size=function(){return this.a.length};C.prototype.size=C.prototype.size;C.prototype.h=function(){for(var a=[],b=0,c=this.a.length;b<c;b++)a.push(this.a[b]);return a};C.prototype.toArray=C.prototype.h;function D(a){return null==a?null:a.parent}function E(a,b){null!==a&&(a.color=b)}function F(a){return null==a?null:a.left}function G(a){return null==a?null:a.right}function H(){this.d=null;this.n=0}g(H,A);f(\"javascript.util.TreeMap\",H);H.prototype.get=function(a){for(var b=this.d;null!==b;){var c=a.compareTo(b.key);if(0>c)b=b.left;else if(0<c)b=b.right;else return b.value}return null};H.prototype.get=H.prototype.get;\nH.prototype.put=function(a,b){if(null===this.d)return this.d={key:a,value:b,left:null,right:null,parent:null,color:0},this.n=1,null;var c=this.d,d,t;do if(d=c,t=a.compareTo(c.key),0>t)c=c.left;else if(0<t)c=c.right;else return d=c.value,c.value=b,d;while(null!==c);c={key:a,left:null,right:null,value:b,parent:d,color:0};0>t?d.left=c:d.right=c;for(c.color=1;null!=c&&c!=this.d&&1==c.parent.color;)D(c)==F(D(D(c)))?(d=G(D(D(c))),1==(null==d?0:d.color)?(E(D(c),0),E(d,0),E(D(D(c)),1),c=D(D(c))):(c==G(D(c))&&\n(c=D(c),I(this,c)),E(D(c),0),E(D(D(c)),1),J(this,D(D(c))))):(d=F(D(D(c))),1==(null==d?0:d.color)?(E(D(c),0),E(d,0),E(D(D(c)),1),c=D(D(c))):(c==F(D(c))&&(c=D(c),J(this,c)),E(D(c),0),E(D(D(c)),1),I(this,D(D(c)))));this.d.color=0;this.n++;return null};H.prototype.put=H.prototype.put;H.prototype.m=function(){var a=new s,b;b=this.d;if(null!=b)for(;null!=b.left;)b=b.left;if(null!==b)for(a.add(b.value);null!==(b=K(b));)a.add(b.value);return a};H.prototype.values=H.prototype.m;\nfunction I(a,b){if(null!=b){var c=b.right;b.right=c.left;null!=c.left&&(c.left.parent=b);c.parent=b.parent;null==b.parent?a.d=c:b.parent.left==b?b.parent.left=c:b.parent.right=c;c.left=b;b.parent=c}}function J(a,b){if(null!=b){var c=b.left;b.left=c.right;null!=c.right&&(c.right.parent=b);c.parent=b.parent;null==b.parent?a.d=c:b.parent.right==b?b.parent.right=c:b.parent.left=c;c.right=b;b.parent=c}}\nfunction K(a){if(null===a)return null;if(null!==a.right)for(var b=a.right;null!==b.left;)b=b.left;else for(b=a.parent;null!==b&&a===b.right;)a=b,b=b.parent;return b}H.prototype.size=function(){return this.n};H.prototype.size=H.prototype.size;function L(a){this.a=[];a instanceof m&&this.e(a)}g(L,B);f(\"javascript.util.TreeSet\",L);L.prototype.a=null;L.prototype.contains=function(a){for(var b=0,c=this.a.length;b<c;b++)if(0===this.a[b].compareTo(a))return!0;return!1};L.prototype.contains=L.prototype.contains;L.prototype.add=function(a){if(this.contains(a))return!1;for(var b=0,c=this.a.length;b<c;b++)if(1===this.a[b].compareTo(a))return this.a.splice(b,0,a),!0;this.a.push(a);return!0};L.prototype.add=L.prototype.add;\nL.prototype.e=function(a){for(a=a.f();a.c();)this.add(a.next());return!0};L.prototype.addAll=L.prototype.e;L.prototype.remove=function(){throw new r;};L.prototype.remove=L.prototype.remove;L.prototype.size=function(){return this.a.length};L.prototype.size=L.prototype.size;L.prototype.g=function(){return 0===this.a.length};L.prototype.isEmpty=L.prototype.g;L.prototype.h=function(){for(var a=[],b=0,c=this.a.length;b<c;b++)a.push(this.a[b]);return a};L.prototype.toArray=L.prototype.h;L.prototype.f=function(){return new N(this)};\nL.prototype.iterator=L.prototype.f;function N(a){this.l=a}f(\"$jscomp.scope.Iterator_$2\",N);N.prototype.l=null;N.prototype.b=0;N.prototype.next=function(){if(this.b===this.l.size())throw new q;return this.l.a[this.b++]};N.prototype.next=N.prototype.next;N.prototype.c=function(){return this.b<this.l.size()?!0:!1};N.prototype.hasNext=N.prototype.c;N.prototype.remove=function(){throw new r;};N.prototype.remove=N.prototype.remove;\"undefined\"!==typeof global&&(global.javascript={},global.javascript.util={},global.javascript.util.ArrayList=s,global.javascript.util.Arrays=v,global.javascript.util.Collection=m,global.javascript.util.EmptyStackException=h,global.javascript.util.HashMap=w,global.javascript.util.HashSet=y,global.javascript.util.IndexOutOfBoundsException=k,global.javascript.util.Iterator=l,global.javascript.util.List=n,global.javascript.util.Map=p,global.javascript.util.NoSuchElementException=q,global.javascript.util.OperationNotSupported=\nr,global.javascript.util.Set=x,global.javascript.util.SortedMap=A,global.javascript.util.SortedSet=B,global.javascript.util.Stack=C,global.javascript.util.TreeMap=H,global.javascript.util.TreeSet=L);}).call(this);\n","var ss = require('simple-statistics');\nvar inside = require('turf-inside');\n\n/**\n * Calculates the variance value of a field for {@link Point} features within a set of {@link Polygon} features.\n *\n * @module turf/variance\n * @category aggregation\n * @param {FeatureCollection} polygons a FeatureCollection of {@link Polygon} features\n * @param {FeatureCollection} points a FeatureCollection of {@link Point} features\n * @param {string} inField the field in input data to analyze\n * @param {string} outField the field in which to store results\n * @return {FeatureCollection} a FeatureCollection of {@link Polygon} features\n * with properties listed as `outField`\n * @example\n * var polygons = {\n *   \"type\": \"FeatureCollection\",\n *   \"features\": [\n *     {\n *       \"type\": \"Feature\",\n *       \"properties\": {},\n *       \"geometry\": {\n *         \"type\": \"Polygon\",\n *         \"coordinates\": [[\n *           [-97.414398, 37.684092],\n *           [-97.414398, 37.731353],\n *           [-97.332344, 37.731353],\n *           [-97.332344, 37.684092],\n *           [-97.414398, 37.684092]\n *         ]]\n *       }\n *     }, {\n *       \"type\": \"Feature\",\n *       \"properties\": {},\n *       \"geometry\": {\n *         \"type\": \"Polygon\",\n *         \"coordinates\": [[\n *           [-97.333717, 37.606072],\n *           [-97.333717, 37.675397],\n *           [-97.237586, 37.675397],\n *           [-97.237586, 37.606072],\n *           [-97.333717, 37.606072]\n *         ]]\n *       }\n *     }\n *   ]\n * };\n * var points = {\n *   \"type\": \"FeatureCollection\",\n *   \"features\": [\n *     {\n *       \"type\": \"Feature\",\n *       \"properties\": {\n *         \"population\": 200\n *       },\n *       \"geometry\": {\n *         \"type\": \"Point\",\n *         \"coordinates\": [-97.401351, 37.719676]\n *       }\n *     }, {\n *       \"type\": \"Feature\",\n *       \"properties\": {\n *         \"population\": 600\n *       },\n *       \"geometry\": {\n *         \"type\": \"Point\",\n *         \"coordinates\": [-97.355346, 37.706639]\n *       }\n *     }, {\n *       \"type\": \"Feature\",\n *       \"properties\": {\n *         \"population\": 100\n *       },\n *       \"geometry\": {\n *         \"type\": \"Point\",\n *         \"coordinates\": [-97.387962, 37.70012]\n *       }\n *     }, {\n *       \"type\": \"Feature\",\n *       \"properties\": {\n *         \"population\": 200\n *       },\n *       \"geometry\": {\n *         \"type\": \"Point\",\n *         \"coordinates\": [-97.301788, 37.66507]\n *       }\n *     }, {\n *       \"type\": \"Feature\",\n *       \"properties\": {\n *         \"population\": 300\n *       },\n *       \"geometry\": {\n *         \"type\": \"Point\",\n *         \"coordinates\": [-97.265052, 37.643325]\n *       }\n *     }\n *   ]\n * };\n *\n * var aggregated = turf.variance(\n *   polygons, points, 'population', 'variance');\n *\n * var resultFeatures = points.features.concat(\n *   aggregated.features);\n * var result = {\n *   \"type\": \"FeatureCollection\",\n *   \"features\": resultFeatures\n * };\n *\n * //=result\n */\nmodule.exports = function (polyFC, ptFC, inField, outField) {\n  polyFC.features.forEach(function(poly){\n    if(!poly.properties){\n      poly.properties = {};\n    }\n    var values = [];\n    ptFC.features.forEach(function(pt){\n      if (inside(pt, poly)) {\n        values.push(pt.properties[inField]);\n      }\n    });\n    poly.properties[outField] = ss.variance(values);\n  });\n\n  return polyFC;\n};\n","var inside = require('turf-inside');\nvar featureCollection = require('turf-featurecollection');\n\n/**\n * Takes a {@link FeatureCollection} of {@link Point} features and a FeatureCollection of {@link Polygon} features and returns a FeatureCollection of Point features representing all points that fall within a collection of polygons.\n *\n * @module turf/within\n * @category joins\n * @param {FeatureCollection} points a FeatureCollection of {@link Point} features\n * @param {FeatureCollection} polygons a FeatureCollection of {@link Polygon} features\n * @return {FeatureCollection} a collection of all points that land\n * within at least one polygon\n * @example\n * var searchWithin = {\n *   \"type\": \"FeatureCollection\",\n *   \"features\": [\n *     {\n *       \"type\": \"Feature\",\n *       \"properties\": {},\n *       \"geometry\": {\n *         \"type\": \"Polygon\",\n *         \"coordinates\": [[\n *           [-46.653,-23.543],\n *           [-46.634,-23.5346],\n *           [-46.613,-23.543],\n *           [-46.614,-23.559],\n *           [-46.631,-23.567],\n *           [-46.653,-23.560],\n *           [-46.653,-23.543]\n *         ]]\n *       }\n *     }\n *   ]\n * };\n * var points = {\n *   \"type\": \"FeatureCollection\",\n *   \"features\": [\n *     {\n *       \"type\": \"Feature\",\n *       \"properties\": {},\n *       \"geometry\": {\n *         \"type\": \"Point\",\n *         \"coordinates\": [-46.6318, -23.5523]\n *       }\n *     }, {\n *       \"type\": \"Feature\",\n *       \"properties\": {},\n *       \"geometry\": {\n *         \"type\": \"Point\",\n *         \"coordinates\": [-46.6246, -23.5325]\n *       }\n *     }, {\n *       \"type\": \"Feature\",\n *       \"properties\": {},\n *       \"geometry\": {\n *         \"type\": \"Point\",\n *         \"coordinates\": [-46.6062, -23.5513]\n *       }\n *     }, {\n *       \"type\": \"Feature\",\n *       \"properties\": {},\n *       \"geometry\": {\n *         \"type\": \"Point\",\n *         \"coordinates\": [-46.663, -23.554]\n *       }\n *     }, {\n *       \"type\": \"Feature\",\n *       \"properties\": {},\n *       \"geometry\": {\n *         \"type\": \"Point\",\n *         \"coordinates\": [-46.643, -23.557]\n *       }\n *     }\n *   ]\n * };\n *\n * var ptsWithin = turf.within(points, searchWithin);\n *\n * //=points\n *\n * //=searchWithin\n *\n * //=ptsWithin\n */\nmodule.exports = function(ptFC, polyFC){\n  var pointsWithin = featureCollection([]);\n  for (var i = 0; i < polyFC.features.length; i++) {\n    for (var j = 0; j < ptFC.features.length; j++) {\n      var isInside = inside(ptFC.features[j], polyFC.features[i]);\n      if(isInside){\n        pointsWithin.features.push(ptFC.features[j]);\n      }\n    }\n  }\n  return pointsWithin;\n};\n","\"use strict\";\nvar window = require(\"global/window\")\nvar once = require(\"once\")\nvar parseHeaders = require(\"parse-headers\")\n\n\n\nmodule.exports = createXHR\ncreateXHR.XMLHttpRequest = window.XMLHttpRequest || noop\ncreateXHR.XDomainRequest = \"withCredentials\" in (new createXHR.XMLHttpRequest()) ? createXHR.XMLHttpRequest : window.XDomainRequest\n\n\nfunction isEmpty(obj){\n    for(var i in obj){\n        if(obj.hasOwnProperty(i)) return false\n    }\n    return true\n}\n\nfunction createXHR(options, callback) {\n    function readystatechange() {\n        if (xhr.readyState === 4) {\n            loadFunc()\n        }\n    }\n\n    function getBody() {\n        // Chrome with requestType=blob throws errors arround when even testing access to responseText\n        var body = undefined\n\n        if (xhr.response) {\n            body = xhr.response\n        } else if (xhr.responseType === \"text\" || !xhr.responseType) {\n            body = xhr.responseText || xhr.responseXML\n        }\n\n        if (isJson) {\n            try {\n                body = JSON.parse(body)\n            } catch (e) {}\n        }\n\n        return body\n    }\n\n    var failureResponse = {\n                body: undefined,\n                headers: {},\n                statusCode: 0,\n                method: method,\n                url: uri,\n                rawRequest: xhr\n            }\n\n    function errorFunc(evt) {\n        clearTimeout(timeoutTimer)\n        if(!(evt instanceof Error)){\n            evt = new Error(\"\" + (evt || \"Unknown XMLHttpRequest Error\") )\n        }\n        evt.statusCode = 0\n        callback(evt, failureResponse)\n    }\n\n    // will load the data & process the response in a special response object\n    function loadFunc() {\n        if (aborted) return\n        var status\n        clearTimeout(timeoutTimer)\n        if(options.useXDR && xhr.status===undefined) {\n            //IE8 CORS GET successful response doesn't have a status field, but body is fine\n            status = 200\n        } else {\n            status = (xhr.status === 1223 ? 204 : xhr.status)\n        }\n        var response = failureResponse\n        var err = null\n\n        if (status !== 0){\n            response = {\n                body: getBody(),\n                statusCode: status,\n                method: method,\n                headers: {},\n                url: uri,\n                rawRequest: xhr\n            }\n            if(xhr.getAllResponseHeaders){ //remember xhr can in fact be XDR for CORS in IE\n                response.headers = parseHeaders(xhr.getAllResponseHeaders())\n            }\n        } else {\n            err = new Error(\"Internal XMLHttpRequest Error\")\n        }\n        callback(err, response, response.body)\n\n    }\n\n    if (typeof options === \"string\") {\n        options = { uri: options }\n    }\n\n    options = options || {}\n    if(typeof callback === \"undefined\"){\n        throw new Error(\"callback argument missing\")\n    }\n    callback = once(callback)\n\n    var xhr = options.xhr || null\n\n    if (!xhr) {\n        if (options.cors || options.useXDR) {\n            xhr = new createXHR.XDomainRequest()\n        }else{\n            xhr = new createXHR.XMLHttpRequest()\n        }\n    }\n\n    var key\n    var aborted\n    var uri = xhr.url = options.uri || options.url\n    var method = xhr.method = options.method || \"GET\"\n    var body = options.body || options.data\n    var headers = xhr.headers = options.headers || {}\n    var sync = !!options.sync\n    var isJson = false\n    var timeoutTimer\n\n    if (\"json\" in options) {\n        isJson = true\n        headers[\"accept\"] || headers[\"Accept\"] || (headers[\"Accept\"] = \"application/json\") //Don't override existing accept header declared by user\n        if (method !== \"GET\" && method !== \"HEAD\") {\n            headers[\"content-type\"] || headers[\"Content-Type\"] || (headers[\"Content-Type\"] = \"application/json\") //Don't override existing accept header declared by user\n            body = JSON.stringify(options.json)\n        }\n    }\n\n    xhr.onreadystatechange = readystatechange\n    xhr.onload = loadFunc\n    xhr.onerror = errorFunc\n    // IE9 must have onprogress be set to a unique function.\n    xhr.onprogress = function () {\n        // IE must die\n    }\n    xhr.ontimeout = errorFunc\n    xhr.open(method, uri, !sync, options.username, options.password)\n    //has to be after open\n    if(!sync) {\n        xhr.withCredentials = !!options.withCredentials\n    }\n    // Cannot set timeout with sync request\n    // not setting timeout on the xhr object, because of old webkits etc. not handling that correctly\n    // both npm's request and jquery 1.x use this kind of timeout, so this is being consistent\n    if (!sync && options.timeout > 0 ) {\n        timeoutTimer = setTimeout(function(){\n            aborted=true//IE9 may still call readystatechange\n            xhr.abort(\"timeout\")\n            var e = new Error(\"XMLHttpRequest timeout\")\n            e.code = \"ETIMEDOUT\"\n            errorFunc(e)\n        }, options.timeout )\n    }\n\n    if (xhr.setRequestHeader) {\n        for(key in headers){\n            if(headers.hasOwnProperty(key)){\n                xhr.setRequestHeader(key, headers[key])\n            }\n        }\n    } else if (options.headers && !isEmpty(options.headers)) {\n        throw new Error(\"Headers cannot be set on an XDomainRequest object\")\n    }\n\n    if (\"responseType\" in options) {\n        xhr.responseType = options.responseType\n    }\n\n    if (\"beforeSend\" in options &&\n        typeof options.beforeSend === \"function\"\n    ) {\n        options.beforeSend(xhr)\n    }\n\n    xhr.send(body)\n\n    return xhr\n\n\n}\n\nfunction noop() {}\n","if (typeof window !== \"undefined\") {\n    module.exports = window;\n} else if (typeof global !== \"undefined\") {\n    module.exports = global;\n} else if (typeof self !== \"undefined\"){\n    module.exports = self;\n} else {\n    module.exports = {};\n}\n","module.exports = once\n\nonce.proto = once(function () {\n  Object.defineProperty(Function.prototype, 'once', {\n    value: function () {\n      return once(this)\n    },\n    configurable: true\n  })\n})\n\nfunction once (fn) {\n  var called = false\n  return function () {\n    if (called) return\n    called = true\n    return fn.apply(this, arguments)\n  }\n}\n","var isFunction = require('is-function')\n\nmodule.exports = forEach\n\nvar toString = Object.prototype.toString\nvar hasOwnProperty = Object.prototype.hasOwnProperty\n\nfunction forEach(list, iterator, context) {\n    if (!isFunction(iterator)) {\n        throw new TypeError('iterator must be a function')\n    }\n\n    if (arguments.length < 3) {\n        context = this\n    }\n    \n    if (toString.call(list) === '[object Array]')\n        forEachArray(list, iterator, context)\n    else if (typeof list === 'string')\n        forEachString(list, iterator, context)\n    else\n        forEachObject(list, iterator, context)\n}\n\nfunction forEachArray(array, iterator, context) {\n    for (var i = 0, len = array.length; i < len; i++) {\n        if (hasOwnProperty.call(array, i)) {\n            iterator.call(context, array[i], i, array)\n        }\n    }\n}\n\nfunction forEachString(string, iterator, context) {\n    for (var i = 0, len = string.length; i < len; i++) {\n        // no such thing as a sparse string.\n        iterator.call(context, string.charAt(i), i, string)\n    }\n}\n\nfunction forEachObject(object, iterator, context) {\n    for (var k in object) {\n        if (hasOwnProperty.call(object, k)) {\n            iterator.call(context, object[k], k, object)\n        }\n    }\n}\n","module.exports = isFunction\n\nvar toString = Object.prototype.toString\n\nfunction isFunction (fn) {\n  var string = toString.call(fn)\n  return string === '[object Function]' ||\n    (typeof fn === 'function' && string !== '[object RegExp]') ||\n    (typeof window !== 'undefined' &&\n     // IE8 and below\n     (fn === window.setTimeout ||\n      fn === window.alert ||\n      fn === window.confirm ||\n      fn === window.prompt))\n};\n","\nexports = module.exports = trim;\n\nfunction trim(str){\n  return str.replace(/^\\s*|\\s*$/g, '');\n}\n\nexports.left = function(str){\n  return str.replace(/^\\s*/, '');\n};\n\nexports.right = function(str){\n  return str.replace(/\\s*$/, '');\n};\n","var trim = require('trim')\n  , forEach = require('for-each')\n  , isArray = function(arg) {\n      return Object.prototype.toString.call(arg) === '[object Array]';\n    }\n\nmodule.exports = function (headers) {\n  if (!headers)\n    return {}\n\n  var result = {}\n\n  forEach(\n      trim(headers).split('\\n')\n    , function (row) {\n        var index = row.indexOf(':')\n          , key = trim(row.slice(0, index)).toLowerCase()\n          , value = trim(row.slice(index + 1))\n\n        if (typeof(result[key]) === 'undefined') {\n          result[key] = value\n        } else if (isArray(result[key])) {\n          result[key].push(value)\n        } else {\n          result[key] = [ result[key], value ]\n        }\n      }\n  )\n\n  return result\n}","const COLORS = {\n    0: '#f51a1a', // red square\n    1: '#a21aff', // kremlin,\n    2: '#b34b00', // boulevard\n    3: '#18dbff', // garden ring\n    4: '#ff1518', // third ring\n    5: '#88fa60'  // MKAD\n}\n\nexport default COLORS;\n","const L = global.L || require('leaflet');\n\nimport xhr from 'xhr';\nimport * as Spinner from 'spin.js';\nimport * as config from '../config.json';\nimport * as COLORS from './colors';\nimport leafletKnn from 'leaflet-knn';\nimport turf from 'turf';\nimport 'leaflet-hash';\n\nconsole.log(leafletKnn);\n\nconst MAP_STYLE = 'mapbox.dark';\nconst LINE_WIDTH = 4;\n\nlet map = global.map = L.map(document.querySelector('.map'));\nlet hash = L.hash(map);\nlet index, gj, geojson;\n\nlet tiles = L.tileLayer(\n  'https://api.mapbox.com/v4/' +\n  MAP_STYLE +\n  '/{z}/{x}/{y}.png?access_token=' +\n  config.api_token, {\n    attribution: 'Mapbox &copy; OSM contributors'\n  }).addTo(map);\n\nxhr({\n  url: 'data/data.json'\n}, (err, req, data) => {\n  if (!err) {\n    geojson = data = JSON.parse(data);\n    gj = L.geoJson(data, {\n      style: (feature) => {\n        return {\n          color: COLORS[feature.properties.id],\n          weight: LINE_WIDTH / (feature.properties.id + 1),\n          fillOpacity: 0.1,\n          clickable: false\n        }\n      }\n    });\n    let bounds = gj.getBounds();\n    map.fitBounds(bounds, {padding: [20, 20]});\n    gj.addTo(map);\n    index = leafletKnn(gj);\n  }\n});\n\nlet marker;\n\nmap.on('click', (evt) => {\n  if (!marker) {\n    marker = L.marker(evt.latlng).addTo(map);\n  } else {\n    marker.setLatLng(evt.latlng);\n  }\n  let nearest = index.nearest(evt.latlng);\n  console.log(nearest);\n});\n\n\n"],"sourceRoot":"/source/"}